<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>k8s之calico网络模式</title>
    <link href="/2022/04/04/2022-04-04-calico-network-mode-of-k8s/"/>
    <url>/2022/04/04/2022-04-04-calico-network-mode-of-k8s/</url>
    
    <content type="html"><![CDATA[<p>Calico 是一种容器之间互通的网络方案。在虚拟化平台中，比如 OpenStack、Docker 等都需要实现 workloads 之间互连，但同时也需要对容器做隔离控制，就像在 Internet 中的服务仅开放80端口、公有云的多租户一样，提供隔离和管控机制。而在多数的虚拟化平台实现中，通常都使用二层隔离技术来实现容器的网络，这些二层的技术有一些弊端，比如需要依赖 VLAN、bridge 和隧道等技术，其中 bridge 带来了复杂性，vlan 隔离和 tunnel 隧道则消耗更多的资源并对物理环境有要求，随着网络规模的增大，整体会变得越加复杂。我们尝试把 Host 当作 Internet 中的路由器，同样使用 BGP 同步路由，并使用 iptables 来做安全访问策略，最终设计出了 Calico 方案。</p><h1 id="calico架构介绍"><a href="#calico架构介绍" class="headerlink" title="calico架构介绍"></a>calico架构介绍</h1><p>适用场景：k8s环境中的pod之间需要隔离</p><p>设计思想：Calico 不使用隧道或 NAT 来实现转发，而是巧妙的把所有二三层流量转换成三层流量，并通过 host 上路由配置完成跨 Host 转发。</p><p>设计优势：</p><ul><li>更优的资源利用</li></ul><p>二层网络通讯需要依赖广播消息机制，广播消息的开销与 host 的数量呈指数级增长，Calico 使用的三层路由方法，则完全抑制了二层广播，减少了资源开销。</p><p>另外，二层网络使用 VLAN 隔离技术，天生有 4096 个规格限制，即便可以使用 vxlan 解决，但 vxlan 又带来了隧道开销的新问题。而 Calico 不使用 vlan 或 vxlan 技术，使资源利用率更高。</p><ul><li>可扩展性</li></ul><p>Calico 使用与 Internet 类似的方案，Internet 的网络比任何数据中心都大，Calico 同样天然具有可扩展性。</p><ul><li>简单而更容易debug</li></ul><p>因为没有隧道，意味着 workloads 之间路径更短更简单，配置更少，在 host 上更容易进行 debug 调试。</p><ul><li>更少的依赖</li></ul><p>Calico 仅依赖三层路由可达。</p><ul><li>可适配性</li></ul><p>Calico 较少的依赖性使它能适配所有 VM、Container、白盒或者混合环境场景。</p><p><img src="/img/2022-04-04-calico-network-mode-of-k8s/1.png" alt="upload-image"> </p><p>Calico网络模型主要工作组件：</p><ol><li><p>Felix：运行在每一台 Host 的 agent 进程，主要负责网络接口管理和监听、路由、ARP 管理、ACL 管理和同步、状态上报等。Felix会监听ECTD中心的存储，从它获取事件，比如说用户在这台机器上加了一个IP，或者是创建了一个容器等。用户创建pod后，Felix负责将其网卡、IP、MAC都设置好，然后在内核的路由表里面写一条，注明这个IP应该到这张网卡。同样如果用户制定了隔离策略，Felix同样会将该策略创建到ACL中，以实现隔离。</p></li><li><p>etcd：分布式键值存储，主要负责网络元数据一致性，确保Calico网络状态的准确性，可以与kubernetes共用；</p></li><li><p>BGP Client（BIRD）：Calico 为每一台 Host 部署一个 BGP Client，使用 BIRD 实现，BIRD 是一个单独的持续发展的项目，实现了众多动态路由协议比如 BGP、OSPF、RIP 等。在 Calico 的角色是监听 Host 上由 Felix 注入的路由信息，然后通过 BGP 协议广播告诉剩余 Host 节点，从而实现网络互通。实现，BIRD是一个标准的路由程序，它会从内核里面获取哪一些IP的路由发生了变化，然后通过标准BGP的路由协议扩散到整个其他的宿主机上，让外界都知道这个IP在这里，你们路由的时候得到这里来。</p></li><li><p>BGP Route Reflector：在大型网络规模中，如果仅仅使用 BGP client 形成 mesh 全网互联的方案就会导致规模限制，因为所有节点之间俩俩互联，需要 N^2 个连接，为了解决这个规模问题，可以采用 BGP 的 Router Reflector 的方法，使所有 BGP Client 仅与特定 RR 节点互联并做路由同步，从而大大减少连接数。</p></li></ol><h1 id="calico网络模式"><a href="#calico网络模式" class="headerlink" title="calico网络模式"></a>calico网络模式</h1><ul><li>IPIP</li></ul><p>从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel。它的作用其实基本上就相当于一个基于IP层的网桥！一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</p><p>calico默认是采用的ipip模式。对应的通讯方式如下</p><p><img src="/img/2022-04-04-calico-network-mode-of-k8s/2.png" alt="upload-image"> </p><ul><li>BGP</li></ul><p>边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。</p><p>如果要使用BGP模式，calico.yaml文件中，将CALICO_IPV4POOL_IPIP的值修改成 “off”，就能够替换成BGP网络。BGP对应的通讯方式如下</p><p><img src="/img/2022-04-04-calico-network-mode-of-k8s/3.png" alt="upload-image"> </p><h1 id="k8s部署calico"><a href="#k8s部署calico" class="headerlink" title="k8s部署calico"></a>k8s部署calico</h1><p>k8s中部署calico，只需要下载对应的yaml，然后apply这个yaml即可。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># wget https:<span class="hljs-comment">//docs.projectcalico.org/manifests/calico.yaml</span></span><br><span class="hljs-meta"># kubectl apply -f calico.yaml</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>calico</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s之ephemeral-storage存储</title>
    <link href="/2022/04/01/2022-04-01-ephemeral-storage-of-k8s/"/>
    <url>/2022/04/01/2022-04-01-ephemeral-storage-of-k8s/</url>
    
    <content type="html"><![CDATA[<p>有些应用程序需要额外的存储，但并不关心数据在重启后仍然可用。 例如，缓存服务经常受限于内存大小，将不常用的数据转移到比内存慢、但对总体性能的影响很小的存储中。</p><p>另有些应用程序需要以文件形式注入的只读数据，比如配置数据或密钥。</p><p>临时卷就是为此类用例设计的。因为卷会遵从 Pod 的生命周期，与Pod一起创建和删除， 所以停止和重新启动Pod时，不会受持久卷在何处可用的限制。</p><p>ephemeral-storage是为了管理和调度Kubernetes中运行的应用的短暂存储。在每个Kubernetes的节点上，kubelet的根目录(默认是&#x2F;var&#x2F;lib&#x2F;kubelet)和日志目录(&#x2F;var&#x2F;log)保存在节点的主分区上，这个分区同时也会被Pod的EmptyDir类型的volume、容器日志、镜像的层、容器的可写层所占用。ephemeral-storage便是对这块主分区进行管理，通过应用定义的需求(requests)和约束(limits)来调度和管理节点上的应用对主分区的消耗。</p><p>在节点上的kubelet启动的时候，kubelet会统计当前节点的主分区的可分配的磁盘资源，或者你可以覆盖节点上kubelet的配置来自定义可分配的资源。在创建Pod时会根据存储需求调度到满足存储的节点，在Pod使用超过限制的存储时会对其做驱逐的处理来保证不会耗尽节点上的磁盘空间。</p><blockquote><p>如果运行时指定了别的独立的分区，比如修改了docker的镜像层和容器可写层的存储位置(默认是&#x2F;var&#x2F;lib&#x2F;docker)所在的分区，将不再将其计入ephemeral-storage的消耗。</p></blockquote><h1 id="节点可用ephemeral-storage"><a href="#节点可用ephemeral-storage" class="headerlink" title="节点可用ephemeral-storage"></a>节点可用ephemeral-storage</h1><p>k8s的每个节点初始化后，k8s会给节点分配可用的ephemeral-storage</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">status:</span><br><span class="hljs-symbol">  addresses:</span><br>  - address: <span class="hljs-number">172.16</span><span class="hljs-number">.55</span><span class="hljs-number">.5</span><br><span class="hljs-symbol">    type:</span> InternalIP<br>  - address: <span class="hljs-number">172.16</span><span class="hljs-number">.55</span><span class="hljs-number">.5</span><br><span class="hljs-symbol">    type:</span> Hostname<br><span class="hljs-symbol">  allocatable:</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-number">3920</span>m<br>    ephemeral-storage: <span class="hljs-string">&quot;47438316671&quot;</span><br>    hugepages<span class="hljs-number">-1</span>Gi: <span class="hljs-string">&quot;0&quot;</span><br>    hugepages<span class="hljs-number">-2</span>Mi: <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-symbol">    memory:</span> <span class="hljs-number">3242724</span>Ki<br><span class="hljs-symbol">    pods:</span> <span class="hljs-string">&quot;253&quot;</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-string">&quot;4&quot;</span><br>    ephemeral-storage: <span class="hljs-number">51473868</span>Ki<br>    hugepages<span class="hljs-number">-1</span>Gi: <span class="hljs-string">&quot;0&quot;</span><br>    hugepages<span class="hljs-number">-2</span>Mi: <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-symbol">    memory:</span> <span class="hljs-number">3775204</span>Ki<br><span class="hljs-symbol">    pods:</span> <span class="hljs-string">&quot;253&quot;</span><br></code></pre></td></tr></table></figure><p>节点字段里面allocatable和capacity都有ephemeral-storage容量大小配置，这里说明下capacity是指节点所有磁盘空间大小，allocatable是指pod可用的资源容量。</p><p>如果你在容器配置的request和limit，那么调度器会看节点的allocatable剩余资源是否满足容器配置要求来判断节点是不是可以满足调度。也就是说，pod的调度是根据allocatable来匹配的。</p><p>capacity里面的值是通过如下方式计算得来的</p><p><img src="/img/2022-04-01-ephemeral-storage-of-k8s/1.JPG" alt="upload-image"> </p><p>节点的所有资源，减掉系统预留和kube预留的，如果设置了驱逐的话，还要减掉驱逐阈值的那部分。可以参考官网示例说明</p><p>这是一个用于说明节点可分配（Node Allocatable）计算方式的示例：</p><ul><li>节点拥有 32Gi memeory，16 CPU 和 100Gi Storage 资源</li><li>–kube-reserved 被设置为 cpu&#x3D;1,memory&#x3D;2Gi,ephemeral-storage&#x3D;1Gi</li><li>–system-reserved 被设置为 cpu&#x3D;500m,memory&#x3D;1Gi,ephemeral-storage&#x3D;1Gi</li><li>–eviction-hard 被设置为 memory.available&lt;500Mi,nodefs.available&lt;10%</li></ul><p>在这个场景下，’Allocatable’ 将会是 14.5 CPUs、28.5Gi 内存以及 88Gi 本地存储。 调度器保证这个节点上的所有 Pod 的内存 requests 总量不超过 28.5Gi， 存储不超过 ‘88Gi’。 当 Pod 的内存使用总量超过 28.5Gi 或者磁盘使用总量超过 88Gi 时， kubelet 将会驱逐它们。 如果节点上的所有进程都尽可能多地使用 CPU，则 Pod 加起来不能使用超过 14.5 CPUs 的资源。</p><p>当没有执行 kube-reserved 和&#x2F;或 system-reserved 策略且系统守护进程 使用量超过其预留时，如果节点内存用量高于 31.5Gi 或存储大于 90Gi， kubelet 将会驱逐 Pod。</p><h1 id="使用ephemeral-storage"><a href="#使用ephemeral-storage" class="headerlink" title="使用ephemeral-storage"></a>使用ephemeral-storage</h1><p>如果没有特殊限制，我们不会配置ephemeral-storage的request和limit，但是如果你的pod存储会持续增长，但是又不想影响到节点其他容器运行，就可以设置下，这样当容器的存储达到limit设置大小后，只有这一个pod就会驱逐重建，而不是整个节点上所有pod都被驱逐。下面我举例说明下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>    <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">weixnie</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">progressDeadlineSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">600</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>  <span class="hljs-attribute">revisionHistoryLimit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>      <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>  <span class="hljs-attribute">strategy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">rollingUpdate</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">maxSurge</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>      <span class="hljs-attribute">maxUnavailable</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>        <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">while true; do dd if=/dev/zero of=$(date &#x27;+%s&#x27;).out count=1 bs=10MB; sleep</span><br>          <span class="hljs-attribute">1; done</span><br><span class="hljs-attribute">        command</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ephemeral-storage-test</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">ephemeral-storage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100Mi</span><br>          <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">ephemeral-storage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br>        <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attribute">imagePullSecrets</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: qcloudregistrykey</span><br>      <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>      <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>创建一个deployment，然后配置ephemeral-storage最大100Mi，容器内不断生成文件，当达到上限时候，看是否只有这个pod会被驱逐重启</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stata">Events:<br>  <span class="hljs-keyword">Type</span>     Reason     Age   From               Message<br>  ----     ------     ----  ----               -------<br>  Normal   Scheduled  21s   default-scheduler  Successfully assigned weixnie/ephemeral-storage-<span class="hljs-keyword">test</span>-57cfd575-hkxl8 to 172.16.0.8<br>  Normal   Pulling    21s   kubelet            Pulling image <span class="hljs-string">&quot;busybox&quot;</span><br>  Normal   Pulled     21s   kubelet            Successfully pulled image <span class="hljs-string">&quot;busybox&quot;</span><br>  Normal   Created    20s   kubelet            Created container ephemeral-storage-<span class="hljs-keyword">test</span><br>  Normal   Started    20s   kubelet            Started container ephemeral-storage-<span class="hljs-keyword">test</span><br>  Warning  Evicted    1s    kubelet            Pod ephemeral <span class="hljs-keyword">local</span> storage usage exceeds the <span class="hljs-keyword">total</span> limit of containers 100Mi.<br>  Normal   Killing    1s    kubelet            Stopping container ephemeral-storage-<span class="hljs-keyword">test</span><br><br>[niewx@VM-0-4-centos ~]$ k get pod -A | grep Evi<br>weixnie         ephemeral-storage-<span class="hljs-keyword">test</span>-57cfd575-hkxl8                      0/1     Evicted                 0          50s<br>weixnie         ephemeral-storage-<span class="hljs-keyword">test</span>-57cfd575-nxgd4                      0/1     Evicted                 0          29s<br></code></pre></td></tr></table></figure><p>从事件可以看出当容器内存储到100Mi，pod就会重建，然后之前的pod就是被驱逐状态，可以发下只有ephemeral-storage-test被驱逐了，其他pod都是正常的。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>ephemeral-storage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s之Flannel网络模式</title>
    <link href="/2022/03/28/2022-03-28-Flannel-network-mode-of-k8s/"/>
    <url>/2022/03/28/2022-03-28-Flannel-network-mode-of-k8s/</url>
    
    <content type="html"><![CDATA[<p>Flannel是为Kubernetes设计的一种简单易用的容器网络解决方案，将所有的Pod都组织在同一个子网的虚拟大二层网络中。Flannel支持的后端转发方式有许多种，本文将介绍其中两种，VXLAN以及host-gw。</p><h1 id="什么是vxlan"><a href="#什么是vxlan" class="headerlink" title="什么是vxlan"></a>什么是vxlan</h1><p>VXLAN（Virtual eXtensible Local Area Network，虚拟扩展局域网），是由IETF定义的NVO3（Network Virtualization over Layer 3）标准技术之一，是对传统VLAN协议的一种扩展。VXLAN的特点是将L2的以太帧封装到UDP报文（即L2 over L4）中，并在L3网络中传输</p><p>VXLAN本质上是一种隧道技术，在源网络设备与目的网络设备之间的IP网络上，建立一条逻辑隧道，将用户侧报文经过特定的封装后通过这条隧道转发。从用户的角度来看，接入网络的服务器就像是连接到了一个虚拟的二层交换机的不同端口上（可把蓝色虚框表示的数据中心VXLAN网络看成一个二层虚拟交换机），可以方便地通信</p><p><img src="/img/2022-03-28-Flannel-network-mode-of-k8s/1.png" alt="upload-image"> </p><p>VXLAN的网络模型</p><p><img src="/img/2022-03-28-Flannel-network-mode-of-k8s/2.png" alt="upload-image"> </p><p>更多详细的介绍说明参考文档<a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027/f10c6c1d?idPath=24030814%7C21782165%7C21782239%7C252837181">https://support.huawei.com/enterprise/zh/doc/EDOC1100087027/f10c6c1d?idPath=24030814|21782165|21782239|252837181</a></p><h1 id="vxlan模式"><a href="#vxlan模式" class="headerlink" title="vxlan模式"></a>vxlan模式</h1><p>VXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。</p><p>如果容器都是在同一个节点进行通讯，是不需要经过flannel.1这个网卡，直接通过cni0进行互通即可</p><p><img src="/img/2022-03-28-Flannel-network-mode-of-k8s/3.png" alt="upload-image"> </p><p>如果是跨节点通讯，假设有两个节点Node1和Node2，其中Node1的PodA要跟Node2的PodB通信</p><p><img src="/img/2022-03-28-Flannel-network-mode-of-k8s/4.png" alt="upload-image"> </p><ul><li><p>发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。</p></li><li><p>接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。</p></li></ul><p>那么到底哪些ip会交给flannel.1处理呢？</p><p>flanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理，如果节点信息有变化， flanneld 也会同步的对路由信息做修改。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@Node1 ~]</span># ip r<br>...<br><span class="hljs-number">10.244.0.0</span>/<span class="hljs-number">24</span> dev cni0 proto kernel scope link src <span class="hljs-number">10</span>.<span class="hljs-number">244</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> # Node1子网为<span class="hljs-number">10</span>.<span class="hljs-number">224</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>， 本机PodIP都交由cni0处理<br><span class="hljs-number">10.244.1.0</span>/<span class="hljs-number">24</span> via <span class="hljs-number">10</span>.<span class="hljs-number">244</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> dev flannel.<span class="hljs-number">1</span> onlink # Node2子网为<span class="hljs-number">10</span>.<span class="hljs-number">224</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>，Node2的PodID都交由flannel.<span class="hljs-number">1</span>处理<br></code></pre></td></tr></table></figure><p>flannel.1 的封包过程<br>VXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。</p><p>原始L2帧<br>要生成原始的L2帧， flannel.1 需要得知：</p><p>内层源&#x2F;目的IP地址<br>内层源&#x2F;目的MAC地址<br>内层的源&#x2F;目的IP地址是已知的，即为PodA&#x2F;PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。 内层源&#x2F;目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：</p><p>下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；<br>报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。<br>要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 查看ARP表</span><br>[root<span class="hljs-variable">@Node1</span> ~]<span class="hljs-comment"># ip n | grep flannel.1</span><br><span class="hljs-number">10.244</span>.<span class="hljs-number">1.0</span> dev flannel.<span class="hljs-number">1</span> lladdr <span class="hljs-symbol">ba:</span><span class="hljs-number">74</span><span class="hljs-symbol">:f9</span><span class="hljs-symbol">:db</span><span class="hljs-symbol">:</span><span class="hljs-number">69</span><span class="hljs-symbol">:c1</span> <span class="hljs-title class_">PERMANENT</span> <span class="hljs-comment"># PERMANENT 表示永不过期</span><br></code></pre></td></tr></table></figure><p>有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：</p><p>外层VXLAN UDP报文<br>要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源&#x2F;目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。</p><p>FDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。</p><p>可以使用 bridge fdb show 查看FDB表：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[root<span class="hljs-variable">@Node1</span> ~]<span class="hljs-comment"># bridge fdb show | grep flannel.1</span><br><span class="hljs-symbol">ba:</span><span class="hljs-number">74</span><span class="hljs-symbol">:f9</span><span class="hljs-symbol">:db</span><span class="hljs-symbol">:</span><span class="hljs-number">69</span><span class="hljs-symbol">:c1</span> dev flannel.<span class="hljs-number">1</span> dst <span class="hljs-number">192.168</span>.<span class="hljs-number">50.3</span> <span class="hljs-variable language_">self</span> permanent<br></code></pre></td></tr></table></figure><p>源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。</p><p>&#96;&#96;&#96;&#96;<br>[root@Node1 ~]# ip -d a show flannel.1<br>6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default<br>    link&#x2F;ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0<br>    vxlan id 1 local 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535<br>    inet 10.244.0.0&#x2F;32 brd 10.244.0.0 scope global flannel.1<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::3002:78ff:fe2f:2cb&#x2F;64 scope link<br>       valid_lft forever preferred_lft forever</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><br>至此， flannel.<span class="hljs-number">1</span> 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文： <span class="hljs-built_in">image</span>.png Flannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.<span class="hljs-number">1</span> ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。<br><br><br><span class="hljs-meta"># host-gw模式</span><br><br>在上述的VXLAN的示例中，Node1和Node2其实是同一宿主机中的两台使用桥接模式的虚机，也就是说它们在一个二层网络中。在二层网络互通的情况下，直接配置节点的三层路由即可互通，不需要使用VXLAN隧道。要使用host-gw模式，需要修改 ConfigMap kube-flannel-cfg ，将 Backend.<span class="hljs-built_in">Type</span> 从vxlan改为host-gw，然后重启所有kube-flannel Pod即可：<br><br></code></pre></td></tr></table></figure><p>  net-conf.json: |<br>    {<br>      “Network”: “10.244.0.0&#x2F;16”,<br>      “Backend”: {<br>        “Type”: “host-gw” &#x2F;&#x2F; &lt;- 改成host-gw<br>      }<br>    }</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br>![upload-image](<span class="hljs-regexp">/img/</span><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-28</span>-Flannel-network-mode-of-k8s/<span class="hljs-number">5.</span>png) <br><br>在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要flannel<span class="hljs-number">.1</span>虚机网卡。 flanneld 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中路由表①所示。<br><br></code></pre></td></tr></table></figure><p>[root@Node1 ~]# ip r<br>…<br>10.244.0.0&#x2F;24 dev cni0 proto kernel scope link src 10.244.0.1<br>10.244.1.0&#x2F;24 via 192.168.50.3 dev eth0 # Node2子网的下一跳地址指向Node2的public ip。</p><p>&#96;&#96;&#96;</p><p>由于没有封包解包带来的消耗，host-gw是性能最好的。不过一般在云环境下，都不支持使用host-gw的模式，在私有化部署的场景下，可以考虑。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.cnblogs.com/cheyunhua/p/15241291.html">https://www.cnblogs.com/cheyunhua/p/15241291.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>flannel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单节点搭建测试k8s集群</title>
    <link href="/2022/03/24/2022-03-24-Build-a-test-k8s-cluster-with-a-single-node/"/>
    <url>/2022/03/24/2022-03-24-Build-a-test-k8s-cluster-with-a-single-node/</url>
    
    <content type="html"><![CDATA[<p>现在很多人为了学习或者部署自己的一些服务，会在不同的云平台购买一些轻量型服务器，一般新用户可以用几十块前就可以买到一台不错配置的云服务器一年使用权，很多人为了学习k8s，也会用这些云服务器来搭建k8s集群，但是新用户一般就1台服务器，其实搭建k8s不是很方便，如果要想在一台服务器上搭建一个k8s集群，可以通过k3s搭建，像腾讯云默认提供了k3s的镜像，重装服务器后，会自动搭建好一个k3s集群。除了k3s的方式，我们还可以用kubeadm来搭建，只有一台服务器的话，我们就将这个节点即做master又作为node进行使用，下面我们来具体搭建下。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先云服务器的操作系统我们选择centos7.8，默认最低配置2c4g，然后在节点上执行下一些准备工作</p><p>设置下主机名，就一台服务器，我们就设置为master吧，然后写入到hosts文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hostnamectl set-hostname master</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">$a</span>的含义：$代表的是最后一行，而a的动作是新增</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sed -i <span class="hljs-string">&#x27;$a 10.0.8.6 master&#x27;</span> /etc/hosts</span><br></code></pre></td></tr></table></figure><p>然后配置下系统参数的转发设置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># cat &lt;&lt;EOF &gt; <span class="hljs-regexp">/etc/</span>sysctl.d/Kubernetes.conf<br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-ip6tables = <span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-iptables = <span class="hljs-number">1</span><br>net.ipv4.ip_forward = <span class="hljs-number">1</span><br>vm.swappiness=<span class="hljs-number">0</span><br>EOF<br><br># modprobe br_netfilter  #不执行会报错sysctl: cannot stat <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/</span>bridge/bridge-nf-<span class="hljs-keyword">call</span>-ip6tables: No such <span class="hljs-keyword">file</span> or directory<br># sysctl -p <span class="hljs-regexp">/etc/</span>sysctl.d/Kubernetes.conf<br></code></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>首先我们配置下docker的镜像源，并修改为腾讯镜像源</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/docker-ce.repo http:/</span><span class="hljs-regexp">/download.docker.com/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br># sed -i <span class="hljs-string">&#x27;s+download.docker.com+mirrors.cloud.tencent.com/docker-ce+&#x27;</span> <span class="hljs-regexp">/etc/yum</span>.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><p>然后安装下docker 19.03版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># yum install -y docker-ce-19.03.9-3.el7</span><br><span class="hljs-comment"># systemctl start docker &amp;&amp; systemctl enable docker</span><br><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>设置下docker的镜像源为腾讯云的镜像源</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># cat <span class="hljs-string">&lt;&lt;EOF &gt;</span> /etc/docker/daemon.json</span><br>&#123;<br><span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://mirrors.ccs.tencentyun.com&quot;</span>]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>然后重启下docker</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></code></pre></td></tr></table></figure><h1 id="安装kubeadm、kubectl、kubelet"><a href="#安装kubeadm、kubectl、kubelet" class="headerlink" title="安装kubeadm、kubectl、kubelet"></a>安装kubeadm、kubectl、kubelet</h1><p>这里部署的k8s版本是1.20版本，所以选择1.20版本进行安装，首先加下k8s的软件源</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br>[kubernetes]<br><span class="hljs-attribute">name</span>=Kubernetes<br><span class="hljs-attribute">baseurl</span>=https://mirrors.cloud.tencent.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br><span class="hljs-attribute">enable</span>=1<br><span class="hljs-attribute">gpgcheck</span>=0<br><span class="hljs-attribute">repo_gpgcheck</span>=0<br>EOF<br></code></pre></td></tr></table></figure><p>然后安装1.20版本的kubeadm、kubectl、kubelet，kubelet设置为开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">yum install -y kubeadm-1.20.0 kubectl-1.20.0 kubelet-1.20.0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> kubelet</span><br></code></pre></td></tr></table></figure><p>由于k8s的docker镜像默认是从k8s.gcr.io拉取，这个地址默认是需要翻墙的，大家可以从我的个人仓库下载，具体的镜像列表如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kube</span>-apiserver:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">kube</span>-scheduler:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">kube</span>-controller-manager:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">kube</span>-proxy:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">etcd</span>:<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">coredns</span>:<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">pause</span>:<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">flannel</span>:v0.<span class="hljs-number">13</span>.<span class="hljs-number">1</span>-rc1  # 网络组件<br><span class="hljs-attribute">dashboard</span>:v2.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc7 # 仪表盘相关组件，可以忽略<br><span class="hljs-attribute">metrics</span>-scraper:v1.<span class="hljs-number">0</span>.<span class="hljs-number">4</span> # 仪表盘相关组件，可以忽略<br></code></pre></td></tr></table></figure><p>可以用如下命令拉取镜像，然后修改下名称</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/kube-controller-manager:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/kube-apiserver:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/kube-scheduler:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/kube-proxy:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/flannel:v0.<span class="hljs-number">13</span>.<span class="hljs-number">1</span>-rc1<br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/dashboard:v2.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc7<br><span class="hljs-attribute">docker</span> pull ccr.ccs.tencentyun.com/niewx-k8s/metrics-scraper:v1.<span class="hljs-number">0</span>.<span class="hljs-number">4</span><br><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/kube-controller-manager:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span>  k8s.gcr.io/kube-controller-manager:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/kube-apiserver:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span> k8s.gcr.io/kube-apiserver:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/kube-scheduler:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span> k8s.gcr.io/kube-scheduler:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-<span class="hljs-number">0</span> k8s.gcr.io/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span> k8s.gcr.io/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span> k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/kube-proxy:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span> k8s.gcr.io/kube-proxy:v1.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/flannel:v0.<span class="hljs-number">13</span>.<span class="hljs-number">1</span>-rc1 quay.io/coreos/flannel:v0.<span class="hljs-number">13</span>.<span class="hljs-number">1</span>-rc1<br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/dashboard:v2.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc7 kubernetesui/dashboard:v2.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc7<br><span class="hljs-attribute">docker</span> tag ccr.ccs.tencentyun.com/niewx-k8s/metrics-scraper:v1.<span class="hljs-number">0</span>.<span class="hljs-number">4</span> kubernetesui/metrics-scraper:v1.<span class="hljs-number">0</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h1 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h1><p>首先我们生成下初始配置</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kubeadm config print init-defaults &gt; /root/kubeadm-config.yaml<br></code></pre></td></tr></table></figure><p>你也可以用我的配置，注意我的配置在certSANs加上了节点的公网ip，这样可以通过kubeconfig来公网访问apiserver。主要修改下advertiseAddress的ip地址为master节点的地址，然后在 dnsDomain: cluster.local下面增加 podSubnet: “10.244.0.0&#x2F;16”</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/root/kubeadm-config.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">bootstrapTokens:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">groups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">system:bootstrappers:kubeadm:default-node-token</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">abcdef.0123456789abcdef</span><br>  <span class="hljs-attr">ttl:</span> <span class="hljs-string">24h0m0s</span><br>  <span class="hljs-attr">usages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">signing</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authentication</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">InitConfiguration</span><br><span class="hljs-attr">localAPIEndpoint:</span><br>  <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.8</span><span class="hljs-number">.6</span><br>  <span class="hljs-attr">bindPort:</span> <span class="hljs-number">6443</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">criSocket:</span> <span class="hljs-string">/var/run/dockershim.sock</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">taints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiServer:</span><br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><br>  <span class="hljs-attr">certSANs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.8</span><span class="hljs-number">.6</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">42.193</span><span class="hljs-string">.xx.xx</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">controllerManager:</span> &#123;&#125;<br><span class="hljs-attr">dns:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span><br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">k8s.gcr.io</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.20.0</span><br><span class="hljs-attr">networking:</span><br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span><br>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br><span class="hljs-attr">scheduler:</span> &#123;&#125;<br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>然后初始化集群</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">kubeadm init --config=<span class="hljs-regexp">/root/</span>kubeadm-config.yaml<br></code></pre></td></tr></table></figure><p>执行下面命令拷贝kubeconfig</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><p>通过 kubectl get cs命令查看组件准备状态：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># kubectl get cs</span><br>NAME                 STATUS      MESSAGE                                                                                       <span class="hljs-built_in">ERROR</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">scheduler </span>           Unhealthy   <span class="hljs-built_in">Get</span> <span class="hljs-string">&quot;http://127.0.0.1:10251/healthz&quot;</span>: dial tcp 127.0.0.1:10251: connect:<span class="hljs-built_in"> connection </span>refused   <br>controller-manager   Unhealthy   <span class="hljs-built_in">Get</span> <span class="hljs-string">&quot;http://127.0.0.1:10252/healthz&quot;</span>: dial tcp 127.0.0.1:10252: connect:<span class="hljs-built_in"> connection </span>refused   <br>etcd-0               Healthy     &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>这里scheduler和controller-manager显示不健康，需要修改2个配置文件 kube-controller-manager.yaml和 kube-scheduler.yaml，将配置文件中 –prot &#x3D; 0这项注释掉</p><p>修改保存完成后，等待一会儿状态就正常了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># kubectl get cs</span><br>NAME                 STATUS    MESSAGE             <span class="hljs-built_in">ERROR</span><br>controller-manager   Healthy   ok    <span class="hljs-built_in"></span><br><span class="hljs-built_in">scheduler </span>           Healthy   ok    <br>etcd-0               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="部署flannel网络组件"><a href="#部署flannel网络组件" class="headerlink" title="部署flannel网络组件"></a>部署flannel网络组件</h1><p>这个时候节点还是notready，因为未安装网络组件flannel，下面来安装下，下载flannel的部署yaml然后进行部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># wget https://www.tx97106.com/resource/kube-flannel.yml</span><br><span class="hljs-comment"># kubectl apply -f kube-flannel.yml</span><br>podsecuritypolicy.policy/psp.flannel.unprivileged created<br>clusterrole.rbac.authorization.k8s.io/flannel created<br>clusterrolebinding.rbac.authorization.k8s.io/flannel created<br>serviceaccount/flannel created<br>configmap/kube-flannel-cfg created<br>daemonset.apps/kube-flannel-ds created<br></code></pre></td></tr></table></figure><h1 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get <span class="hljs-keyword">node</span><br><span class="hljs-title">NAME</span>     STATUS   ROLES                  AGE   <span class="hljs-keyword">VERSION</span><br><span class="hljs-keyword">master</span>   <span class="hljs-title">Ready</span>    control-plane,<span class="hljs-keyword">master</span>   <span class="hljs-title">45h</span>   v1.<span class="hljs-number">20.0</span><br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -A<br>NAMESPACE           NAME                                                              READY   STATUS      RESTARTS   AGE<br>kube-system         coredns-<span class="hljs-number">74</span>ff55c5b-qt54q                                           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br>kube-system         etcd-<span class="hljs-keyword">master</span>                                                       <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br>kube-system         kube-apiserver-<span class="hljs-keyword">master</span>                                             <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br>kube-system         kube-controller-manager-<span class="hljs-keyword">master</span>                                    <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br>kube-system         kube-flannel-ds-<span class="hljs-number">7m</span>jg5                                             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br>kube-system         kube-proxy-j22z7                                                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br>kube-system         kube-scheduler-<span class="hljs-keyword">master</span>                                             <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">45h</span><br></code></pre></td></tr></table></figure><p>查看下节点和pod状态都是正常的，说明我们的集群已经部署好了，因为master默认是不调度业务pod，通过会有污点，但是我们这里只有一个节点，所以我们去掉下污点，让pod可以正常调度到master节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl taint <span class="hljs-keyword">node</span>  <span class="hljs-title">master</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-literal">master</span>-<br></code></pre></td></tr></table></figure><p>下面我们测试部署下一个服务</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt; EOF </span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">debug</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: debug</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/nwx_registry/troubleshooting:latest</span><br>      <span class="hljs-attribute">tolerations</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">operator: Exists</span><br>      <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>EOF<br></code></pre></td></tr></table></figure><p>查看pod正常运行，说明集群部署成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -o wide<br>NAME                     READY   STATUS    RESTARTS   AGE   IP           <span class="hljs-keyword">NODE</span>     <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>debug-<span class="hljs-number">5</span>b5bbcbb44-v9tl4   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">95s</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">0.8</span>   <span class="hljs-keyword">master</span>   <span class="hljs-title">&lt;none</span>&gt;           <span class="hljs-tag">&lt;none&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s上通过operator搭建redis集群</title>
    <link href="/2022/03/21/2022-03-21-Operator-builds-redis-cluster-on-k8s/"/>
    <url>/2022/03/21/2022-03-21-Operator-builds-redis-cluster-on-k8s/</url>
    
    <content type="html"><![CDATA[<p>Redis Cluster Operator在Kubernetes上管理 Redis 集群。</p><p>每个主节点及其从节点由一个 statefulSet管理，为每个statefulSet创建一个 headless svc，并为所有节点创建一个clusterIP服务。</p><p>每个statefulset使用PodAntiAffinity来保证主从分散在不同的节点上。 同时，operator在每个statefulset中选择master时，会优先选择k8s不同节点的pod作为master。</p><p>具体的代码及介绍可以参考<a href="https://github.com/ucloud/redis-cluster-operator">https://github.com/ucloud/redis-cluster-operator</a></p><p><img src="/img/2022-03-21-Operator-builds-redis-cluster-on-k8s/1.png" alt="upload-image"></p><h1 id="部署operator"><a href="#部署operator" class="headerlink" title="部署operator"></a>部署operator</h1><p>部署operator可以通过helm的方式部署</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">helm repo <span class="hljs-keyword">add</span> ucloud-<span class="hljs-keyword">operator</span> https:<span class="hljs-comment">//ucloud.github.io/redis-cluster-operator/</span><br>helm repo update<br>helm install --generate-name ucloud-<span class="hljs-keyword">operator</span>/redis-cluster-<span class="hljs-keyword">operator</span> --<span class="hljs-keyword">namespace</span> <span class="hljs-title">weixnie</span><br></code></pre></td></tr></table></figure><h1 id="部署redis集群"><a href="#部署redis集群" class="headerlink" title="部署redis集群"></a>部署redis集群</h1><p>部署redis集群有很多种方案，具体可以参考如下crd的yaml进行配置。</p><h2 id="自定义redis配置的集群"><a href="#自定义redis配置的集群" class="headerlink" title="自定义redis配置的集群"></a>自定义redis配置的集群</h2><p>你可以自定义redis的配置</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">apiVersion</span>: <span class="hljs-string">redis</span>.<span class="hljs-string">kun</span>/<span class="hljs-string">v1alpha1</span><br><span class="hljs-string">kind</span>: <span class="hljs-string">DistributedRedisCluster</span><br><span class="hljs-string">metadata</span>:<br>  <span class="hljs-string">annotations</span>:<br>    <span class="hljs-comment"># if your operator run as cluster-scoped, add this annotations</span><br>    <span class="hljs-string">redis</span>.<span class="hljs-string">kun</span>/<span class="hljs-string">scope</span>: <span class="hljs-string">cluster-scoped</span><br>  <span class="hljs-string">name</span>: <span class="hljs-string">example-distributedrediscluster</span><br><span class="hljs-string">spec</span>:<br>  <span class="hljs-string">image</span>: <span class="hljs-string">redis:5.</span><span class="hljs-string">0</span>.<span class="hljs-string">4-alpine</span><br>  <span class="hljs-string">masterSize</span>: <span class="hljs-string">3</span><br>  <span class="hljs-string">clusterReplicas</span>: <span class="hljs-string">1</span><br>  <span class="hljs-string">config</span>:<br>    <span class="hljs-string">activerehashing</span>: <span class="hljs-string">&quot;yes&quot;</span><br>    <span class="hljs-string">appendfsync</span>: <span class="hljs-string">everysec</span><br>    <span class="hljs-string">appendonly</span>: <span class="hljs-string">&quot;yes&quot;</span><br>    <span class="hljs-string">hash-max-ziplist-entries</span>: <span class="hljs-string">&quot;512&quot;</span><br>    <span class="hljs-string">hash-max-ziplist-value</span>: <span class="hljs-string">&quot;64&quot;</span><br>    <span class="hljs-string">hll-sparse-max-bytes</span>: <span class="hljs-string">&quot;3000&quot;</span><br>    <span class="hljs-built_in">list-compress-depth:</span> <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-string">maxmemory-policy</span>: <span class="hljs-string">noeviction</span><br>    <span class="hljs-string">maxmemory-samples</span>: <span class="hljs-string">&quot;5&quot;</span><br>    <span class="hljs-string">no-appendfsync-on-rewrite</span>: <span class="hljs-string">&quot;no&quot;</span><br>    <span class="hljs-string">notify-keyspace-events</span>: <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-built_in">set-max-intset-entries:</span> <span class="hljs-string">&quot;512&quot;</span><br>    <span class="hljs-string">slowlog-log-slower-than</span>: <span class="hljs-string">&quot;10000&quot;</span><br>    <span class="hljs-string">slowlog-max-len</span>: <span class="hljs-string">&quot;128&quot;</span><br>    <span class="hljs-string">stop-writes-on-bgsave-error</span>: <span class="hljs-string">&quot;yes&quot;</span><br>    <span class="hljs-string">tcp-keepalive</span>: <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-string">timeout</span>: <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-string">zset-max-ziplist-entries</span>: <span class="hljs-string">&quot;128&quot;</span><br>    <span class="hljs-string">zset-max-ziplist-value</span>: <span class="hljs-string">&quot;64&quot;</span><br></code></pre></td></tr></table></figure><h2 id="redis集群配置登录密码"><a href="#redis集群配置登录密码" class="headerlink" title="redis集群配置登录密码"></a>redis集群配置登录密码</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-comment"># if your operator run as cluster-scoped, add this annotations</span><br>    <span class="hljs-attr">redis.kun/scope:</span> <span class="hljs-string">cluster-scoped</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">MWYyZDFlMmU2N2Rm</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">redis.kun/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DistributedRedisCluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example-distributedrediscluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">redis:5.0.4-alpine</span><br>  <span class="hljs-attr">masterSize:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">clusterReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">passwordSecret:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">limits:</span><br>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br></code></pre></td></tr></table></figure><h2 id="redis集群示例"><a href="#redis集群示例" class="headerlink" title="redis集群示例"></a>redis集群示例</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis.kun/v1alpha1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DistributedRedisCluster</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># if your operator run as cluster-scoped, add this annotations</span><br>    <span class="hljs-attribute">redis.kun/scope</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cluster-scoped</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">example-distributedrediscluster</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:5.0.4-alpine</span><br>  <span class="hljs-attribute">masterSize</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">clusterReplicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">200m</span><br>      <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">200Mi</span><br>    <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">200m</span><br>      <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100Mi</span><br></code></pre></td></tr></table></figure><p>这里解释下字段说明</p><p>masterSize: 是指主节点的数量<br>clusterReplicas: 指每个主节点从节点的数量</p><h1 id="验证redis集群"><a href="#验证redis集群" class="headerlink" title="验证redis集群"></a>验证redis集群</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[niewx@VM<span class="hljs-string">-0</span><span class="hljs-string">-4</span>-centos ~]$ k get pod | grep redis<br>drc-example-distributedrediscluster<span class="hljs-string">-0</span><span class="hljs-string">-0</span>   1/1     Running   0          41m<br>drc-example-distributedrediscluster<span class="hljs-string">-0</span><span class="hljs-string">-1</span>   1/1     Running   0          41m<br>drc-example-distributedrediscluster<span class="hljs-string">-1</span><span class="hljs-string">-0</span>   1/1     Running   0          41m<br>drc-example-distributedrediscluster<span class="hljs-string">-1</span><span class="hljs-string">-1</span>   1/1     Running   0          41m<br>drc-example-distributedrediscluster<span class="hljs-string">-2</span><span class="hljs-string">-0</span>   1/1     Running   0          41m<br>drc-example-distributedrediscluster<span class="hljs-string">-2</span><span class="hljs-string">-1</span>   1/1     Running   0          41m<br></code></pre></td></tr></table></figure><p>然后用redis连接工具查看集群状态</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">&gt; cluster info<br><span class="hljs-symbol">cluster_state:</span>ok<br><span class="hljs-symbol">cluster_slots_assigned:</span><span class="hljs-number">16384</span><br><span class="hljs-symbol">cluster_slots_ok:</span><span class="hljs-number">16384</span><br><span class="hljs-symbol">cluster_slots_pfail:</span><span class="hljs-number">0</span><br><span class="hljs-symbol">cluster_slots_fail:</span><span class="hljs-number">0</span><br><span class="hljs-symbol">cluster_known_nodes:</span><span class="hljs-number">6</span><br><span class="hljs-symbol">cluster_size:</span><span class="hljs-number">3</span><br><span class="hljs-symbol">cluster_current_epoch:</span><span class="hljs-number">4</span><br><span class="hljs-symbol">cluster_my_epoch:</span><span class="hljs-number">0</span><br><span class="hljs-symbol">cluster_stats_messages_ping_sent:</span><span class="hljs-number">2443</span><br><span class="hljs-symbol">cluster_stats_messages_pong_sent:</span><span class="hljs-number">2421</span><br><span class="hljs-symbol">cluster_stats_messages_sent:</span><span class="hljs-number">4864</span><br><span class="hljs-symbol">cluster_stats_messages_ping_received:</span><span class="hljs-number">2416</span><br><span class="hljs-symbol">cluster_stats_messages_pong_received:</span><span class="hljs-number">2443</span><br><span class="hljs-symbol">cluster_stats_messages_meet_received:</span><span class="hljs-number">5</span><br><span class="hljs-symbol">cluster_stats_messages_received:</span><span class="hljs-number">4864</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes部署MySQL主从集群</title>
    <link href="/2022/03/21/2022-03-21-Kubernetes-deploys-mysql-master-slave-cluster/"/>
    <url>/2022/03/21/2022-03-21-Kubernetes-deploys-mysql-master-slave-cluster/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在k8s上搭建一个主从的mysql集群，该集群满足如下要求</p><ul><li>搭建一个主从复制（Master-Slave）的MySQL集群</li><li>从节点可以水平扩展</li><li>所有的写操作只能在主节点上执行</li><li>读操作可以在主从节点上执行</li><li>从节点能同步主节点的数据</li></ul><h1 id="创建主从的configmap"><a href="#创建主从的configmap" class="headerlink" title="创建主从的configmap"></a>创建主从的configmap</h1><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">weixnie</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">master.cnf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-comment"># Apply this config only on the master.</span><br>    <span class="hljs-attribute">[mysqld]</span><br><span class="hljs-attribute">    log-bin</span><br><span class="hljs-attribute">    skip-grant-tables    </span><br><span class="hljs-attribute">  slave.cnf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-comment"># Apply this config only on slaves.</span><br>    [mysqld]<br>    super-read-only<br>    skip-grant-tables   <br></code></pre></td></tr></table></figure><h1 id="创建主从实例的service"><a href="#创建主从实例的service" class="headerlink" title="创建主从实例的service"></a>创建主从实例的service</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Headless service for stable DNS entries of StatefulSet members.</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">weixnie</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Client service for connecting to any MySQL instance for reads.</span><br><span class="hljs-comment"># For writes, you must instead connect to the master: mysql-0.mysql.</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-read</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">weixnie</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>这个无头服务给 StatefulSet 控制器为集合中每个 Pod 创建的 DNS 条目提供了一个宿主。 因为服务名为 mysql，所以可以通过在同一 Kubernetes 集群和名字中的任何其他 Pod 内解析 &lt;Pod 名称&gt;.mysql 来访问 Pod。</p><p>客户端服务称为 mysql-read，是一种常规服务，具有其自己的集群 IP。 该集群 IP 在报告就绪的所有MySQL Pod 之间分配连接。 可能的端点集合包括 MySQL 主节点和所有副本节点。</p><p>请注意，只有读查询才能使用负载平衡的客户端服务。 因为只有一个 MySQL 主服务器，所以客户端应直接连接到 MySQL 主服务器 Pod （通过其在无头服务中的 DNS 条目）以执行写入操作。</p><h1 id="为mysql创建密码"><a href="#为mysql创建密码" class="headerlink" title="为mysql创建密码"></a>为mysql创建密码</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysql-secret<br><span class="hljs-symbol">  namespace:</span> weixnie<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> mysql<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  password:</span> MTIzNDU2 <span class="hljs-meta"># echo -n <span class="hljs-string">&quot;123456&quot;</span> | base64</span><br></code></pre></td></tr></table></figure><h1 id="部署mysql的StatefulSet负载"><a href="#部署mysql的StatefulSet负载" class="headerlink" title="部署mysql的StatefulSet负载"></a>部署mysql的StatefulSet负载</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs awk">apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: mysql<br>  namespace: weixnie<br>  labels:<br>    app: mysql<br>spec:<br>  selector:<br>    matchLabels:<br>      app: mysql<br>  serviceName: mysql<br>  replicas: <span class="hljs-number">2</span><br>  template:<br>    metadata:<br>      labels:<br>        app: mysql<br>    spec:<br>      initContainers:<br>      - name: init-mysql<br>        image: mysql:<span class="hljs-number">5.7</span><br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        command:<br>        - bash<br>        - <span class="hljs-string">&quot;-c&quot;</span><br>        - |<br>          set -ex<br>          <span class="hljs-comment"># 从 Pod 的序号，生成 server-id</span><br>          [[ $(hostname) =~ -([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)$ ]] || <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>          ordinal=<span class="hljs-variable">$&#123;BASH_REMATCH[1]&#125;</span><br>          echo [mysqld] &gt; <span class="hljs-regexp">/mnt/</span>conf.d/server-id.cnf<br>          <span class="hljs-comment"># 由于 server-id 不能为 0，因此给 ID 加 100 来避开它</span><br>          echo server-id=$((<span class="hljs-number">100</span> + <span class="hljs-variable">$ordinal</span>)) &gt;&gt; <span class="hljs-regexp">/mnt/</span>conf.d/server-id.cnf<br>          <span class="hljs-comment"># 如果 Pod 的序号为 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d 目录下</span><br>          <span class="hljs-comment"># 否则，拷贝 ConfigMap 里的 Slave 的配置文件</span><br>          <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;ordinal&#125;</span> -eq <span class="hljs-number">0</span> ]]; then<br>            cp <span class="hljs-regexp">/mnt/</span>config-map<span class="hljs-regexp">/master.cnf /m</span>nt/conf.d<br>          <span class="hljs-keyword">else</span><br>            cp <span class="hljs-regexp">/mnt/</span>config-map<span class="hljs-regexp">/slave.cnf /m</span>nt/conf.d<br>          fi<br>        volumeMounts:<br>        - name: conf<br>          mountPath: <span class="hljs-regexp">/mnt/</span>conf.d<br>        - name: config-map<br>          mountPath: <span class="hljs-regexp">/mnt/</span>config-map<br>      - name: clone-mysql<br>        image: ist0ne/xtrabackup:<span class="hljs-number">1.0</span><br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        command:<br>        - bash<br>        - <span class="hljs-string">&quot;-c&quot;</span><br>        - |<br>          set -ex<br>          <span class="hljs-comment"># 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过</span><br>          [[ -d <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/my</span>sql ]] &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>          <span class="hljs-comment"># Master 节点（序号为 0）不需要这个操作</span><br>          [[ $(hostname) =~ -([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)$ ]] || <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>          ordinal=<span class="hljs-variable">$&#123;BASH_REMATCH[1]&#125;</span><br>          [[ <span class="hljs-variable">$ordinal</span> == <span class="hljs-number">0</span> ]] &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>          <span class="hljs-comment"># 使用 ncat 指令，远程地从前一个节点拷贝数据到本地</span><br>          ncat --recv-only mysql-$((<span class="hljs-variable">$ordinal</span>-<span class="hljs-number">1</span>)).mysql <span class="hljs-number">3307</span> | xbstream -x -C <span class="hljs-regexp">/var/</span>lib/mysql<br>          <span class="hljs-comment"># 执行 --prepare，这样拷贝来的数据就可以用作恢复了</span><br>          xtrabackup --prepare --target-dir=<span class="hljs-regexp">/var/</span>lib/mysql<br>        volumeMounts:<br>        - name: data<br>          mountPath: <span class="hljs-regexp">/var/</span>lib/mysql<br>          subPath: mysql<br>        - name: conf<br>          mountPath: <span class="hljs-regexp">/etc/my</span>sql/conf.d<br>      containers:<br>      - name: mysql<br>        image: mysql:<span class="hljs-number">5.7</span><br>        env:<br><span class="hljs-comment">#        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="hljs-comment">#          value: &quot;1&quot;</span><br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        ports:<br>        - name: mysql<br>          containerPort: <span class="hljs-number">3306</span><br>        volumeMounts:<br>        - name: data<br>          mountPath: <span class="hljs-regexp">/var/</span>lib/mysql<br>          subPath: mysql<br>        - name: conf<br>          mountPath: <span class="hljs-regexp">/etc/my</span>sql/conf.d<br>        resources:<br>          requests:<br>            cpu: <span class="hljs-number">500</span>m<br>            memory: <span class="hljs-number">1</span>Gi<br>        livenessProbe:<br>          exec:<br>            command: [<span class="hljs-string">&quot;mysqladmin&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-uroot&quot;</span>, <span class="hljs-string">&quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span>]<br>          initialDelaySeconds: <span class="hljs-number">30</span><br>          periodSeconds: <span class="hljs-number">10</span><br>          timeoutSeconds: <span class="hljs-number">5</span><br>        readinessProbe:<br>          exec:<br>            command: [<span class="hljs-string">&quot;mysqladmin&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-uroot&quot;</span>, <span class="hljs-string">&quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span>]<br>          initialDelaySeconds: <span class="hljs-number">5</span><br>          periodSeconds: <span class="hljs-number">2</span><br>          timeoutSeconds: <span class="hljs-number">1</span><br>      - name: xtrabackup<br>        image: ist0ne/xtrabackup:<span class="hljs-number">1.0</span><br>        ports:<br>        - name: xtrabackup<br>          containerPort: <span class="hljs-number">3307</span><br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        command:<br>        - bash<br>        - <span class="hljs-string">&quot;-c&quot;</span><br>        - |<br>          set -ex<br>          cd <span class="hljs-regexp">/var/</span>lib/mysql<br>          <span class="hljs-comment"># 从备份信息文件里读取 MASTER_LOG_FILE 和 MASTER_LOG_POS 这 2 个字段的值，用来拼装集群初始化 SQL</span><br>          <span class="hljs-keyword">if</span> [[ -f xtrabackup_slave_info ]]; then<br>            <span class="hljs-comment"># 如果 xtrabackup_slave_info 文件存在，说明这个备份数据来自于另一个 Slave 节点</span><br>            <span class="hljs-comment"># 这种情况下，XtraBackup 工具在备份的时候，就已经在这个文件里自动生成了 &quot;CHANGE MASTER TO&quot; SQL 语句</span><br>            <span class="hljs-comment"># 所以，只需要把这个文件重命名为 change_master_to.sql.in，后面直接使用即可</span><br>            mv xtrabackup_slave_info change_master_to.sql.<span class="hljs-keyword">in</span><br>            <span class="hljs-comment"># 所以，也就用不着 xtrabackup_binlog_info 了</span><br>            rm -f xtrabackup_binlog_info<br>          elif [[ -f xtrabackup_binlog_info ]]; then<br>            <span class="hljs-comment"># 如果只是存在 xtrabackup_binlog_info 文件，说明备份来自于 Master 节点，就需要解析这个备份信息文件，读取所需的两个字段的值</span><br>            [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>            rm xtrabackup_binlog_info<br>            <span class="hljs-comment"># 把两个字段的值拼装成 SQL，写入 change_master_to.sql.in 文件</span><br>            echo <span class="hljs-string">&quot;CHANGE MASTER TO MASTER_LOG_FILE=&#x27;$&#123;BASH_REMATCH[1]&#125;&#x27;,\</span><br><span class="hljs-string">                  MASTER_LOG_POS=$&#123;BASH_REMATCH[2]&#125;&quot;</span> &gt; change_master_to.sql.<span class="hljs-keyword">in</span><br>          fi<br>          <span class="hljs-comment"># 如果存在 change_master_to.sql.in，就意味着需要做集群初始化工作</span><br>          <span class="hljs-keyword">if</span> [[ -f change_master_to.sql.<span class="hljs-keyword">in</span> ]]; then<br>            <span class="hljs-comment"># 但一定要先等 MySQL 容器启动之后才能进行下一步连接 MySQL 的操作</span><br>            echo <span class="hljs-string">&quot;Waiting for mysqld to be ready（accepting connections）&quot;</span><br>            until mysql -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -uroot -p<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span> -e <span class="hljs-string">&quot;SELECT 1&quot;</span>; <span class="hljs-keyword">do</span> sleep <span class="hljs-number">1</span>; done<br>            echo <span class="hljs-string">&quot;Initializing replication from clone position&quot;</span><br>            <span class="hljs-comment"># 将文件 change_master_to.sql.in 改个名字</span><br>            <span class="hljs-comment"># 防止这个 Container 重启的时候，因为又找到了 change_master_to.sql.in，从而重复执行一遍初始化流程</span><br>            mv change_master_to.sql.<span class="hljs-keyword">in</span> change_master_to.sql.orig<br>            <span class="hljs-comment"># 使用 change_master_to.sql.orig 的内容，也就是前面拼装的 SQL，组成一个完整的初始化和启动 Slave 的 SQL 语句</span><br>            mysql -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -uroot -p<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span> &lt;&lt; EOF<br>          $(&lt; change_master_to.sql.orig),<br>            MASTER_HOST=<span class="hljs-string">&#x27;mysql-0.mysql.weixnie&#x27;</span>,<br>            MASTER_USER=<span class="hljs-string">&#x27;root&#x27;</span>,<br>            MASTER_PASSWORD=<span class="hljs-string">&#x27;$&#123;MYSQL_ROOT_PASSWORD&#125;&#x27;</span>,<br>            MASTER_CONNECT_RETRY=<span class="hljs-number">10</span>;<br>          START SLAVE;<br>          EOF<br>          fi<br>          <span class="hljs-comment"># 使用 ncat 监听 3307 端口。</span><br>          <span class="hljs-comment"># 它的作用是，在收到传输请求的时候，直接执行 xtrabackup --backup 命令，备份 MySQL 的数据并发送给请求者</span><br>          exec ncat --listen --keep-open --send-only --max-conns=<span class="hljs-number">1</span> <span class="hljs-number">3307</span> -c \<br>            <span class="hljs-string">&quot;xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span><br>        volumeMounts:<br>        - name: data<br>          mountPath: <span class="hljs-regexp">/var/</span>lib/mysql<br>          subPath: mysql<br>        - name: conf<br>          mountPath: <span class="hljs-regexp">/etc/my</span>sql/conf.d<br>      volumes:<br>      - name: conf<br>        emptyDir: &#123;&#125;<br>      - name: config-map<br>        configMap:<br>          name: mysql<br>  volumeClaimTemplates:<br>  - metadata:<br>      name: data<br>    spec:<br>      accessModes: [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>      resources:<br>        requests:<br>          storage: <span class="hljs-number">10</span>Gi<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>同命名空间下起了一个mysql客户端的工具进行测试，我们对主实例进行写，然后可以直接从从实例读取数据，说明主从数据复制成功。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">bash-4.4# mysql -h mysql-0.mysql &lt;&lt;EOF<br>CREATE DATABASE test;<br>CREATE TABLE test.messages (message VARCHAR(250));<br>INSERT INTO test.messages VALUES (<span class="hljs-emphasis">&#x27;hello&#x27;</span>);<br>EOF<br><br><span class="hljs-section">bash-4.4# mysql -h mysql-read -e &quot;SELECT * FROM test.messages&quot;</span><br><span class="hljs-section">+---------+</span><br><span class="hljs-section">| message |</span><br><span class="hljs-section">+---------+</span><br><span class="hljs-section">| hello   |</span><br><span class="hljs-section">+---------+</span><br></code></pre></td></tr></table></figure><h1 id="扩展副本数"><a href="#扩展副本数" class="headerlink" title="扩展副本数"></a>扩展副本数</h1><p>使用MySQL复制，你可以通过添加副本节点来扩展读取查询的能力。 使用 StatefulSet，你可以使用单个命令执行此操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl scale statefulset mysql <span class="hljs-attribute">--replicas</span>=5 -n weixnie<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过context管理多集群kubeconfig</title>
    <link href="/2022/02/15/2022-02-15-Manage-multi-cluster-kubeconfig-through-context/"/>
    <url>/2022/02/15/2022-02-15-Manage-multi-cluster-kubeconfig-through-context/</url>
    
    <content type="html"><![CDATA[<p>本文展示如何使用配置文件来配置对多个集群的访问。 在将集群、用户和上下文定义在一个或多个配置文件中之后，用户可以使用kubectl config use-context命令快速地在集群之间进行切换。</p><h1 id="准备2个集群的kubeconfig"><a href="#准备2个集群的kubeconfig" class="headerlink" title="准备2个集群的kubeconfig"></a>准备2个集群的kubeconfig</h1><p>这里我们准备了2个集群的kubeconfig，分别是腾讯云的tke和eks集群。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[kubeconfig@nwx-gr-node1 .kube]$ ll<br>-rw-rw-r--<span class="hljs-number"> 1 </span>kubeconfig kubeconfig<span class="hljs-number"> 5630 </span>Feb<span class="hljs-number"> 15 </span>19:06 eks.config<br>-rw-rw-r--<span class="hljs-number"> 1 </span>kubeconfig kubeconfig<span class="hljs-number"> 5620 </span>Feb<span class="hljs-number"> 15 </span>19:06 tke.config<br></code></pre></td></tr></table></figure><h1 id="合并kubeconfig"><a href="#合并kubeconfig" class="headerlink" title="合并kubeconfig"></a>合并kubeconfig</h1><p>合并2个集群的kubeconfig到$HOME&#x2F;.kube&#x2F;config这个文件，这里kubectl config不指定配置文件，就会默认读取这个文件。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">[kubeconfig@nwx-gr-node1 .kube]$ KUBECONFIG=new-config1:new-config2  kubectl config view --flatten &gt; $HOME/.kube/config<br>[kubeconfig@nwx-gr-node1 .kube]$ ll<br>total 28<br>drwxr-x---<span class="hljs-number"> 4 </span>kubeconfig kubeconfig<span class="hljs-number"> 4096 </span>Feb<span class="hljs-number"> 15 </span>19:19 cache<br>-rw-rw-r--<span class="hljs-number"> 1 </span>kubeconfig kubeconfig<span class="hljs-number"> 7208 </span>Feb<span class="hljs-number"> 15 </span>19:19 config<br>-rw-rw-r--<span class="hljs-number"> 1 </span>kubeconfig kubeconfig<span class="hljs-number"> 5630 </span>Feb<span class="hljs-number"> 15 </span>19:06 eks.config<br>-rw-rw-r--<span class="hljs-number"> 1 </span>kubeconfig kubeconfig<span class="hljs-number"> 5620 </span>Feb<span class="hljs-number"> 15 </span>19:06 tke.config<br></code></pre></td></tr></table></figure><h1 id="查看上下文"><a href="#查看上下文" class="headerlink" title="查看上下文"></a>查看上下文</h1><p>这里可以分别查看上下文、集群和用户</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">[<span class="hljs-string">kubeconfig</span>@<span class="hljs-string">nwx-gr-node1</span> .<span class="hljs-string">kube</span>]$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span><br><span class="hljs-string">CURRENT</span>   <span class="hljs-string">NAME</span>                                        <span class="hljs-string">CLUSTER</span>        <span class="hljs-string">AUTHINFO</span>       <span class="hljs-string">NAMESPACE</span><br>*         <span class="hljs-string">cls-123456-100011007xxx</span> -<span class="hljs-string">context-default</span>     <span class="hljs-string">cls-123456</span>    <span class="hljs-string">100011007xxx</span>   <br>          <span class="hljs-string">cls-456789-100011007xxx</span> -<span class="hljs-string">context-default</span>     <span class="hljs-string">cls-456789</span>    <span class="hljs-string">100011007xxx</span><br>[<span class="hljs-string">kubeconfig</span>@<span class="hljs-string">nwx-gr-node1</span> .<span class="hljs-string">kube</span>]$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-clusters</span><br><span class="hljs-string">NAME</span><br><span class="hljs-string">cls-123456</span><br><span class="hljs-string">cls-456789</span><br>[<span class="hljs-string">kubeconfig</span>@<span class="hljs-string">nwx-gr-node1</span> .<span class="hljs-string">kube</span>]$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-users</span><br><span class="hljs-string">NAME</span><br><span class="hljs-string">100011007xxx</span> <br></code></pre></td></tr></table></figure><p>如果要查看当前上下文可以用这个命令</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">[kubeconfig@nwx-gr-node1 <span class="hljs-variable">.kube</span>]$ kubectl <span class="hljs-keyword">config</span> current-<span class="hljs-keyword">context</span><br>cls-<span class="hljs-number">123456</span>-<span class="hljs-number">100011007</span>xxx -<span class="hljs-keyword">context</span>-<span class="hljs-keyword">default</span> <br></code></pre></td></tr></table></figure><h1 id="设置上下文"><a href="#设置上下文" class="headerlink" title="设置上下文"></a>设置上下文</h1><p>这里我们可以给集群设置默认的命名空间，这样切换的集群，执行kubectl操作就不需要再-n指定命名空间了</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">[<span class="hljs-string">kubeconfig</span>@<span class="hljs-string">nwx-gr-node1</span> .<span class="hljs-string">kube</span>]$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">cls-123456-100011007xxx-context-default</span> <span class="hljs-built_in">--namespace=kube-system</span><br>[<span class="hljs-string">kubeconfig</span>@<span class="hljs-string">nwx-gr-node1</span> .<span class="hljs-string">kube</span>]$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span><br><span class="hljs-string">CURRENT</span>   <span class="hljs-string">NAME</span>                                        <span class="hljs-string">CLUSTER</span>        <span class="hljs-string">AUTHINFO</span>       <span class="hljs-string">NAMESPACE</span><br>*         <span class="hljs-string">cls-123456-100011007xxx</span> -<span class="hljs-string">context-default</span>     <span class="hljs-string">cls-123456</span>    <span class="hljs-string">100011007xxx</span>   <span class="hljs-string">kube-system</span><br>          <span class="hljs-string">cls-456789-100011007xxx</span> -<span class="hljs-string">context-default</span>     <span class="hljs-string">cls-456789</span>    <span class="hljs-string">100011007xxx</span><br></code></pre></td></tr></table></figure><p>这里还可以设置cluster，具体可以参考案例说明。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">Examples</span>:<br>  <span class="hljs-comment"># Set only the server field on the e2e cluster entry without touching other values.</span><br>  <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">e2e</span> <span class="hljs-built_in">--server=https://1.2.3.4</span><br><br>  <span class="hljs-comment"># Embed certificate authority data for the e2e cluster entry</span><br>  <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">e2e</span> <span class="hljs-built_in">--embed-certs</span> <span class="hljs-built_in">--certificate-authority=~/.kube/e2e/kubernetes.ca.crt</span><br><br>  <span class="hljs-comment"># Disable cert checking for the dev cluster entry</span><br>  <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">e2e</span> <span class="hljs-built_in">--insecure-skip-tls-verify=true</span><br><br>  <span class="hljs-comment"># Set custom TLS server name to use for validation for the e2e cluster entry</span><br>  <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">e2e</span> <span class="hljs-built_in">--tls-server-name=my-cluster-name</span><br></code></pre></td></tr></table></figure><h1 id="切换上下文"><a href="#切换上下文" class="headerlink" title="切换上下文"></a>切换上下文</h1><p>这里我们切换上下文，只需要指定对应的context name进行切换即可。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">[kubeconfig@nwx-gr-node1 <span class="hljs-variable">.kube</span>]$ kubectl <span class="hljs-keyword">config</span> <span class="hljs-keyword">use</span>-<span class="hljs-keyword">context</span> cls-<span class="hljs-number">123456</span>-<span class="hljs-number">100011007</span>xxx -<span class="hljs-keyword">context</span>-<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><h1 id="查看合并后的kubeconfig"><a href="#查看合并后的kubeconfig" class="headerlink" title="查看合并后的kubeconfig"></a>查看合并后的kubeconfig</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[kubeconfig<span class="hljs-variable">@nwx</span>-gr-node1 .kube]<span class="hljs-variable">$ </span>kubectl config view<br></code></pre></td></tr></table></figure><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><ul><li>要删除用户，可以运行 kubectl config unset users.<name></li><li>要删除集群，可以运行 kubectl config unset clusters.<name></li><li>要删除上下文，可以运行 kubectl config unset contexts.<name></li></ul><p>如果要从config文件删除可以用下面命令</p><ul><li>删除上下文，kubectl config delete-context minikube</li><li>删除集群，kubectl config delete-cluster minikube</li><li>删除用户，kubectl config delete-user minikube</li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>kubeconfig</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s搭建nacos</title>
    <link href="/2022/02/05/2022-02-05-k8s-builds-nacos/"/>
    <url>/2022/02/05/2022-02-05-k8s-builds-nacos/</url>
    
    <content type="html"><![CDATA[<p>Nacos致力于帮助您发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p>下面我们来说下如何快速在k8s构建nacos，本次k8s集群是腾讯云的tke，支持云硬盘作为存储，如果是自建k8s，建议通过nfs作为持久化存储。</p><h1 id="创建namespace部署nacos"><a href="#创建namespace部署nacos" class="headerlink" title="创建namespace部署nacos"></a>创建namespace部署nacos</h1><p>创建一个namespace专门用来部署nacos。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># kubectl create ns nacos</span><br></code></pre></td></tr></table></figure><h1 id="部署mysql服务"><a href="#部署mysql服务" class="headerlink" title="部署mysql服务"></a>部署mysql服务</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-mysql:5.7</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--ignore-db-dir=lost+found</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/mysql</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;root&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_DATABASE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;nacos_devtest&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_USER</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;nacos&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;nacos&quot;</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-data</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">mysql</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">cbs</span><br>  <span class="hljs-attr">volumeMode:</span> <span class="hljs-string">Filesystem</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>部署mysql可以会遇到一个错误，这里加上参数–ignore-db-dir&#x3D;lost+found即可，具体说明参考文档<a href="https://cloud.tencent.com/developer/article/1559866">https://cloud.tencent.com/developer/article/1559866</a></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">[<span class="hljs-literal">ERROR</span>] <span class="hljs-comment">--initialize specified but the data directory has files in it. Aborting. </span><br></code></pre></td></tr></table></figure><h1 id="部署nacos"><a href="#部署nacos" class="headerlink" title="部署nacos"></a>部署nacos</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-headless</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">service.alpha.kubernetes.io/tolerate-unready-endpoints:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8848</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8848</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9848</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">client-rpc</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9848</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9849</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">raft-rpc</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9849</span><br>    <span class="hljs-comment">## 兼容1.4.x版本的选举端口</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">7848</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">old-raft-rpc</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">7848</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nacos</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-cm</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">mysql.db.name:</span> <span class="hljs-string">&quot;nacos_devtest&quot;</span><br>  <span class="hljs-attr">mysql.port:</span> <span class="hljs-string">&quot;3306&quot;</span><br>  <span class="hljs-attr">mysql.user:</span> <span class="hljs-string">&quot;nacos&quot;</span><br>  <span class="hljs-attr">mysql.password:</span> <span class="hljs-string">&quot;nacos&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">nacos-headless</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">pod.alpha.kubernetes.io/initialized:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAntiAffinity:</span><br>          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>                <span class="hljs-attr">matchExpressions:</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;app&quot;</span><br>                    <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                    <span class="hljs-attr">values:</span><br>                      <span class="hljs-bullet">-</span> <span class="hljs-string">nacos</span><br>              <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br>      <span class="hljs-attr">initContainers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">peer-finder-plugin-install</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-peer-finder-plugin:1.1</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/home/nacos/plugins/peer-finder</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>              <span class="hljs-attr">subPath:</span> <span class="hljs-string">peer-finder</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nacos</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:latest</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;2Gi&quot;</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8848</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">client-port</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9848</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">client-rpc</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9849</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">raft-rpc</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">7848</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">old-raft-rpc</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NACOS_REPLICAS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;3&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SERVICE_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;nacos-headless&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DOMAIN_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;cluster.local&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAMESPACE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-cm</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">mysql.db.name</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_SERVICE_PORT</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-cm</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">mysql.port</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_SERVICE_USER</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-cm</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">mysql.user</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-cm</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">mysql.password</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NACOS_SERVER_PORT</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;8848&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NACOS_APPLICATION_PORT</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;8848&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PREFER_HOST_MODE</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;hostname&quot;</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/home/nacos/plugins/peer-finder</span><br>              <span class="hljs-attr">subPath:</span> <span class="hljs-string">peer-finder</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/home/nacos/data</span><br>              <span class="hljs-attr">subPath:</span> <span class="hljs-string">data</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/home/nacos/logs</span><br>              <span class="hljs-attr">subPath:</span> <span class="hljs-string">logs</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">accessModes:</span> [ <span class="hljs-string">&quot;ReadWriteOnce&quot;</span> ]<br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nacos</span><br></code></pre></td></tr></table></figure><h1 id="配置ingress访问ui页面"><a href="#配置ingress访问ui页面" class="headerlink" title="配置ingress访问ui页面"></a>配置ingress访问ui页面</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">ingress</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/app-root:</span> <span class="hljs-string">/nacos/index.html</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">nacos.tke.niewx.cn</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">nacos-headless</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8848</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">pathType:</span> <span class="hljs-string">ImplementationSpecific</span><br></code></pre></td></tr></table></figure><p>nacos还提供了ui管理页面，这里用ingress转发到后端的8848端口即可，默认的登录账号密码是nacos&#x2F;nacos，注意这里需要加上nginx.ingress.kubernetes.io&#x2F;app-root: &#x2F;nacos&#x2F;index.html这个注解，因为nacos的index页面没在根目录下。</p><p><img src="/img/2022-02-05-k8s-builds-nacos/Snipaste_2022-02-05_22-11-16.JPG" alt="upload-image"> </p><p><img src="/img/2022-02-05-k8s-builds-nacos/Snipaste_2022-02-05_22-11-59.JPG" alt="upload-image"> </p><h1 id="nacos使用示例"><a href="#nacos使用示例" class="headerlink" title="nacos使用示例"></a>nacos使用示例</h1><ul><li>服务注册</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -X PUT &#x27;http://cluster-ip:<span class="hljs-number">8848</span>/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=<span class="hljs-number">8080</span>&#x27;<br></code></pre></td></tr></table></figure><ul><li>服务发现</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">curl -X <span class="hljs-built_in">GET</span> <span class="hljs-string">&#x27;http://cluster-ip:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>发布配置</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> -X POST <span class="hljs-string">&quot;http://cluster-ip:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld&quot;</span><br></code></pre></td></tr></table></figure><ul><li>获取配置</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">curl -X <span class="hljs-built_in">GET</span> <span class="hljs-string">&quot;http://cluster-ip:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&quot;</span><br></code></pre></td></tr></table></figure><h1 id="operator部署nacos"><a href="#operator部署nacos" class="headerlink" title="operator部署nacos"></a>operator部署nacos</h1><p>上面我们是通过yaml一步步部署nacos，如果您觉得麻烦，也可以用operator来部署nacos。</p><p>这里就不部署了，可以参考文档<a href="https://github.com/nacos-group/nacos-k8s/blob/master/operator/README-CN.md">https://github.com/nacos-group/nacos-k8s/blob/master/operator/README-CN.md</a></p><h1 id="helm部署nacos"><a href="#helm部署nacos" class="headerlink" title="helm部署nacos"></a>helm部署nacos</h1><p>nacos也提供了helm的方式部署，可以参考文档<a href="https://github.com/nacos-group/nacos-k8s/tree/master/helm">https://github.com/nacos-group/nacos-k8s/tree/master/helm</a></p>]]></content>
    
    
    <categories>
      
      <category>nacos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文带你搞定k8s的rbac鉴权</title>
    <link href="/2022/01/13/2022-01-13-This-article-will-take-you-to-get-the-rbac-authentication-of-k8s/"/>
    <url>/2022/01/13/2022-01-13-This-article-will-take-you-to-get-the-rbac-authentication-of-k8s/</url>
    
    <content type="html"><![CDATA[<p>k8s基于角色（Role）的访问控制（RBAC）是一种基于组织中用户的角色来调节控制对计算机或网络资源的访问的方法。</p><p>RBAC鉴权机制使用rbac.authorization.k8s.io API组来驱动鉴权决定，允许你通过Kubernetes API动态配置策略。</p><p>rbac的概念主要可以参考下图</p><p><img src="/img/2022-01-13-This-article-will-take-you-to-get-the-rbac-authentication-of-k8s/1.png" alt="upload-image"> </p><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><ul><li>Role: 用于定义某个命名空间的角色的权限。</li><li>ClusterRole: 用于定义整个集群的角色的权限。</li><li>RoleBinding: 将角色中定义的权限赋予一个或者一组用户，针对命名空间执行授权。</li><li>ClusterRoleBinding: 将角色中定义的权限赋予一个或者一组用户，针对集群范围内的命名空间执行授权。</li></ul><p>k8s上主要是通过上面4个对象来实现对不同的用户来进行权限控制，下面我们来说说如何编写rbac的yaml来实现对子账号进行权限控制。</p><p>现在很多云厂商其实已经将k8s的rbac对接了自己cam鉴权系统，客户只需要编写role或者clusterrole来配置权限，然后绑定给云上的子账号，就可以对不同子账号设置对应的权限。</p><p>一般云厂商的托管k8s服务，都有提供常用的clusterrole，这里拿腾讯云为例，腾讯云默认就提供4种角色：</p><ul><li>管理员（tke:admin）：对所有命名空间下资源的读写权限，具备集群节点、存储卷、命名空间、配额的读写权限，可配置子账号的读写权限。</li><li>运维人员（tke:ops）：对所有命名空间下控制台可见资源的读写权限，具备集群节点、存储卷、命名空间、配额的读写权限。</li><li>开发人员（tke:dev）：对所有命名空间下控制台可见资源的读写权限。</li><li>受限人员（tke:ro）：对所有命名空间下控制台可见资源的只读权限。</li></ul><p>但是有时候我们对权限控制比较严格，只希望给某些资源的权限给子账号，上面的权限就无法满足了，这个时候就需要我们自己写role或者clusterrole来配置角色了。</p><p>如果对rbac不是很了解的话，通过写yaml自定义角色会比较困难，下面我来带你如何通过yaml配置自定义角色权限。</p><h1 id="clusterrole字段说明"><a href="#clusterrole字段说明" class="headerlink" title="clusterrole字段说明"></a>clusterrole字段说明</h1><p>如果要熟练的编写clusterrole，需要熟悉下面几个字段配置才行，首先我们看一份集群的admin角色yaml，这里的*代表所有，后面再详细讲解字段说明</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="apiGroups"><a href="#apiGroups" class="headerlink" title="apiGroups"></a>apiGroups</h2><p>为了更容易对API进行扩展，Kubernetes使用API Groups（API组）进行标识。API Groups以REST URL中的路径进行定义，当前支持两类 API groups。</p><ul><li><p>Core Groups（核心组），也可以称之为Legacy Groups，作为 Kubernetes最核心的API，其特点是没有“组”的概念，例如“v1”，在资源对象的定义中表示为“apiVersion:v1”。</p></li><li><p>具有分组信息的API，以&#x2F;apis&#x2F;$GROUP_NAME&#x2F;$VERSION URL路径进行标识，在资源对象的定义中表示为“apiVersion: $GROUP_NAME&#x2F;$VERSION”，例如：“apiVersion: batch&#x2F;v1”，“apiVersion: extensions:v1beta1”，“apiVersion: apps&#x2F;v1beta1”等</p></li></ul><p>那么怎么查看资源是属于那个apiGroups呢，哪些资源是核心组的呢？</p><p>这里我们可以在集群内通过下面命令获取</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root@VM-0-13-centos ~]</span># kubectl api-resources<br>NAME                                       SHORTNAMES         APIGROUP                           NAMESPACED   KIND<br>bindings                                                                                         <span class="hljs-literal">true</span>         Binding<br>componentstatuses                          cs                                                    <span class="hljs-literal">false</span>        ComponentStatus<br>configmaps                                 cm                                                    <span class="hljs-literal">true</span>         ConfigMap<br>endpoints                                  ep                                                    <span class="hljs-literal">true</span>         Endpoints<br>events                                     ev                                                    <span class="hljs-literal">true</span>         Event<br>limitranges                                limits                                                <span class="hljs-literal">true</span>         LimitRange<br>namespaces                                 ns                                                    <span class="hljs-literal">false</span>        Namespace<br>nodes                                      no                                                    <span class="hljs-literal">false</span>        Node<br>persistentvolumeclaims                     pvc                                                   <span class="hljs-literal">true</span>         PersistentVolumeClaim<br>persistentvolumes                          pv                                                    <span class="hljs-literal">false</span>        PersistentVolume<br>pods                                       po                                                    <span class="hljs-literal">true</span>         Pod<br>podtemplates                                                                                     <span class="hljs-literal">true</span>         PodTemplate<br>replicationcontrollers                     rc                                                    <span class="hljs-literal">true</span>         ReplicationController<br>resourcequotas                             quota                                                 <span class="hljs-literal">true</span>         ResourceQuota<br>secrets                                                                                          <span class="hljs-literal">true</span>         Secret<br>serviceaccounts                            sa                                                    <span class="hljs-literal">true</span>         ServiceAccount<br>services                                   svc                                                   <span class="hljs-literal">true</span>         Service<br>controllerrevisions                                           apps                               <span class="hljs-literal">true</span>         ControllerRevision<br>daemonsets                                 ds                 apps                               <span class="hljs-literal">true</span>         DaemonSet<br>deployments                                deploy             apps                               <span class="hljs-literal">true</span>         Deployment<br>replicasets                                rs                 apps                               <span class="hljs-literal">true</span>         ReplicaSet<br>statefulsets                               sts                apps                               <span class="hljs-literal">true</span>         StatefulSet<br>applications                               app,apps           argoproj.io                        <span class="hljs-literal">true</span>         Application<br>....<br></code></pre></td></tr></table></figure><p>执行获取的结果中，如果资源对应的APIGROUP字段是空，则说明这个资源是属于core api，如果APIGROUP不是空，则说明资源属于对应的这个组，例如场景的控制器DaemonSet、Deployment、StatefulSet都是属于apps这个APIGROUP。</p><p>所以你在写yaml的时候，如果resource配置了这些控制器，就要在APIGROUP配置上apps这个。如果你配置了具有分组信息的API资源，但是没有配置上对应的APIGROUP，那么这个资源权限就不会生效。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Deployment&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>将上面的ClusterRole绑定给子账号，子账号还是没有deployment的权限，因为这里没有指定apiGroups，这里就会把deployment当成核心api，这样是无法在apiserver校验通过。因此这里要想让子账号有deployment权限，在apiGroups加上apps即可。</p><p>但是有的同学就会问，如果我不知道资源的apiGroups是什么怎么办呢？这里可以配置成*，这里会自动匹配到资源所属的apiGroups</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Deployment&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>因此上面这样配置子账号也是有deployment的权限的。如果需要配置多个资源的权限，将同一个apiGroups的配置成一条规则，就像下面一样</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;apps&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Deployment&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;statefulsets&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;namespaces&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;configmaps&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>上面我们把核心api的都放到一个rule，然后apps这个api组的放到一个rule。</p><h2 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h2><p>上面我们说了资源对象的apiGroups，那么k8s中到底有哪些资源对象，如果我只希望给子账号部分的资源的权限，怎么获取这些资源对象呢？</p><p>其实可以通过下面命令获取集群中所有的资源对象</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root@VM-0-13-centos ~]</span># kubectl api-resources<br>NAME                                       SHORTNAMES         APIGROUP                           NAMESPACED   KIND<br>bindings                                                                                         <span class="hljs-literal">true</span>         Binding<br>componentstatuses                          cs                                                    <span class="hljs-literal">false</span>        ComponentStatus<br>configmaps                                 cm                                                    <span class="hljs-literal">true</span>         ConfigMap<br>endpoints                                  ep                                                    <span class="hljs-literal">true</span>         Endpoints<br>events                                     ev                                                    <span class="hljs-literal">true</span>         Event<br>limitranges                                limits                                                <span class="hljs-literal">true</span>         LimitRange<br>namespaces                                 ns                                                    <span class="hljs-literal">false</span>        Namespace<br>nodes                                      no                                                    <span class="hljs-literal">false</span>        Node<br>persistentvolumeclaims                     pvc                                                   <span class="hljs-literal">true</span>         PersistentVolumeClaim<br>persistentvolumes                          pv                                                    <span class="hljs-literal">false</span>        PersistentVolume<br>pods                                       po                                                    <span class="hljs-literal">true</span>         Pod<br>podtemplates                                                                                     <span class="hljs-literal">true</span>         PodTemplate<br>replicationcontrollers                     rc                                                    <span class="hljs-literal">true</span>         ReplicationController<br>resourcequotas                             quota                                                 <span class="hljs-literal">true</span>         ResourceQuota<br>secrets                                                                                          <span class="hljs-literal">true</span>         Secret<br>serviceaccounts                            sa                                                    <span class="hljs-literal">true</span>         ServiceAccount<br>services                                   svc                                                   <span class="hljs-literal">true</span>         Service<br>controllerrevisions                                           apps                               <span class="hljs-literal">true</span>         ControllerRevision<br>daemonsets                                 ds                 apps                               <span class="hljs-literal">true</span>         DaemonSet<br>deployments                                deploy             apps                               <span class="hljs-literal">true</span>         Deployment<br>replicasets                                rs                 apps                               <span class="hljs-literal">true</span>         ReplicaSet<br>statefulsets                               sts                apps                               <span class="hljs-literal">true</span>         StatefulSet<br>applications                               app,apps           argoproj.io                        <span class="hljs-literal">true</span>         Application<br>.........<br></code></pre></td></tr></table></figure><p>通过上面命令可以获取所有的api资源，name字段代表资源的名称。如果你需要给对应资源权限，只需要在role或者clusterrole里面的resources配置上资源的name即可</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;apps&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Deployment&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;statefulsets&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;daemonsets&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>上面实例，我们就给了子用户的基本控制器的权限。</p><p>其实k8s中我们还可以指定某一个或者某几个资源权限给子账号，我们可以在resourceNames字段配置具体某个资源的权限</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> role-grantor<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;rbac.authorization.k8s.io&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;rolebindings&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br>- apiGroups: [<span class="hljs-string">&quot;rbac.authorization.k8s.io&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;clusterroles&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;bind&quot;</span>]<br>  <span class="hljs-meta"># 忽略 resourceNames 意味着允许绑定任何 ClusterRole</span><br><span class="hljs-symbol">  resourceNames:</span> [<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;edit&quot;</span>,<span class="hljs-string">&quot;view&quot;</span>]<br></code></pre></td></tr></table></figure><p>上面的示例，说明这里只给了admin、edit、view这3个ClusterRole的bind权限。</p><p>resource这里其实还有一个Sub-resource的概念，就是单个资源下还可能会分为多个子资源，有时候我们为了更好权限，可能就只给子资源的权限，那么如何查看资源下有哪些子资源呢？</p><p>首先用命令查看api的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-13-centos ~]<span class="hljs-comment"># kubectl api-versions</span><br>acme.cert-manager.io/v1<br>acme.cert-manager.io/v1alpha2<br>acme.cert-manager.io/v1alpha3<br>acme.cert-manager.io/v1beta1<br>admissionregistration.k8s.io/v1<br>admissionregistration.k8s.io/v1beta1<br>agent.k8s.elastic.co/v1alpha1<br>apiextensions.k8s.io/v1<br>apiextensions.k8s.io/v1beta1<br>apiregistration.k8s.io/v1<br>apiregistration.k8s.io/v1beta1<br>apisix.apache.org/v1<br>apisix.apache.org/v2alpha1<br>apisix.apache.org/v2beta1<br>apisix.apache.org/v2beta2<br>apisix.apache.org/v2beta3<br>apm.k8s.elastic.co/v1<br>apm.k8s.elastic.co/v1beta1<br>app.k8s.io/v1beta1<br>application.kubesphere.io/v1alpha1<br>apps/v1<br>.......<br></code></pre></td></tr></table></figure><p>然后用下面命令查看这个apigroup的资源列表，里面会包含所有子资源</p><p>具体api地址可以用这个GET &#x2F;apis&#x2F;GROUP&#x2F;VERSION&#x2F;RESOURCETYPE&#x2F;NAME&#x2F;SUBRESOURCE，注意核心api组的api路径是&#x2F;api，其他api组都是apis开头</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-2</span>-centos ~]<span class="hljs-meta"># kubectl proxy &amp;</span><br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-2</span>-centos ~]<span class="hljs-meta"># curl http://localhost:8001/api/v1/ | jq .resources[].name</span><br><span class="hljs-string">&quot;bindings&quot;</span><br><span class="hljs-string">&quot;componentstatuses&quot;</span><br><span class="hljs-string">&quot;configmaps&quot;</span><br><span class="hljs-string">&quot;endpoints&quot;</span><br><span class="hljs-string">&quot;events&quot;</span><br><span class="hljs-string">&quot;limitranges&quot;</span><br><span class="hljs-string">&quot;namespaces&quot;</span><br><span class="hljs-string">&quot;namespaces/finalize&quot;</span><br><span class="hljs-string">&quot;namespaces/status&quot;</span><br><span class="hljs-string">&quot;nodes&quot;</span><br><span class="hljs-string">&quot;nodes/proxy&quot;</span><br><span class="hljs-string">&quot;nodes/status&quot;</span><br><span class="hljs-string">&quot;persistentvolumeclaims&quot;</span><br><span class="hljs-string">&quot;persistentvolumeclaims/status&quot;</span><br><span class="hljs-string">&quot;persistentvolumes&quot;</span><br><span class="hljs-string">&quot;persistentvolumes/status&quot;</span><br><span class="hljs-string">&quot;pods&quot;</span><br><span class="hljs-string">&quot;pods/attach&quot;</span><br><span class="hljs-string">&quot;pods/binding&quot;</span><br><span class="hljs-string">&quot;pods/eviction&quot;</span><br><span class="hljs-string">&quot;pods/exec&quot;</span><br><span class="hljs-string">&quot;pods/log&quot;</span><br><span class="hljs-string">&quot;pods/portforward&quot;</span><br><span class="hljs-string">&quot;pods/proxy&quot;</span><br><span class="hljs-string">&quot;pods/restart&quot;</span><br><span class="hljs-string">&quot;pods/status&quot;</span><br><span class="hljs-string">&quot;podtemplates&quot;</span><br><span class="hljs-string">&quot;replicationcontrollers&quot;</span><br><span class="hljs-string">&quot;replicationcontrollers/scale&quot;</span><br><span class="hljs-string">&quot;replicationcontrollers/status&quot;</span><br><span class="hljs-string">&quot;resourcequotas&quot;</span><br><span class="hljs-string">&quot;resourcequotas/status&quot;</span><br><span class="hljs-string">&quot;secrets&quot;</span><br><span class="hljs-string">&quot;serviceaccounts&quot;</span><br><span class="hljs-string">&quot;services&quot;</span><br><span class="hljs-string">&quot;services/proxy&quot;</span><br><span class="hljs-string">&quot;services/status&quot;</span><br><br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-2</span>-centos ~]<span class="hljs-meta"># curl http://localhost:8001/apis/apps/v1 | jq .resources[].name</span><br><span class="hljs-string">&quot;controllerrevisions&quot;</span><br><span class="hljs-string">&quot;daemonsets&quot;</span><br><span class="hljs-string">&quot;daemonsets/status&quot;</span><br><span class="hljs-string">&quot;deployments&quot;</span><br><span class="hljs-string">&quot;deployments/scale&quot;</span><br><span class="hljs-string">&quot;deployments/status&quot;</span><br><span class="hljs-string">&quot;replicasets&quot;</span><br><span class="hljs-string">&quot;replicasets/scale&quot;</span><br><span class="hljs-string">&quot;replicasets/status&quot;</span><br><span class="hljs-string">&quot;statefulsets&quot;</span><br><span class="hljs-string">&quot;statefulsets/scale&quot;</span><br><span class="hljs-string">&quot;statefulsets/status&quot;</span><br></code></pre></td></tr></table></figure><p>上面的资源列表中，&#x2F;后面的部分就是代表资源所有的子资源类型。比如statefulsets&#x2F;status，指的是statefulsets的status子资源。</p><h2 id="verbs"><a href="#verbs" class="headerlink" title="verbs"></a>verbs</h2><p>verbs字段的含义是指你能对资源做哪些操作，verbs存在以下几个操作:</p><ul><li>delete </li><li>deletecollection </li><li>get </li><li>list </li><li>patch </li><li>create </li><li>update </li><li>watch</li></ul><p>这些字段的定义在k8s的源码中也有定义，具体代码如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># kubernetes<span class="hljs-regexp">/staging/</span>src<span class="hljs-regexp">/k8s.io/</span>code-generator<span class="hljs-regexp">/cmd/</span>client-gen<span class="hljs-regexp">/generators/u</span>til/tags.go<br><br>var SupportedVerbs = []string&#123;<br><span class="hljs-string">&quot;create&quot;</span>,<br><span class="hljs-string">&quot;update&quot;</span>,<br><span class="hljs-string">&quot;updateStatus&quot;</span>,<br><span class="hljs-string">&quot;delete&quot;</span>,<br><span class="hljs-string">&quot;deleteCollection&quot;</span>,<br><span class="hljs-string">&quot;get&quot;</span>,<br><span class="hljs-string">&quot;list&quot;</span>,<br><span class="hljs-string">&quot;watch&quot;</span>,<br><span class="hljs-string">&quot;patch&quot;</span>,<br><span class="hljs-string">&quot;apply&quot;</span>,<br><span class="hljs-string">&quot;applyStatus&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>源码里面也有具体定义不同类型操作有哪些</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ReadonlyVerbs represents a list of read-only verbs.</span><br><span class="hljs-keyword">var</span> ReadonlyVerbs = []<span class="hljs-built_in">string</span>&#123;<br><span class="hljs-string">&quot;get&quot;</span>,<br><span class="hljs-string">&quot;list&quot;</span>,<br><span class="hljs-string">&quot;watch&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// unsupportedExtensionVerbs is a list of verbs we don&#x27;t support generating</span><br><span class="hljs-comment">// extension client functions for.</span><br><span class="hljs-keyword">var</span> unsupportedExtensionVerbs = []<span class="hljs-built_in">string</span>&#123;<br><span class="hljs-string">&quot;updateStatus&quot;</span>,<br><span class="hljs-string">&quot;deleteCollection&quot;</span>,<br><span class="hljs-string">&quot;watch&quot;</span>,<br><span class="hljs-string">&quot;delete&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// inputTypeSupportedVerbs is a list of verb types that supports overriding the</span><br><span class="hljs-comment">// input argument type.</span><br><span class="hljs-keyword">var</span> inputTypeSupportedVerbs = []<span class="hljs-built_in">string</span>&#123;<br><span class="hljs-string">&quot;create&quot;</span>,<br><span class="hljs-string">&quot;update&quot;</span>,<br><span class="hljs-string">&quot;apply&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// resultTypeSupportedVerbs is a list of verb types that supports overriding the</span><br><span class="hljs-comment">// resulting type.</span><br><span class="hljs-keyword">var</span> resultTypeSupportedVerbs = []<span class="hljs-built_in">string</span>&#123;<br><span class="hljs-string">&quot;create&quot;</span>,<br><span class="hljs-string">&quot;update&quot;</span>,<br><span class="hljs-string">&quot;get&quot;</span>,<br><span class="hljs-string">&quot;list&quot;</span>,<br><span class="hljs-string">&quot;patch&quot;</span>,<br><span class="hljs-string">&quot;apply&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你只希望子账号能查看资源，则只需要赋予查看的动作即可</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;apps&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Deployment&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;statefulsets&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;daemonsets&#x27;</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;get&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;list&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;watch&#x27;</span><br></code></pre></td></tr></table></figure><p>上面的示例说明只能查看基本控制器的资源，无法更新或者新建。</p><p>上面我们编写yaml，每个字段都是通过list的信息编写，其实还有另外一种写法，可以用中括号代表list，具体编写如下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> admin<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;apps&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;Deployment&quot;</span>, <span class="hljs-string">&quot;statefulsets&quot;</span>, <span class="hljs-string">&quot;daemonsets&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;ist&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><p>其实除了编写yaml的方式创建role或者clusterrole，还可以通过命令创建</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrole NAME <span class="hljs-attribute">--verb</span>=verb <span class="hljs-attribute">--resource</span>=resource.group [<span class="hljs-attribute">--resource-name</span>=resourcename] [--dry-<span class="hljs-built_in">run</span>]<br><br>kubectl create clusterrole test2 <span class="hljs-attribute">--verb</span>=list <span class="hljs-attribute">--resource</span>=statefulsets<br></code></pre></td></tr></table></figure><p>这里创建一个clusterrole，只给statefulsets的list权限，如果没有具体的statefulsets是哪个，resource-name字段可以忽略，apiGroup可以不要写，这里会自动匹配资源对应的apiGroup。</p><h1 id="赋予子账号权限"><a href="#赋予子账号权限" class="headerlink" title="赋予子账号权限"></a>赋予子账号权限</h1><p>上面我们已经说了如何编写role或者clusterrole，但是这里只是定义了角色有什么样的权限，实际上还没有给到具体的子账号，如果想让权限在子账号生效，那么还需要依赖于rolebinding和clusterrolebinding，因为这2个会实际将角色绑定到对应子账号上。</p><p>在k8s中，账号其实分为2种，Kubernetes管理的服务账号和普通用户</p><ul><li>服务账号：集群中的ServiceAccount（简称sa）</li><li>普通用户：云厂商的用户</li></ul><p>k8s的每个命名空间默认有一个default的sa，这个sa只有本命名空间的资源访问权限，如果你在工作负载没有指定特定的sa，就会默认绑定default。</p><p>这里我们会经常遇到一个问题，就是在a命名空间下创建了一个pod，但是pod内的进程需要访问集群的其他命名空间资源，会提示没权限，这是因为pod使用的默认default这个sa导致的，解决这个问题，可以将default绑定更高权限的clusterrole或者给pod绑定自定义有权限的sa。</p><p>普通用户一般就是云厂商的账号了，现在云厂商都将自己的cam鉴权和集群rbac进行了整合，云厂商的账号也就都接入了k8s，一般只需要给云上账号绑定role或者clusterrole，就能对云上账号进行权限限制。</p><p>如何给服务账号绑定权限，可以通过kubectl命令来绑定</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 名为 <span class="hljs-keyword">view</span> 的 ClusterRole 中定义的权限授予 &quot;acme&quot; 名字空间中 名为 &quot;myapp&quot; 的服务账户<br><br>kubectl <span class="hljs-keyword">create</span> clusterrolebinding myapp-<span class="hljs-keyword">view</span>-binding <span class="hljs-comment">--clusterrole=view --serviceaccount=acme:myapp</span><br></code></pre></td></tr></table></figure><p>给普通用户绑定用户，一般云厂商都有自己的可视化界面或者教程，可以参考具体的教程，这里我们以腾讯云的tke举例。</p><p>通常步骤是获取子账号的name，然后控制台或者yaml创建ClusterRoleBinding</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1000060xxxxx-ClusterRole</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tke:admin</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroup: rbac.authorization.k8s.io</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1000060xxxxx-1606467779</span><br></code></pre></td></tr></table></figure><p>yaml可以参考上面实例，tke中name的获取可以通过接口DescribeClusterCommonNames，具体参考文档<a href="https://cloud.tencent.com/document/api/457/55721">https://cloud.tencent.com/document/api/457/55721</a></p><p>命令绑定的方式如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding 1000xxxxxx-ClusterRole <span class="hljs-attribute">--clusterrole</span>=test2 <span class="hljs-attribute">--user</span>=1000xxxxx-1612101921<br></code></pre></td></tr></table></figure><p>这里需要注意的是rolebinding和clusterrolebinding都是不支持修改的，如果你想重新给用户绑定权限，需要删除之前旧的rolebinding或clusterrolebinding，然后再新建一个，想腾讯云上控制台支持更新权限操作，后端的逻辑也是先删除旧的，再新建新的。</p>]]></content>
    
    
    <categories>
      
      <category>RBAC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>rbac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务网关APISIX入门</title>
    <link href="/2021/12/29/2021-12-29-Getting-started-with-microservice-gateway-APISIX/"/>
    <url>/2021/12/29/2021-12-29-Getting-started-with-microservice-gateway-APISIX/</url>
    
    <content type="html"><![CDATA[<p>APISIX 是一个云原生、高性能、可扩展的微服务 API 开源网关，基于OpenResty(Nginx+Lua)和etcd来实现，对比传统的API网关，具有动态路由和热插件加载的特点。系统本身自带前端，可以手动配置路由、负载均衡、限速限流、熔断、金丝雀发布、身份验证、可监控等插件，操作方便。可以使用Apache APISIX来处理传统的南北流量，以及服务之间的东西流量。它也可以用作k8s入口控制器，APISIX是用Lua语言开发，语言相对简单，容易上手，同时可以按自己的需求进行系统的二次开发以及开发自己的插件。</p><p>apisix的整体架构图如下</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/1.JPG" alt="upload-image"> </p><p>apisix-ingress-controller是一个Apache APISIX 控制平面组件。目前它服务于Kubernetes集群，具体架构图如下，具体介绍可以参考github文档<a href="https://github.com/apache/apisix-ingress-controller">https://github.com/apache/apisix-ingress-controller</a></p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/2.png" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/2.JPG" alt="upload-image"> </p><p>apisix-ingress-controller是Kubernetes的另一个入口控制器，使用Apache APISIX作为高性能反向代理。</p><p>它是通过使用声明性配置来配置的，例如ApisixRoute， ApisixUpstream， Ingress。所有这些资源都会被监视并转换为Apache APISIX中的相应资源。</p><h1 id="部署apisix"><a href="#部署apisix" class="headerlink" title="部署apisix"></a>部署apisix</h1><p>因为现在是部署apisix到k8s集群上，所以我们这里采用helm方式部署，这里默认将dashboard也部署上，具体部署步骤如下。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># helm repo add apisix https://charts.apiseven.com</span><br><span class="hljs-comment"># helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="hljs-comment"># helm repo update</span><br><span class="hljs-comment"># kubectl create ns ingress-apisix</span><br><span class="hljs-comment"># helm fetch apisix/apisix</span><br><span class="hljs-comment"># tar -zxvf apisix-0.7.2.tgz</span><br><span class="hljs-comment"># helm install apisix ./apisix \</span><br>  --<span class="hljs-built_in">set</span> gateway.<span class="hljs-attribute">type</span>=LoadBalancer \<br>  --<span class="hljs-built_in">set</span> ingress-controller.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span> \<br>  --<span class="hljs-built_in">set</span> dashboard.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span> \<br>  --<span class="hljs-built_in">set</span> etcd.persistence.<span class="hljs-attribute">size</span>=<span class="hljs-string">&quot;10Gi&quot;</span> \<br>  --namespace ingress-apisix \<br>  --<span class="hljs-built_in">set</span> ingress-controller.config.apisix.<span class="hljs-attribute">serviceNamespace</span>=ingress-apisix<br></code></pre></td></tr></table></figure><p>helm部署成功后，会部署etcd、dashboard、apisix-ingress-controller和apisix到集群中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]<span class="hljs-comment"># kubectl get pod,svc -n ingress-apisix</span><br>NAME                                           READY   STATUS    RESTARTS   AGE<br>pod<span class="hljs-regexp">/apisix-848c9485d4-qs4xp                    1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>h<br>pod<span class="hljs-regexp">/apisix-dashboard-75d4485df7-z8g67          1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">20</span>h<br>pod<span class="hljs-regexp">/apisix-etcd-0                              1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>h<br>pod<span class="hljs-regexp">/apisix-etcd-1                              1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>h<br>pod<span class="hljs-regexp">/apisix-etcd-2                              1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>h<br>pod<span class="hljs-regexp">/apisix-ingress-controller-84b76475-zkxj7   1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>h<br><br>NAME                                TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE<br>service<span class="hljs-regexp">/apisix-admin                ClusterIP      172.16.82.101    &lt;none&gt;        9180/</span>TCP            <span class="hljs-number">23</span>h<br>service<span class="hljs-regexp">/apisix-dashboard            ClusterIP      172.16.9.37      &lt;none&gt;        80/</span>TCP              <span class="hljs-number">23</span>h<br>service<span class="hljs-regexp">/apisix-etcd                 ClusterIP      172.16.104.205   &lt;none&gt;        2379/</span>TCP,<span class="hljs-number">2380</span>/TCP   <span class="hljs-number">23</span>h<br>service<span class="hljs-regexp">/apisix-etcd-headless        ClusterIP      None             &lt;none&gt;        2379/</span>TCP,<span class="hljs-number">2380</span>/TCP   <span class="hljs-number">23</span>h<br>service<span class="hljs-regexp">/apisix-gateway              LoadBalancer   172.16.16.160    10.0.21.21     80:31659/</span>TCP        <span class="hljs-number">23</span>h<br>service<span class="hljs-regexp">/apisix-ingress-controller   ClusterIP      172.16.45.68     &lt;none&gt;        80/</span>TCP              <span class="hljs-number">23</span>h<br></code></pre></td></tr></table></figure><p>这里一共创建了6个service，具体作用如下：</p><ul><li>apisix-gateway：处理真实流量</li><li>apisix-admin：它充当处理所有配置更改的控制平面</li><li>apisix-ingress-controller，它公开apisix-ingress-controller的指标</li><li>apisix-etcd、apisix-etcd-headless：并用于 etcd 服务和内部通信</li><li>apisix-dashboard：Apache APISIX前端界面</li></ul><p>这里部署也可以用原生的yaml部署，具体可以参考文档<a href="https://github.com/apache/apisix-ingress-controller/blob/master/docs/en/latest/practices/the-hard-way.md">https://github.com/apache/apisix-ingress-controller/blob/master/docs/en/latest/practices/the-hard-way.md</a></p><h1 id="apisix-dashboard的使用"><a href="#apisix-dashboard的使用" class="headerlink" title="apisix-dashboard的使用"></a>apisix-dashboard的使用</h1><h2 id="配置ingress访问dashboard"><a href="#配置ingress访问dashboard" class="headerlink" title="配置ingress访问dashboard"></a>配置ingress访问dashboard</h2><p>ingress的yaml配置如下，这里我ingress-controller的class配置的是ingress，这里根据实际配置即可</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apisix-ingress</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-apisix</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: apisix.tke.niewx.cn</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apisix-dashboard</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attribute">pathType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ImplementationSpecific</span><br></code></pre></td></tr></table></figure><p>浏览器输入apisix.tke.niewx.cn，会出现登录页面，登录账号密码默认为admin&#x2F;admin</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/3.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/4.JPG" alt="upload-image"> </p><h2 id="嵌入grafana监控图"><a href="#嵌入grafana监控图" class="headerlink" title="嵌入grafana监控图"></a>嵌入grafana监控图</h2><p>apisix的Dashboard是支持嵌入grafana的监控面板，如果你将监控接入了prometheus话，可以在上面配置下grafana的监控面板，这里需要grafana支持嵌入才行，需要在grafana加上如下配置。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/grafana/</span>conf/defaults.ini<br><br><span class="hljs-comment"># 允许嵌入</span><br>allow_embedding = true<br><br><span class="hljs-comment"># 允许匿名登录</span><br>[auth.anonymous]<br>enabled = true<br></code></pre></td></tr></table></figure><p>配置好之后，在apisix的Dashboard配置grafana面板地址即可，这里apisix的监控模板可以在grafana官网搜11719这个id进行配置。</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/5.JPG" alt="upload-image"> </p><h1 id="apisix的入门使用"><a href="#apisix的入门使用" class="headerlink" title="apisix的入门使用"></a>apisix的入门使用</h1><h2 id="apisix-Dashboard配置路由规则访问"><a href="#apisix-Dashboard配置路由规则访问" class="headerlink" title="apisix-Dashboard配置路由规则访问"></a>apisix-Dashboard配置路由规则访问</h2><h3 id="部署springboot-demo"><a href="#部署springboot-demo" class="headerlink" title="部署springboot demo"></a>部署springboot demo</h3><p>可以参考下面yaml部署spiringboot这个demo到k8s集群，后面配置apisix来访问这个服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">springboot</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">springboot</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">springboot</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">tke-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">springboot</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">springboot</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">springboot</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">springboot</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PATH</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JAVA_HOME</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">/usr/local/openjdk-8</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LANG</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">C.UTF-8</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JAVA_VERSION</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">8u292</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MAVEN_HOME</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">/usr/share/maven</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MAVEN_CONFIG</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">/root/.m2</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nwx-test.tencentcloudcr.com/nwx/springboot:springboot-a4799906973669a3f4ece49a26b537e0554c32de</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">springboot</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">springboot</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">tke-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">8080</span><span class="hljs-number">-8080</span><span class="hljs-string">-tcp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">springboot</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">springboot</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br></code></pre></td></tr></table></figure><h3 id="上游"><a href="#上游" class="headerlink" title="上游"></a>上游</h3><p>上游列表包含了已创建的上游服务（即后端服务），可以对上游服务的多个目标节点进行负载均衡和健康检查，这里我们给部署的springboot服务配置一个上游</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/6.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/7.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/8.JPG" alt="upload-image"> </p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>服务由路由中公共的插件配置、上游目标信息组合而成。服务与路由、上游关联，一个服务可对应一组上游节点、可被多条路由绑定。我们新建一个服务，绑定springboot这个上游，并配置basic-auth这个插件</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/9.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/10.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/11.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/12.JPG" alt="upload-image"> </p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>消费者是路由的消费方，形式包括开发者、最终用户、API 调用等。创建消费者时，需绑定至少一个认证类插件。</p><p>如果有多个消费者，这里会根据请求头携带的信息，自动去匹配对应的消费者，这里我们配置2个消费者，分别绑定basic-auth，设置不同的认证信息，然后分别测试看下是否都可以登录</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/13.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/14.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/15.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/16.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/17.JPG" alt="upload-image"> </p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由（Route）是请求的入口点，它定义了客户端请求与服务之间的匹配规则。路由可以与服务（Service）、上游（Upstream）关联，一个服务可对应一组路由，一个路由可以对应一个上游对象（一组后端服务节点），因此，每个匹配到路由的请求将被网关代理到路由绑定的上游服务中。</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/18.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/19.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/20.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/21.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/22.JPG" alt="upload-image"> </p><h3 id="通过apisix-gateway的service访问springboot服务"><a href="#通过apisix-gateway的service访问springboot服务" class="headerlink" title="通过apisix-gateway的service访问springboot服务"></a>通过apisix-gateway的service访问springboot服务</h3><p>apisix-gateway的service是用的clb，这里我们通过clb的vip访问下后端的springboot服务看下。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># curl http://10.0.21.21/</span><br>&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Missing authorization in request&quot;</span>&#125;<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># curl -u admin:admin  http://10.0.21.21/</span><br>you access path <span class="hljs-keyword">is</span> root<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># curl -u root:123456  http://10.0.21.21/</span><br>you access path <span class="hljs-keyword">is</span> root<br></code></pre></td></tr></table></figure><p>从上面的测试结果可以看出，我们的basic-auth生效了，不加账号密码是无法访问服务的，并且这里2个消费者都生效了。</p><h2 id="通过yaml配置路由访问"><a href="#通过yaml配置路由访问" class="headerlink" title="通过yaml配置路由访问"></a>通过yaml配置路由访问</h2><h3 id="配置ApisixRoute提供路由访问"><a href="#配置ApisixRoute提供路由访问" class="headerlink" title="配置ApisixRoute提供路由访问"></a>配置ApisixRoute提供路由访问</h3><p>首先我们部署下httpbin服务到集群中</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl <span class="hljs-built_in">run</span> httpbin <span class="hljs-comment">--image kennethreitz/httpbin --port 80</span><br>kubectl expose pod httpbin <span class="hljs-comment">--port 80</span><br></code></pre></td></tr></table></figure><p>接下来创建一个ApisixRoute用来通过服务访问</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apisix.apache.org/v2beta2</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ApisixRoute</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpserver-route</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: rule1</span><br>    <span class="hljs-attribute">match</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">local.httpbin.org</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/*</span><br>    <span class="hljs-attribute">backends</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">serviceName: httpbin</span><br>         <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>EOF<br></code></pre></td></tr></table></figure><p>然后我们通过Apisix-getaway的入口service来访问httpbin服务</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># curl http://10.0.21.21/headers -H <span class="hljs-string">&#x27;Host: local.httpbin.org&#x27;</span></span><br>&#123;<br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;local.httpbin.org&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.29.0&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;f5da42b3650e5b56&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;9610fc22dd3bbd63f5da42b3650e5b56&quot;</span>,<br>    <span class="hljs-string">&quot;X-Envoy-Internal&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>    <span class="hljs-string">&quot;X-Forwarded-Host&quot;</span>: <span class="hljs-string">&quot;local.httpbin.org&quot;</span><br>  &#125;<br>&#125;<br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># curl http://10.0.21.21/ip -H <span class="hljs-string">&#x27;Host: local.httpbin.org&#x27;</span></span><br>&#123;<br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;10.0.0.10&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置Ingress提供路由访问"><a href="#配置Ingress提供路由访问" class="headerlink" title="配置Ingress提供路由访问"></a>配置Ingress提供路由访问</h3><p>这里配置ingress，apisix-ingress-controller会将规则同步到apisix，一般ingress和ApisixRoute不要同时配制，配置一个即可。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpserver-ingress</span><br>  <span class="hljs-comment"># Note for ingress.networking.k8s.io/v1beta1,</span><br>  <span class="hljs-comment"># you have to carry annotation kubernetes.io/ingress.class,</span><br>  <span class="hljs-comment"># and its value must be matched with the one configured in</span><br>  <span class="hljs-comment"># apisix-ingress-controller, in our case, it&#x27;s apisix.</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apisix</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">host: local.httpbin.org</span><br>      <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>              <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>              <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attribute">pathType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Prefix</span><br></code></pre></td></tr></table></figure><p>配置好，直接通过Apisix-getaway的入口service来访问httpbin服务，这里默认会自动生成一个上游，可以在dashboard上查到</p><p><img src="/img/2021-12-29-Getting-started-with-microservice-gateway-APISIX/23.JPG" alt="upload-image"> </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># curl http://10.0.21.21/ip -H <span class="hljs-string">&#x27;Host: local.httpbin.org&#x27;</span></span><br>&#123;<br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;10.0.0.10&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题</strong></p><p>使用apisix-ingress-controller的过程中，遇到一些问题，就是发现配置了ingress规则，但是apisix-ingress-controller没有将配置同步到apisix，查看日志一直报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">failed <span class="hljs-keyword">to</span> list route <span class="hljs-keyword">in</span> APISIX: <span class="hljs-keyword">Get</span> http://apisix-<span class="hljs-keyword">admin</span>.ingress-apisix.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span>:<span class="hljs-number">9180</span>/apisix/<span class="hljs-keyword">admin</span>/routes: context canceled<br></code></pre></td></tr></table></figure><p>这个时候我怀疑是哪里配置不对，检查了下apisix-ingress-controller的configmap配置，发现ingress_version配置的networking&#x2F;v1，但是我集群版本是1.18，不支持networking&#x2F;v1，配置的ingress版本是networking&#x2F;v1beta1，导致controller一直同步配置不成功，</p><p>ingress_version的配置是什么含义呢，这里查看了下对应的配置说明文档<a href="https://github.com/apache/apisix-ingress-controller/blob/master/conf/config-default.yaml">https://github.com/apache/apisix-ingress-controller/blob/master/conf/config-default.yaml</a></p><p>ingress_version: 支持的入口 api 组版本，可以是 “networking&#x2F;v1beta1” 、”networking&#x2F;v1”（适用于 Kubernetes 版本 v1.19.0 或更高版本），以及extensions&#x2F;v1beta1”，默认值为”networking&#x2F;v1”。</p><p>由于我是用的默认部署，所以是networking&#x2F;v1，但是我集群不支持networking&#x2F;v1，所以这里需要将configmap的ingress_version改成networking&#x2F;v1beta1，然后重建下apisix-ingress-controller的pod即可。</p>]]></content>
    
    
    <categories>
      
      <category>apisix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>apisix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s通过elk+kafka采集业务日志</title>
    <link href="/2021/12/22/2021-12-22-k8s-collects-business-logs-through-elk-kafka/"/>
    <url>/2021/12/22/2021-12-22-k8s-collects-business-logs-through-elk-kafka/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何在k8s集群中通过filebeat采集日志，然后通过kafka将日志发给logstash，logstash存到elasticsearch，最后再通过kibana进行展示检索。</p><h1 id="部署kafka"><a href="#部署kafka" class="headerlink" title="部署kafka"></a>部署kafka</h1><p>部署kafka我们通过helm直接部署到k8s集群中，如果是使用的tke集群，直接将应用部署到tke集群中即可。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">helm repo add bitnami https:<span class="hljs-comment">//charts.bitnami.com/bitnami</span><br>helm install my-release bitnami/kafka<br></code></pre></td></tr></table></figure><h1 id="创建kafka主题"><a href="#创建kafka主题" class="headerlink" title="创建kafka主题"></a>创建kafka主题</h1><p>因为kafka是通过pod启动的，如果没有kafka客户端工具，可以直接登录pod创建主题。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sh kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.187</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">1</span> <span class="hljs-attr">--partitions</span> <span class="hljs-number">3</span> <span class="hljs-attr">--topic</span> log-nginx  <br>sh kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.187</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">1</span> <span class="hljs-attr">--partitions</span> <span class="hljs-number">3</span> <span class="hljs-attr">--topic</span> log-k8s   <br>sh kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--delete</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.187</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--topic</span> log<br>sh kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.187</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--list</span><br>sh kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.187</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--describe</span> <span class="hljs-attr">--topic</span> log<br>sh kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.187</span>:<span class="hljs-number">9092</span> <span class="hljs-attr">--topic</span> log <span class="hljs-attr">--from-beginning</span><br></code></pre></td></tr></table></figure><p>这里可以参考上面命令创建主题，还有一些其他常用的命令。</p><h1 id="部署filebeat"><a href="#部署filebeat" class="headerlink" title="部署filebeat"></a>部署filebeat</h1><p>这里不是filebeat的方式有2种，一种是通过sidecar的方式采集单个业务的日志，还有一种是通过DaemonSet的方式采集所有的容器日志。</p><h2 id="sidecar部署filebeat"><a href="#sidecar部署filebeat" class="headerlink" title="sidecar部署filebeat"></a>sidecar部署filebeat</h2><p>这里我们通过sidecar的方式部署，采集下nginx日志，具体部署可以参考文档<a href="https://www.niewx.cn/mybook/k8s/userd-filebeat-as-sidecar-collect-log.html">https://www.niewx.cn/mybook/k8s/userd-filebeat-as-sidecar-collect-log.html</a></p><p>这里我们需要改动下filebeat的配置，文档中是投递到es，现在我们要投递到kafka。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">filebeat.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-attribute">filebeat.inputs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">type: log</span><br>        <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/var/log/nginx/access.log</span><br>        <span class="hljs-comment"># tags: [&quot;access&quot;]</span><br>        <span class="hljs-attribute">fields</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">www</span><br>          <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-access</span><br>        <span class="hljs-attribute">fields_under_root</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><br>    <span class="hljs-attribute">setup.ilm.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br>    <span class="hljs-attribute">setup.template.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nginx-access&quot;</span><br>    <span class="hljs-attribute">setup.template.pattern</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nginx-access-*&quot;</span><br><br>    <span class="hljs-attribute">output</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">kafka</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;10.0.0.187:9092&quot;]</span><br>        <span class="hljs-attribute">topic</span><span class="hljs-punctuation">:</span> <span class="hljs-string">log-nginx</span><br>        <span class="hljs-attribute">max_message_bytes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5242880</span><br>        <span class="hljs-attribute">partition.round_robin</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">reachable_only</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">keep-alive</span><span class="hljs-punctuation">:</span> <span class="hljs-string">120</span><br>        <span class="hljs-attribute">required_acks</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br><br>    <span class="hljs-comment">#  output.elasticsearch:</span><br>    <span class="hljs-comment">#  hosts: [&#x27;elasticsearch-master.log:9200&#x27;]</span><br>    <span class="hljs-comment">#  index: &quot;nginx-access-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat-nginx-config</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">log</span><br></code></pre></td></tr></table></figure><h2 id="DaemonSet部署filebeat"><a href="#DaemonSet部署filebeat" class="headerlink" title="DaemonSet部署filebeat"></a>DaemonSet部署filebeat</h2><p>通过DaemonSet的方式部署，采集的是节点容器日志目录，具体的yaml配置如下。</p><p>configmap的配置如下，filebeat.autodiscover是filebeat的自动发现功能，对于满足条件的，进行特殊的配置处理，具体的配置方式可以参考官网文档<a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html">https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html</a></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">filebeat.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-attribute">filebeat.autodiscover</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">providers</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">type: kubernetes</span><br>          <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;NODE_NAME&#125;</span><br>          <span class="hljs-attribute">hints.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>          <span class="hljs-attribute">templates</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">condition:</span><br>                <span class="hljs-attribute">equals</span><span class="hljs-punctuation">:</span><br>                  <span class="hljs-attribute">kubernetes.namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tke-test</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">condition:</span><br>                <span class="hljs-attribute">equals</span><span class="hljs-punctuation">:</span><br>                  <span class="hljs-attribute">kubernetes.container.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>              <span class="hljs-attribute">config</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">type: docker</span><br>                  <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">/var/log/containers/*-$&#123;data.kubernetes.container.id&#125;.log</span><br>    <span class="hljs-attribute">processors</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">add_cloud_metadata:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">add_host_metadata:</span><br>    <span class="hljs-attribute">cloud.id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;ELASTIC_CLOUD_ID&#125;</span><br>    <span class="hljs-attribute">cloud.auth</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;ELASTIC_CLOUD_AUTH&#125;</span><br>    <span class="hljs-attribute">output</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">kafka</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;10.0.0.187:9092&quot;]</span><br>        <span class="hljs-attribute">topic</span><span class="hljs-punctuation">:</span> <span class="hljs-string">log-k8s</span><br>        <span class="hljs-attribute">max_message_bytes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5242880</span><br>        <span class="hljs-attribute">partition.round_robin</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">reachable_only</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">keep-alive</span><span class="hljs-punctuation">:</span> <span class="hljs-string">120</span><br>        <span class="hljs-attribute">required_acks</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat-config</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">log</span><br></code></pre></td></tr></table></figure><p>DaemonSet的yaml参考下面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">log</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/filebeat.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-e</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NODE_NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">spec.nodeName</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">elastic/filebeat:7.4.2</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>        <span class="hljs-attr">resources:</span> &#123;&#125;<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/filebeat.yml</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">filebeat.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/filebeat/data</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirstWithHostNet</span><br>      <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">filebeat</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">filebeat</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">384</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/filebeat-data</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">DirectoryOrCreate</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br></code></pre></td></tr></table></figure><h1 id="部署elasticsearch"><a href="#部署elasticsearch" class="headerlink" title="部署elasticsearch"></a>部署elasticsearch</h1><p>部署elasticsearch采用helm的方式部署</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">helm repo <span class="hljs-built_in">add</span> elastic <span class="hljs-keyword">https</span>://helm.elastic.co<br>helm install <span class="hljs-comment">--name elasticsearch elastic/elasticsearch</span><br></code></pre></td></tr></table></figure><h1 id="部署logstash"><a href="#部署logstash" class="headerlink" title="部署logstash"></a>部署logstash</h1><p>logstash的作用主要是将kafka的日志存到elasticsearch里面。</p><p>logstash的启动配置如下，这里是多个kafka主题投递到elasticsearch中，input配置topics_pattern，elasticsearch的索引生成加上kafka的主题名称。</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs puppet">apiVersion: v1<br>data:<br>  logstash.conf: |-<br>    <span class="hljs-keyword">input</span> &#123;<br>      kafka &#123;<br>         <span class="hljs-attr">bootstrap_servers</span> =&gt; <span class="hljs-string">&quot;10.0.0.187:9092&quot;</span><br>         <span class="hljs-attr">codec</span> =&gt; json &#123; <span class="hljs-attr">charset</span> =&gt; <span class="hljs-string">&quot;UTF-8&quot;</span> &#125;<br>         <span class="hljs-keyword">consumer_threads</span> =&gt; 1<br>         topics_pattern =&gt; [<span class="hljs-string">&quot;log-.*&quot;</span>]<br>       &#125;<br>     &#125;<br><br>    output&#123;<br>      <span class="hljs-keyword">elasticsearch</span> &#123;<br>        <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;http://elasticsearch-master:9200&quot;</span>]<br>        <span class="hljs-attr">codec</span> =&gt; json<br>        <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;%&#123;[@metadata][topic]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>        &#125;<br>      &#125;<br>kind: ConfigMap<br>metadata:<br>  labels:<br>    type: logstash<br>  name: logstash-conf<br>  namespace: log<br></code></pre></td></tr></table></figure><p>deployment的yaml文件参考如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">log</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>  <span class="hljs-attribute">strategy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">rollingUpdate</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">maxSurge</span><span class="hljs-punctuation">:</span> <span class="hljs-string">25%</span><br>      <span class="hljs-attribute">maxUnavailable</span><span class="hljs-punctuation">:</span> <span class="hljs-string">25%</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">srv</span><span class="hljs-punctuation">:</span> <span class="hljs-string">srv-logstash</span><br>        <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">logstash</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-f</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/logstash_c/logstash.conf</span><br>        <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: XPACK_MONITORING_ELASTICSEARCH_HOSTS</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://elasticsearch-master:9200</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">docker.io/kubeimages/logstash:7.9.3</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 5044</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">beats</span><br>          <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>        <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/logstash_c/</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /usr/share/logstash/config/</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">config-yml-volume</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/localtime</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">timezone</span><br>      <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>      <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30</span><br>      <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">configMap:</span><br>          <span class="hljs-attribute">defaultMode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">420</span><br>          <span class="hljs-attribute">items</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">key: logstash.conf</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash.conf</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash-conf</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">config-volume</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hostPath:</span><br>          <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/etc/localtime</span><br>          <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">timezone</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">configMap:</span><br>          <span class="hljs-attribute">defaultMode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">420</span><br>          <span class="hljs-attribute">items</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">key: logstash.yml</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash.yml</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash-yml</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">config-yml-volume</span><br></code></pre></td></tr></table></figure><h1 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h1><p>部署kibana采用下面yaml部署</p><p>configmap配置如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kibana.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-attribute">elasticsearch.hosts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://elasticsearch-master:9200</span><br>    <span class="hljs-attribute">server.host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-attribute">server.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nwx-kibana</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">log</span><br></code></pre></td></tr></table></figure><p>Deployment的yaml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nwx-kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">log</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.6.2</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5601</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/kibana/config/kibana.yml</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">kibana.yml</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">nwx-kibana</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br></code></pre></td></tr></table></figure><h1 id="kibana检索日志"><a href="#kibana检索日志" class="headerlink" title="kibana检索日志"></a>kibana检索日志</h1><p>创建索引，然后再检索日志，能正常搜到日志则说明采集成功</p><p><img src="/img/2021-12-22-k8s-collects-business-logs-through-elk-kafka/1.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-22-k8s-collects-business-logs-through-elk-kafka/2.JPG" alt="upload-image"> </p><p><img src="/img/2021-12-22-k8s-collects-business-logs-through-elk-kafka/3.JPG" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Log</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elk</tag>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何配置nginx-ingress日志格式</title>
    <link href="/2021/11/11/2021-11-11-How-to-configure-nginx-ingress-log-format/"/>
    <url>/2021/11/11/2021-11-11-How-to-configure-nginx-ingress-log-format/</url>
    
    <content type="html"><![CDATA[<p>nginx-ingress controller的日志格式如果不配置，默认就是nginx的日志格式，并且不指定都是标准输出，如果你想方便后续对日志的收集，你需要配置将nginx-ingress controller日志按照指定格式输出到对应日志文件。</p><h2 id="配置日志输出到日志文件"><a href="#配置日志输出到日志文件" class="headerlink" title="配置日志输出到日志文件"></a>配置日志输出到日志文件</h2><p>修改nginx-ingress controller的configmap配置，添加下面的日志路径配置。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">access-<span class="hljs-built_in">log</span>-path: <span class="hljs-regexp">/var/</span><span class="hljs-built_in">log</span>/nginx/nginx_access.<span class="hljs-built_in">log</span><br>error-<span class="hljs-built_in">log</span>-path: <span class="hljs-regexp">/var/</span><span class="hljs-built_in">log</span>/nginx/nginx_error.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="配置日志格式"><a href="#配置日志格式" class="headerlink" title="配置日志格式"></a>配置日志格式</h2><p>nginx-ingress指定自定义日志格式需要在configmap加上log-format-upstream配置</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">log</span>-<span class="hljs-keyword">format</span>-upstream: $remote_addr - $remote_user <br></code></pre></td></tr></table></figure><p>日志格式可以配置成普通格式和json格式，对应的自动如下表说明。</p><table><thead><tr><th>字段说明</th><th>描述</th></tr></thead><tbody><tr><td>$proxy_protocol_addr</td><td>启用代理协议时的远程地址</td></tr><tr><td>$remote_addr</td><td>客户端的源 IP 地址</td></tr><tr><td>$remote_user</td><td>用户名与基本身份验证一起提供</td></tr><tr><td>$time_local</td><td>当地时间在通用日志格式中</td></tr><tr><td>$request</td><td>完整原始请求行</td></tr><tr><td>$status</td><td>响应状态</td></tr><tr><td>$body_bytes_sent</td><td>发送给客户端的字节数，不包括响应头</td></tr><tr><td>$http_referer</td><td>Referer 标头的值</td></tr><tr><td>$http_user_agent</td><td>User-Agent 标头的值</td></tr><tr><td>$request_length</td><td>请求长度（包括请求行、头和请求主体）</td></tr><tr><td>$request_time</td><td>从客户端读取第一个字节以来的时间已过</td></tr><tr><td>$proxy_upstream_name</td><td>上游的名称。格式是upstream-<namespace>-<service name>-<service port></td></tr><tr><td>$proxy_alternative_upstream_name</td><td>替代上游的名称。格式是upstream-<namespace>-<service name>-<service port></td></tr><tr><td>$upstream_addr</td><td>上游服务器的 IP 地址和端口（或通往域插座的路径）。如果在请求处理过程中联系了多个服务器，则其地址按逗号进行分离。</td></tr><tr><td>$upstream_response_length</td><td>从上游服务器获得的响应长度</td></tr><tr><td>$upstream_response_time</td><td>花费在接收上游服务器响应上的时间为秒数，分辨率为毫秒</td></tr><tr><td>$upstream_status</td><td>从上游服务器获得的响应状态代码</td></tr><tr><td>$req_id</td><td>请求的随机生成 ID</td></tr><tr><td>$namespace</td><td>ingress的命名空间</td></tr><tr><td>$ingress_name</td><td>ingress名称</td></tr><tr><td>$service_name</td><td>service名称</td></tr><tr><td>$service_port</td><td>service名称端口</td></tr></tbody></table><p>普通日志格式配置方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] <span class="hljs-string">&quot;<span class="hljs-variable">$request</span>&quot;</span> <span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> <span class="hljs-string">&quot;<span class="hljs-variable">$http_referer</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$http_user_agent</span>&quot;</span> <span class="hljs-variable">$request_length</span> <span class="hljs-variable">$request_time</span> [<span class="hljs-variable">$proxy_upstream_name</span>] [<span class="hljs-variable">$proxy_alternative_upstream_name</span>] [<span class="hljs-variable">$upstream_addr</span>] [<span class="hljs-variable">$upstream_response_length</span>] [<span class="hljs-variable">$upstream_response_time</span>] [<span class="hljs-variable">$upstream_status</span>] <span class="hljs-variable">$req_id</span> <span class="hljs-variable">$namespace</span> <span class="hljs-variable">$ingress_name</span>  <span class="hljs-variable">$service_name</span> <span class="hljs-variable">$service_port</span><br></code></pre></td></tr></table></figure><p>json格式的配置方式</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">&#x27;&#123;<span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$time_local</span>&quot;</span>,<span class="hljs-string">&quot;remote_addr&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$remote_addr</span>&quot;</span>,<span class="hljs-string">&quot;x-forward-for&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_add_x_forwarded_for</span>&quot;</span>,<span class="hljs-string">&quot;request_id&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$req_id</span>&quot;</span>,<span class="hljs-string">&quot;remote_user&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$remote_user</span>&quot;</span>,<span class="hljs-string">&quot;bytes_sent&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$body_bytes_sent</span>&quot;</span>,<span class="hljs-string">&quot;request_time&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$request_time</span>&quot;</span>,<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$status</span>&quot;</span>,<span class="hljs-string">&quot;vhost&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$host</span>&quot;</span>,<span class="hljs-string">&quot;request_proto&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$server_protocol</span>&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$uri</span>&quot;</span>,<span class="hljs-string">&quot;request_query&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$args</span>&quot;</span>,<span class="hljs-string">&quot;request_length&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$request_length</span>&quot;</span>,<span class="hljs-string">&quot;duration&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$request_time</span>&quot;</span>,<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$request_method</span>&quot;</span>,<span class="hljs-string">&quot;http_referrer&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$http_referer</span>&quot;</span>,<span class="hljs-string">&quot;http_user_agent&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$http_user_agent</span>&quot;</span>, <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$namespace</span>&quot;</span>, <span class="hljs-string">&quot;ingress_name&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$ingress_name</span>&quot;</span>,<span class="hljs-string">&quot;service_name&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$service_name</span>&quot;</span>,<span class="hljs-string">&quot;service_port&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$service_port</span>&quot;</span>&#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ingress</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx-ingress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Nginx-Ingress暴露TCP和udp服务</title>
    <link href="/2021/11/09/2021-11-09-Use-Nginx-Ingress-to-expose-TCP-and-udp-services/"/>
    <url>/2021/11/09/2021-11-09-Use-Nginx-Ingress-to-expose-TCP-and-udp-services/</url>
    
    <content type="html"><![CDATA[<p>nginx-ingress在k8s中通常是作为7层的反向代理，其实nginx-ingress也是可以代理tcp和udp的服务，nginx-ingrss控制器的启动参数默认有提供–tcp-services-configmap和–udp-services-configmap这2个，nginx-ingres控制器会不断的watch这2个configmap的配置，然后配置到后端的&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。</p><h1 id="tcp和udp配置方法"><a href="#tcp和udp配置方法" class="headerlink" title="tcp和udp配置方法"></a>tcp和udp配置方法</h1><p>configmap的配置格式如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">port: &lt;<span class="hljs-keyword">namespace</span>/<span class="hljs-symbol">service</span> <span class="hljs-symbol">name</span>&gt;:&lt;<span class="hljs-symbol">service</span> <span class="hljs-symbol">port</span>&gt;<br></code></pre></td></tr></table></figure><p>下面我们配置下configmap来暴露集群的dns服务和thanos-query服务，dns服务是udp协议，thanos-query服务是tcp协议</p><p>tcp-services-configmap配置如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&quot;9000&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">thanos/thanos-query:9090</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-ingress-nginx-tcp</span><br>    <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-ingress-nginx-tcp</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-ingress-nginx-tcp</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>udp-services-configmap配置如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&quot;53&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dnsmasq/dnsmasq:53</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-ingress-nginx-udp</span><br>    <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-ingress-nginx-udp</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-ingress-nginx-udp</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>配置好之后，看下pod内的nginx.conf是如何配置的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># TCP services                       </span><br>                                                   <br><span class="hljs-built_in"> server </span>&#123;   <br>         preread_by_lua_block &#123;       <br>                 ngx.var.<span class="hljs-attribute">proxy_upstream_name</span>=<span class="hljs-string">&quot;tcp-thanos-thanos-query-9090&quot;</span>;<br>         &#125;     <br>                       <br>         listen                  9000;<br>                               <br>         proxy_timeout           600s;                                <br>         proxy_pass              upstream_balancer;<br>                               <br> &#125;                                                                    <br>          <br> # UDP services                    <br>                                           <br><span class="hljs-built_in"> server </span>&#123;                                          <br>         preread_by_lua_block &#123;    <br>                 ngx.var.<span class="hljs-attribute">proxy_upstream_name</span>=<span class="hljs-string">&quot;udp-dnsmasq-dnsmasq-53&quot;</span>;<br>         &#125;                                         <br>                                      <br>         listen                  53 udp;<br>                                        <br>         proxy_responses         1;     <br>         proxy_timeout           600s;<br>         proxy_pass              upstream_balancer;<br> &#125;                                <br></code></pre></td></tr></table></figure><p>配置好configmap后，还需要在service加上端口配置，这里需要注意下，配置的udp和tcp只是在nginx进行了转发配置，但是不会自动在service加上端口映射，如果要通过service访问需要手动加上点开配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">ingress-ingress-nginx-controller</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">ingress-ingress-nginx-controller</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-ingress-nginx-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32113</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32452</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">9000</span><span class="hljs-string">-tcp</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31491</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9000</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">53</span><span class="hljs-string">-udp</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31492</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">udp</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">53</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">ingress-ingress-nginx-controller</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">ingress-ingress-nginx-controller</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><h1 id="验证端口"><a href="#验证端口" class="headerlink" title="验证端口"></a>验证端口</h1><p>这里可以通过service验证，也可以直接访问后端pod的9000端口和53端口是否能访问到后端服务。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># k get pod -A -o wide | grep ngress-ingress-nginx-controller</span><br>kube-system                    ingress-ingress-nginx-controller<span class="hljs-number">-844</span>b559b5d-hpcn2         <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">74</span>d     <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.237</span>   <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>                &lt;none&gt;           <span class="hljs-number">1</span>/<span class="hljs-number">1</span><br><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># nslookup  cls-xxxx.ccs.tencent-cloud.com 10.0.1.237</span><br><span class="hljs-symbol">Server:</span>         <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.237</span><br><span class="hljs-symbol">Address:</span>        <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.237</span><span class="hljs-meta">#53</span><br><br><span class="hljs-symbol">Name:</span>   <span class="hljs-keyword">cls</span>-xxxx.ccs.tencent-cloud.com<br><span class="hljs-symbol">Address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.60</span><br><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># curl 10.0.1.237:9000</span><br>&lt;a href=<span class="hljs-string">&quot;/graph&quot;</span>&gt;Found&lt;/a&gt;.<br></code></pre></td></tr></table></figure><p>经过而是直接通过pod的53端口可以解析我们的域名，通过9000端口可以访问到thanos-query服务，说明用nginx-ingress暴露tcp和udp服务配置成功。</p>]]></content>
    
    
    <categories>
      
      <category>Ingress</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx-ingress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何通过PrometheusAlert发生告警</title>
    <link href="/2021/11/01/2021-11-01-How-to-get-an-alert-through-PrometheusAlert/"/>
    <url>/2021/11/01/2021-11-01-How-to-get-an-alert-through-PrometheusAlert/</url>
    
    <content type="html"><![CDATA[<p>PrometheusAlert是开源的运维告警中心消息转发系统，支持主流的监控系统Prometheus、Zabbix，日志系统Graylog2，Graylog3、数据可视化系统Grafana、SonarQube。阿里云-云监控，以及所有支持WebHook接口的系统发出的预警消息，支持将收到的这些消息发送到钉钉，微信，email，飞书，腾讯短信，腾讯电话，阿里云短信，阿里云电话，华为短信，百度云短信，容联云电话，七陌短信，七陌语音，TeleGram，百度Hi(如流)等。</p><p>github地址：<a href="https://github.com/feiyu563/PrometheusAlert">https://github.com/feiyu563/PrometheusAlert</a></p><p><img src="/img/2021-11-01-How-to-get-an-alert-through-PrometheusAlert/it.png" alt="upload-image"></p><p>PrometheusAlert支持多种告警源配置，一般我们在prometheus配置告警发送都是通过alertmanager，下面我们来说说用alertmanager调PrometheusAlert的webhook来发生告警。我们的k8s环境是腾讯云的tke集群，prometheus监控服务用的腾讯云云原生监控服务。云原生监控服务用的自建的alertmanager来发送告警。如果云原生服务需要用自建的alertmanager，要么在创建时候配置好，还有就是提工单让后台进行配置修改。</p><h1 id="部署PrometheusAlert"><a href="#部署PrometheusAlert" class="headerlink" title="部署PrometheusAlert"></a>部署PrometheusAlert</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl create ns monitoring</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -n monitoring -f</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https://raw.githubusercontent.com/feiyu563/PrometheusAlert/master/example/kubernetes/PrometheusAlert-Deployment.yaml</span><br></code></pre></td></tr></table></figure><p>参考上面命令直接部署PrometheusAlert到k8s集群中即可。</p><h1 id="部署alertmanager配置webhook"><a href="#部署alertmanager配置webhook" class="headerlink" title="部署alertmanager配置webhook"></a>部署alertmanager配置webhook</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">alertmanager</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitor</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">alertmanager</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">alertmanager</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">alertmanager</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--config.file=/etc/alertmanager/config.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.path=/alertmanager/data</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">prom/alertmanager:v0.15.3</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/alertmanager</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">alertcfg</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">qcloudregistrykey</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">511</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">alertcfg</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">config.yml:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    global:</span><br><span class="hljs-string">      resolve_timeout: 5m</span><br><span class="hljs-string"></span><br>    <span class="hljs-attr">route:</span><br>      <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>      <span class="hljs-attr">group_interval:</span> <span class="hljs-string">1m</span><br>      <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">1m</span><br>      <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;prometheusalert-all&#x27;</span><br>    <span class="hljs-attr">receivers:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;prometheusalert-all&#x27;</span><br>       <span class="hljs-attr">webhook_configs:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;http://prometheus-alert-center.monitoring:8080/prometheus/router?email=xxxx@163.com&amp;ddurl=https://oapi.dingtalk.com/robot/send?access_token=xxxxx&#x27;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitor</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">service.kubernetes.io/qcloud-loadbalancer-internal-subnetid:</span> <span class="hljs-string">subnet-xxxx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitor</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">9093</span><span class="hljs-number">-9093</span><span class="hljs-string">-tcp</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32552</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9093</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9093</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">alertmanager</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span><br></code></pre></td></tr></table></figure><p>这里我们用一个内网的clb暴露alertmanager服务是为了给云原生监控实例调用。下面我们来讲讲不通告警渠道怎么配置。</p><h2 id="邮件告警发送"><a href="#邮件告警发送" class="headerlink" title="邮件告警发送"></a>邮件告警发送</h2><p>邮件告警发送，需要在prometheus-alert-center-conf这个configmap中修改如下配置，配置服务器邮件发生地址。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#---------------------↓邮件配置-----------------------</span><br><span class="hljs-comment">#是否开启邮件</span><br><span class="hljs-attr">open-email</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#邮件发件服务器地址</span><br><span class="hljs-attr">Email_host</span>=smtp.<span class="hljs-number">163</span>.com<br><span class="hljs-comment">#邮件发件服务器端口</span><br><span class="hljs-attr">Email_port</span>=<span class="hljs-number">25</span><br><span class="hljs-comment">#邮件帐号</span><br><span class="hljs-attr">Email_user</span>=nwx_qxxxx@<span class="hljs-number">163</span>.com<br><span class="hljs-comment">#邮件密码</span><br><span class="hljs-attr">Email_password</span>=xxxxxx<br><span class="hljs-comment">#邮件标题</span><br><span class="hljs-attr">Email_title</span>=运维告警<br><span class="hljs-comment">#默认发送邮箱</span><br><span class="hljs-comment">#Default_emails=niewx_qdlg@163.com</span><br></code></pre></td></tr></table></figure><p>具体的webhook如下，多个邮箱用逗号分隔开</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>prometheus-alert-center.monitoring:<span class="hljs-number">8080</span><span class="hljs-regexp">/prometheus/</span>router?email=xxxx@<span class="hljs-number">163</span>.com,xxxx1@<span class="hljs-number">163</span>.com<br></code></pre></td></tr></table></figure><h2 id="钉钉告警发送"><a href="#钉钉告警发送" class="headerlink" title="钉钉告警发送"></a>钉钉告警发送</h2><p>钉钉告警发送，需要在prometheus-alert-center-conf配置开启钉钉告警发送，默认配置开启的</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#是否开启钉钉告警通道,可同时开始多个通道0为关闭,1为开启</span><br>   <span class="hljs-attr">open-dingding</span>=<span class="hljs-number">1</span><br>   <span class="hljs-comment">#默认钉钉机器人地址</span><br>   <span class="hljs-attr">ddurl</span>=https://oapi.dingtalk.com/robot/send?access_token=xxxxx<br>   <span class="hljs-comment">#是否开启 @所有人(0为关闭,1为开启)</span><br>   <span class="hljs-attr">dd_isatall</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后参考文档<a href="https://github.com/feiyu563/PrometheusAlert/blob/master/doc/readme/dingding.md">https://github.com/feiyu563/PrometheusAlert/blob/master/doc/readme/dingding.md</a>配置机器人，获取对应token。</p><p>具体的webhook如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>prometheus-alert-center.monitoring:<span class="hljs-number">8080</span><span class="hljs-regexp">/prometheus/</span>router?ddurl=https:<span class="hljs-regexp">//</span>oapi.dingtalk.com<span class="hljs-regexp">/robot/</span>send?access_token=xxxxx<br></code></pre></td></tr></table></figure><h2 id="企业微信告警发送"><a href="#企业微信告警发送" class="headerlink" title="企业微信告警发送"></a>企业微信告警发送</h2><p>企业微信告警发送，需要在prometheus-alert-center-conf配置开启企业微信告警发送，默认配置开启的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#是否开启微信告警通道,可同时开始多个通道0为关闭,1为开启</span><br>open-weixin=<span class="hljs-number">1</span><br><span class="hljs-comment">#默认企业微信机器人地址</span><br>wxurl=https:<span class="hljs-regexp">//</span>qyapi.weixin.qq.com<span class="hljs-regexp">/cgi-bin/</span>webhook/send?key=xxxxx<br></code></pre></td></tr></table></figure><p>然后参考文档<a href="https://github.com/feiyu563/PrometheusAlert/blob/master/doc/readme/wechat.md">https://github.com/feiyu563/PrometheusAlert/blob/master/doc/readme/wechat.md</a>配置企业微信机器人，并获取key。</p><p>具体的webhook如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>prometheus-alert-center.monitoring:<span class="hljs-number">8080</span><span class="hljs-regexp">/prometheus/</span>router?wxurl=https:<span class="hljs-regexp">//</span>qyapi.weixin.qq.com<span class="hljs-regexp">/cgi-bin/</span>webhook/send?key=xxxxx<br></code></pre></td></tr></table></figure><p>如果你想同时发送告警到不同渠道，可以将webhook的url拼接起来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>prometheus-alert-center.monitoring:<span class="hljs-number">8080</span><span class="hljs-regexp">/prometheus/</span>router?email=xxxx@<span class="hljs-number">163</span>.com,xxxx1@<span class="hljs-number">163</span>.com&amp;ddurl=https:<span class="hljs-regexp">//</span>oapi.dingtalk.com<span class="hljs-regexp">/robot/</span>send?access_token=xxxxx&amp;wxurl=https:<span class="hljs-regexp">//</span>qyapi.weixin.qq.com<span class="hljs-regexp">/cgi-bin/</span>webhook/send?key=xxxxx<br></code></pre></td></tr></table></figure><h1 id="测试告警发送"><a href="#测试告警发送" class="headerlink" title="测试告警发送"></a>测试告警发送</h1><p><img src="/img/2021-11-01-How-to-get-an-alert-through-PrometheusAlert/Snipaste_2021-11-01_15-49-08.JPG" alt="upload-image"></p><p>配置告警的时候需要注意一点，告警的信息需要配置在annotations的description字段中，配置在告警内容是不发送的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">groups:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">节点发生驱逐告警</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">evited-alert</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">kube_pod_status_phase&#123;cluster=&quot;cls-xxxxx&quot;,phase=&quot;Failed&quot;&#125;</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">kube_pod_status_phase</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;集群发生了驱逐，被驱逐pod为<span class="hljs-template-variable">&#123;&#123;$labels.namespace&#125;&#125;</span>命名空间下的<span class="hljs-template-variable">&#123;&#123;$labels.pod&#125;&#125;</span>这个pod&quot;</span>  <span class="hljs-comment">#告警信息</span><br><br></code></pre></td></tr></table></figure><p>当我们的集群中存在被驱逐的pod后就可以收到告警信息，我这里配置了钉钉和邮件告警，具体效果可以看下图。</p><p><img src="/img/2021-11-01-How-to-get-an-alert-through-PrometheusAlert/Snipaste_2021-11-01_15-56-41.JPG" alt="upload-image"></p><p><img src="/img/2021-11-01-How-to-get-an-alert-through-PrometheusAlert/Snipaste_2021-11-01_15-59-48.JPG" alt="upload-image"></p><p>我这里只讲了最常用的用webhook访问发送告警，其实PrometheusAlert还有多种告警方式，具体的使用方法参考github上的文档说明。</p>]]></content>
    
    
    <categories>
      
      <category>Monitor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
      <tag>alertmanager</tag>
      
      <tag>PrometheusAlert</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s中pod的容器日志存储说明</title>
    <link href="/2021/10/29/2021-10-29-Container-log-storage-description-of-pod-in-k8s/"/>
    <url>/2021/10/29/2021-10-29-Container-log-storage-description-of-pod-in-k8s/</url>
    
    <content type="html"><![CDATA[<p>使用k8s的过程中，我们的服务都会打印大量的日志，为了方便查看排查定位问题，大部分时候会将日志打印在标准输出，但是有的时候为了方便日志的切割和收集，会将日志写到容器内的某个目录下日志文件。如果我们的日志会占用大量的磁盘空间，有可能还会外挂存储来将日志持久化。</p><p>容器内的业务日志有多种输出方式，其实不同日志输出方式，最终都是存在了pod所在的宿主机上，不同的方式对应了宿主机不同的目录，下面我们来详细说明下docker和containerd这2中运行时不同日志输出所在的宿主机目录。</p><p>当你了解了日志输出方式和宿主机目录的一一对应，那么后续遇到节点上磁盘空间被占满的问题，你就可以快速清理对应的日志文件来释放磁盘空间。</p><p>这里具体说明都是没有对docker或者containerd的存储目录进行数据盘挂载，如果有进行数据盘挂载，则根据实际挂载目录查找即可。</p><h1 id="docker日志存储目录说明"><a href="#docker日志存储目录说明" class="headerlink" title="docker日志存储目录说明"></a>docker日志存储目录说明</h1><p>这里举例说明docker和kubelet的默认存储目录是&#x2F;var&#x2F;lib&#x2F;docker和&#x2F;var&#x2F;lib&#x2F;kubelet</p><h2 id="日志标准输出"><a href="#日志标准输出" class="headerlink" title="日志标准输出"></a>日志标准输出</h2><p>容器的标准输出日志默认是在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;[container_id]&#x2F;，标准输出日志默认会自动切割轮转，日志切割配置可以查看&#x2F;etc&#x2F;docker&#x2F;daemon.json文件的log-opts配置</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-0-3-centos 6035c5820cf52c7684057d70b4f0f206deb82bad8b931a2e63473ca0f4206384]<span class="hljs-comment"># docker ps | grep 6035c5820cf5</span><br>6035c5820cf5        quay.io/prometheus/prometheus                                  &quot;/bin/prometheus --w…&quot;   <span class="hljs-number"> 5 </span>days ago          Up<span class="hljs-number"> 5 </span>days                               k8s_prometheus_prometheus-tke-cls-b3mg1p92-0_prom-rl9st2ym_87269735-b041-41e9-b85f-aef897ac6200_1<br>[root@VM-0-3-centos 6035c5820cf52c7684057d70b4f0f206deb82bad8b931a2e63473ca0f4206384]<span class="hljs-comment"># cd /var/lib/docker/containers/6035c5820cf52c7684057d70b4f0f206deb82bad8b931a2e63473ca0f4206384/</span><br>[root@VM-0-3-centos 6035c5820cf52c7684057d70b4f0f206deb82bad8b931a2e63473ca0f4206384]<span class="hljs-comment"># ll</span><br>total 141544<br>-rw-r-----<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 44903243 </span>Oct<span class="hljs-number"> 29 </span>14:33 6035c5820cf52c7684057d70b4f0f206deb82bad8b931a2e63473ca0f4206384-json.log<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 100000151 </span>Oct<span class="hljs-number"> 27 </span>19:49 6035c5820cf52c7684057d70b4f0f206deb82bad8b931a2e63473ca0f4206384-json.log.1<br>drwx------<span class="hljs-number"> 2 </span>root root     <span class="hljs-number"> 4096 </span>Oct<span class="hljs-number"> 23 </span>21:00 checkpoints<br>-rw-------<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 8224 </span>Oct<span class="hljs-number"> 23 </span>21:00 config.v2.json<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 2625 </span>Oct<span class="hljs-number"> 23 </span>21:00 hostconfig.json<br>drwx------<span class="hljs-number"> 2 </span>root root     <span class="hljs-number"> 4096 </span>Oct<span class="hljs-number"> 23 </span>21:00 mounts<br></code></pre></td></tr></table></figure><h2 id="日志写入容器内日志文件"><a href="#日志写入容器内日志文件" class="headerlink" title="日志写入容器内日志文件"></a>日志写入容器内日志文件</h2><p>如果日志写到容器日志文件，但是没有进行持久化挂载，则会存在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;[merge_id]&#x2F;merged&#x2F;[log_path]，具体merge_id，我们可以inspect容器id查找到，而log_path则是你业务日志在容器内的存储路径，下面我们查找下nginx的日志。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@node1 ~]<span class="hljs-comment"># docker inspect ba62275eab393f88a01c57573a3672e220254eeb693d7f2176a8cd9577b58850 | grep merged</span><br>                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/merged&quot;,<br>[root@node1 ~]<span class="hljs-comment"># cd /var/lib/docker/overlay2/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/merged</span><br>[root@node1 merged]<span class="hljs-comment">#</span><br>[root@node1 merged]<span class="hljs-comment"># cd var/log/nginx/</span><br>[root@node1 nginx]<span class="hljs-comment"># ll</span><br>total 2597864<br>lrwxrwxrwx<span class="hljs-number"> 1 </span>101<span class="hljs-number"> 101 </span>       <span class="hljs-number"> 11 </span>Nov <span class="hljs-number"> 3 </span><span class="hljs-number"> 2020 </span>access.log -&gt; /dev/stdout<br>lrwxrwxrwx<span class="hljs-number"> 1 </span>101<span class="hljs-number"> 101 </span>       <span class="hljs-number"> 11 </span>Nov <span class="hljs-number"> 3 </span><span class="hljs-number"> 2020 </span>error.log -&gt; /dev/stderr<br>-rw-r--r--<span class="hljs-number"> 1 </span>101<span class="hljs-number"> 101 </span>2660179942 Oct<span class="hljs-number"> 29 </span>15:01 nginx_access.log<br>-rw-r--r--<span class="hljs-number"> 1 </span>101<span class="hljs-number"> 101 </span>        <span class="hljs-number"> 0 </span>Oct<span class="hljs-number"> 10 </span>19:58 nginx_error.log<br></code></pre></td></tr></table></figure><p>有的时候我们只能发现&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2目录占用了大量的磁盘空间，那么我们怎么找到是哪个容器占用了呢？首先查找&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2目录下的大文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@node1 ~]# <span class="hljs-keyword">find</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2 -<span class="hljs-keyword">size</span> +<span class="hljs-number">1</span>G -exec du -sm &#123;&#125; \; | <span class="hljs-keyword">sort</span> -nr<br><span class="hljs-number">2538</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/m</span>erged<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>nginx_access.log<br><span class="hljs-number">2538</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/</span>diff<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>nginx_access.log<br></code></pre></td></tr></table></figure><p>找到对应的merge_id后，我们在查找到对应的容器id，采用下面命令，当能查看到多行信息，则对应的id是容器id，这里容器id是ba62275eab39</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node1</span> ~]<span class="hljs-meta"># docker ps | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -n 1 -I &#123;&#125; -- sh -c <span class="hljs-string">&quot;echo &#123;&#125; &amp;&amp; docker inspect &#123;&#125; |grep 136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0 -C 1&quot;</span></span><br>CONTAINER<br>faf1856fda4e<br><span class="hljs-number">1</span>fe6f4025507<br>ba62275eab39<br>            <span class="hljs-string">&quot;Data&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;LowerDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0-init/diff:/var/lib/docker/overlay2/a4cdd5dc7a462904471de2d056570ed838b2317e4b59fd5613992196df9ef17f/diff:/var/lib/docker/overlay2/d514eb8d6219065c3a7332c6a0438e0ca041569da38de6fa7a14b84c3b1e5e4e/diff:/var/lib/docker/overlay2/1e0e34d059ac42479185c87e1ad5922cd77d78ab6a53bdd14b45636570146577/diff:/var/lib/docker/overlay2/aa4d53898ff012bfdcbdb453fcea67a9946cb403b27905b586eaf12977f29384/diff:/var/lib/docker/overlay2/dace2fb0d20cf856aa8d9ae16211d7f0e15ad7e0ad4ac87b278c0a14b134f432/diff:/var/lib/docker/overlay2/c1d91f716865e4367007d3d9fe3d19719f70a7befff1a629a074e79b835052f0/diff:/var/lib/docker/overlay2/fbbfb23d2eccb88bb79657a94f06dbde76249256097cf7bdc231df667c8ab6c9/diff:/var/lib/docker/overlay2/07e7cbb11f955c3edbcc5ac66cf966ef3da16d4c336a2022652c1468177934fb/diff:/var/lib/docker/overlay2/a2858bf53ea2c668ccd89bd9a87217513f8c5ef2c1e70ed35885400b883d7e1f/diff:/var/lib/docker/overlay2/ddea490967639aaaabd3bbaa7872be77d642b4e34203672bbc585d76d074d3dd/diff:/var/lib/docker/overlay2/f4e7cae5b5e70b89da96684df655f8f5a830dc751b68f638c2890b44cc6da891/diff:/var/lib/docker/overlay2/891e829575951f1e7a52fea41a138beea7684ca9e723244b84f87f82954f49ca/diff:/var/lib/docker/overlay2/1a2310107ffb59198ed6ff553f320f08f69d11bd7f7bb384f57761eb88852d9b/diff:/var/lib/docker/overlay2/1a75669e46cf247de83f5e74a1205cd1ecaaa13fb14cc6ef0fe7216f06b66786/diff:/var/lib/docker/overlay2/36fff493df92c24d07d46a50ab63d0132c9c18ab22d48b33ed2a1a85fcd05fd6/diff&quot;</span>,<br>                <span class="hljs-string">&quot;MergedDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/merged&quot;</span>,<br>                <span class="hljs-string">&quot;UpperDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/diff&quot;</span>,<br>                <span class="hljs-string">&quot;WorkDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/136d009b75834ed0867f8e27107c4a945f6c921a629b929ebdecaf11a13629c0/work&quot;</span><br>            &#125;,<br></code></pre></td></tr></table></figure><p>找到容器id后，进入容器的var&#x2F;log&#x2F;nginx&#x2F;目录清理日志即可。</p><p>上面的方法是查找容器存储下的大文件，然后根据大文件所在目录找到对应的容器，但是有的时候不一定是有单个文件大，而是文件夹比较大，里面文件数量比较多，导致占用了大量的磁盘空间，这个时候该怎么查找呢？这个时候我们就只能一层层找到这个大文件夹，下面我们来说明下。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# du -hm --max-depth=<span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib/docker  | <span class="hljs-keyword">sort</span> -rn | head -<span class="hljs-number">10</span><br><span class="hljs-number">44790</span>   <span class="hljs-regexp">/var/</span>lib/docker<br><span class="hljs-number">39315</span>   <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<br><span class="hljs-number">5420</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>containers<br><span class="hljs-number">55</span>      <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/im</span>age<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>volumes<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>trust<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>tmp<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>swarm<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>runtimes<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>plugins<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# du -hm --max-depth=<span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2  | <span class="hljs-keyword">sort</span> -rn | head -<span class="hljs-number">10</span><br><span class="hljs-number">39315</span>   <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<br><span class="hljs-number">2659</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">611</span>ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639<br><span class="hljs-number">1499</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">5</span>ca45180744594cd01643aada607b351dc9a1f011d2807752d2f55f470892a9b<br><span class="hljs-number">1314</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/bbc80fd995e6b0aa97bc1326a72a4f4049bae33407a0c34c39561d31f8c17598<br><span class="hljs-number">1253</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/c84ef307e9147365d7a73d160ce898cc70ef93cf1f69be94d7598dd0dc456ae5<br><span class="hljs-number">1191</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/d5409735e53b1efc9902b72a3b170d4a523c233b807f2f4954ca3cca1cc42e49<br><span class="hljs-number">1046</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">9</span>ec2b9732d5b64a9a03223d870b4aec520af2b6845ab3c391c2fa95f1e45fe2e<br><span class="hljs-number">1046</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">69975</span>a1ecf6f7345acf6e97c946966468c69ae850ebd2a63b63ed8f0cd598412<br><span class="hljs-number">1009</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">693</span>ad529427a4d135b064e2e428c6b269ac3017e1ce0f61faaa49de9cc7a0d81<br><span class="hljs-number">733</span>     <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/cd41e5558d7f317da34280b64e3f446f225139a0c82f59e047af9be8610a1009<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# du -hm --max-depth=<span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">611</span>ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639  | <span class="hljs-keyword">sort</span> -rn | head -<span class="hljs-number">10</span><br><span class="hljs-number">2659</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2/<span class="hljs-number">611</span>ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639<br><span class="hljs-number">1408</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<br><span class="hljs-number">1251</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/</span>diff<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/</span>work<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# du -hm --max-depth=<span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/  | <span class="hljs-keyword">sort</span> -rn | head -<span class="hljs-number">10</span><br><span class="hljs-number">1408</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/<br><span class="hljs-number">1249</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/tmp<br><span class="hljs-number">141</span>     <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/usr<br><span class="hljs-number">13</span>      <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/home<br><span class="hljs-number">4</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/var<br><span class="hljs-number">3</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/etc<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/sys<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/run<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/root<br><span class="hljs-number">1</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged/proc<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# du -hm --max-depth=<span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>  | <span class="hljs-keyword">sort</span> -rn | head -<span class="hljs-number">10</span><br><span class="hljs-number">1249</span>    <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span><br><span class="hljs-number">861</span>     <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>nvd-data835905766<br><span class="hljs-number">388</span>     <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/u</span>buntu-cve-tracker540878348<br><span class="hljs-number">2</span>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>alpine-secdbUpdater788692628<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# du -hm --max-depth=<span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>nvd-data835905766/  | <span class="hljs-keyword">sort</span> -rn | head -<span class="hljs-number">10</span><br><span class="hljs-number">861</span>     <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>nvd-data835905766/<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# cd <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>nvd-data835905766/<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>nvd-data835905766]# ls  -alhS<br>total <span class="hljs-number">861</span>M<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span> <span class="hljs-number">104</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2020</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">82</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2019</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">81</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2021</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">74</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2018</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">70</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2017</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">50</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2016</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">44</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2013</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">39</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2014</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">39</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2012</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">39</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> <span class="hljs-number">2015</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">34</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2011</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">34</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2010</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">32</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2008</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">32</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2009</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">30</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2006</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">28</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2007</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">21</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2002</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">20</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2005</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span>  <span class="hljs-number">13</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2004</span>.json<br>-rw-r--r-- <span class="hljs-number">1</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span> <span class="hljs-number">5.8</span>M Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span> <span class="hljs-number">2003</span>.json<br>drwx------ <span class="hljs-number">2</span> <span class="hljs-number">10000</span> <span class="hljs-number">10000</span> <span class="hljs-number">4.0</span>K Dec <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">11</span> .<br>drwxrwxrwt <span class="hljs-number">1</span> root  root  <span class="hljs-number">4.0</span>K Dec <span class="hljs-number">29</span> <span class="hljs-number">00</span>:<span class="hljs-number">20</span> ..<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos ~]# docker ps | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -n <span class="hljs-number">1</span> -I &#123;&#125; -- sh -c <span class="hljs-string">&quot;echo &#123;&#125; &amp;&amp; docker inspect &#123;&#125; |grep 611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639 -C 1&quot;</span><br>CONTAINER<br>Error: No such object: CONTAINER<br><span class="hljs-number">9</span>d2cd497b1cb<br>e99ce9b11191<br><span class="hljs-number">6</span>bdca3204a62<br>b6dfe23c31e9<br>            <span class="hljs-string">&quot;Data&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;LowerDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639-init/diff:/var/lib/docker/overlay2/180f09778c2e17d1ffd73aa5be45244ee414f4423bcc2f81e460c52b9a3ca90b/diff:/var/lib/docker/overlay2/bd60ea9822fbf0169cc9ed116e7c82a9d25268995508c37c012b2940eb7fa014/diff:/var/lib/docker/overlay2/cadc2d6308ef60788eb40b05ad5417f3ea89fb96aaa0028b80ccfe80202da748/diff:/var/lib/docker/overlay2/2dc66700322a704c5fce138e66d27ee38ee324eaa2c0c837e2fad842751cf645/diff:/var/lib/docker/overlay2/f0200441bebd98aaa57af2d9ddbbc4c7e8d9c8b982c14f50226e8841ea143380/diff:/var/lib/docker/overlay2/a9b06a4f8b8e8828ac142f9cf10c5c61d3771474ef0fe083fde2caeb2380d3df/diff:/var/lib/docker/overlay2/265bcad9bbbf55480038501a18dd7e03fda4848268dce29203302672fbecd5b3/diff&quot;</span>,<br>                <span class="hljs-string">&quot;MergedDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/merged&quot;</span>,<br>                <span class="hljs-string">&quot;UpperDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/diff&quot;</span>,<br>                <span class="hljs-string">&quot;WorkDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/work&quot;</span><br>            &#125;,<br>......<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-centos <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/611ff12eef289600cb685a8c995b24c42c387e99a6e0f0d7b73d29596a1db639/m</span>erged<span class="hljs-regexp">/tmp/</span>nvd-data835905766]# docker ps | <span class="hljs-keyword">grep</span> b6dfe23c31e9<br>b6dfe23c31e9        goharbor<span class="hljs-regexp">/clair-photon                                          &quot;./</span>docker-entrypoint…<span class="hljs-string">&quot;    9 days ago          Up 9 days                               k8s_clair_harbor-1611818628-harbor-clair-7d89b99d5f-bcpgr_harbor_2f758cf3-e945-44c3-8a5b-700bf2187100_0</span><br></code></pre></td></tr></table></figure><p>通过上面步骤，我们就找到占用了大量磁盘空间的目录和对应的容器是哪个，后面我们可以进入到对应的容器，自行清理不需要的文件即可</p><h2 id="日志写入容器内日志文件并挂载"><a href="#日志写入容器内日志文件并挂载" class="headerlink" title="日志写入容器内日志文件并挂载"></a>日志写入容器内日志文件并挂载</h2><p>有的时候，我们会将日志写到日志文件并且进行挂载</p><h3 id="挂载到emptyDir"><a href="#挂载到emptyDir" class="headerlink" title="挂载到emptyDir"></a>挂载到emptyDir</h3><p>根据容器id，inspect查找empty目录，如果你是将容器目录挂载到emptyDir，对应的宿主机目录是在&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods下，一般这个目录不会外挂数据盘，如果你的日志占用磁盘空间比较大，不建议挂载emptyDir，因为会将&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods所在磁盘空间占满，一般是系统盘，从而触发kubelet的驱逐。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-29</span>-centos ~]# docker inspect 9d75f541f36db3a00514aff399e4455dee8dacbf912fa3b72afa675f505255fc | grep empty<br>                &quot;/var/lib/kubelet/pods/24fe94a1<span class="hljs-string">-295</span>b<span class="hljs-string">-4979</span><span class="hljs-string">-8</span>d3f<span class="hljs-string">-735671782172</span>/volumes/kubernetes.io~empty-dir/vol:/data&quot;,<br>                &quot;Source&quot;: &quot;/var/lib/kubelet/pods/24fe94a1<span class="hljs-string">-295</span>b<span class="hljs-string">-4979</span><span class="hljs-string">-8</span>d3f<span class="hljs-string">-735671782172</span>/volumes/kubernetes.io~empty-dir/vol&quot;,<br><br></code></pre></td></tr></table></figure><h3 id="挂载到pvc"><a href="#挂载到pvc" class="headerlink" title="挂载到pvc"></a>挂载到pvc</h3><p>如果容器内文件挂载的是pvc，pvc包含cbs，nfs，或者云上的对象存储，这里最终就是将对应的目录挂载到cbs，cfs，对象存储。这里根据cfs的服务端ip，cbs_id，cos实例名称用df查找目录即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@node1 ~]<span class="hljs-comment"># df -h | grep disk</span><br><span class="hljs-regexp">/dev/</span>vdb         <span class="hljs-number">20</span>G  <span class="hljs-number">9.7</span>G  <span class="hljs-number">9.9</span>G  <span class="hljs-number">50</span>% <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/kubelet/</span>plugins<span class="hljs-regexp">/kubernetes.io/</span>qcloud-cbs<span class="hljs-regexp">/mounts/</span>disk-xxxxx<br><span class="hljs-regexp">/dev/</span>vdg        <span class="hljs-number">9.8</span>G   <span class="hljs-number">37</span>M  <span class="hljs-number">9.7</span>G   <span class="hljs-number">1</span>% <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/kubelet/</span>plugins<span class="hljs-regexp">/kubernetes.io/</span>qcloud-cbs<span class="hljs-regexp">/mounts/</span>disk-xxxxx<br><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">29</span>-centos ~]<span class="hljs-comment"># df -h | grep nwx-test-1</span><br>cosfs           <span class="hljs-number">256</span>T     <span class="hljs-number">0</span>  <span class="hljs-number">256</span>T   <span class="hljs-number">0</span>% <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/kubelet/</span>pods<span class="hljs-regexp">/99e9e539-28c2-4da0-9571-37e6dc57dcf4/</span>volumes<span class="hljs-regexp">/kubernetes.io~csi/</span>nwx-test-<span class="hljs-number">1</span>/mount<br><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">2</span>-centos ~]<span class="hljs-comment"># df -h | grep 10.0.0.11</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.11</span>:<span class="hljs-regexp">/      10G   32M   10G   1% /</span>var<span class="hljs-regexp">/lib/</span>kubelet<span class="hljs-regexp">/pods/</span>d5298dfa-<span class="hljs-number">0</span>b52-<span class="hljs-number">4</span>d11-a34e-e68c7aa8a29e<span class="hljs-regexp">/volumes/</span>kubernetes.io~nfs/vol<br><br></code></pre></td></tr></table></figure><h1 id="containerd日志存储目录说明"><a href="#containerd日志存储目录说明" class="headerlink" title="containerd日志存储目录说明"></a>containerd日志存储目录说明</h1><p>这里举例说明containerd和kubelet的默认存储目录是&#x2F;run&#x2F;containerd和&#x2F;var&#x2F;lib&#x2F;kubelet</p><h2 id="日志标准输出-1"><a href="#日志标准输出-1" class="headerlink" title="日志标准输出"></a>日志标准输出</h2><p>首先根据容器id用inspect查找具体的logPath，然后对应的目录就是容器标准输出在宿主机存储目录，containerd标准输出的宿主机路径是&#x2F;var&#x2F;log&#x2F;pods&#x2F;下，因此用elk采集containerd的标准输出日志需要采集宿主机的&#x2F;var&#x2F;log&#x2F;pods&#x2F;路径。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos ~]# crictl inspect 0375c0e679d57 | grep logPath<br>    &quot;logPath&quot;: &quot;/var/log/pods/kube-system_tke-log-agent-k82vc_fd92c0e4-e08d<span class="hljs-string">-46</span>d5<span class="hljs-string">-9</span>a52-e6e1c4f29f3d/loglistener/0.log&quot;<br>[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos ~]# cd /var/log/pods/kube-system_tke-log-agent-k82vc_fd92c0e4-e08d<span class="hljs-string">-46</span>d5<span class="hljs-string">-9</span>a52-e6e1c4f29f3d/loglistener<br>[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos loglistener]# ls<br>0.log<br></code></pre></td></tr></table></figure><h2 id="日志写入容器内日志文件-1"><a href="#日志写入容器内日志文件-1" class="headerlink" title="日志写入容器内日志文件"></a>日志写入容器内日志文件</h2><p>查找容器id，然后根据容器id，用df查找到容器的rootfs目录，再进入对应的目录即可。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">17</span>-<span class="hljs-number">16</span>-centos vol]# crictl ps | <span class="hljs-keyword">grep</span> go-test<br><span class="hljs-number">2380</span>b4524eebf       <span class="hljs-number">57</span>b1777ee4b87       About a minute ago   Running             go-test             <span class="hljs-number">0</span>                   <span class="hljs-number">10389</span>f95f91b6<br>[root@VM-<span class="hljs-number">17</span>-<span class="hljs-number">16</span>-centos vol]# df -h | <span class="hljs-keyword">grep</span> <span class="hljs-number">2380</span>b4524eebf<br>overlay          <span class="hljs-number">50</span>G   <span class="hljs-number">14</span>G   <span class="hljs-number">34</span>G  <span class="hljs-number">30</span>% <span class="hljs-regexp">/run/</span>containerd<span class="hljs-regexp">/io.containerd.runtime.v2.task/</span>k8s.io<span class="hljs-regexp">/2380b4524eebf3455a79442204bf68efb0325f466429238bc4338a8eccea28c8/</span>rootfs<br>[root@VM-<span class="hljs-number">17</span>-<span class="hljs-number">16</span>-centos vol]# cd <span class="hljs-regexp">/run/</span>containerd<span class="hljs-regexp">/io.containerd.runtime.v2.task/</span>k8s.io<span class="hljs-regexp">/2380b4524eebf3455a79442204bf68efb0325f466429238bc4338a8eccea28c8/</span>rootfs<br>[root@VM-<span class="hljs-number">17</span>-<span class="hljs-number">16</span>-centos rootfs]# cd data/<br>[root@VM-<span class="hljs-number">17</span>-<span class="hljs-number">16</span>-centos data]# ls<br>go.log<br></code></pre></td></tr></table></figure><h2 id="日志写入容器内日志文件并挂载-1"><a href="#日志写入容器内日志文件并挂载-1" class="headerlink" title="日志写入容器内日志文件并挂载"></a>日志写入容器内日志文件并挂载</h2><h3 id="挂载到emptyDir-1"><a href="#挂载到emptyDir-1" class="headerlink" title="挂载到emptyDir"></a>挂载到emptyDir</h3><p>根据容器id，inspect查找empty目录，如果你是将容器目录挂载到emptyDir，对应的宿主机目录是在&#x2F;var&#x2F;lib&#x2F;kubelet下，一般这个目录不会外挂数据盘，如果你的日志占用磁盘空间比较大，不建议挂载emptyDir，因为会将&#x2F;var&#x2F;lib&#x2F;kubelet所在磁盘空间占满，一般是系统盘，从而触发kubelet的驱逐。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos loglistener]# crictl ps | grep go-test<br>43fd8249aba3b       57b1777ee4b87       2 hours ago         Running             go-test             0                   b4eccdc968348<br>[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos data]# crictl inspect 43fd8249aba3b | grep empty<br>        &quot;hostPath&quot;: &quot;/var/lib/kubelet/pods/7d32e2e6<span class="hljs-string">-169</span>a<span class="hljs-string">-40</span>c3-b36e<span class="hljs-string">-4</span>ce22e248776/volumes/kubernetes.io~empty-dir/vol&quot;,<br>          &quot;host_path&quot;: &quot;/var/lib/kubelet/pods/7d32e2e6<span class="hljs-string">-169</span>a<span class="hljs-string">-40</span>c3-b36e<span class="hljs-string">-4</span>ce22e248776/volumes/kubernetes.io~empty-dir/vol&quot;<br>          &quot;source&quot;: &quot;/var/lib/kubelet/pods/7d32e2e6<span class="hljs-string">-169</span>a<span class="hljs-string">-40</span>c3-b36e<span class="hljs-string">-4</span>ce22e248776/volumes/kubernetes.io~empty-dir/vol&quot;,<br>[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos data]# cd /var/lib/kubelet/pods/7d32e2e6<span class="hljs-string">-169</span>a<span class="hljs-string">-40</span>c3-b36e<span class="hljs-string">-4</span>ce22e248776/volumes/kubernetes.io~empty-dir/vol<br>[root@VM<span class="hljs-string">-17</span><span class="hljs-string">-16</span>-centos vol]# ls<br>go.log<br></code></pre></td></tr></table></figure><h3 id="挂载到pvc-1"><a href="#挂载到pvc-1" class="headerlink" title="挂载到pvc"></a>挂载到pvc</h3><p>如果容器内文件挂载的是pvc，pvc包含cbs，nfs，或者云上的对象存储，这里最终就是将对应的目录挂载到cbs，cfs，对象存储。这里根据cfs的服务端ip，cbs_id，cos实例名称用df查找目录即可。和docker的方式是一致的。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>containers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弹性集群收集nginx-ingress controller访问日志</title>
    <link href="/2021/09/14/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/"/>
    <url>/2021/09/14/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/</url>
    
    <content type="html"><![CDATA[<p>弹性集群是无需购买节点就可以部署服务的k8s服务，是现在服务部署在k8s的主流方案，相比于传统的k8s集群，弹性集群隔离性更好，成本更低，但是也存在一些限制，不能部署DaemonSet、不能使用nodeport等。</p><p>下面我们实践下在腾讯云的eks上部署nginx-ingress并采集nginx-ingress controller访问日志到es，最终通过kibana来查询。其实腾讯云也提供了日志采集服务cls，也可以用云上提供的方案。如果你想节约成本，并且习惯了es查日志，可以用文章中的方案。</p><h1 id="部署nginx-ingress"><a href="#部署nginx-ingress" class="headerlink" title="部署nginx-ingress"></a>部署nginx-ingress</h1><p>部署nginx-ingress，我们可以通过helm直接部署，腾讯云的应用市场也有helm包可以一键部署，这里我们用helm一键部署到我们的eks集群中</p><p><img src="/img/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/Snipaste_2021-09-14_20-01-16.png" alt="upload-image"></p><p><img src="/img/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/Snipaste_2021-09-14_20-00-33.png" alt="upload-image"></p><p>这里部署的nginx-ingress没有configmap，手动创建一个configmap来全局配置nginx-ingress，将访问日志写到日志文件，日志格式为json格式，后续如果需要新增ingress全局配置也可以在这个configmap进行修改。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs julia">apiVersion: v1<br>data:<br>  access-log-path: /var/log/nginx/nginx_access.log<br>  error-log-path: /var/log/nginx/nginx_error.log<br>  log-format-upstream: &#x27;&#123;<span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$time_iso8601</span>&quot;</span>, <span class="hljs-string">&quot;remote_addr&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_protocol_addr</span>&quot;</span>,<br>    <span class="hljs-string">&quot;x-forward-for&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_add_x_forwarded_for</span>&quot;</span>, <span class="hljs-string">&quot;request_id&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$req_id</span>&quot;</span>, <span class="hljs-string">&quot;remote_user&quot;</span>:<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$remote_user</span>&quot;</span>, <span class="hljs-string">&quot;bytes_sent&quot;</span>: $bytes_sent, <span class="hljs-string">&quot;request_time&quot;</span>: $request_time, <span class="hljs-string">&quot;status&quot;</span>:$status,<br>    <span class="hljs-string">&quot;vhost&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$host</span>&quot;</span>, <span class="hljs-string">&quot;request_proto&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$server_protocol</span>&quot;</span>, <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$uri</span>&quot;</span>, <span class="hljs-string">&quot;request_query&quot;</span>:<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$args</span>&quot;</span>, <span class="hljs-string">&quot;request_length&quot;</span>: $request_length, <span class="hljs-string">&quot;duration&quot;</span>: $request_time,<span class="hljs-string">&quot;method&quot;</span>:<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$request_method</span>&quot;</span>, <span class="hljs-string">&quot;http_referrer&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$http_referer</span>&quot;</span>, <span class="hljs-string">&quot;http_user_agent&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$http_user_agent</span>&quot;</span>&#125;&#x27;<br>kind: ConfigMap<br>metadata:<br>  name: eks-nginx-ingress-controller<br>  namespace: nginx-ingress<br></code></pre></td></tr></table></figure><p>修改了configmap后重建nginx-ingress controller的pod即可。nginx-ingress的具体使用可以参考文档<a href="https://cloud.tencent.com/developer/article/1768089">https://cloud.tencent.com/developer/article/1768089</a></p><h1 id="采用filebeat作为sidecar采集日志到es"><a href="#采用filebeat作为sidecar采集日志到es" class="headerlink" title="采用filebeat作为sidecar采集日志到es"></a>采用filebeat作为sidecar采集日志到es</h1><p>通常的日志是在集群通过DaemonSet部署采集agent，然后采集节点的容器日志目录，由于eks集群不支持DaemonSet的部署，所以我们这里通过sidecar的方式来采集pod里面的日志。</p><h2 id="部署elasticsearch集群"><a href="#部署elasticsearch集群" class="headerlink" title="部署elasticsearch集群"></a>部署elasticsearch集群</h2><p>es集群的部署，这里就不详细说明了，可以通过helm快速部署，也可以参考文档<a href="https://www.niewx.cn/2021/06/12/use-operator-to-quickly-deploy-es-cluster-in-k8s/">https://www.niewx.cn/2021/06/12/use-operator-to-quickly-deploy-es-cluster-in-k8s/</a>通过eck部署带有鉴权的es集群</p><h2 id="配置filebeat采集configmap"><a href="#配置filebeat采集configmap" class="headerlink" title="配置filebeat采集configmap"></a>配置filebeat采集configmap</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">filebeat.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-attribute">filebeat.inputs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">type: log</span><br>        <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/var/log/nginx/nginx_access.log</span><br>        <span class="hljs-comment"># tags: [&quot;access&quot;]</span><br>        <span class="hljs-attribute">fields</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>          <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-access</span><br>        <span class="hljs-attribute">fields_under_root</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">json.keys_under_root</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">json.overwrite_keys</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">json.add_error_key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><br>    <span class="hljs-attribute">setup.ilm.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br>    <span class="hljs-attribute">setup.template.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eks-nginx-access&quot;</span><br>    <span class="hljs-attribute">setup.template.pattern</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eks-nginx-access-*&quot;</span><br><br>    <span class="hljs-attribute">output.elasticsearch</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&#x27;10.0.0.185:9200&#x27;]</span><br>      <span class="hljs-attribute">username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elastic</span><br>      <span class="hljs-attribute">password</span><span class="hljs-punctuation">:</span> <span class="hljs-string">13Ixxxxxd0S1mr70sulW8</span><br>      <span class="hljs-attribute">index</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eks-nginx-access-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat-nginx-config</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-ingress</span><br></code></pre></td></tr></table></figure><p>filebeat的配置说明如下</p><ul><li>json.keys_under_root：keys_under_root可以让字段位于根节点</li><li>json.overwrite_keys：对于同名的key，覆盖原有key值</li><li>json.add_error_key：将解析错误的消息记录储存在error.message字段中</li><li>hosts：es的访问地址</li><li>index：日志写入es的索引名称</li><li>username：es登录用户名</li><li>password：es的登录密码</li></ul><h2 id="部署sidecar"><a href="#部署sidecar" class="headerlink" title="部署sidecar"></a>部署sidecar</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>    <span class="hljs-attribute">app.kubernetes.io/component</span><span class="hljs-punctuation">:</span> <span class="hljs-string">controller</span><br>    <span class="hljs-attribute">chart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress-1.36.3</span><br>    <span class="hljs-attribute">heritage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Helm</span><br>    <span class="hljs-attribute">release</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress-controller</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-ingress</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">progressDeadlineSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">600</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">revisionHistoryLimit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>      <span class="hljs-attribute">release</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>  <span class="hljs-attribute">strategy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">rollingUpdate</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">maxSurge</span><span class="hljs-punctuation">:</span> <span class="hljs-string">25%</span><br>      <span class="hljs-attribute">maxUnavailable</span><span class="hljs-punctuation">:</span> <span class="hljs-string">25%</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">eks.tke.cloud.tencent.com/cpu-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">none</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>        <span class="hljs-attribute">app.kubernetes.io/component</span><span class="hljs-punctuation">:</span> <span class="hljs-string">controller</span><br>        <span class="hljs-attribute">component</span><span class="hljs-punctuation">:</span> <span class="hljs-string">controller</span><br>        <span class="hljs-attribute">qcloud-redeploy-timestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1631609992665&quot;</span><br>        <span class="hljs-attribute">release</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/nginx-ingress-controller</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--default-backend-service=nginx-ingress/eks-nginx-ingress-default-backend</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--election-id=ingress-controller-leader</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--ingress-class=nginx</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--configmap=nginx-ingress/eks-nginx-ingress-controller</span><br>        <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: POD_NAME</span><br>          <span class="hljs-attribute">valueFrom</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">fieldRef</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>              <span class="hljs-attribute">fieldPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: POD_NAMESPACE</span><br>          <span class="hljs-attribute">valueFrom</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">fieldRef</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>              <span class="hljs-attribute">fieldPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">metadata.namespace</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/tke-market/nginx-ingress-controller:0.30.0</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attribute">livenessProbe</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">failureThreshold</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>          <span class="hljs-attribute">httpGet</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10254</span><br>            <span class="hljs-attribute">scheme</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attribute">initialDelaySeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>          <span class="hljs-attribute">periodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>          <span class="hljs-attribute">successThreshold</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>          <span class="hljs-attribute">timeoutSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress-controller</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 443</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https</span><br>          <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attribute">readinessProbe</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">failureThreshold</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>          <span class="hljs-attribute">httpGet</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10254</span><br>            <span class="hljs-attribute">scheme</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attribute">initialDelaySeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>          <span class="hljs-attribute">periodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>          <span class="hljs-attribute">successThreshold</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>          <span class="hljs-attribute">timeoutSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>        <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">runAsUser</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>        <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /var/log/nginx</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/filebeat.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-e</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-strict.perms=false</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elastic/filebeat:7.14.1</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br>        <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /var/log/nginx</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-log</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/filebeat.yml</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat-config</span><br>          <span class="hljs-attribute">subPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat.yml</span><br>      <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>      <span class="hljs-attribute">serviceAccount</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>      <span class="hljs-attribute">serviceAccountName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">eks-nginx-ingress</span><br>      <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60</span><br>      <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">emptyDir: &#123;&#125;</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">configMap:</span><br>          <span class="hljs-attribute">defaultMode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">420</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat-nginx-config</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">filebeat-config</span><br></code></pre></td></tr></table></figure><p>sidecar采集日志的实现其实就是将nginx-ingress的日志文件目录和filebeat的目录挂载到emptyDir，这样filebeat就可以直接读取nginx-ingress的日志文件进行采集了。</p><blockquote><p>注意: filebeat启动的时候可能会报错Exiting: error loading config file: open filebeat.yml: permission denied，这里是因为读取配置文件的权限不足，可以加上-e -strict.perms&#x3D;false参数解决。</p></blockquote><h2 id="验证日志是否成功采集到es"><a href="#验证日志是否成功采集到es" class="headerlink" title="验证日志是否成功采集到es"></a>验证日志是否成功采集到es</h2><p>检索es，这里推荐一个可视化的插件elasticvue，具体介绍可以查看文档<a href="https://elasticvue.com/">https://elasticvue.com/</a>，浏览器扩展是运行elasticvue的最简单方法。可以立即使用elasticvue，而无需进行任何集群配置。这里我们通过elasticvue来检索下日志。</p><p><img src="/img/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/Snipaste_2021-09-15_13-57-20.png" alt="upload-image"></p><p><img src="/img/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/Snipaste_2021-09-15_13-57-43.png" alt="upload-image"></p><p>从es中能查看到索引，并且从索引中能查询到access的访问日志，说明日志已经成功采集到了es中。</p><h1 id="通过kibana检索日志"><a href="#通过kibana检索日志" class="headerlink" title="通过kibana检索日志"></a>通过kibana检索日志</h1><p>为了能够更加访问的检索日志，这里部署一个kibana用来进行日志的检索和分析。</p><h2 id="创建kibana配置文件"><a href="#创建kibana配置文件" class="headerlink" title="创建kibana配置文件"></a>创建kibana配置文件</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kibana.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-attribute">elasticsearch.hosts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://logging-es-default:9200</span><br>    <span class="hljs-attribute">server.host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-attribute">server.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attribute">elasticsearch.username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elastic&quot;</span><br>    <span class="hljs-attribute">elasticsearch.password</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13I8Cxxx70sulW8&quot;</span><br>    <span class="hljs-attribute">server.maxPayloadBytes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10485760&quot;</span><br>    <span class="hljs-attribute">i18n.locale</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana-cm</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elastic-system</span><br></code></pre></td></tr></table></figure><p>kibana的配置说明如下：</p><ul><li>elasticsearch.hosts：es的访问地址</li><li>server.host：kibana的监听地址</li><li>server.name：kibana启动名称</li><li>elasticsearch.username：es鉴权的用户名</li><li>elasticsearch.password：es鉴权的密码</li><li>server.maxPayloadBytes：解决kibana出现Request Entity Too Large报错的问题</li><li>i18n.locale：kibana界面汉化，需要6.7以上版本的kibana才支持</li></ul><h2 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h2><p>可以参考下面yaml部署kibana</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">qcloud-redeploy-timestamp:</span> <span class="hljs-string">&quot;1631608046798&quot;</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.10.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/kibana/config/kibana.yml</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">kibana.yml</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">kibana-cm</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br></code></pre></td></tr></table></figure><h2 id="配置ingress提供访问"><a href="#配置ingress提供访问" class="headerlink" title="配置ingress提供访问"></a>配置ingress提供访问</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">ingress</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="hljs-string">1000m</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/use-regex:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tke-kibana-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">tke-kibana.tke.niewx.cn</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">kibana</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">5601</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><p>这里我们可以通过域名在浏览器访问到我们的kibana界面。</p><h2 id="kibana检索日志"><a href="#kibana检索日志" class="headerlink" title="kibana检索日志"></a>kibana检索日志</h2><p>创建kibana的索引检索es的日志</p><p><img src="/img/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/Snipaste_2021-09-15_14-11-07.png" alt="upload-image"></p><p>索引创建好之后就可以在Discover中检索你的日志了</p><p><img src="/img/2021-09-14-The-elastic-cluster-collects-nginx-ingress-controller-access-logs/Snipaste_2021-09-15_14-11-44.png" alt="upload-image"></p>]]></content>
    
    
    <categories>
      
      <category>eks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>ingress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Terraform编排腾讯云资源</title>
    <link href="/2021/09/11/2021-09-11-Terraform-orchestrates-Tencent-Cloud-resources/"/>
    <url>/2021/09/11/2021-09-11-Terraform-orchestrates-Tencent-Cloud-resources/</url>
    
    <content type="html"><![CDATA[<p>Terraform是一个IT基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infrastructure as Code”, 基础架构即代码。Terraform几乎可以支持所有市面上能见到的云服务。</p><p>Terraform的使用可以参考文档<a href="https://registry.terraform.io/">https://registry.terraform.io/</a>，下面我们来用Terraform来编排下腾讯云上的资源。</p><h1 id="Terraform安装部署"><a href="#Terraform安装部署" class="headerlink" title="Terraform安装部署"></a>Terraform安装部署</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>下载安装包，解压二进制文件，能查看版本号则说明安装成功</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># mkdir tf</span><br><span class="hljs-meta"># cd tf/</span><br><span class="hljs-meta"># wget https://releases.hashicorp.com/terraform/1.0.5/terraform_1.0.5_linux_amd64.zip</span><br><span class="hljs-meta"># unzip terraform_1.0.5_linux_amd64.zip</span><br><span class="hljs-meta"># mv terraform /usr/local/bin</span><br><br><span class="hljs-meta"># terraform -version</span><br>Terraform v1<span class="hljs-number">.0</span><span class="hljs-number">.5</span><br><span class="hljs-keyword">on</span> linux_amd64<br><br>Your version of Terraform <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> of date! The latest version<br><span class="hljs-keyword">is</span> <span class="hljs-number">1.0</span><span class="hljs-number">.6</span>. You can update <span class="hljs-keyword">by</span> downloading <span class="hljs-keyword">from</span> https:<span class="hljs-comment">//www.terraform.io/downloads.html</span><br><br></code></pre></td></tr></table></figure><h2 id="初始化terraform"><a href="#初始化terraform" class="headerlink" title="初始化terraform"></a>初始化terraform</h2><p>初始化会发送请求到Terraform官方GitHub下载最新版本腾讯云资源的模块和插件，如果版本有更新也可以terraform init -upgrade来更新，secret_id和secret_key是云账号的secret</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vim"># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt;  /root/<span class="hljs-keyword">tf</span>/provider.<span class="hljs-keyword">tf</span><br>terraform &#123;<br>  required_providers &#123;<br>    tencentcloud = &#123;<br>      <span class="hljs-keyword">source</span> = <span class="hljs-string">&quot;tencentcloudstack/tencentcloud&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><br>provider <span class="hljs-string">&quot;tencentcloud&quot;</span> &#123;<br>    secret_id  = <span class="hljs-string">&quot;AKIDxxxxxxTITii&quot;</span><br>    secret_key = <span class="hljs-string">&quot;608zbx5xxxxZAVaN7&quot;</span><br>    region     = <span class="hljs-string">&quot;ap-guangzhou&quot;</span><br>&#125;<br>EOF<br><br># terraform init<br><br>Initializing the backend...<br><br>Initializing provider plugins...<br>- Reusing <span class="hljs-keyword">previous</span> <span class="hljs-keyword">version</span> of tencentcloudstack/tencentcloud from the dependency lock <span class="hljs-keyword">file</span><br>- Using previously-installed tencentcloudstack/tencentcloud v1.<span class="hljs-number">58.4</span><br><br>Terraform <span class="hljs-built_in">has</span> been successfully initialized!<br><br>You may now begin working with Terraform. Try running <span class="hljs-string">&quot;terraform plan&quot;</span> <span class="hljs-keyword">to</span> see<br>any <span class="hljs-keyword">changes</span> that are required <span class="hljs-keyword">for</span> your infrastructure. All Terraform commands<br>should now work.<br><br>If you ever <span class="hljs-keyword">set</span> <span class="hljs-built_in">or</span> <span class="hljs-keyword">change</span> modules <span class="hljs-built_in">or</span> backend configuration <span class="hljs-keyword">for</span> Terraform,<br>rerun this <span class="hljs-keyword">command</span> <span class="hljs-keyword">to</span> reinitialize your working directory. If you forget, other<br>commands will detect it <span class="hljs-built_in">and</span> remind you <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> <span class="hljs-keyword">so</span> <span class="hljs-keyword">if</span> necessary.<br></code></pre></td></tr></table></figure><h1 id="部署云资源"><a href="#部署云资源" class="headerlink" title="部署云资源"></a>部署云资源</h1><p>这里我们简单的部署一个安全组，其他资源的部署可以参考文档<a href="https://registry.terraform.io/providers/tencentcloudstack/tencentcloud/latest/docs">https://registry.terraform.io/providers/tencentcloudstack/tencentcloud/latest/docs</a></p><p>编写需要创建资源的tf文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cat &lt;&lt; EOF &gt;  /root/tf/security_group.tf<br>resource <span class="hljs-string">&quot;tencentcloud_security_group&quot;</span> <span class="hljs-string">&quot;sglab_1&quot;</span> &#123;<br>  name        <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mysg_1&quot;</span><br>  description <span class="hljs-operator">=</span> <span class="hljs-string">&quot;favourite sg_1&quot;</span><br>  project_id  <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>&#125;<br><br>resource <span class="hljs-string">&quot;tencentcloud_security_group_rule&quot;</span> <span class="hljs-string">&quot;sglab_1&quot;</span> &#123;<br>  security_group_id <span class="hljs-operator">=</span> tencentcloud_security_group.sglab_1.id<br>  type              <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ingress&quot;</span><br>  cidr_ip           <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10.0.0.0/16&quot;</span><br>  ip_protocol       <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TCP&quot;</span><br>  port_range        <span class="hljs-operator">=</span> <span class="hljs-string">&quot;80&quot;</span><br>  policy            <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ACCEPT&quot;</span><br>  description       <span class="hljs-operator">=</span> <span class="hljs-string">&quot;favourite sg rule_1&quot;</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>terraform可使用命令可以参考下面</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos tf]<span class="hljs-comment"># terraform</span><br>Usage: terraform [<span class="hljs-keyword">global</span> options] <span class="hljs-variable">&lt;subcommand&gt;</span> [args]<br><br>The available commands <span class="hljs-keyword">for</span> execution are listed below.<br>The primary workflow commands are given first, followed by<br>less common or more advanced commands.<br><br>Main commands:<br>  init          Prepare your working directory <span class="hljs-keyword">for</span> other commands<br>  validate      Check whether the configuration is valid<br>  plan          Show changes required by the current configuration<br>  apply         Create or update infrastructure<br>  destroy       Destroy previously-created infrastructure<br><br>All other commands:<br>  console       Try Terraform expressions at an interactive command prompt<br>  fmt           Reformat your configuration <span class="hljs-keyword">in</span> the standard style<br>  force-unlock  Release a stuck lock <span class="hljs-keyword">on</span> the current workspace<br>  get           Install or upgrade remote Terraform modules<br>  graph         Generate a Graphviz graph of the steps <span class="hljs-keyword">in</span> an operation<br>  import        Associate existing infrastructure with a Terraform resource<br>  login         Obtain and save credentials <span class="hljs-keyword">for</span> a remote host<br>  logout        Remove locally-stored credentials <span class="hljs-keyword">for</span> a remote host<br>  output        Show output values <span class="hljs-keyword">from</span> your root module<br>  providers     Show the providers required <span class="hljs-keyword">for</span> this configuration<br>  refresh       Update the <span class="hljs-keyword">state</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">match</span> remote systems<br>  show          Show the current <span class="hljs-keyword">state</span> or a saved plan<br>  <span class="hljs-keyword">state</span>         Advanced <span class="hljs-keyword">state</span> management<br>  taint         Mark a resource instance as not fully functional<br>  test          Experimental support <span class="hljs-keyword">for</span> module integration testing<br>  untaint       Remove the &#x27;tainted&#x27; <span class="hljs-keyword">state</span> <span class="hljs-keyword">from</span> a resource instance<br>  version       Show the current Terraform version<br>  workspace     Workspace management<br><br>Global options (use these before the subcommand, if <span class="hljs-literal">any</span>):<br>  -chdir=DIR    Switch <span class="hljs-keyword">to</span> a different working directory before executing the<br>                given subcommand.<br>  -help         Show this help output, or the help <span class="hljs-keyword">for</span> a specified subcommand.<br>  -version      An alias <span class="hljs-keyword">for</span> the <span class="hljs-string">&quot;version&quot;</span> subcommand.<br></code></pre></td></tr></table></figure><p>terraform plan可以查看部署计划，如果plan执行没问题，然后apply创建即可</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># terraform plan</span><br><br>Terraform used <span class="hljs-keyword">the</span> selected providers <span class="hljs-keyword">to</span> generate <span class="hljs-keyword">the</span> following execution plan. Resource actions are indicated <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> following symbols:<br>  + create<br><br>Terraform will perform <span class="hljs-keyword">the</span> following actions:<br><br>  <span class="hljs-comment"># tencentcloud_security_group.sglab_1 will be created</span><br>  + resource <span class="hljs-string">&quot;tencentcloud_security_group&quot;</span> <span class="hljs-string">&quot;sglab_1&quot;</span> &#123;<br>      + description = <span class="hljs-string">&quot;favourite sg_1&quot;</span><br>      + <span class="hljs-built_in">id</span>          = (known <span class="hljs-keyword">after</span> apply)<br>      + <span class="hljs-built_in">name</span>        = <span class="hljs-string">&quot;mysg_1&quot;</span><br>      + project_id  = <span class="hljs-number">0</span><br>    &#125;<br><br>  <span class="hljs-comment"># tencentcloud_security_group_rule.sglab_1 will be created</span><br>  + resource <span class="hljs-string">&quot;tencentcloud_security_group_rule&quot;</span> <span class="hljs-string">&quot;sglab_1&quot;</span> &#123;<br>      + cidr_ip           = <span class="hljs-string">&quot;10.0.0.0/16&quot;</span><br>      + description       = <span class="hljs-string">&quot;favourite sg rule_1&quot;</span><br>      + <span class="hljs-built_in">id</span>                = (known <span class="hljs-keyword">after</span> apply)<br>      + ip_protocol       = <span class="hljs-string">&quot;TCP&quot;</span><br>      + policy            = <span class="hljs-string">&quot;ACCEPT&quot;</span><br>      + port_range        = <span class="hljs-string">&quot;80&quot;</span><br>      + security_group_id = (known <span class="hljs-keyword">after</span> apply)<br>      + source_sgid       = (known <span class="hljs-keyword">after</span> apply)<br>      + type              = <span class="hljs-string">&quot;ingress&quot;</span><br><br>      + address_template &#123;<br>          + group_id    = (known <span class="hljs-keyword">after</span> apply)<br>          + template_id = (known <span class="hljs-keyword">after</span> apply)<br>        &#125;<br><br>      + protocol_template &#123;<br>          + group_id    = (known <span class="hljs-keyword">after</span> apply)<br>          + template_id = (known <span class="hljs-keyword">after</span> apply)<br>        &#125;<br>    &#125;<br><br>Plan: <span class="hljs-number">2</span> <span class="hljs-keyword">to</span> add, <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> change, <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> destroy.<br><br>────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br><br>Note: You didn&#x27;t use <span class="hljs-keyword">the</span> -out option <span class="hljs-keyword">to</span> save this plan, so Terraform can&#x27;t guarantee <span class="hljs-keyword">to</span> take exactly these actions <span class="hljs-keyword">if</span> you <span class="hljs-built_in">run</span> <span class="hljs-string">&quot;terraform apply&quot;</span> now.<br></code></pre></td></tr></table></figure><p>terraform apply创建安全组</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos tf]<span class="hljs-comment"># terraform apply</span><br><br>Terraform used <span class="hljs-keyword">the</span> selected providers <span class="hljs-keyword">to</span> generate <span class="hljs-keyword">the</span> following execution plan. Resource actions are indicated <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> following symbols:<br>  + create<br><br>Terraform will perform <span class="hljs-keyword">the</span> following actions:<br><br>  <span class="hljs-comment"># tencentcloud_security_group.sglab_1 will be created</span><br>  + resource <span class="hljs-string">&quot;tencentcloud_security_group&quot;</span> <span class="hljs-string">&quot;sglab_1&quot;</span> &#123;<br>      + description = <span class="hljs-string">&quot;favourite sg_1&quot;</span><br>      + <span class="hljs-built_in">id</span>          = (known <span class="hljs-keyword">after</span> apply)<br>      + <span class="hljs-built_in">name</span>        = <span class="hljs-string">&quot;mysg_1&quot;</span><br>      + project_id  = <span class="hljs-number">0</span><br>    &#125;<br><br>  <span class="hljs-comment"># tencentcloud_security_group_rule.sglab_1 will be created</span><br>  + resource <span class="hljs-string">&quot;tencentcloud_security_group_rule&quot;</span> <span class="hljs-string">&quot;sglab_1&quot;</span> &#123;<br>      + cidr_ip           = <span class="hljs-string">&quot;10.0.0.0/16&quot;</span><br>      + description       = <span class="hljs-string">&quot;favourite sg rule_1&quot;</span><br>      + <span class="hljs-built_in">id</span>                = (known <span class="hljs-keyword">after</span> apply)<br>      + ip_protocol       = <span class="hljs-string">&quot;TCP&quot;</span><br>      + policy            = <span class="hljs-string">&quot;ACCEPT&quot;</span><br>      + port_range        = <span class="hljs-string">&quot;80&quot;</span><br>      + security_group_id = (known <span class="hljs-keyword">after</span> apply)<br>      + source_sgid       = (known <span class="hljs-keyword">after</span> apply)<br>      + type              = <span class="hljs-string">&quot;ingress&quot;</span><br><br>      + address_template &#123;<br>          + group_id    = (known <span class="hljs-keyword">after</span> apply)<br>          + template_id = (known <span class="hljs-keyword">after</span> apply)<br>        &#125;<br><br>      + protocol_template &#123;<br>          + group_id    = (known <span class="hljs-keyword">after</span> apply)<br>          + template_id = (known <span class="hljs-keyword">after</span> apply)<br>        &#125;<br>    &#125;<br><br>Plan: <span class="hljs-number">2</span> <span class="hljs-keyword">to</span> add, <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> change, <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> destroy.<br><br>Do you want <span class="hljs-keyword">to</span> perform these actions?<br>  Terraform will perform <span class="hljs-keyword">the</span> actions described <span class="hljs-keyword">above</span>.<br>  Only &#x27;yes&#x27; will be accepted <span class="hljs-keyword">to</span> approve.<br><br>  Enter a value: yes<br><br>tencentcloud_security_group.sglab_1: Creating...<br>tencentcloud_security_group.sglab_1: Creation complete <span class="hljs-keyword">after</span> <span class="hljs-number">1</span>s [<span class="hljs-built_in">id</span>=sg-gdo50olf]<br>tencentcloud_security_group_rule.sglab_1: Creating...<br>tencentcloud_security_group_rule.sglab_1: Creation complete <span class="hljs-keyword">after</span> <span class="hljs-number">0</span>s [<span class="hljs-built_in">id</span>=eyJzZ19pZCI6InNnLWdkbzUwb2xmIiwicG9saWN5X3R5cGUiOiJpbmdyZXNzIiwiY2lkcl9pcCI6IjEwLjAuMC4wLzE2IiwicHJvdG9jb2wiOiJUQ1AiLCJwb3J0X3JhbmdlIjoiODAiLCJhY3Rpb24iOiJBQ0NFUFQiLCJzb3VyY2Vfc2dfaWQiOiIiLCJkZXNjcmlwdGlvbiI6ImZhdm91cml0ZSBzZyBydWxlXzEifQ==]<br><br>Apply complete! Resources: <span class="hljs-number">2</span> added, <span class="hljs-number">0</span> changed, <span class="hljs-number">0</span> destroyed.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Terraform</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Terraform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cert-manager为域名签发免费证书</title>
    <link href="/2021/08/07/2021-08-07-cert-manager-issues-free-certificates-for-domain-names/"/>
    <url>/2021/08/07/2021-08-07-cert-manager-issues-free-certificates-for-domain-names/</url>
    
    <content type="html"><![CDATA[<p>随着HTTPS不断普及，大多数网站开始由HTTP升级到HTTPS。使用HTTPS需要向权威机构申请证书，并且需要付出一定的成本，如果需求数量多，则开支也相对增加。cert-manager 是 Kubernetes 上的全能证书管理工具，支持利用 cert-manager 基于 ACME 协议与 Let’s Encrypt 签发免费证书并为证书自动续期，实现永久免费使用证书。</p><p>cert-manager支持许多dns provider，但不支持国内的dnspod，不过cert-manager提供了Webhook机制来扩展provider，社区也有dnspod的provider实现，下面我们在k8s中通过cert-manager和cert-manager-webhook-dnspod来为域名签发免费证书，</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul><li>k8s集群：这里我们用的腾讯云eks集群</li><li>域名：腾讯云购买的域名，并用dnspod进行解析</li><li>dnspod-token：从<a href="https://console.dnspod.cn/account/token/apikey">https://console.dnspod.cn/account/token/apikey</a>创建一个</li><li>nginx-ingress：需要在k8s中部署nginx-ingress，后续配置ingress验证证书</li></ul><p>集群已经部署了nginx-ingress并且支持helm3部署应用到集群。</p><h1 id="安装部署cert-manager"><a href="#安装部署cert-manager" class="headerlink" title="安装部署cert-manager"></a>安装部署cert-manager</h1><p>首先我们安装cert-manager到集群中，执行下面的命令部署既可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply --validate=false -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/TencentCloudContainerTeam/m</span>anifest<span class="hljs-regexp">/master/</span>cert-manager.yaml<br></code></pre></td></tr></table></figure><h1 id="安装cert-manager-webhook-dnspod"><a href="#安装cert-manager-webhook-dnspod" class="headerlink" title="安装cert-manager-webhook-dnspod"></a>安装cert-manager-webhook-dnspod</h1><p>cert-manager-webhook-dnspod通过helm安装，首先我们配置下dnspod-webhook的配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">groupName:</span> <span class="hljs-string">cert-manager.io</span><br><br><span class="hljs-attr">secrets:</span><br>  <span class="hljs-attr">apiID:</span> <span class="hljs-string">xxxxx</span><br>  <span class="hljs-attr">apiToken:</span> <span class="hljs-string">xxxxxx</span><br><br><span class="hljs-attr">clusterIssuer:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">email:</span> <span class="hljs-string">nwx_qdlg@163.com</span><br></code></pre></td></tr></table></figure><p>这里groupname可以和我的保持一致，secret是之前从dnspod上创建获取，clusterIssuer设置为true，邮箱填写自己既可。下面我们helm安装下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --depth 1 https://github.com/qqshfox/cert-manager-webhook-dnspod.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm upgrade --install -n cert-manager -f dnspod-webhook-values.yaml cert-manager-webhook-dnspod ./cert-manager-webhook-dnspod/deploy/cert-manager-webhook-dnspod</span><br></code></pre></td></tr></table></figure><h1 id="Certificate签发证书"><a href="#Certificate签发证书" class="headerlink" title="Certificate签发证书"></a>Certificate签发证书</h1><p>创建一个Certificate来给我们的域名签发免费证书</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Certificate</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager-crt</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager-crt-secret</span><br>  <span class="hljs-attribute">issuerRef</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager-webhook-dnspod-cluster-issuer</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterIssuer</span><br>    <span class="hljs-attribute">group</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager.io</span><br>  <span class="hljs-attribute">dnsNames</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">niewx.cn</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cert-manager.niewx.cn</span><br></code></pre></td></tr></table></figure><p>这里cert-manager-webhook-dnspod-cluster-issuer是自动生成的，dnsname需要保证填写的域名是dnspod管理的，最终生成的证书会在cert-manager-crt-secret这个secret。</p><p>这里创建之后，等certificate的状态是true，则签发成功，如果为false，需要describe看下报错是什么原因。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[eks@VM-0-13-centos cert]$ kubectl <span class="hljs-built_in">get</span> certificate<br>NAME               READY  <span class="hljs-built_in"> SECRET </span>                   AGE<br>cert-manager-crt   <span class="hljs-literal">True</span>    cert-manager-crt-secret   104m<br></code></pre></td></tr></table></figure><h1 id="创建ingress使用免费签发证书"><a href="#创建ingress使用免费签发证书" class="headerlink" title="创建ingress使用免费签发证书"></a>创建ingress使用免费签发证书</h1><p>这里已经预先部署了一个简单go的demo服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">[eks@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos cert]$ kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">all</span> | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">go</span><br>pod/<span class="hljs-keyword">go</span>-test-<span class="hljs-number">6</span>cb6889655-c2gkh   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">156</span><span class="hljs-keyword">m</span><br>service/<span class="hljs-keyword">go</span>-test      ClusterIP      <span class="hljs-number">10.0</span>.<span class="hljs-number">0.110</span>   <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">3000</span>/TCP       <span class="hljs-number">221</span>d<br></code></pre></td></tr></table></figure><p>然后我们用ingress绑定域名cert-manager.niewx.cn到后端的go服务提供访问</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">go-ingress</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: cert-manager.niewx.cn</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">go-test</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3000</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>  <span class="hljs-attribute">tls</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cert-manager.niewx.cn</span><br>    <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager-crt-secret</span><br></code></pre></td></tr></table></figure><p>ingress创建好之后，浏览器用https访问域名正常则说明证书签发成功</p><p><img src="/img/2021-08-07-cert-manager-issues-free-certificates-for-domain-names/1.png" alt="upload-image"> </p><h1 id="创建ingress自动生成证书"><a href="#创建ingress自动生成证书" class="headerlink" title="创建ingress自动生成证书"></a>创建ingress自动生成证书</h1><p>如果想在创建ingress的时候自动生成证书挂载，可以在ingress的注解指定好cert-manager的ClusterIssuer，这样就会调ClusterIssuer自动生成certificates，从而生成tls证书挂载到ingress上</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">cert-manager.io/cluster-issuer</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cert-manager-webhook-dnspod-cluster-issuer</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: nginx-test.eks.niewx.cn</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>  <span class="hljs-attribute">tls</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nginx-test.eks.niewx.cn</span><br>    <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test.eks.niewx.cn</span><br></code></pre></td></tr></table></figure><p>通过测试，ingress域名是可以通过https正常访问，说明自动创建tls证书成功。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml">[eks@VM-0-13-centos cert]$ kubectl get certificates | grep nginx-test.eks.niewx.cn<br>nginx-test.eks.niewx.cn   True    nginx-test.eks.niewx.cn   11m<br>[eks@VM-0-13-centos cert]$ kubectl get secret | grep nginx-test.eks.niewx.cn<br>nginx-test.eks.niewx.cn   kubernetes.io/tls                     2      10m<br>[eks@VM-0-13-centos cert]$ curl https://nginx-test.eks.niewx.cn<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="部署过程中遇到的问题"><a href="#部署过程中遇到的问题" class="headerlink" title="部署过程中遇到的问题"></a>部署过程中遇到的问题</h1><p>我这里是部署在腾讯云的tke集群上，在tke部署会遇到一个问题就是cert-manager一直报如下错，导致Certificate状态一直是false，对应的tls证书生成失败。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2021</span>-<span class="hljs-number">12</span>-<span class="hljs-number">10</span>T12:<span class="hljs-number">43</span>:<span class="hljs-number">05</span>.<span class="hljs-number">808457627</span>Z E1210 <span class="hljs-number">12</span>:<span class="hljs-number">43</span>:<span class="hljs-number">05</span>.<span class="hljs-number">808145</span>       <span class="hljs-number">1</span> controller.go:<span class="hljs-number">158</span>] cert-manager/controller/CertificateKeyManager <span class="hljs-string">&quot;msg&quot;</span>=<span class="hljs-string">&quot;re-queuing item due to error processing&quot;</span> <span class="hljs-string">&quot;error&quot;</span>=<span class="hljs-string">&quot;Operation cannot be fulfilled on certificates.cert-manager.io \&quot;nginx-test.tke.niewx.cn\&quot;: the object has been modified; please apply your changes to the latest version and try again&quot;</span> <span class="hljs-string">&quot;key&quot;</span>=<span class="hljs-string">&quot;tke-test/nginx-test.tke.niewx.cn&quot;</span> <br></code></pre></td></tr></table></figure><p>这里报错是因为权威dns服务器不对导致，这里将pod的dns服务器改成用8.8.8.8和114.114.114.114即可，在yaml自定义下nameserver的配置。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">dnsConfig</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">nameservers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">8.8.8.8</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">114.114.114.114</span><br><span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">None</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cert-manager</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cert-manager</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python脚本将pdf转png长图</title>
    <link href="/2021/07/10/2021-07-10-Use-python-to-convert-pdf-to-png-long-image/"/>
    <url>/2021/07/10/2021-07-10-Use-python-to-convert-pdf-to-png-long-image/</url>
    
    <content type="html"><![CDATA[<p>很多时候，大家会需要将pdf文件转换成图片格式，网上有很多工具可以实现，但是有的要收费，下面我们用python脚本pdf-to-png.py来实现这个功能</p><p>首先需要下载对应的python包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> fitz<br>pip <span class="hljs-keyword">install</span> PyMuPDF<br>pip <span class="hljs-keyword">install</span> Pillow <br></code></pre></td></tr></table></figure><p>包下载好之后，对应的脚本实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> fitz<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># 将PDF转化为图片</span><br><span class="hljs-string">pdfPath pdf文件的路径</span><br><span class="hljs-string">imgPath 图像要保存的文件夹</span><br><span class="hljs-string">zoom_x x方向的缩放系数</span><br><span class="hljs-string">zoom_y y方向的缩放系数</span><br><span class="hljs-string">rotation_angle 旋转角度</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pdf_image</span>(<span class="hljs-params">pdfPath,imgPath,zoom_x,zoom_y,rotation_angle</span>):<br>    <span class="hljs-comment"># 打开PDF文件</span><br>    pdf = fitz.<span class="hljs-built_in">open</span>(pdfPath)<br>    <span class="hljs-comment"># 逐页读取PDF</span><br>    <span class="hljs-keyword">for</span> pg <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, pdf.pageCount):<br>        page = pdf[pg]<br>        <span class="hljs-comment"># 设置缩放和旋转系数</span><br>        trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotation_angle)<br>        pm = page.getPixmap(matrix=trans, alpha=<span class="hljs-literal">False</span>)<br>        <span class="hljs-comment"># 开始写图像</span><br>        pm.writePNG(imgPath+<span class="hljs-built_in">str</span>(pg)+<span class="hljs-string">&quot;.png&quot;</span>)<br>    pdf.close()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">将上一步生成的图片合成为长图</span><br><span class="hljs-string">output_path为长图的输出路径</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_long_image</span>(<span class="hljs-params">output_path</span>):<br>    picture_path = output_path[:output_path.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)]<br>    <span class="hljs-built_in">print</span>(picture_path)<br>    last_dir = os.path.dirname(picture_path)  <span class="hljs-comment"># 上一级文件目录</span><br><br>    imagename = []<br>    ims = []<br>    <span class="hljs-comment"># 获取单个图片存到list集合</span><br>    <span class="hljs-keyword">for</span> fn <span class="hljs-keyword">in</span> os.listdir(picture_path):<br>         <span class="hljs-keyword">if</span> fn.endswith(<span class="hljs-string">&#x27;.png&#x27;</span>):<br>            ims.append(Image.<span class="hljs-built_in">open</span>(os.path.join(picture_path, fn)))<br>            imagename.append(os.path.join(picture_path, fn))<br>          <br>    width, height = ims[<span class="hljs-number">0</span>].size  <span class="hljs-comment"># 取第一个图片尺寸</span><br>    long_canvas = Image.new(ims[<span class="hljs-number">0</span>].mode, (width, height * <span class="hljs-built_in">len</span>(ims)))  <span class="hljs-comment"># 创建同宽，n高的白图片</span><br><br>    <span class="hljs-comment"># 拼接图片</span><br>    <span class="hljs-keyword">for</span> i, image <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ims):<br>        long_canvas.paste(image, box=(<span class="hljs-number">0</span>, i * height))<br><br>    <span class="hljs-keyword">for</span> j, name <span class="hljs-keyword">in</span>  <span class="hljs-built_in">enumerate</span>(imagename): <br>        os.remove(name)  <br>        <br>    long_canvas.save(os.path.join(last_dir, <span class="hljs-string">&#x27;long-image.png&#x27;</span>))  <span class="hljs-comment"># 保存长图</span><br>    <br><br>pdf_image(<span class="hljs-string">r&quot;C:\Users\nwx\Desktop\xxxxx.pdf&quot;</span>,<span class="hljs-string">r&quot;C:\Users\nwx\Desktop\\&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>)<br><br>generate_long_image(<span class="hljs-string">r&quot;C:\Users\nwx\Desktop\\&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用eck快速在k8s部署es集群</title>
    <link href="/2021/06/12/2021-06-12-use-operator-to-quickly-deploy-es-cluster-in-k8s/"/>
    <url>/2021/06/12/2021-06-12-use-operator-to-quickly-deploy-es-cluster-in-k8s/</url>
    
    <content type="html"><![CDATA[<h1 id="eck介绍"><a href="#eck介绍" class="headerlink" title="eck介绍"></a>eck介绍</h1><p>Elastic Cloud on Kubernetes(ECK)是一个 Elasticsearch Operator，但远不止于此。 ECK 使用 Kubernetes Operator 模式构建而成，需要安装在您的 Kubernetes 集群内，其功能绝不仅限于简化 Kubernetes 上 Elasticsearch 和 Kibana 的部署工作这一项任务。ECK 专注于简化所有后期运行工作，例如：</p><ul><li>管理和监测多个集群</li><li>轻松升级至新的版本</li><li>扩大或缩小集群容量</li><li>更改集群配置</li><li>动态调整本地存储的规模（包括 Elastic Local Volume（一款本地存储驱动器））</li><li>备份</li></ul><p>ECK 不仅能自动完成所有运行和集群管理任务，还专注于简化在 Kubernetes 上使用 Elasticsearch 的完整体验。ECK 的愿景是为 Kubernetes 上的 Elastic 产品和解决方案提供 SaaS 般的体验。在 ECK 上启动的所有 Elasticsearch 集群都默认受到保护，这意味着在最初创建的那一刻便已启用加密并受到默认强密码的保护。</p><p>从 6.8 和 7.1 版本开始，Elasticsearch 核心安全功能（TLS 加密、基于角色的访问控制，以及文件和原生身份验证）会免费提供。<br>通过 ECK 部署的所有集群都包括强大的基础（免费）级功能，例如可实现密集存储的冻结索引、Kibana Spaces、Canvas、Elastic Maps，等等。您甚至可以使用 Elastic Logs 和 Elastic Infrastructure 应用监测 Kubernetes 日志和基础设施。您可以获得在 Kubernetes 上使用 Elastic Stack 完整功能的体验。</p><p>ECK 内构建了 Elastic Local Volume，这是一个适用于 Kubernetes 的集成式存储驱动器。ECK 中还融入了很多最佳实践，例如在缩小规模之前对节点进行 drain 操作，在扩大规模的时候对分片进行再平衡，等等。从确保在配置变动过程中不会丢失数据，到确保在规模调整过程中实现零中断。</p><h1 id="安装eck"><a href="#安装eck" class="headerlink" title="安装eck"></a>安装eck</h1><p>直接执行下面命令部署elastic-operator到集群中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>download.elastic.co<span class="hljs-regexp">/downloads/</span>eck<span class="hljs-regexp">/1.6.0/</span>all-<span class="hljs-keyword">in</span>-one.yaml<br></code></pre></td></tr></table></figure><p>可以用下面命令查看elastic-operator是否部署好</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl -n elastic-<span class="hljs-keyword">system</span> logs -f statefulset.apps/elastic-<span class="hljs-keyword">operator</span><br></code></pre></td></tr></table></figure><h1 id="部署es集群"><a href="#部署es集群" class="headerlink" title="部署es集群"></a>部署es集群</h1><p>es会默认自带elastic用户和随机密码作为鉴权，这里我们也可以新增用户来鉴权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个文件夹和两个文件，用户存储用户和角色</span><br><span class="hljs-built_in">mkdir</span> filerealm<br><span class="hljs-built_in">touch</span> filerealm/users filerealm/users_roles<br><br><span class="hljs-comment"># 创建用户&#x27;kubesphere&#x27;的角色为&#x27;superuser&#x27;</span><br>docker run \<br>    -v $(<span class="hljs-built_in">pwd</span>)/filerealm:/usr/share/elasticsearch/config \<br>    docker.elastic.co/elasticsearch/elasticsearch:7.10.2 \<br>    bin/elasticsearch-users useradd kubesphere -p kubesphere -r superuser<br><br><span class="hljs-comment"># 创建Kubernetes secret</span><br>kubectl create secret generic kubesphere-elasticsearch-realm-secret --from-file filerealm -n kubesphere-logging-system<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">elasticsearch.k8s.elastic.co/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Elasticsearch</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">logging</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">7.10</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch:7.10.2</span> <span class="hljs-comment">#指定镜像</span><br>  <span class="hljs-attr">auth:</span><br>    <span class="hljs-attr">fileRealm:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">secretName:</span> <span class="hljs-string">kubesphere-elasticsearch-realm-secret</span> <span class="hljs-comment"># 通过Kubernetes secret添加自定义用户和密码</span><br>  <span class="hljs-attr">http:</span><br>    <span class="hljs-attr">tls:</span><br>      <span class="hljs-attr">selfSignedCertificate:</span><br>        <span class="hljs-attr">disabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 关闭tls</span><br>  <span class="hljs-attr">nodeSets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">default</span> <br>    <span class="hljs-attr">count:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 部署集群节点数</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">node.store.allow_mmap:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">volumeClaimTemplates:</span> <span class="hljs-comment"># 存储配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-data</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">accessModes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>        <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">cbs</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>运行上的yaml，会创建一个elasticsearch资源，elasticsearch会部署一个StatefulSet，起3个pod到集群中，如果pod都是running，则说明集群运行成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span><span class="hljs-operator">-</span>centos filerealm]# k <span class="hljs-keyword">get</span> elasticsearch <span class="hljs-operator">-</span>n elastic<span class="hljs-operator">-</span><span class="hljs-keyword">system</span><br>NAME      HEALTH   NODES   VERSION   PHASE   AGE<br>logging   green    <span class="hljs-number">3</span>       <span class="hljs-number">7.10</span><span class="hljs-number">.2</span>    Ready   <span class="hljs-number">40</span>m<br><br>[root<span class="hljs-variable">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span><span class="hljs-operator">-</span>centos filerealm]# kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-comment">--selector=&#x27;elasticsearch.k8s.elastic.co/cluster-name=logging&#x27; -n elastic-system</span><br>NAME                   READY   STATUS    RESTARTS   AGE<br>logging<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span><span class="hljs-keyword">default</span><span class="hljs-number">-0</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m<br>logging<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span><span class="hljs-keyword">default</span><span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m<br>logging<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span><span class="hljs-keyword">default</span><span class="hljs-number">-2</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m<br></code></pre></td></tr></table></figure><p>这里我们只编写了部分功能到elasticsearch集群中，更多elasticsearch配置可以参考官方文档<a href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-elasticsearch-specification.html">https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-elasticsearch-specification.html</a></p><h1 id="部署ingress通过域名访问es"><a href="#部署ingress通过域名访问es" class="headerlink" title="部署ingress通过域名访问es"></a>部署ingress通过域名访问es</h1><p>这里我们通过域名来访问我们的es集群，部署一个ingress</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">ingress</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">es-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">es.tke.niewx.cn</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">logging-es-http</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">9200</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><h1 id="访问es集群"><a href="#访问es集群" class="headerlink" title="访问es集群"></a>访问es集群</h1><p>这里可以用我们自己新增的用户kubesphere或者默认自带的elastic访问集群都可以，这里获取下elastic用户的密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># kubectl <span class="hljs-keyword">get</span> secret logging<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span>elastic<span class="hljs-operator">-</span><span class="hljs-keyword">user</span> <span class="hljs-operator">-</span>o<span class="hljs-operator">=</span>jsonpath<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#123;.data.elastic&#125;&#x27;</span> <span class="hljs-operator">-</span>n elastic<span class="hljs-operator">-</span><span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> base64 <span class="hljs-operator">-</span>d<br>Je2495pW2SOa<br></code></pre></td></tr></table></figure><p>这里我们分别用elastic和kubesphere这2个用户都能访问成功</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># curl -u <span class="hljs-string">&#x27;elastic:Je2pW2SOa&#x27;</span> es.tke.niewx.cn</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;logging-es-default-0&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;logging&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;JirzQVaATcWvpptIyNWoUw&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;7.10.2&quot;</span>,<br>    <span class="hljs-string">&quot;build_flavor&quot;</span> : <span class="hljs-string">&quot;default&quot;</span>,<br>    <span class="hljs-string">&quot;build_type&quot;</span> : <span class="hljs-string">&quot;docker&quot;</span>,<br>    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;747e1cc71def077253878a59143c1f785afa92b9&quot;</span>,<br>    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2021-01-13T00:42:12.435326Z&quot;</span>,<br>    <span class="hljs-string">&quot;build_snapshot&quot;</span> : <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;8.7.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.8.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># curl -u <span class="hljs-string">&#x27;kubesphere:kubesphere&#x27;</span> es.tke.niewx.cn</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;logging-es-default-1&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;logging&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;JirzQVaATcWvpptIyNWoUw&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;7.10.2&quot;</span>,<br>    <span class="hljs-string">&quot;build_flavor&quot;</span> : <span class="hljs-string">&quot;default&quot;</span>,<br>    <span class="hljs-string">&quot;build_type&quot;</span> : <span class="hljs-string">&quot;docker&quot;</span>,<br>    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;747e1cc71def077253878a59143c1f785afa92b9&quot;</span>,<br>    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2021-01-13T00:42:12.435326Z&quot;</span>,<br>    <span class="hljs-string">&quot;build_snapshot&quot;</span> : <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;8.7.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.8.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h1><p>我们也可以用eck快速部署一个kibana到集群中，将上面部署的es直接对接我们要部署的kibana</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> secret generic kibana-elasticsearch-credentials --<span class="hljs-keyword">from</span>-literal=elasticsearch.<span class="hljs-keyword">password</span>=Je2K3pW2SOa -n elastic-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>创建好访问秘钥后，创建kibana对象</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana.k8s.elastic.co/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Kibana</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">7.10.2</span><br>  <span class="hljs-attribute">count</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">config</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">elasticsearch.hosts</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://es.tke.niewx.cn</span><br>    <span class="hljs-attribute">elasticsearch.username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elastic</span><br>  <span class="hljs-attribute">secureSettings</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">secretName: kibana-elasticsearch-credentials</span><br>EOF<br></code></pre></td></tr></table></figure><p>查看下kibana是否部署成功，kibana是green，pod也是正常running，则说明部署成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span><span class="hljs-operator">-</span>centos <span class="hljs-operator">~</span>]# k <span class="hljs-keyword">get</span> kibana <span class="hljs-operator">-</span>n elastic<span class="hljs-operator">-</span><span class="hljs-keyword">system</span><br>NAME     HEALTH   NODES   VERSION   AGE<br>kibana   green    <span class="hljs-number">1</span>       <span class="hljs-number">7.10</span><span class="hljs-number">.2</span>    <span class="hljs-number">6</span>m27s<br>[root<span class="hljs-variable">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span><span class="hljs-operator">-</span>centos <span class="hljs-operator">~</span>]# k <span class="hljs-keyword">get</span> pod  <span class="hljs-operator">-</span>n elastic<span class="hljs-operator">-</span><span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> grep kibana<br>kibana<span class="hljs-operator">-</span>kb<span class="hljs-number">-5</span>fb584f664<span class="hljs-operator">-</span>bdt68   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m15s<br></code></pre></td></tr></table></figure><p>这里我们只讲了es和kibana的部署，其实eck还可以部署filebeat、EnterpriseSearch等组件到集群，具体参考文档<a href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-orchestrating-elastic-stack-applications.html">https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-orchestrating-elastic-stack-applications.html</a></p>]]></content>
    
    
    <categories>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx的学习和配置</title>
    <link href="/2021/05/21/2021-05-21-Nginx-learning-and-configuration/"/>
    <url>/2021/05/21/2021-05-21-Nginx-learning-and-configuration/</url>
    
    <content type="html"><![CDATA[<p>今天我们来学习下nginx常用的一些配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">镜像源：sudo rpm -Uvh http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/packages/</span>centos<span class="hljs-regexp">/7/</span>noarch<span class="hljs-regexp">/RPMS/</span>nginx-release-centos-<span class="hljs-number">7</span>-<span class="hljs-number">0</span>.el7.ngx.noarch.rpm<br></code></pre></td></tr></table></figure><p>centos上安装这个镜像源，然后rpm install nginx即可</p><h1 id="Nginx-conf配置文件解析"><a href="#Nginx-conf配置文件解析" class="headerlink" title="Nginx.conf配置文件解析"></a>Nginx.conf配置文件解析</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#运行用户</span><br><span class="hljs-attribute">user</span> www-data;    <br><span class="hljs-comment">#启动进程,通常设置成和cpu的数量相等</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br> <br><span class="hljs-comment">#全局错误日志及PID文件</span><br><span class="hljs-attribute">error_log</span>  /var/log/<span class="hljs-literal">error</span>.log;<br><span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<br> <br><span class="hljs-comment">#工作模式及连接数上限</span><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">use</span>   <span class="hljs-literal">epoll</span>;             <span class="hljs-comment">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<span class="hljs-comment">#单个后台worker process进程的最大并发链接数</span><br>    <span class="hljs-comment"># multi_accept on; </span><br>&#125;<br> <br><span class="hljs-comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="hljs-section">http</span> &#123;<br>     <span class="hljs-comment">#设定mime类型,类型由mime.type文件定义</span><br>    <span class="hljs-attribute">include</span>       /etc/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-comment">#设定日志格式</span><br>    <span class="hljs-attribute">access_log</span>    /var/log/access.log;<br> <br>    <span class="hljs-comment">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br>    <span class="hljs-comment">#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br> <br>    <span class="hljs-comment">#连接超时时间</span><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br>    <span class="hljs-attribute">tcp_nodelay</span>        <span class="hljs-literal">on</span>;<br>    <br>    <span class="hljs-comment">#开启gzip压缩</span><br>    <span class="hljs-attribute">gzip</span>  <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">&quot;MSIE [1-6]\.(?!.*SV1)&quot;</span>;<br> <br>    <span class="hljs-comment">#设定请求缓冲</span><br>    <span class="hljs-attribute">client_header_buffer_size</span>    <span class="hljs-number">1k</span>;<br>    <span class="hljs-attribute">large_client_header_buffers</span>  <span class="hljs-number">4</span> <span class="hljs-number">4k</span>;<br> <br>    <span class="hljs-attribute">include</span> /etc/conf.d/<span class="hljs-regexp">*.conf</span>;<br>    <span class="hljs-attribute">include</span> /etc/sites-enabled/*;<br> <br>    <span class="hljs-comment">#设定负载均衡的服务器列表</span><br>     <span class="hljs-section">upstream</span> mysvr &#123;<br>    <span class="hljs-comment">#weigth参数表示权值，权值越高被分配到的几率越大</span><br>    <span class="hljs-comment">#本机上的Squid开启3128端口</span><br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.8.1:3128</span> weight=<span class="hljs-number">5</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.8.2:80</span>  weight=<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.8.3:80</span>  weight=<span class="hljs-number">6</span>;<br>    &#125;<br> <br> <br>   <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment">#侦听80端口</span><br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-comment">#定义使用www.xx.com访问</span><br>        <span class="hljs-attribute">server_name</span>  www.xx.com;<br> <br>        <span class="hljs-comment">#设定本虚拟主机的访问日志</span><br>        <span class="hljs-attribute">access_log</span>  logs/www.xx.com.access.log  main;<br> <br>    <span class="hljs-comment">#默认请求</span><br>    <span class="hljs-section">location</span> / &#123;<br>          <span class="hljs-attribute">root</span>   /root;      <span class="hljs-comment">#定义服务器的默认网站根目录位置</span><br>          <span class="hljs-attribute">index</span> index.php index.html index.htm;   <span class="hljs-comment">#定义首页索引文件的名称</span><br> <br>          <span class="hljs-attribute">fastcgi_pass</span>  www.xx.com;<br>         <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="hljs-variable">$document_root</span>/<span class="hljs-variable">$fastcgi_script_name</span>; <br>          <span class="hljs-attribute">include</span> /etc/fastcgi_params;<br>        &#125;<br> <br>    <span class="hljs-comment"># 定义错误提示页面</span><br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;  <br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   /root;<br>    &#125;<br> <br>    <span class="hljs-comment">#静态文件，nginx自己处理</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(images|javascript|js|css|flash|media|static)/</span> &#123;<br>        <span class="hljs-attribute">root</span> /var/www/virtual/htdocs;<br>        <span class="hljs-comment">#过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br>        <span class="hljs-attribute">expires</span> <span class="hljs-number">30d</span>;<br>    &#125;<br>    <span class="hljs-comment">#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>        <span class="hljs-attribute">root</span> /root;<br>        <span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127.0.0.1:9000</span>;<br>        <span class="hljs-attribute">fastcgi_index</span> index.php;<br>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME /home/www/www<span class="hljs-variable">$fastcgi_script_name</span>;<br>        <span class="hljs-attribute">include</span> fastcgi_params;<br>    &#125;<br>    <span class="hljs-comment">#设定查看Nginx状态的地址</span><br>    <span class="hljs-section">location</span> /NginxStatus &#123;<br>        <span class="hljs-attribute">stub_status</span>            <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">access_log</span>              <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">auth_basic</span>              <span class="hljs-string">&quot;NginxStatus&quot;</span>;<br>        <span class="hljs-attribute">auth_basic_user_file</span>  conf/htpasswd;<br>    &#125;<br>    <span class="hljs-comment">#禁止访问 .htxxx 文件</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ /\.ht</span> &#123;<br>        <span class="hljs-attribute">deny</span> all;<br>    &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Nginx在dockerfile中的配置"><a href="#Nginx在dockerfile中的配置" class="headerlink" title="Nginx在dockerfile中的配置"></a>Nginx在dockerfile中的配置</h1><p>Dockerfile中执行的方式，注意这里是将自己配置的nginx的配置文件拷贝到了&#x2F;opt&#x2F;nginx的目录下面</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">CMD[“nginx”,”-p”,”<span class="hljs-regexp">/opt/</span>nginx”.”-c”,”<span class="hljs-regexp">/opt/</span>conf/nginx.conf”]<br></code></pre></td></tr></table></figure><h1 id="Nginx在配置文件中的内置变量"><a href="#Nginx在配置文件中的内置变量" class="headerlink" title="Nginx在配置文件中的内置变量"></a>Nginx在配置文件中的内置变量</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过arg_&lt;name&gt;的方式可取出相关参数，若请求 /foo?name=Tony&amp;age=2，则 arg_name=tony arg_age=2</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">arg_name</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">args</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端IP地址二进制</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">binary_remote_addr</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发送到客户端的字节数，不包括响应头</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">body_bytes_sent</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发送给客户端字节数</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">bytes_sent</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">连接序列号</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">connection</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前已经连接的请求书</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">connection_requests</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Content-Length 请求头</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">content_length</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Content-Type 请求头</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">content_type</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">cookie 名称</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">cookie_name</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前请求的 root 或 <span class="hljs-built_in">alias</span> 的值</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">document_root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">与 <span class="hljs-variable">$uri</span> 相同</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">document_uri</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">优先级：请求行中的 host name，请求头中的 Host，请求匹配的 server name</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">host</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">host name</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">hostname</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">任意请求头字段。变量名的最后一部分是转换为小写的字段名，用下划线替换破折号</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">http_name</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果连接在 SSL 模式下运行，则为 on，否则为空字符串</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">https</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">? 后如果请求行有参数，或者空字符串</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">is_args</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置此变量可以限制响应速度</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">limit_rate</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前时间(秒)，分辨率为毫秒</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">msec</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx 版本号</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">nginx_version</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前 worker 进程号</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">pid</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果是 pipelined 则为 p，否则为 .</span> <br><span class="hljs-meta prompt_">$</span><span class="language-bash">pipe</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">代理协议头中的客户端地址，否则为空字符串，代理协议之前必须通过在listen指令中设置 proxy_protocol 参数来启用</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">proxy_protocol_addr</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">来自代理协议头的客户端端口，否则为空字符串，代理协议之前必须通过在listen指令中设置 proxy_protocol 参数来启用</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">proxy_protocol_port</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">与 <span class="hljs-variable">$args</span> 相同</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">query_string</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">与当前请求的 root 或 <span class="hljs-built_in">alias</span> 指令值对应的绝对路径名，所有符号链接都解析为实际路径</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">realpath_root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端地址</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">remote_addr</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端端口</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">remote_port</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 Basic auth 的用户名</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">remote_user</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">完整的请求行</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">请求体，当将请求体读入内存缓冲区时，proxy_pass、fastcgi_pass、uwsgi_pass和scgi_pass指令处理的位置可以使用变量的值</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_body</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">具有请求主体的临时文件的名称</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_body_file</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果请求完成则为 OK，否则为空</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_completion</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前请求的文件路径，基于 root 或 <span class="hljs-built_in">alias</span> 和请求 URI</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_filename</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">由16个随机字节生成的惟一请求标识符，以十六进制表示</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_id</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">请求长度(包括请求行、头和请求体)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_length</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">请求方法，如 GET 或 POST</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_method</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">请求处理时间，从客户端读取第一个字节以来的时间</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_time</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若请求 /foo?a=1&amp;b=2，则 request_uri=/foo?a=1&amp;b=2</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_uri</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如 http 或 https</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">scheme</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">任意响应报头字段，变量名的最后一部分是转换为小写的字段名，用下划线替换破折号</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sent_http_name</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">响应结束时发送的任意字段，变量名的最后一部分是转换为小写的字段名，用下划线替换破折号</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sent_trailer_name</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">接受请求的服务器的地址</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">server_addr</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">接受请求的 server 名称</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">server_name</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">接受请求的 server 端口</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">server_port</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">请求协议，如 HTTP/1.0 或 HTTP/1.1 或 HTTP/2.0</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">server_protocol</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">响应状态</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">status</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">tcpinfo_rtt,<span class="hljs-variable">$tcpinfo_rttvar</span>,<span class="hljs-variable">$tcpinfo_snd_cwnd</span>,<span class="hljs-variable">$tcpinfo_rcv_space</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地时间ISO 8601标准格式</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">time_iso8601</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通用日志格式的本地时间</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">time_local</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若请求 /foo?a=1&amp;b=2，则 uri=/foo</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">uri</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用户代理</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">http_user_agent</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">cookie</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">http_cookie</span><br></code></pre></td></tr></table></figure><h1 id="Nginx的访问鉴权（设置登录账号密码）"><a href="#Nginx的访问鉴权（设置登录账号密码）" class="headerlink" title="Nginx的访问鉴权（设置登录账号密码）"></a>Nginx的访问鉴权（设置登录账号密码）</h1><h2 id="首先安装htpasswd和ngxin工具"><a href="#首先安装htpasswd和ngxin工具" class="headerlink" title="首先安装htpasswd和ngxin工具"></a>首先安装htpasswd和ngxin工具</h2><p>用htpasswd的工具在&#x2F;etc&#x2F;创建一个用户密码，我这里创建一个admin用户，密码也是admin</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ htpasswd -c .htpasswd <span class="hljs-keyword">admin</span><br><span class="hljs-built_in">New</span> <span class="hljs-keyword">password</span>: <span class="hljs-keyword">admin</span><br>Re-<span class="hljs-keyword">type</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">password</span>: <span class="hljs-keyword">admin</span><br>Adding <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">admin</span><br></code></pre></td></tr></table></figure><h2 id="在ngxin的配置文件中添加配置，加入你之前访问的端口是30003"><a href="#在ngxin的配置文件中添加配置，加入你之前访问的端口是30003" class="headerlink" title="在ngxin的配置文件中添加配置，加入你之前访问的端口是30003"></a>在ngxin的配置文件中添加配置，加入你之前访问的端口是30003</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>  <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">0.0.0.0:40003</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>      <span class="hljs-attribute">proxy_pass</span> http://localhost:30003/;<br>      <span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&quot;Prometheus&quot;</span>;<br>      <span class="hljs-attribute">auth_basic_user_file</span> <span class="hljs-string">&quot;.htpasswd&quot;</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="启动nginx采用如下地址访问你的30003服务"><a href="#启动nginx采用如下地址访问你的30003服务" class="headerlink" title="启动nginx采用如下地址访问你的30003服务"></a>启动nginx采用如下地址访问你的30003服务</h2><p>在浏览器输入<a href="http://nginx-ip:40003，提示你需要输入账号密码，输入之前的admin/admin则登录成功">http://nginx-ip:40003，提示你需要输入账号密码，输入之前的admin/admin则登录成功</a></p><p>也可以在后台进行curl -u admin <a href="http://localhost:40003进行测试访问">http://localhost:40003进行测试访问</a></p><h2 id="Nginx中proxy-pass的配置"><a href="#Nginx中proxy-pass的配置" class="headerlink" title="Nginx中proxy_pass的配置"></a>Nginx中proxy_pass的配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">location <span class="hljs-regexp">/test/</span><br>&#123;<br>Proxy_pass http:<span class="hljs-regexp">//</span>t6:<span class="hljs-number">8300</span>;   <span class="hljs-comment">#不到/</span><br> &#125;<br><br>location <span class="hljs-regexp">/test/</span><br>&#123;<br>Proxy_pass http:<span class="hljs-regexp">//</span>t6:<span class="hljs-number">8300</span><span class="hljs-regexp">/;  #带/</span><br> &#125;<br></code></pre></td></tr></table></figure><p>上面两种配置，区别只在于proxy_pass转发的路径后是否带 “&#x2F;”</p><p>针对情况1，如果访问url &#x3D; <a href="http://server/test/test.jsp%EF%BC%8C%E5%88%99%E8%A2%ABnginx%E4%BB%A3%E7%90%86%E5%90%8E%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84%E4%BC%9A%E4%BE%BF%E9%97%AEhttp://proxy_pass/test/test.jsp%EF%BC%8C%E5%B0%86test/">http://server/test/test.jsp，则被nginx代理后，请求路径会便问http://proxy_pass/test/test.jsp，将test/</a> 作为根路径，请求test&#x2F;路径下的资源</p><p>针对情况2，如果访问url &#x3D; <a href="http://server/test/test.jsp%EF%BC%8C%E5%88%99%E8%A2%ABnginx%E4%BB%A3%E7%90%86%E5%90%8E%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84%E4%BC%9A%E5%8F%98%E4%B8%BA">http://server/test/test.jsp，则被nginx代理后，请求路径会变为</a> <a href="http://proxy_pass/test.jsp%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEserver%E7%9A%84%E6%A0%B9%E8%B5%84%E6%BA%90">http://proxy_pass/test.jsp，直接访问server的根资源</a></p><h1 id="Nginx的启停"><a href="#Nginx的启停" class="headerlink" title="Nginx的启停"></a>Nginx的启停</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> usr/local/sbin<br>./nginx<br></code></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>更改配置重启nginx</p><p>kill -HUP 主进程号或进程号文件路径,或者使用</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/sbin</span><br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><p>判断配置文件是否正确　</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">nginx -t -c <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/conf/</span>nginx.conf<br>或者<br>cd <span class="hljs-regexp">/usr/</span>local/sbin<br>./nginx -t<br></code></pre></td></tr></table></figure><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>查询nginx主进程号</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginx<br></code></pre></td></tr></table></figure><p>从容停止 kill -QUIT 主进程号<br>快速停止 kill -TERM 主进程号<br>强制停止 kill -9 nginx</p><p>若nginx.conf配置了pid文件路径，如果没有，则在logs目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -信号类型 <span class="hljs-string">&#x27;/usr/local/logs/nginx.pid&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="Nginx如何读取环境变量"><a href="#Nginx如何读取环境变量" class="headerlink" title="Nginx如何读取环境变量"></a>Nginx如何读取环境变量</h1><h2 id="首先需要引入nginx的lua模块"><a href="#首先需要引入nginx的lua模块" class="headerlink" title="首先需要引入nginx的lua模块"></a>首先需要引入nginx的lua模块</h2><p>具体安装lua模块参考下列dockerfile</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Base images 基础镜像</span><br>FROM centos:centos7<br><span class="hljs-comment">#FROM hub.c.163.com/netease_comb/centos:7</span><br><span class="hljs-comment">#安装相关依赖</span><br>RUN yum -y update<br>RUN yum -y install  gcc gcc-c++ autoconf automake make<br>RUN yum -y install  zlib zlib-devel openssl* pcre* wget lua-devel<br> <br><span class="hljs-comment">#MAINTAINER 维护者信息</span><br>MAINTAINER niewx <span class="hljs-number">35715270</span>@qq.com<br> <br><span class="hljs-comment">#ADD  获取url中的文件,放在当前目录下</span><br>ADD http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.14</span>.<span class="hljs-number">0</span>.tar.gz <span class="hljs-regexp">/tmp/</span><br><span class="hljs-comment">#LuaJIT 2.1</span><br><span class="hljs-comment">#ADD http://luajit.org/download/LuaJIT-2.0.5.tar.gz /tmp/</span><br>ADD https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/LuaJIT/</span>LuaJIT<span class="hljs-regexp">/archive/</span>v2.<span class="hljs-number">0.5</span>.tar.gz <span class="hljs-regexp">/tmp/</span><br><span class="hljs-comment">#ngx_devel_kit（NDK）模块</span><br>ADD https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/simpl/</span>ngx_devel_kit<span class="hljs-regexp">/archive/</span>v0.<span class="hljs-number">3.0</span>.tar.gz <span class="hljs-regexp">/tmp/</span><br><span class="hljs-comment">#lua-nginx-module 模块</span><br>ADD https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/openresty/</span>lua-nginx-module<span class="hljs-regexp">/archive/</span>v0.<span class="hljs-number">10.13</span>.tar.gz <span class="hljs-regexp">/tmp/</span><br><span class="hljs-comment">#nginx ngx_cache_purge模块</span><br>ADD http:<span class="hljs-regexp">//</span>labs.frickle.com<span class="hljs-regexp">/files/</span>ngx_cache_purge-<span class="hljs-number">2.3</span>.tar.gz  <span class="hljs-regexp">/tmp/</span><br> <br><span class="hljs-comment">#切换目录</span><br>WORKDIR  /tmp <br> <br><span class="hljs-comment">#安装LuaJIT 2.0.5</span><br><span class="hljs-comment">#RUN wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz -P /tmp/</span><br>RUN tar zxf v2.<span class="hljs-number">0.5</span>.tar.gz<br>WORKDIR  <span class="hljs-regexp">/tmp/</span>LuaJIT-<span class="hljs-number">2.0</span>.<span class="hljs-number">5</span><br><span class="hljs-comment">#RUN cd LuaJIT-2.0.5</span><br>RUN make PREFIX=<span class="hljs-regexp">/usr/</span>local/luajit <br>RUN make install PREFIX=<span class="hljs-regexp">/usr/</span>local/luajit<br> <br><span class="hljs-comment">#安装ngx_devel_kit(NDK)</span><br>WORKDIR  /tmp<br>RUN tar -xzvf v0.<span class="hljs-number">3.0</span>.tar.gz<br>RUN cp -r ngx_devel_kit-<span class="hljs-number">0.3</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/ /u</span>sr<span class="hljs-regexp">/local/</span>src/<br> <br><span class="hljs-comment">#安装lua-nginx-module模块</span><br>RUN tar -xzvf v0.<span class="hljs-number">10.13</span>.tar.gz<br>RUN cp -r lua-nginx-module-<span class="hljs-number">0.10</span>.<span class="hljs-number">13</span><span class="hljs-regexp">/ /u</span>sr<span class="hljs-regexp">/local/</span>src/<br> <br><span class="hljs-comment">#安装nginx ngx_cache_purge模块</span><br>RUN tar -xzvf ngx_cache_purge-<span class="hljs-number">2.3</span>.tar.gz<br>RUN cp -r ngx_cache_purge-<span class="hljs-number">2.3</span><span class="hljs-regexp">/ /u</span>sr<span class="hljs-regexp">/local/</span>src/<br> <br><span class="hljs-comment">#设置环境变量</span><br>RUN export LUAJIT_LIB=<span class="hljs-regexp">/usr/</span>local/lib<br>RUN export LUAJIT_INC=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/include/</span>luajit-<span class="hljs-number">2.0</span><br> <br>RUN mkdir -p &#123;<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/logs,/</span>var/lock&#125;<br> <br><span class="hljs-comment">#编译安装Nginx</span><br>RUN useradd -M -s <span class="hljs-regexp">/sbin/</span>nologin nginx<br>RUN tar -zxvf nginx-<span class="hljs-number">1.14</span>.<span class="hljs-number">0</span>.tar.gz<br>RUN mkdir -p <span class="hljs-regexp">/usr/</span>local/nginx<br>RUN cd <span class="hljs-regexp">/tmp/</span>nginx-<span class="hljs-number">1.14</span>.<span class="hljs-number">0</span> \<br>&amp;&amp; .<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx --user=nginx --group=nginx \<br>--error-log-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/logs/</span>error.log \<br>--http-log-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/logs/</span>access.log \<br>--pid-path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/logs/</span>nginx.pid \<br>--lock-path=<span class="hljs-regexp">/var/</span>lock/nginx.lock \<br>--with-ld-opt=<span class="hljs-string">&quot;-Wl,-rpath,/usr/local/luajit/lib&quot;</span> \<br>--with-http_stub_status_module \<br>--with-http_ssl_module \<br>--with-http_sub_module \<br>--add-module=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>lua-nginx-module-<span class="hljs-number">0.10</span>.<span class="hljs-number">13</span> \<br>--add-module=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>ngx_devel_kit-<span class="hljs-number">0.3</span>.<span class="hljs-number">0</span> \<br>--add-module=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>ngx_cache_purge-<span class="hljs-number">2.3</span> \<br>&amp;&amp; make &amp;&amp; make install<br><span class="hljs-comment">#参数说明</span><br><span class="hljs-comment">#--prefix 用于指定nginx编译后的安装目录</span><br><span class="hljs-comment">#--add-module 为添加的第三方模块，此次添加了fdfs的nginx模块</span><br><span class="hljs-comment">#--with..._module 表示启用的nginx模块，如此处启用了http_ssl_module模块</span><br>RUN <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin/</span>nginx -c <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/conf/</span>nginx.conf<br>RUN ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin/</span>* <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin/</span><br><span class="hljs-comment">#EXPOSE 映射端口</span><br>EXPOSE <span class="hljs-number">80</span> <span class="hljs-number">443</span><br> <br><span class="hljs-comment">#CMD 运行以下命令</span><br><span class="hljs-comment">#CMD [&quot;nginx&quot;]</span><br>CMD [<span class="hljs-string">&quot;/usr/local/sbin/nginx&quot;</span>,<span class="hljs-string">&quot;-g&quot;</span>,<span class="hljs-string">&quot;daemon off;&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="在系统中写入你的环境变量"><a href="#在系统中写入你的环境变量" class="headerlink" title="在系统中写入你的环境变量"></a>在系统中写入你的环境变量</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">TEST_IP</span>=10.10.10.10 <br></code></pre></td></tr></table></figure><h2 id="在nginx中引入你的环境变量，具体编写参考如下"><a href="#在nginx中引入你的环境变量，具体编写参考如下" class="headerlink" title="在nginx中引入你的环境变量，具体编写参考如下"></a>在nginx中引入你的环境变量，具体编写参考如下</h2><p><img src="/img/2021-05-21-Nginx-learning-and-configuration/1.png" alt="upload-image"></p><h1 id="Nginx监听多个端口"><a href="#Nginx监听多个端口" class="headerlink" title="Nginx监听多个端口"></a>Nginx监听多个端口</h1><p>可以配置多个server，每个server配置不同的端口 </p><p><img src="/img/2021-05-21-Nginx-learning-and-configuration/1.png" alt="upload-image"></p><h1 id="Nginx的负载均衡"><a href="#Nginx的负载均衡" class="headerlink" title="Nginx的负载均衡"></a>Nginx的负载均衡</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//举例，以下IP，端口无效</span><br> upstream test&#123; <br>      <span class="hljs-keyword">server</span> <span class="hljs-number">11.22</span><span class="hljs-number">.333</span><span class="hljs-number">.11</span>:<span class="hljs-number">6666</span> weight=<span class="hljs-number">1</span>; <br>      <span class="hljs-keyword">server</span> <span class="hljs-number">11.22</span><span class="hljs-number">.333</span><span class="hljs-number">.22</span>:<span class="hljs-number">8888</span> down; <br>      <span class="hljs-keyword">server</span> <span class="hljs-number">11.22</span><span class="hljs-number">.333</span><span class="hljs-number">.33</span>:<span class="hljs-number">8888</span> backup;<br>      <span class="hljs-keyword">server</span> <span class="hljs-number">11.22</span><span class="hljs-number">.333</span><span class="hljs-number">.44</span>:<span class="hljs-number">5555</span> weight=<span class="hljs-number">2</span>; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>down 表示单前的server临时不參与负载.</li><li>weight 默觉得1.weight越大，负载的权重就越大</li><li>backup： 其他全部的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻</li></ul>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitbook的生成和部署</title>
    <link href="/2021/04/21/2021-04-21-gitbook-generation-and-deployment-/"/>
    <url>/2021/04/21/2021-04-21-gitbook-generation-and-deployment-/</url>
    
    <content type="html"><![CDATA[<p>作为一个运维工程，写文档是日常的工作之一，很多时候我们需要将文档分享给其他人，一般都是用现在的在线文档进行分享，其实这里我们也可以gitbook来发布我们的文档，这里可以更加方便的分享给其他人查阅。今天我们来说说如何生成gitbook并部署到k8s上运行我们的gitbook，并提供对应的域名对外提供访问，让其他人可以直接通过域名来访问文档。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>虚拟机一台</li><li>k8s环境</li><li>域名</li><li>github账号</li></ul><p>生成部署gitbook需要上面这些环境，虚拟机也可以用k8s集群中的node节点，这里只是用来本地构建gitbook的markdown文档和推送编译后的html文件到远程git仓库上，k8s环境这里用的是腾讯云的tke集群，域名和github都需要自行申请。</p><h1 id="本地安装部署gitbook"><a href="#本地安装部署gitbook" class="headerlink" title="本地安装部署gitbook"></a>本地安装部署gitbook</h1><p>gitbook是一个基于Node.js的命令行工具，所以要先安装Node.js，安装nodejs默认会安装npm，所以这里不需要安装npm，安装好之后下载下gitbook-cli命令，然后创建一个目录作为gitbook的工作目录</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># node -v</span><br>v6<span class="hljs-number">.17</span><span class="hljs-number">.1</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># npm -v</span><br><span class="hljs-number">3.10</span><span class="hljs-number">.10</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># npm install -g gitbook-cli</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># mkdir gitbook</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># cd gitbook</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># gitbook init</span><br>warn: <span class="hljs-literal">no</span> summary file <span class="hljs-keyword">in</span> this book<br>info: create README.md<br>info: create SUMMARY.md<br>info: initialization <span class="hljs-keyword">is</span> finished<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos gitbook]<span class="hljs-comment"># ll</span><br>total <span class="hljs-number">8</span><br>-rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">16</span> Apr <span class="hljs-number">22</span> <span class="hljs-number">12</span>:<span class="hljs-number">39</span> README.md<br>-rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">40</span> Apr <span class="hljs-number">22</span> <span class="hljs-number">12</span>:<span class="hljs-number">39</span> SUMMARY.md<br></code></pre></td></tr></table></figure><p>执行init后会生成2个md文件</p><ul><li>README.md（书籍的介绍在这个文件里）</li><li>SUMMARY.md（书籍的目录结构在这里配置）</li></ul><p>下面我们在SUMMRAY.md编写一下目录结构</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[root@VM-0-13-centos gitbook]</span># cat <span class="hljs-selector-tag">SUMMARY</span><span class="hljs-selector-class">.md</span><br># <span class="hljs-selector-tag">Summary</span><br><br>* <span class="hljs-selector-attr">[Introduction]</span>(README.md)<br>* <span class="hljs-selector-attr">[前言]</span>(readme.md)<br>* <span class="hljs-selector-attr">[第一章]</span>(part1/README.md)<br>    * <span class="hljs-selector-attr">[第一节]</span>(part1/<span class="hljs-number">1</span>.md)<br>    * <span class="hljs-selector-attr">[第二节]</span>(part1/<span class="hljs-number">2</span>.md)<br>    * <span class="hljs-selector-attr">[第三节]</span>(part1/<span class="hljs-number">3</span>.md)<br>    * <span class="hljs-selector-attr">[第四节]</span>(part1/<span class="hljs-number">4</span>.md)<br>* <span class="hljs-selector-attr">[第二章]</span>(part2/README.md)<br>* <span class="hljs-selector-attr">[第三章]</span>(part3/README.md)<br>* <span class="hljs-selector-attr">[第四章]</span>(part4/README.md)<br></code></pre></td></tr></table></figure><p>创建一个part1目录，创建一个README.md来作为第一章的简介</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos gitbook]<span class="hljs-meta"># mkdir part1</span><br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos part1]<span class="hljs-meta"># cat README.md</span><br><span class="hljs-meta"># 第一章</span><br></code></pre></td></tr></table></figure><p>然后我们本地运行下gitbook</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos gitbook]<span class="hljs-meta"># gitbook serve &amp;</span><br>Live reload server started on port: <span class="hljs-number">35729</span><br>Press CTRL+C to quit ...<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">info:</span> <span class="hljs-number">7</span> plugins are installed<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;livereload&quot;</span>... OK<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;highlight&quot;</span>... OK<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;search&quot;</span>... OK<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;lunr&quot;</span>... OK<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;sharing&quot;</span>... OK<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;fontsettings&quot;</span>... OK<br><span class="hljs-symbol">info:</span> loading plugin <span class="hljs-string">&quot;theme-default&quot;</span>... OK<br><span class="hljs-symbol">info:</span> found <span class="hljs-number">1</span> pages<br><span class="hljs-symbol">info:</span> found <span class="hljs-number">0</span> asset files<br><span class="hljs-symbol">info:</span> &gt;&gt; generation finished with success in <span class="hljs-number">1.4</span>s !<br><br>Starting server ...<br>Serving book on http:<span class="hljs-comment">//localhost:4000</span><br></code></pre></td></tr></table></figure><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/1.png" alt="upload-image"> </p><p>运行gitbook后，可以通过服务器ip和4000端口访问，如果后面我们有更新gitbook目录下的markdown文档，gitbook会自动同步并生成静态文件在_book目录下。</p><h1 id="代码上传到github"><a href="#代码上传到github" class="headerlink" title="代码上传到github"></a>代码上传到github</h1><p>这里我们如果要自动化部署可以将gitbook生成的静态文件上传到github，然后构建成docker镜像，最终部署到k8s集群中。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-0-13-centos gitbook-docker]<span class="hljs-comment"># ll</span><br>total 12<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 87 </span>Apr<span class="hljs-number"> 22 </span>13:12 Dockerfile<br>drwxr-xr-x<span class="hljs-number"> 4 </span>root root<span class="hljs-number"> 4096 </span>Apr<span class="hljs-number"> 22 </span>13:11 gitbook<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 17 </span>Apr<span class="hljs-number"> 22 </span>13:07 README.md<br></code></pre></td></tr></table></figure><p>这里的github代码仓库目录结构如下，gitbook存放生成的静态文件，Dokcerfile用来构建docker镜像，具体代码如下，README.md文件说明代码仓库的作用。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos gitbook-docker]<span class="hljs-comment"># cat Dockerfile</span><br>FROM nginx<br>WORKDIR <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>ADD .<span class="hljs-regexp">/gitbook /u</span>sr<span class="hljs-regexp">/share/</span>nginx/html<br>EXPOSE <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>我们直接用一个nginx将gitbook生成的静态文件展示，我们将gitbook-docker的代码push到远程仓库即可，后续更新代码只需要更新gitbook目录下的静态文件。</p><h1 id="自动化构建发布到k8s集群"><a href="#自动化构建发布到k8s集群" class="headerlink" title="自动化构建发布到k8s集群"></a>自动化构建发布到k8s集群</h1><p>这里自动化构建发布用的是腾讯云的TCR镜像仓库和流水线，首先你需要在TCR上购买一个实例，然后新建一个镜像仓库用来存gitbook镜像，这里已经新建了一个gitbook的镜像仓库。</p><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/2.png" alt="upload-image"> </p><p>然后我们新建一条流水线，这样我们更新代码后，就可以自动构建发布到我们的tke集群中，流水线信息如下</p><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/3.png" alt="upload-image"> </p><p>这里我们提交下代码，触发下自动构建看看，</p><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/4.png" alt="upload-image"> </p><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/5.png" alt="upload-image"> </p><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/6.png" alt="upload-image"> </p><p>这里我们看到提交了代码后，流水线将github上的代码构建成docker镜像并发布到tke集群了，pod正常运行。</p><h1 id="ingress域名暴露gitbook服务"><a href="#ingress域名暴露gitbook服务" class="headerlink" title="ingress域名暴露gitbook服务"></a>ingress域名暴露gitbook服务</h1><p>下面我们用ingress来配置域名来访问我们的gitbook服务，这里我们已经在集群部署了nginx-ingress了，首先创建一个service</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Service</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">clusterIP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.16.8.27</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: 80-80-tcp</span><br>    <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attribute">targetPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook</span><br>    <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook</span><br>  <span class="hljs-attribute">sessionAffinity</span><span class="hljs-punctuation">:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterIP</span><br></code></pre></td></tr></table></figure><p>然后创建ingress转发到后端的service</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook-ingress</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: gitbook.tke.niewx.cn</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitbook</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><p>ingress创建好之后，我们通过域名来访问下我们的gitbook服务看看，浏览器输入gitbook.tke.niewx.cn就可以访问到我们的gitbook文档了。</p><p><img src="/img/2021-04-21-gitbook-generation-and-deployment-/7.png" alt="upload-image"> </p><p>如果我们后面需要更新文档，只需要编写md文档，然后将生成的静态文件更新到远程仓库即可，流水线执行完成后，直接通过域名就可以访问到最新的文档了。</p>]]></content>
    
    
    <categories>
      
      <category>Gitbook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>gitbook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s上部署rancher</title>
    <link href="/2021/04/16/2021-04-16-k8s-deploy-rancher/"/>
    <url>/2021/04/16/2021-04-16-k8s-deploy-rancher/</url>
    
    <content type="html"><![CDATA[<h1 id="Rancher简介"><a href="#Rancher简介" class="headerlink" title="Rancher简介"></a>Rancher简介</h1><p>Rancher是一个开源的企业级容器管理平台。通过Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。</p><p>Rancher由以下四个部分组成：</p><ul><li>基础设施编排</li></ul><p>Rancher可以使用任何公有云或者私有云的Linux主机资源。Linux主机可以是虚拟机，也可以是物理机。Rancher仅需要主机有CPU，内存，本地磁盘和网络资源。从Rancher的角度来说，一台云厂商提供的云主机和一台自己的物理机是一样的。</p><p>Rancher为运行容器化的应用实现了一层灵活的基础设施服务。Rancher的基础设施服务包括网络， 存储， 负载均衡， DNS和安全模块。Rancher的基础设施服务也是通过容器部署的，所以同样Rancher的基础设施服务可以运行在任何Linux主机上。</p><ul><li>容器编排与调度</li></ul><p>很多用户都会选择使用容器编排调度框架来运行容器化应用。Rancher包含了当前全部主流的编排调度引擎，例如Docker Swarm， Kubernetes， 和Mesos。同一个用户可以创建Swarm或者Kubernetes集群。并且可以使用原生的Swarm或者Kubernetes工具管理应用。</p><p>除了Swarm，Kubernetes和Mesos之外，Rancher还支持自己的Cattle容器编排调度引擎。Cattle被广泛用于编排Rancher自己的基础设施服务以及用于Swarm集群，Kubernetes集群和Mesos集群的配置，管理与升级。</p><ul><li>应用商店</li></ul><p>Rancher的用户可以在应用商店里一键部署由多个容器组成的应用。用户可以管理这个部署的应用，并且可以在这个应用有新的可用版本时进行自动化的升级。Rancher提供了一个由Rancher社区维护的应用商店，其中包括了一系列的流行应用。Rancher的用户也可以创建自己的私有应用商店。</p><ul><li>企业级权限管理</li></ul><p>Rancher支持灵活的插件式的用户认证。支持Active Directory，LDAP， Github等 认证方式。 Rancher支持在环境级别的基于角色的访问控制 (RBAC)，可以通过角色来配置某个用户或者用户组对开发环境或者生产环境的访问权限。</p><p>rancher的部署方式有很多种，具体可以参考文档<a href="https://rancher.com/docs/v2.x/en/installation/requirements/">https://rancher.com/docs/v2.x/en/installation/requirements/</a>，今天我们讲讲如何通过helm部署rancher到k8s集群中，然后管理和创建我们的k8s集群。</p><h1 id="添加helm源"><a href="#添加helm源" class="headerlink" title="添加helm源"></a>添加helm源</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@elasticsearch01 yaml]# helm repo <span class="hljs-keyword">add</span> rancher-<span class="hljs-keyword">stable</span> https://releases.rancher.com/<span class="hljs-keyword">server</span>-charts/<span class="hljs-keyword">stable</span><br></code></pre></td></tr></table></figure><h1 id="申请域名和证书"><a href="#申请域名和证书" class="headerlink" title="申请域名和证书"></a>申请域名和证书</h1><p>由于rancher必须通过域名https访问，域名这里需要自己购买，ssl证书这里可以在云上申请一个免费的，有效期一年，这里后面ingress需要用到，我这里的域名是&lt;rancher.tke.niewx.cn&gt; ，这里rancher部署在cattle-system这个命名空间下。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># kubectl <span class="hljs-keyword">create</span> ns cattle-<span class="hljs-keyword">system</span><br># kubectl <span class="hljs-keyword">create</span> secret tls rancher-ssl --<span class="hljs-keyword">key</span> rancher.tke.niewx.cn.<span class="hljs-keyword">key</span> --cert rancher.tke.niewx.cn.pemt -n cattle-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><h1 id="helm部署rancher"><a href="#helm部署rancher" class="headerlink" title="helm部署rancher"></a>helm部署rancher</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"># helm install rancher-stable/rancher  --namespace=cattle-<span class="hljs-built_in">system</span>  --<span class="hljs-keyword">set</span> <span class="hljs-built_in">hostname</span>=rancher.minminmsn.<span class="hljs-keyword">com</span>   --<span class="hljs-keyword">set</span> ingress.tls.<span class="hljs-keyword">source</span>=rancher-tls --generate-name<br></code></pre></td></tr></table></figure><h1 id="部署ingress"><a href="#部署ingress" class="headerlink" title="部署ingress"></a>部署ingress</h1><p>这里我们通过ingress来暴露访问的域名</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ranche-ingress</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cattle-system</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: rancher.tke.niewx.cn</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rancher-1618478641</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>  <span class="hljs-attribute">tls</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rancher.tke.niewx.cn</span><br>    <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rancher-tls</span><br></code></pre></td></tr></table></figure><h1 id="访问rancher"><a href="#访问rancher" class="headerlink" title="访问rancher"></a>访问rancher</h1><p>我们看下pod都起来后，可以在浏览器中输入链接<a href="https://rancher.tke.niewx.cn/">https://rancher.tke.niewx.cn</a>就可以访问域名了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos racher]<span class="hljs-comment"># kubectl get pod,svc,ingress -n cattle-system</span><br>NAME                                       READY   STATUS    RESTARTS   AGE<br>pod<span class="hljs-regexp">/cattle-cluster-agent-f7bf98759-5btng   1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">27</span>h<br>pod<span class="hljs-regexp">/rancher-1618478641-75c8567947-crwsr    1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">47</span>h<br>pod<span class="hljs-regexp">/rancher-1618478641-75c8567947-l9nnx    1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">47</span>h<br>pod<span class="hljs-regexp">/rancher-1618478641-75c8567947-mxqp5    1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">47</span>h<br>pod<span class="hljs-regexp">/rancher-webhook-7579968ff8-6thns       1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">27</span>h<br><br>NAME                         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE<br>service<span class="hljs-regexp">/rancher-1618478641   ClusterIP   172.16.6.26    &lt;none&gt;        80/</span>TCP,<span class="hljs-number">443</span>/TCP   <span class="hljs-number">47</span>h<br>service<span class="hljs-regexp">/rancher-webhook      ClusterIP   172.16.63.37   &lt;none&gt;        443/</span>TCP          <span class="hljs-number">47</span>h<br><br>NAME                                CLASS    HOSTS                  ADDRESS      PORTS     AGE<br>ingress.extensions/ranche-ingress   &lt;none&gt;   rancher.tke.niewx.cn   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.201</span>   <span class="hljs-number">80</span>, <span class="hljs-number">443</span>   <span class="hljs-number">45</span>h<br><br></code></pre></td></tr></table></figure><p><img src="/img/2021-04-16-k8s-deploy-rancher/1.png" alt="upload-image"> </p><p>我们成功登录之后，这里就说明rancher部署成功了。</p><h1 id="添加集群"><a href="#添加集群" class="headerlink" title="添加集群"></a>添加集群</h1><p>我们可以将已有的k8s集群添加到rancher里面进行管理</p><p><img src="/img/2021-04-16-k8s-deploy-rancher/2.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/3.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/4.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/5.png" alt="upload-image"> </p><p>我们在集群中执行以下命令后，集群就可以添加成功了，如果看到集群的状态是active，说明可以通过rancher管理其他已有的k8s集群了。</p><p><img src="/img/2021-04-16-k8s-deploy-rancher/6.png" alt="upload-image"> </p><h1 id="新建k8s集群"><a href="#新建k8s集群" class="headerlink" title="新建k8s集群"></a>新建k8s集群</h1><p>由于新建k8s集群需要拉取master组件镜像，这里我们可以修改下镜像源阿里源，避免镜像拉取失败导致集群创建失败，可以在rancher的系统设置中system-default-registry字段统一进行设置</p><p><img src="/img/2021-04-16-k8s-deploy-rancher/8.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/9.png" alt="upload-image"> </p><p>我们在控制台新建一个test集群，然后选择集群配置，配置好之后，根据提示命令在对应节点上输入就会自动进行部署了</p><p><img src="/img/2021-04-16-k8s-deploy-rancher/7.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/10.png" alt="upload-image"> </p><p>这里部署的过程中遇到了一个问题[etcd] Failed to bring up Etcd Plane: etcd cluster is unhealthy</p><p>这里我们执行如下命令，然后重启docker即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker stop $(docker ps -aq)<br><br>docker system prune -f<br><br>docker volume rm $(docker volume ls -q)<br><br>docker image rm $(docker image ls -q)<br><br>rm -rf <span class="hljs-regexp">/etc/</span>ceph<br>       <span class="hljs-regexp">/etc/</span>cni<br>       <span class="hljs-regexp">/etc/</span>kubernetes<br>       <span class="hljs-regexp">/opt/</span>cni<br>       <span class="hljs-regexp">/opt/</span>rke<br>       <span class="hljs-regexp">/run/</span>secrets/kubernetes.io<br>       <span class="hljs-regexp">/run/</span>calico<br>       <span class="hljs-regexp">/run/</span>flannel<br>       <span class="hljs-regexp">/var/</span>lib/calico<br>       <span class="hljs-regexp">/var/</span>lib/etcd<br>       <span class="hljs-regexp">/var/</span>lib/cni<br>       <span class="hljs-regexp">/var/</span>lib/kubelet<br>       <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/rke/</span>log<br>       <span class="hljs-regexp">/var/</span>log/containers<br>       <span class="hljs-regexp">/var/</span>log/pods<br>       <span class="hljs-regexp">/var/</span>run/calico<br></code></pre></td></tr></table></figure><p>这里测试部署只有一台虚拟机，所以都是部署在同一台机器上，稍等一会，docker容器都起来了，然后rancher界面显示集群active，则说明集群部署成功</p><p><img src="/img/2021-04-16-k8s-deploy-rancher/11.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/12.png" alt="upload-image"> </p><p>集群创建成功后，点击集群进去，然后可以获取kubecofig，或者用rancher提供的命令行工具访问集群</p><p><img src="/img/2021-04-16-k8s-deploy-rancher/13.png" alt="upload-image"> </p><p><img src="/img/2021-04-16-k8s-deploy-rancher/14.png" alt="upload-image"> </p><p>到这里，我们通过rancher部署的集群就成功了，接着就可以愉快的玩耍k8s了，rancher这里我们只是简单讲了下搭建和基本使用，其实rancher还有很多好玩的功能，大家可以自行参考官方文档进行使用</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://rancher.com/docs/v2.x/en/installation/requirements/">https://rancher.com/docs/v2.x/en/installation/requirements/</a></p>]]></content>
    
    
    <categories>
      
      <category>Rancher</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>rancher</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s上部署thanos监控系统</title>
    <link href="/2021/04/08/2021-04-08-k8s-deploy-thanos/"/>
    <url>/2021/04/08/2021-04-08-k8s-deploy-thanos/</url>
    
    <content type="html"><![CDATA[<p>Improbable团队开源了Thanos，一组通过跨集群联合、跨集群无限存储和全局查询为Prometheus增加高可用性的组件。Improbable部署了一个大型的Prometheus来监控他们的几十个Kubernetes集群。默认的Prometheus设置在查询历史数据、通过单个API调用进行跨分布式Prometheus服务器查询以及合并多个Prometheus数据方面存在困难。</p><p>Thanos通过使用后端的对象存储来解决数据保留问题。Prometheus在将数据写入磁盘时，边车的StoreAPI组件会检测到，并将数据上传到对象存储器中。Store组件还可以作为一个基于gossip协议的检索代理，让Querier组件与它进行通信以获取数据。</p><p>Thanos还提供了时间序列数据的压缩和降采样（downsample）存储。Prometheus提供了一个内置的压缩​​模型，现有较小的数据块被重写为较大的数据块，并进行结构重组以提高查询性能。Thanos在Compactor组件（作为批次作业运行）中使用了相同的机制，并压缩对象存储数据。Płotka说，Compactor也对数据进行降采样，“目前降采样时间间隔不可配置，不过我们选择了一些合理的时间间隔——5分钟和1小时”。压缩也是其他时间序列数据库（如InfluxDB和OpenTSDB）的常见功能。</p><p><img src="/img/2021-04-08-k8s-deploy-thanos/1.png" alt="upload-image"> </p><p>Thanos 是一组组件，在官网上可以看到包括：</p><ul><li>Bucket</li><li>Check</li><li>Compactor</li><li>Query</li><li>Rule</li><li>Sidecar</li><li>Store</li></ul><p>除了官方提到的这些，其实还有：</p><ul><li>receive</li><li>downsample</li></ul><p>Thanos通过一种简单的可无缝接入当前系统的方案解决这些问题，今天我们来说说如何在k8s中部署thanos。</p><h1 id="对象存储配置"><a href="#对象存储配置" class="headerlink" title="对象存储配置"></a>对象存储配置</h1><p>这里我们用的是腾讯云的cos存储，如果需要有用其他云的对象存储，可以参考官网文档<a href="https://thanos.io/v0.19/storage.md/">https://thanos.io/v0.19/storage.md/</a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> thanos-objectstorage<br><span class="hljs-symbol">  namespace:</span> thanos<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">stringData:</span><br>  objectstorage.yaml: |<br><span class="hljs-symbol">    type:</span> COS<br><span class="hljs-symbol">    config:</span><br><span class="hljs-symbol">      bucket:</span> <span class="hljs-string">&quot;nwx-cos-test&quot;</span><br><span class="hljs-symbol">      region:</span> <span class="hljs-string">&quot;ap-guangzhou&quot;</span><br><span class="hljs-symbol">      app_id:</span> <span class="hljs-string">&quot;1253985742&quot;</span><br><span class="hljs-symbol">      secret_key:</span> <span class="hljs-string">&quot;608zbxhZAVaN7&quot;</span><br><span class="hljs-symbol">      secret_id:</span> <span class="hljs-string">&quot;AKIDJNMITii&quot;</span><br></code></pre></td></tr></table></figure><h1 id="部署prometheus及sidecar"><a href="#部署prometheus及sidecar" class="headerlink" title="部署prometheus及sidecar"></a>部署prometheus及sidecar</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-headless</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10901</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">grpc</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/proxy</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/metrics</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">nonResourceURLs:</span> [<span class="hljs-string">&quot;/metrics&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-query</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">prometheus-headless</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">Parallel</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">prometheus</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">2000</span><br>        <span class="hljs-attr">runAsNonRoot:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAntiAffinity:</span><br>          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>              <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app.kubernetes.io/name</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attr">values:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span><br>            <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus:v2.15.2</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--config.file=/etc/prometheus/config_out/prometheus.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.tsdb.path=/prometheus</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.tsdb.retention.time=10d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--web.route-prefix=/</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--web.enable-lifecycle</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.tsdb.no-lockfile</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.tsdb.min-block-duration=2h</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.tsdb.max-block-duration=2h</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--log.level=debug</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9090</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">6</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">web</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">120</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">web</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/prometheus/config_out</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-config-out</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/prometheus</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-storage</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/prometheus/rules</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-rules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">thanosio/thanos:v0.11.0</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sidecar</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--log.level=debug</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--tsdb.path=/prometheus</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--prometheus.url=http://127.0.0.1:9090</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--objstore.config-file=/etc/objectstorage.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--reloader.config-file=/etc/prometheus/config/prometheus.yaml.tmpl</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--reloader.config-envsubst-file=/etc/prometheus/config_out/prometheus.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--reloader.rule-dir=/etc/prometheus/rules/</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-sidecar</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10902</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10901</span><br>        <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-config-tmpl</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/prometheus/config</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-config-out</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/prometheus/config_out</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-rules</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/prometheus/rules</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-storage</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/prometheus</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">objectstorage.yaml</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/objectstorage.yaml</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-config-tmpl</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-config-tmpl</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-config-out</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-rules</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-rules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>        <span class="hljs-attr">secret:</span><br>          <span class="hljs-attr">secretName:</span> <span class="hljs-string">thanos-objectstorage</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-storage</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">50Gi</span><br>      <span class="hljs-attr">volumeMode:</span> <span class="hljs-string">Filesystem</span><br></code></pre></td></tr></table></figure><ul><li>Prometheus 使用 StatefulSet 方式部署，挂载数据盘以便存储最新监控数据。</li><li>由于 Prometheus 副本之间没有启动顺序的依赖，所以 podManagementPolicy 指定为 Parallel，加快启动速度。</li><li>为 Prometheus 绑定足够的 RBAC 权限，以便后续配置使用 k8s 的服务发现 (kubernetes_sd_configs) 时能够正常工作。</li><li>为 Prometheus 创建 headless 类型 service，为后续 Thanos Query 通过 DNS SRV 记录来动态发现 Sidecar 的 gRPC 端点做准备 (使用 headless service 才能让 DNS SRV 正确返回所有端点)。</li><li>使用两个 Prometheus 副本，用于实现高可用。</li><li>使用硬反亲和，避免 Prometheus 部署在同一节点，既可以分散压力也可以避免单点故障。</li><li>Prometheus 使用 –storage.tsdb.retention.time 指定数据保留时长，默认15天，可以根据数据增长速度和数据盘大小做适当调整(数据增长取决于采集的指标和目标端点的数量和采集频率)。</li><li>Sidecar 使用 –objstore.config-file 引用我们刚刚创建并挂载的对象存储配置文件，用于上传数据到对象存储。<br>通常会给 Prometheus 附带一个 quay.io&#x2F;coreos&#x2F;prometheus-config-reloader 来监听配置变更并动态加载，但 thanos sidecar 也为我们提供了这个功能，所以可以直接用 thanos sidecar 来实现此功能，也支持配置文件根据模板动态生成：–reloader.config-file 指定 Prometheus 配置文件模板，–reloader.config-envsubst-file 指定生成配置文件的存放路径，假设是 &#x2F;etc&#x2F;prometheus&#x2F;config_out&#x2F;prometheus.yaml ，那么 &#x2F;etc&#x2F;prometheus&#x2F;config_out 这个路径使用 emptyDir 让 Prometheus 与 Sidecar 实现配置文件共享挂载，Prometheus 再通过 –config.file 指定生成出来的配置文件，当配置有更新时，挂载的配置文件也会同步更新，Sidecar 也会通知 Prometheus 重新加载配置。另外，Sidecar 与 Prometheus 也挂载同一份 rules 配置文件，配置更新后 Sidecar 仅通知 Prometheus 加载配置，不支持模板，因为 rules 配置不需要模板来动态生成。</li></ul><p>配置下Prometheus的配置文件，这里配置抓取监控数据以及告警策略，监控只抓取了cadvisor的数据，如果需要抓取其他类型监控，可以在prometheus-config-tmpl进行配置job。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> prometheus-config-tmpl<br><span class="hljs-symbol">  namespace:</span> thanos<br><span class="hljs-symbol">data:</span><br>  prometheus.yaml.tmpl: |-<br><span class="hljs-symbol">    global:</span><br><span class="hljs-symbol">      scrape_interval:</span> <span class="hljs-number">5</span>s<br><span class="hljs-symbol">      evaluation_interval:</span> <span class="hljs-number">5</span>s<br><span class="hljs-symbol">      external_labels:</span><br><span class="hljs-symbol">        cluster:</span> prometheus-ha<br><span class="hljs-symbol">        prometheus_replica:</span> $(POD_NAME)<br><span class="hljs-symbol">    rule_files:</span><br>    - <span class="hljs-keyword">/etc/</span>prometheus<span class="hljs-keyword">/rules/</span>*rules.yaml<br><span class="hljs-symbol">    scrape_configs:</span><br>    - job_name: cadvisor<br><span class="hljs-symbol">      metrics_path:</span> <span class="hljs-keyword">/metrics/</span>cadvisor<br><span class="hljs-symbol">      scrape_interval:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">      scrape_timeout:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">      scheme:</span> https<br><span class="hljs-symbol">      tls_config:</span><br><span class="hljs-symbol">        insecure_skip_verify:</span> true<br><span class="hljs-symbol">      bearer_token_file:</span> <span class="hljs-keyword">/var/</span>run<span class="hljs-keyword">/secrets/</span>kubernetes.io<span class="hljs-keyword">/serviceaccount/</span>token<br><span class="hljs-symbol">      kubernetes_sd_configs:</span><br>      - role: node<br><span class="hljs-symbol">      relabel_configs:</span><br>      - action: labelmap<br><span class="hljs-symbol">        regex:</span> __meta_kubernetes_node_label_(.+)<br>---<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> prometheus-rules<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    name:</span> prometheus-rules<br><span class="hljs-symbol">  namespace:</span> thanos<br><span class="hljs-symbol">data:</span><br>  alert-rules.yaml: |-<br><span class="hljs-symbol">    groups:</span><br>    - name: k8s.rules<br><span class="hljs-symbol">      rules:</span><br>      - expr: |<br>          sum(rate(container_cpu_usage_seconds_total<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">job</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;cadvisor&quot;</span>, image!=<span class="hljs-string">&quot;&quot;</span>, container!=<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span>[<span class="hljs-number">5</span>m])) by (namespace)<br><span class="hljs-symbol">        record:</span> namespace:container_cpu_usage_seconds_total:sum_rate<br>      - expr: |<br>          sum(container_memory_usage_bytes<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">job</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;cadvisor&quot;</span>, image!=<span class="hljs-string">&quot;&quot;</span>, container!=<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span>) by (namespace)<br><span class="hljs-symbol">        record:</span> namespace:container_memory_usage_bytes:sum<br>      - expr: |<br>          sum by (namespace, pod, container) (<br>            rate(container_cpu_usage_seconds_total<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">job</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;cadvisor&quot;</span>, image!=<span class="hljs-string">&quot;&quot;</span>, container!=<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span>[<span class="hljs-number">5</span>m])<br>          )<br><span class="hljs-symbol">        record:</span> namespace_pod_container:container_cpu_usage_seconds_total:sum_rate<br></code></pre></td></tr></table></figure><h1 id="部署Query"><a href="#部署Query" class="headerlink" title="部署Query"></a>部署Query</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-query</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-query</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10901</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">grpc</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-query</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-query</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-query</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-query</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-query</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAntiAffinity:</span><br>          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">podAffinityTerm:</span><br>              <span class="hljs-attr">labelSelector:</span><br>                <span class="hljs-attr">matchExpressions:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app.kubernetes.io/name</span><br>                  <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                  <span class="hljs-attr">values:</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">thanos-query</span><br>              <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">query</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--log.level=debug</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--query.auto-downsampling</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--grpc-address=0.0.0.0:10901</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--http-address=0.0.0.0:9090</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--query.partial-response</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--query.replica-label=prometheus_replica</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--query.replica-label=rule_replica</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--store=dnssrv+_grpc._tcp.prometheus-headless.thanos.svc.cluster.local</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--store=dnssrv+_grpc._tcp.thanos-rule.thanos.svc.cluster.local</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--store=dnssrv+_grpc._tcp.thanos-store.thanos.svc.cluster.local</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">thanosio/thanos:v0.11.0</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">4</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-query</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10901</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9090</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">20</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">FallbackToLogsOnError</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><ul><li>因为 Query 是无状态的，使用 Deployment 部署，也不需要 headless service，直接创建普通的 service。</li><li>使用软反亲和，尽量不让 Query 调度到同一节点。</li><li>部署多个副本，实现 Query 的高可用。</li><li>–query.partial-response 启用 Partial Response，这样可以在部分后端 Store API 返回错误或超时的情况下也能看到正确的监控数据(如果后端 Store API 做了高可用，挂掉一个副本，Query 访问挂掉的副本超时，但由于还有没挂掉的副本，还是能正确返回结果；如果挂掉的某个后端本身就不存在我们需要的数据，挂掉也不影响结果的正确性；总之如果各个组件都做了高可用，想获得错误的结果都难，所以我们有信心启用 Partial Response 这个功能)。</li><li>–query.auto-downsampling 查询时自动降采样，提升查询效率。</li><li>–query.replica-label 指定我们刚刚给 Prometheus 配置的 prometheus_replica 这个 external label，Query 向 Sidecar 拉取 Prometheus 数据时会识别这个 label 并自动去重，这样即使挂掉一个副本，只要至少有一个副本正常也不会影响查询结果，也就是可以实现 Prometheus 的高可用。同理，再指定一个 rule_replica 用于给 Ruler 做高可用。</li><li>–store 指定实现了 Store API 的地址(Sidecar, Ruler, Store Gateway, Receiver)，通常不建议写静态地址，而是使用服务发现机制自动发现 Store API 地址，如果是部署在同一个集群，可以用 DNS SRV 记录来做服务发现，比如 dnssrv+_grpc._tcp.prometheus-headless.thanos.svc.cluster.local，也就是我们刚刚为包含 Sidecar 的 Prometheus 创建的 headless service (使用 headless service 才能正确实现服务发现)，并且指定了名为 grpc 的 tcp 端口，同理，其它组件也可以按照这样加到 –store 参数里；如果是其它有些组件部署在集群外，无法通过集群 dns 解析 DNS SRV 记录，可以使用配置文件来做服务发现，也就是指定 –store.sd-files 参数，将其它 Store API 地址写在配置文件里 (挂载 ConfigMap)，需要增加地址时直接更新 ConfigMap (不需要重启 Query)。</li></ul><h1 id="部署Store-Gateway"><a href="#部署Store-Gateway" class="headerlink" title="部署Store Gateway"></a>部署Store Gateway</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-store</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-store</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10901</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10901</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10902</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-store</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-store</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-store</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-store</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">thanos-store</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">Parallel</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-store</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">store</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--log.level=debug</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--data-dir=/var/store</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--grpc-address=0.0.0.0:10901</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--http-address=0.0.0.0:10902</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--objstore.config-file=/etc/objectstorage.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--experimental.enable-index-header</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">thanosio/thanos:v0.11.0</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-store</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10901</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10902</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">20</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">FallbackToLogsOnError</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/store</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">objectstorage.yaml</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/objectstorage.yaml</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">120</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>        <span class="hljs-attr">secret:</span><br>          <span class="hljs-attr">secretName:</span> <span class="hljs-string">thanos-objectstorage</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-store</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><ul><li>Store Gateway 实际也可以做到一定程度的无状态，它会需要一点磁盘空间来对对象存储做索引以加速查询，但数据不那么重要，是可以删除的，删除后会自动去拉对象存储查数据重新建立索引。这里我们避免每次重启都重新建立索引，所以用 StatefulSet 部署 Store Gateway，挂载一块小容量的磁盘(索引占用不到多大空间)。</li><li>同样创建 headless service，用于 Query 对 Store Gateway 进行服务发现。</li><li>部署两个副本，实现 Store Gateway 的高可用。</li><li>Store Gateway 也需要对象存储的配置，用于读取对象存储的数据，所以要挂载对象存储的配置文件。</li></ul><h1 id="部署Ruler"><a href="#部署Ruler" class="headerlink" title="部署Ruler"></a>部署Ruler</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-rule</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-rule</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10901</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">grpc</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-rule</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-rule</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-rule</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-rule</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">thanos-rule</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">Parallel</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-rule</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">rule</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--grpc-address=0.0.0.0:10901</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--http-address=0.0.0.0:10902</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--rule-file=/etc/rules/*rules.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--objstore.config-file=/etc/objectstorage.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--data-dir=/var/rule</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--label=rule_replica=&quot;$(NAME)&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--alert.label-drop=&quot;rule_replica&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--query=dnssrv+_http._tcp.thanos-query.thanos.svc.cluster.local</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">thanosio/thanos:v0.11.0</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">24</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-rule</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10901</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10902</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">18</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">FallbackToLogsOnError</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/rule</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">objectstorage.yaml</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/objectstorage.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-rules</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/rules</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>        <span class="hljs-attr">secret:</span><br>          <span class="hljs-attr">secretName:</span> <span class="hljs-string">thanos-objectstorage</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-rules</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-rules</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-rule</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">100Gi</span><br></code></pre></td></tr></table></figure><ul><li>Ruler 是有状态服务，使用 Statefulset 部署，挂载磁盘以便存储根据 rule 配置计算出的新数据。</li><li>同样创建 headless service，用于 Query 对 Ruler 进行服务发现。</li><li>部署两个副本，且使用 –label&#x3D;rule_replica&#x3D; 给所有数据添加 rule_replica 的 label (与 Query 配置的 replica_label 相呼应)，用于实现 Ruler 高可用。同时指定 –alert.label-drop 为 rule_replica，在触发告警发送通知给 AlertManager 时，去掉这个 label，以便让 AlertManager 自动去重 (避免重复告警)。</li><li>使用 –query 指定 Query 地址，这里还是用 DNS SRV 来做服务发现，但效果跟配 dns+thanos-query.thanos.svc.cluster.local:9090 是一样的，最终都是通过 Query 的 ClusterIP (VIP) 访问，因为它是无状态的，可以直接由 K8S 来给我们做负载均衡。</li><li>Ruler 也需要对象存储的配置，用于上传计算出的数据到对象存储，所以要挂载对象存储的配置文件。</li><li>–rule-file 指定挂载的 rule 配置，Ruler 根据配置来生成数据和触发告警。</li></ul><p>然后部署下roler的配置文件</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs axapta">apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: thanos-rules<br>  labels:<br>    name: thanos-rules<br>  <span class="hljs-keyword">namespace</span>: thanos<br>data:<br>  record.rules.yaml: |-<br>    groups:<br>    - name: k8s.rules<br>      rules:<br>      - expr: |<br>          <span class="hljs-keyword">sum</span>(rate(container_cpu_usage_seconds_total&#123;job=<span class="hljs-string">&quot;cadvisor&quot;</span>, image!=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-built_in">container</span>!=<span class="hljs-string">&quot;&quot;</span>&#125;[<span class="hljs-number">5</span>m])) <span class="hljs-keyword">by</span> (<span class="hljs-keyword">namespace</span>)<br>        record: <span class="hljs-keyword">namespace</span>:container_cpu_usage_seconds_total:sum_rate<br>      - expr: |<br>          <span class="hljs-keyword">sum</span>(container_memory_usage_bytes&#123;job=<span class="hljs-string">&quot;cadvisor&quot;</span>, image!=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-built_in">container</span>!=<span class="hljs-string">&quot;&quot;</span>&#125;) <span class="hljs-keyword">by</span> (<span class="hljs-keyword">namespace</span>)<br>        record: <span class="hljs-keyword">namespace</span>:container_memory_usage_bytes:<span class="hljs-keyword">sum</span><br>      - expr: |<br>          <span class="hljs-keyword">sum</span> <span class="hljs-keyword">by</span> (<span class="hljs-keyword">namespace</span>, pod, <span class="hljs-built_in">container</span>) (<br>            rate(container_cpu_usage_seconds_total&#123;job=<span class="hljs-string">&quot;cadvisor&quot;</span>, image!=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-built_in">container</span>!=<span class="hljs-string">&quot;&quot;</span>&#125;[<span class="hljs-number">5</span>m])<br>          )<br>        record: namespace_pod_container:container_cpu_usage_seconds_total:sum_rate<br></code></pre></td></tr></table></figure><h1 id="部署Compact"><a href="#部署Compact" class="headerlink" title="部署Compact"></a>部署Compact</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-compact</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-compact</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-compact</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-compact</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-compact</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-compact</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">thanos-compact</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-compact</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">compact</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--wait</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--objstore.config-file=/etc/objectstorage.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--data-dir=/var/compact</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--debug.accept-malformed-index</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--log.level=debug</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--retention.resolution-raw=90d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--retention.resolution-5m=180d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--retention.resolution-1h=360d</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">thanosio/thanos:v0.11.0</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">4</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-compact</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10902</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">20</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">FallbackToLogsOnError</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/compact</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">objectstorage.yaml</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/objectstorage.yaml</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">120</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>        <span class="hljs-attr">secret:</span><br>          <span class="hljs-attr">secretName:</span> <span class="hljs-string">thanos-objectstorage</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-compact</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">100Gi</span><br></code></pre></td></tr></table></figure><ul><li>Compact 只能部署单个副本，因为如果多个副本都去对对象存储的数据做压缩和降采样的话，会造成冲突。</li><li>使用 StatefulSet 部署，方便自动创建和挂载磁盘。磁盘用于存放临时数据，因为 Compact 需要一些磁盘空间来存放数据处理过程中产生的中间数据。</li><li>–wait 让 Compact 一直运行，轮询新数据来做压缩和降采样。</li><li>Compact 也需要对象存储的配置，用于读取对象存储数据以及上传压缩和降采样后的数据到对象存储。</li><li>创建一个普通 service，主要用于被 Prometheus 使用 kubernetes 的 endpoints 服务发现来采集指标(其它组件的 service 也一样有这个用途)。</li><li>–retention.resolution-raw 指定原始数据存放时长，–retention.resolution-5m 指定降采样到数据点 5 分钟间隔的数据存放时长，–retention.resolution-1h 指定降采样到数据点 1 小时间隔的数据存放时长，它们的数据精细程度递减，占用的存储空间也是递减，通常建议它们的存放时间递增配置 (一般只有比较新的数据才会放大看，久远的数据通常只会使用大时间范围查询来看个大致，所以建议将精细程度低的数据存放更长时间)</li></ul><h1 id="部署Receiver"><a href="#部署Receiver" class="headerlink" title="部署Receiver"></a>部署Receiver</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive-hashrings</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">thanos-receive-hashrings.json:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    [</span><br><span class="hljs-string">      &#123;</span><br><span class="hljs-string">        &quot;hashring&quot;: &quot;soft-tenants&quot;,</span><br><span class="hljs-string">        &quot;endpoints&quot;:</span><br><span class="hljs-string">        [</span><br><span class="hljs-string">          &quot;thanos-receive-0.thanos-receive.kube-system.svc.cluster.local:10901&quot;,</span><br><span class="hljs-string">          &quot;thanos-receive-1.thanos-receive.kube-system.svc.cluster.local:10901&quot;,</span><br><span class="hljs-string">          &quot;thanos-receive-2.thanos-receive.kube-system.svc.cluster.local:10901&quot;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">thanos-receive</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10902</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">remote-write</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">19291</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">19291</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10901</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10901</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">thanos-receive</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">thanos-receive</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">thanos-receive</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">thanos-receive</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">thanos-receive</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">receive</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--grpc-address=0.0.0.0:10901</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--http-address=0.0.0.0:10902</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--remote-write.address=0.0.0.0:19291</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--objstore.config-file=/etc/objectstorage.yaml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--tsdb.path=/var/receive</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--tsdb.retention=12h</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--label=receive_replica=&quot;$(NAME)&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--label=receive=&quot;true&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--receive.hashrings-file=/etc/thanos-receive-hashrings.json</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--receive.local-endpoint=$(NAME).thanos-receive.thanos.svc.cluster.local:10901</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">thanosio/thanos:v0.11.0</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">4</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/healthy</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10901</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">grpc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10902</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">19291</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">remote-write</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/-/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">10902</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;4&quot;</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">8Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;2&quot;</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">4Gi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/receive</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/thanos-receive-hashrings.json</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive-hashrings</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">thanos-receive-hashrings.json</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/objectstorage.yaml</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">objectstorage.yaml</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">120</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive-hashrings</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-receive-hashrings</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-objectstorage</span><br>        <span class="hljs-attr">secret:</span><br>          <span class="hljs-attr">secretName:</span> <span class="hljs-string">thanos-objectstorage</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">thanos-receive</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">200Gi</span><br></code></pre></td></tr></table></figure><ul><li>部署 3 个副本， 配置 hashring， –label&#x3D;receive_replica 为数据添加 receive_replica 这个 label (Query 的 –query.replica-label 也要加上这个) 来实现 Receiver 的高可用。</li><li>Query 要指定 Receiver 后端地址: –store&#x3D;dnssrv+_grpc._tcp.thanos-receive.thanos.svc.cluster.local</li><li>request, limit 根据自身规模情况自行做适当调整。</li><li>–tsdb.retention 根据自身需求调整最新数据的保留时间。</li><li>如果改命名空间，记得把 Receiver 的 –receive.local-endpoint 参数也改下，不然会疯狂报错直至 OOMKilled。</li></ul><p>因为使用了 Receiver 来统一接收 Prometheus 的数据，所以 Prometheus 也不需要 Sidecar 了，但需要给 Prometheus 配置文件里加下 remote_write，让 Prometheus 将数据 push 给 Receiver:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">remote_write:<br>- url: http:<span class="hljs-regexp">//</span>thanos-receive.thanos.svc.cluster.local:<span class="hljs-number">19291</span><span class="hljs-regexp">/api/</span>v1/receive<br></code></pre></td></tr></table></figure><h1 id="thanos通过ingress配置域名访问"><a href="#thanos通过ingress配置域名访问" class="headerlink" title="thanos通过ingress配置域名访问"></a>thanos通过ingress配置域名访问</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">ingress</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">thanos-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">thanos</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">thanos.tke.niewx.cn</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">thanos-query</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">9090</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><p>浏览器输入域名可以查看stores的状态</p><p><img src="/img/2021-04-08-k8s-deploy-thanos/2.png" alt="upload-image"> </p><p>thanos里面query可以通过promsql进行查询</p><p><img src="/img/2021-04-08-k8s-deploy-thanos/3.png" alt="upload-image"> </p><p>我们可以到存储桶看下数据是否持久化成功</p><p><img src="/img/2021-04-08-k8s-deploy-thanos/4.png" alt="upload-image"> </p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://cloud.tencent.com/developer/article/1616944">https://cloud.tencent.com/developer/article/1616944</a></p><p><a href="https://thanos.io/v0.19/">https://thanos.io/v0.19/</a></p>]]></content>
    
    
    <categories>
      
      <category>Monitor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
      <tag>thanos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云cvm上搭建openvpn内网访问vpc</title>
    <link href="/2021/03/25/2021-03-25-Build-openvpn-intranet-access-vpc-on-cvm/"/>
    <url>/2021/03/25/2021-03-25-Build-openvpn-intranet-access-vpc-on-cvm/</url>
    
    <content type="html"><![CDATA[<p>我们在使用共有云的时候，有时候会需要本地电脑访问到云上的vpc机器，但是云上vpc是网络隔离的，如果不加公网ip是无法直接本地访问vpc的，其实这里我们只需要在vpc内有一台机器可以访问公网，然后再这台集群上搭建openvpn，这样本地就可以通过openvpn去直接连接vpc内其他内网机器，不用每台机器都配置公网ip了，下面我们来说下如何在腾讯云的cvm上搭建openvpn。</p><h1 id="网络规划"><a href="#网络规划" class="headerlink" title="网络规划"></a>网络规划</h1><p>vpc网段：10.0.0.0&#x2F;16</p><p>openvpn分配给客户端的网段：192.168.1.0&#x2F;24</p><p>openvpn服务端ip：10.0.0.13(内网)，106.53.146.250(公网)</p><h1 id="安装openvpn"><a href="#安装openvpn" class="headerlink" title="安装openvpn"></a>安装openvpn</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">yum install openvpn</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">wget  https://github.com/OpenVPN/easy-rsa/archive/master.zip</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">unzip master.zip</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mv</span> easy-rsa-master/ easy-rsa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /etc/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> -R easy-rsa/ /etc/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> client server</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br>client  easy-rsa  server<br></code></pre></td></tr></table></figure><h1 id="配置vars文件"><a href="#配置vars文件" class="headerlink" title="配置vars文件"></a>配置vars文件</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># cd /etc/easy-rsa/easyrsa3</span><br><span class="hljs-comment"># cp vars.example vars</span><br><span class="hljs-comment"># vim vars</span><br>根据实际修改对应的配置<br><span class="hljs-string">.......</span><br><span class="hljs-keyword">set</span>_var EASYRSA_REQ_COUNTRY     <span class="hljs-string">&quot;CN&quot;</span><br><span class="hljs-keyword">set</span>_var EASYRSA_REQ_PROVINCE    <span class="hljs-string">&quot;SZ&quot;</span><br><span class="hljs-keyword">set</span>_var EASYRSA_REQ_CITY        <span class="hljs-string">&quot;GD&quot;</span><br><span class="hljs-keyword">set</span>_var EASYRSA_REQ_ORG         <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-keyword">set</span>_var EASYRSA_REQ_EMAIL       <span class="hljs-string">&quot;nwx_qdlg@163.com&quot;</span><br><span class="hljs-keyword">set</span>_var EASYRSA_REQ_OU          <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-string">.......</span><br></code></pre></td></tr></table></figure><h1 id="创建server端证书"><a href="#创建server端证书" class="headerlink" title="创建server端证书"></a>创建server端证书</h1><h2 id="初始化目录"><a href="#初始化目录" class="headerlink" title="初始化目录"></a>初始化目录</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]<span class="hljs-comment"># ls</span><br>easyrsa  openssl-easyrsa.cnf  vars  vars.example  x509-types<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]<span class="hljs-comment">#  ./easyrsa init-pki</span><br><br>Note: using Easy-RSA configuration from: <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>vars<br><br>init-pki complete; you may now create a CA or requests.<br>Your newly created PKI dir is: <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki<br><br><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]<span class="hljs-comment"># ls</span><br>easyrsa  openssl-easyrsa.cnf  pki  vars  vars.example  x509-types<br></code></pre></td></tr></table></figure><h2 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">[root@VM-0-13-centos easyrsa3]# ./easyrsa <span class="hljs-keyword">build</span>-ca<br><br>Note: <span class="hljs-keyword">using</span> Easy-RSA configuration <span class="hljs-keyword">from</span>: /etc/easy-rsa/easyrsa3/vars<br><span class="hljs-keyword">Using</span> SSL: openssl OpenSSL <span class="hljs-number">1.0</span><span class="hljs-number">.2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br><br>Enter New CA <span class="hljs-keyword">Key</span> Passphrase:  #输入CA密码，记录下<br>Re-Enter New CA <span class="hljs-keyword">Key</span> Passphrase: #确认密码<br>Generating RSA <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span>, <span class="hljs-number">2048</span> bit long modulus<br>..................+++<br>............................................+++<br><span class="hljs-built_in">e</span> <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0x10001</span>)<br>You are about <span class="hljs-keyword">to</span> be asked <span class="hljs-keyword">to</span> enter information that will be incorporated<br><span class="hljs-keyword">into</span> your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter <span class="hljs-keyword">is</span> what <span class="hljs-keyword">is</span> called a Distinguished Name <span class="hljs-keyword">or</span> a DN.<br>There are quite a few fields but you can leave <span class="hljs-keyword">some</span> blank<br><span class="hljs-keyword">For</span> <span class="hljs-keyword">some</span> fields there will be a default <span class="hljs-keyword">value</span>,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be <span class="hljs-keyword">left</span> blank.<br>-----<br>Common Name (eg: your <span class="hljs-keyword">user</span>, host, <span class="hljs-keyword">or</span> server name) [Easy-RSA CA]:server  # ca证书名称<br><br>CA creation complete <span class="hljs-keyword">and</span> you may now import <span class="hljs-keyword">and</span> <span class="hljs-built_in">sign</span> cert requests.<br>Your new CA certificate file <span class="hljs-keyword">for</span> publishing <span class="hljs-keyword">is</span> at:<br>/etc/easy-rsa/easyrsa3/pki/ca.crt<br></code></pre></td></tr></table></figure><h2 id="创建服务端证书"><a href="#创建服务端证书" class="headerlink" title="创建服务端证书"></a>创建服务端证书</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]# ./easyrsa gen-req server nopass<br><br>Note: using Easy-RSA configuration <span class="hljs-keyword">from</span>: <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>vars<br>Using SSL: openssl OpenSSL <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br>Generating a <span class="hljs-number">2048</span> bit RSA <span class="hljs-keyword">private</span> key<br>....................+++<br>........................+++<br>writing <span class="hljs-keyword">new</span> <span class="hljs-keyword">private</span> key to <span class="hljs-string">&#x27;/etc/easy-rsa/easyrsa3/pki/easy-rsa-32328.KOVmFR/tmp.kdL0Yx&#x27;</span><br>-----<br>You are about to be asked to enter information that will be incorporated<br><span class="hljs-keyword">into</span> your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br><span class="hljs-keyword">For</span> some fields there will be a <span class="hljs-keyword">default</span> value,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [server]:vpc-server #输入服务端名称<br><br>Keypair and certificate request completed. Your files are:<br>req: <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki<span class="hljs-regexp">/reqs/</span>server.req<br>key: <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki<span class="hljs-regexp">/private/</span>server.key<br></code></pre></td></tr></table></figure><h2 id="签约服务端证书"><a href="#签约服务端证书" class="headerlink" title="签约服务端证书"></a>签约服务端证书</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos easyrsa3]<span class="hljs-comment"># ./easyrsa sign server server</span><br><br>Note: using Easy-RSA configuration <span class="hljs-keyword">from</span>: /etc/easy-rsa/easyrsa3/vars<br>Using SSL: openssl OpenSSL <span class="hljs-number">1.0</span><span class="hljs-number">.2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br><br><br>You are <span class="hljs-keyword">about</span> <span class="hljs-keyword">to</span> sign <span class="hljs-keyword">the</span> following certificate.<br>Please check <span class="hljs-keyword">over</span> <span class="hljs-keyword">the</span> details shown <span class="hljs-keyword">below</span> <span class="hljs-keyword">for</span> accuracy. Note <span class="hljs-keyword">that</span> this request<br>has <span class="hljs-keyword">not</span> been cryptographically verified. Please be sure <span class="hljs-keyword">it</span> came <span class="hljs-keyword">from</span> a trusted<br>source <span class="hljs-keyword">or</span> <span class="hljs-keyword">that</span> you have verified <span class="hljs-keyword">the</span> request checksum <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> sender.<br><br>Request subject, <span class="hljs-keyword">to</span> be signed <span class="hljs-keyword">as</span> a server certificate <span class="hljs-keyword">for</span> <span class="hljs-number">825</span> days:<br><br>subject=<br>    commonName                = vpc-server<br><br><br>Type <span class="hljs-keyword">the</span> <span class="hljs-built_in">word</span> &#x27;yes&#x27; <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span>, <span class="hljs-keyword">or</span> any other input <span class="hljs-keyword">to</span> abort.<br>  Confirm request details: yes  <span class="hljs-comment">#输入yes</span><br>Using configuration <span class="hljs-keyword">from</span> /etc/easy-rsa/easyrsa3/pki/easy-rsa<span class="hljs-number">-345.</span>HZwt53/tmp<span class="hljs-number">.7</span>IIgHU<br>Enter pass phrase <span class="hljs-keyword">for</span> /etc/easy-rsa/easyrsa3/pki/private/ca.key:  <span class="hljs-comment">#输入之前配置的CA密码</span><br>Check <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> request matches <span class="hljs-keyword">the</span> signature<br>Signature ok<br>The Subject&#x27;s Distinguished Name <span class="hljs-keyword">is</span> <span class="hljs-keyword">as</span> follows<br>commonName            :ASN<span class="hljs-number">.1</span> <span class="hljs-number">12</span>:&#x27;vpc-server&#x27;<br>Certificate <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> be certified <span class="hljs-keyword">until</span> Jun <span class="hljs-number">29</span> <span class="hljs-number">09</span>:<span class="hljs-number">02</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span> GMT (<span class="hljs-number">825</span> days)<br><br>Write out database <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> new entries<br>Data Base Updated<br><br>Certificate created <span class="hljs-keyword">at</span>: /etc/easy-rsa/easyrsa3/pki/issued/server.crt<br></code></pre></td></tr></table></figure><h2 id="创建数据穿越密钥"><a href="#创建数据穿越密钥" class="headerlink" title="创建数据穿越密钥"></a>创建数据穿越密钥</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]# ./easyrsa gen-dh<br><br>Note: using Easy-RSA configuration <span class="hljs-keyword">from</span>: <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>vars<br>Using SSL: openssl OpenSSL <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br>Generating DH parameters, <span class="hljs-number">2048</span> bit <span class="hljs-keyword">long</span> safe prime, generator <span class="hljs-number">2</span><br><span class="hljs-keyword">This</span> is going to take a <span class="hljs-keyword">long</span> time<br>....................+..............................................................................................................................................................................................+..........................................................................................................................+..........................................+...................+...............................<br><br>DH parameters of <span class="hljs-keyword">size</span> <span class="hljs-number">2048</span> created at <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki/dh.pem<br></code></pre></td></tr></table></figure><h1 id="创建client证书"><a href="#创建client证书" class="headerlink" title="创建client证书"></a>创建client证书</h1><h2 id="初始化目录-1"><a href="#初始化目录-1" class="headerlink" title="初始化目录"></a>初始化目录</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@VM-0-13-centos easyrsa3</span>]<span class="hljs-meta"># cd /etc/client/</span><br>[<span class="hljs-meta">root@VM-0-13-centos client</span>]<span class="hljs-meta"># cp -R /root/easy-rsa/easyrsa3/ .</span><br>[<span class="hljs-meta">root@VM-0-13-centos client</span>]<span class="hljs-meta"># ll</span><br>drwxr-xr-x <span class="hljs-number">3</span> root root <span class="hljs-number">4096</span> Mar <span class="hljs-number">26</span> <span class="hljs-number">17</span>:<span class="hljs-number">07</span> easyrsa3<br>[<span class="hljs-meta">root@VM-0-13-centos client</span>]<span class="hljs-meta"># cd easyrsa3/</span><br>[<span class="hljs-meta">root@VM-0-13-centos easyrsa3</span>]<span class="hljs-meta"># ./easyrsa init-pki</span><br><br><span class="hljs-keyword">init</span>-pki complete; you may now create a CA <span class="hljs-keyword">or</span> requests.<br>Your newly created PKI dir <span class="hljs-keyword">is</span>: /etc/client/easyrsa3/pki<br><br>[<span class="hljs-meta">root@VM-0-13-centos easyrsa3</span>]<span class="hljs-meta"># ls</span><br>easyrsa  openssl-easyrsa.cnf  pki  vars.example  x509-types<br></code></pre></td></tr></table></figure><h2 id="创建客户端CA证书"><a href="#创建客户端CA证书" class="headerlink" title="创建客户端CA证书"></a>创建客户端CA证书</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]# ./easyrsa build-<span class="hljs-keyword">ca</span><br>Using SSL: openssl OpenSSL <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span><span class="hljs-keyword">k</span>-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br><br>Enter New CA Key Passphrase: #输入<span class="hljs-keyword">ca</span>密码<br>Re-Enter New CA Key Passphrase: #确认CA密码<br>Generating RSA private key, <span class="hljs-number">2048</span> bit long modulus<br>.....................................+++<br>...........................................+++<br><span class="hljs-keyword">e</span> <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0</span>x10001)<br>You are about <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> asked <span class="hljs-keyword">to</span> enter information that will <span class="hljs-keyword">be</span> incorporated<br>into your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter <span class="hljs-keyword">is</span> what <span class="hljs-keyword">is</span> called <span class="hljs-keyword">a</span> Distinguished Name <span class="hljs-built_in">or</span> <span class="hljs-keyword">a</span> DN.<br>There are quite <span class="hljs-keyword">a</span> few fields but you can leave some blank<br>For some fields there will <span class="hljs-keyword">be</span> <span class="hljs-keyword">a</span> default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will <span class="hljs-keyword">be</span> <span class="hljs-keyword">left</span> blank.<br>-----<br>Common Name (eg: your user, host, <span class="hljs-built_in">or</span> server name) [Easy-RSA CA]:client-<span class="hljs-keyword">ca</span> #输入<span class="hljs-keyword">ca</span>证书名称<br><br>CA creation <span class="hljs-built_in">complete</span> <span class="hljs-built_in">and</span> you may now import <span class="hljs-built_in">and</span> <span class="hljs-keyword">sign</span> cert requests.<br>Your <span class="hljs-keyword">new</span> CA certificate <span class="hljs-keyword">file</span> <span class="hljs-keyword">for</span> publishing <span class="hljs-keyword">is</span> at:<br>/etc/client/easyrsa3/pki/<span class="hljs-keyword">ca</span>.crt<br><br></code></pre></td></tr></table></figure><h2 id="创建客户端证书"><a href="#创建客户端证书" class="headerlink" title="创建客户端证书"></a>创建客户端证书</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos easyrsa3]# ./easyrsa gen-req client<br><span class="hljs-keyword">Using</span> SSL: openssl OpenSSL <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br>Generating a <span class="hljs-number">2048</span> bit RSA <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span><br>........................................................+++<br>.............................................+++<br>writing <span class="hljs-built_in">new</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;/etc/client/easyrsa3/pki/easy-rsa-1789.jZxBCq/tmp.1l4buX&#x27;</span><br>Enter PEM pass phrase:  #输入客户端CA密码，也是将来登录VPN客户密码！<br>Verifying - Enter PEM pass phrase:<br>-----<br>You are about <span class="hljs-keyword">to</span> be asked <span class="hljs-keyword">to</span> enter information that will be incorporated<br><span class="hljs-keyword">into</span> your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter <span class="hljs-built_in">is</span> what <span class="hljs-built_in">is</span> called a Distinguished Name <span class="hljs-built_in">or</span> a DN.<br>There are quite a few fields but you can leave some blank<br><span class="hljs-keyword">For</span> some fields there will be a <span class="hljs-keyword">default</span> value,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-comment">&#x27;.&#x27;, the field will be left blank.</span><br>-----<br>Common Name (eg: your user, host, <span class="hljs-built_in">or</span> server name) [client]:niewx #起名字<br><br>Keypair <span class="hljs-built_in">and</span> certificate request completed. Your files are:<br><span class="hljs-symbol">req:</span> /etc/client/easyrsa3/pki/reqs/client.req<br><span class="hljs-symbol">key:</span> /etc/client/easyrsa3/pki/<span class="hljs-keyword">private</span>/client.<span class="hljs-keyword">key</span><br></code></pre></td></tr></table></figure><h2 id="导入客户端证书"><a href="#导入客户端证书" class="headerlink" title="导入客户端证书"></a>导入客户端证书</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos easyrsa3]# cd /etc/easy-rsa/easyrsa3<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos easyrsa3]# ./easyrsa <span class="hljs-keyword">import</span>-req /etc/client/easyrsa3/pki/reqs/client.req client<br><br>Note: <span class="hljs-keyword">using</span> Easy-RSA <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">from</span>: /etc/easy-rsa/easyrsa3/vars<br><span class="hljs-keyword">Using</span> SSL: openssl OpenSSL <span class="hljs-number">1.0</span><span class="hljs-number">.2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br><br>The request has been successfully imported <span class="hljs-keyword">with</span> a short <span class="hljs-type">name</span> <span class="hljs-keyword">of</span>: client<br>You may now use this <span class="hljs-type">name</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">perform</span> signing operations <span class="hljs-keyword">on</span> this request.<br></code></pre></td></tr></table></figure><h2 id="签约客户端证书"><a href="#签约客户端证书" class="headerlink" title="签约客户端证书"></a>签约客户端证书</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos easyrsa3]<span class="hljs-comment"># cd /etc/easy-rsa/easyrsa3</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos easyrsa3]<span class="hljs-comment"># ./easyrsa sign client client</span><br>Using SSL: openssl OpenSSL <span class="hljs-number">1.0</span><span class="hljs-number">.2</span>k-fips  <span class="hljs-number">26</span> Jan <span class="hljs-number">2017</span><br><br><br>You are <span class="hljs-keyword">about</span> <span class="hljs-keyword">to</span> sign <span class="hljs-keyword">the</span> following certificate.<br>Please check <span class="hljs-keyword">over</span> <span class="hljs-keyword">the</span> details shown <span class="hljs-keyword">below</span> <span class="hljs-keyword">for</span> accuracy. Note <span class="hljs-keyword">that</span> this request<br>has <span class="hljs-keyword">not</span> been cryptographically verified. Please be sure <span class="hljs-keyword">it</span> came <span class="hljs-keyword">from</span> a trusted<br>source <span class="hljs-keyword">or</span> <span class="hljs-keyword">that</span> you have verified <span class="hljs-keyword">the</span> request checksum <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> sender.<br><br>Request subject, <span class="hljs-keyword">to</span> be signed <span class="hljs-keyword">as</span> a client certificate <span class="hljs-keyword">for</span> <span class="hljs-number">825</span> days:<br><br>subject=<br>    commonName                = niewx<br><br><br>Type <span class="hljs-keyword">the</span> <span class="hljs-built_in">word</span> &#x27;yes&#x27; <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span>, <span class="hljs-keyword">or</span> any other input <span class="hljs-keyword">to</span> abort.<br>  Confirm request details: yes <span class="hljs-comment"># 输入yes</span><br>Using configuration <span class="hljs-keyword">from</span> /etc/client/easyrsa3/pki/easy-rsa<span class="hljs-number">-2777.2</span>aZHdK/tmp<span class="hljs-number">.9</span>RSG1Q<br>Enter pass phrase <span class="hljs-keyword">for</span> /etc/client/easyrsa3/pki/private/ca.key: <span class="hljs-comment">#客户端ca密码</span><br>Check <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> request matches <span class="hljs-keyword">the</span> signature<br>Signature ok<br>The Subject&#x27;s Distinguished Name <span class="hljs-keyword">is</span> <span class="hljs-keyword">as</span> follows<br>commonName            :ASN<span class="hljs-number">.1</span> <span class="hljs-number">12</span>:&#x27;niewx&#x27;<br>Certificate <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> be certified <span class="hljs-keyword">until</span> Jun <span class="hljs-number">29</span> <span class="hljs-number">09</span>:<span class="hljs-number">16</span>:<span class="hljs-number">55</span> <span class="hljs-number">2023</span> GMT (<span class="hljs-number">825</span> days)<br><br>Write out database <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> new entries<br>Data Base Updated<br><br>Certificate created <span class="hljs-keyword">at</span>: /etc/easy-rsa/easyrsa3/pki/issued/client.crt<br><br></code></pre></td></tr></table></figure><h1 id="openvpn服务端配置"><a href="#openvpn服务端配置" class="headerlink" title="openvpn服务端配置"></a>openvpn服务端配置</h1><h2 id="拷贝服务端证书文件"><a href="#拷贝服务端证书文件" class="headerlink" title="拷贝服务端证书文件"></a>拷贝服务端证书文件</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cd <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cp ca.crt <span class="hljs-regexp">/etc/</span>server/<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cp <span class="hljs-keyword">private</span><span class="hljs-regexp">/server.key /</span>etc<span class="hljs-regexp">/server/</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cp issued<span class="hljs-regexp">/server.crt /</span>etc<span class="hljs-regexp">/server/</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cp dh.pem <span class="hljs-regexp">/etc/</span>server/<br></code></pre></td></tr></table></figure><h2 id="拷贝客户端证书"><a href="#拷贝客户端证书" class="headerlink" title="拷贝客户端证书"></a>拷贝客户端证书</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cd <span class="hljs-regexp">/etc/</span>client/easyrsa3<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos pki]# cp <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki<span class="hljs-regexp">/ca.crt /</span>etc/client<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos <span class="hljs-keyword">private</span>]# cp <span class="hljs-regexp">/etc/</span>client<span class="hljs-regexp">/easyrsa3/</span>pki<span class="hljs-regexp">/private/</span>client.key <span class="hljs-regexp">/etc/</span>client<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos issued]# cp <span class="hljs-regexp">/etc/</span>easy-rsa<span class="hljs-regexp">/easyrsa3/</span>pki<span class="hljs-regexp">/issued/</span>client.crt <span class="hljs-regexp">/etc/</span>client<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos issued]# cd <span class="hljs-regexp">/etc/</span>client/<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos client]# ls<br>ca.crt  client.crt  client.key  easyrsa3<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos client]# cd <span class="hljs-regexp">/etc/</span>server/<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos server]# ls<br>ca.crt  dh.pem  server.crt  server.key<br></code></pre></td></tr></table></figure><h2 id="配置server-conf"><a href="#配置server-conf" class="headerlink" title="配置server.conf"></a>配置server.conf</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos openvpn]# cd <span class="hljs-regexp">/etc/</span>openvpn<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos openvpn]# vim server.conf<br><br>local <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>port <span class="hljs-number">55555</span><br>proto tcp<br>dev tun<br>ca <span class="hljs-regexp">/etc/</span>server/ca.crt<br>cert <span class="hljs-regexp">/etc/</span>server/server.crt<br>key <span class="hljs-regexp">/etc/</span>server/server.key  # <span class="hljs-keyword">This</span> <span class="hljs-keyword">file</span> should be kept secret<br>dh <span class="hljs-regexp">/etc/</span>server/dh.pem<br>server <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>ifconfig-pool-persist ipp.txt<br>keepalive <span class="hljs-number">10</span> <span class="hljs-number">120</span><br>persist-key<br>persist-tun<br>status openvpn-status.log<br>verb <span class="hljs-number">3</span><br>comp-lzo<br><span class="hljs-keyword">push</span> <span class="hljs-string">&quot;route 10.0.0.0 255.0.0.0&quot;</span><br>client-to-client<br>log <span class="hljs-regexp">/var/</span>log/openvpn.log<br></code></pre></td></tr></table></figure><h2 id="配置转发参数和iptables规则"><a href="#配置转发参数和iptables规则" class="headerlink" title="配置转发参数和iptables规则"></a>配置转发参数和iptables规则</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos openvpn]<span class="hljs-comment"># sed -i &#x27;/net.ipv4.ip_forward/ s/\(.*= \).*/\11/&#x27; /etc/sysctl.conf</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos client]<span class="hljs-comment"># iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos client]<span class="hljs-comment"># iptables -nL -t nat</span><br>Chain PREROUTING (<span class="hljs-keyword">policy</span> ACCEPT)<br><span class="hljs-keyword">target</span>     prot opt source               destination<br><br>Chain INPUT (<span class="hljs-keyword">policy</span> ACCEPT)<br><span class="hljs-keyword">target</span>     prot opt source               destination<br><br>Chain OUTPUT (<span class="hljs-keyword">policy</span> ACCEPT)<br><span class="hljs-keyword">target</span>     prot opt source               destination<br><br>Chain POSTROUTING (<span class="hljs-keyword">policy</span> ACCEPT)<br><span class="hljs-keyword">target</span>     prot opt source               destination<br>MASQUERADE  all  --  <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span>/<span class="hljs-number">24</span>       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="启动oepnven服务端"><a href="#启动oepnven服务端" class="headerlink" title="启动oepnven服务端"></a>启动oepnven服务端</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos <span class="hljs-keyword">client</span>]<span class="hljs-meta"># openvpn /etc/server.conf &amp;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5785</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos <span class="hljs-keyword">client</span>]<span class="hljs-meta"># ps -ef | grep openvpn</span><br>root      <span class="hljs-number">5785</span> <span class="hljs-number">26254</span>  <span class="hljs-number">0</span> <span class="hljs-number">17</span>:<span class="hljs-number">37</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> openvpn /etc/<span class="hljs-keyword">server</span>.conf<br></code></pre></td></tr></table></figure><h1 id="本地机器安装openvpn客户端"><a href="#本地机器安装openvpn客户端" class="headerlink" title="本地机器安装openvpn客户端"></a>本地机器安装openvpn客户端</h1><p>可以到<a href="https://openvpn.net/community-downloads/">https://openvpn.net/community-downloads/</a>下载对应系统客户端安装包</p><h1 id="拷贝客户端证书到本地目录"><a href="#拷贝客户端证书到本地目录" class="headerlink" title="拷贝客户端证书到本地目录"></a>拷贝客户端证书到本地目录</h1><p>主要&#x2F;etc&#x2F;client目录下拷贝ca.crt，client.crt，client.key，然后配置下文件client.ovpn，内容如下</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs q">client <br><span class="hljs-built_in">dev</span> tun <br>proto tcp <br>remote <span class="hljs-number">106.53</span><span class="hljs-number">.146</span><span class="hljs-number">.250</span>  <span class="hljs-number">55555</span><br>resolv-retry infinite <br>nobind <br>persist-<span class="hljs-built_in">key</span> <br>persist-tun <br>ca ca.crt <br>cert client1.crt<br><span class="hljs-built_in">key</span> client1.<span class="hljs-built_in">key</span> <br>comp-lzo <br>verb <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><h1 id="运行vpn连接服务端"><a href="#运行vpn连接服务端" class="headerlink" title="运行vpn连接服务端"></a>运行vpn连接服务端</h1><p><img src="/img/2021-03-25-Build-openvpn-intranet-access-vpc-on-cvm/1.png" alt="upload-image"> </p><p><img src="/img/2021-03-25-Build-openvpn-intranet-access-vpc-on-cvm/2.png" alt="upload-image"> </p><p>连接成功后，我们直接内网访问下服务，发现可以直接内网ip访问到prometheus的UI界面，这里说明我们本地电脑成功连接了vpc</p><p><img src="/img/2021-03-25-Build-openvpn-intranet-access-vpc-on-cvm/3.png" alt="upload-image"> </p><h1 id="自动生成客户端的脚本"><a href="#自动生成客户端的脚本" class="headerlink" title="自动生成客户端的脚本"></a>自动生成客户端的脚本</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos client]<span class="hljs-comment"># cd /etc/client</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos client]<span class="hljs-comment"># cat auto-generate-client.sh</span><br><span class="hljs-comment"># ! /bin/bash</span><br><br>set -e<br><br>OVPN_USER_KEYS_DIR=<span class="hljs-regexp">/etc/</span>client/keys<br>EASY_RSA_VERSION=easyrsa3<br>EASY_RSA_DIR=<span class="hljs-regexp">/etc/</span>easy-rsa<br>PKI_DIR=<span class="hljs-variable">$EASY_RSA_DIR</span><span class="hljs-regexp">/$EASY_RSA_VERSION/</span>pki<br><br><span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$@&quot;</span><br><span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;$OVPN_USER_KEYS_DIR/$user&quot;</span> ]; then<br>    rm -rf <span class="hljs-variable">$OVPN_USER_KEYS_DIR</span>/<span class="hljs-variable">$user</span><br>    rm -rf  <span class="hljs-variable">$PKI_DIR</span><span class="hljs-regexp">/reqs/</span><span class="hljs-variable">$user</span>.req<br>    rm -rf  <span class="hljs-variable">$PKI_DIR</span><span class="hljs-regexp">/private/</span><span class="hljs-variable">$user</span>.key<br>    rm -rf  <span class="hljs-variable">$PKI_DIR</span><span class="hljs-regexp">/issued/</span><span class="hljs-variable">$user</span>.crt<br>    sed -i <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&quot;$user&quot;</span><span class="hljs-string">&#x27;/d&#x27;</span> <span class="hljs-variable">$PKI_DIR</span>/index.txt  <span class="hljs-comment">#通过index.txt文件查看到证书的情况，首字母为R的证书就是已经被吊销的证书。</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>  fi<br>  cd <span class="hljs-variable">$EASY_RSA_DIR</span>/<span class="hljs-variable">$EASY_RSA_VERSION</span><br>  <span class="hljs-comment"># 生成客户端 ssl 证书文件</span><br>  ./easyrsa build-client-full <span class="hljs-variable">$user</span> nopass<br>  <span class="hljs-comment"># 整理下生成的文件</span><br>  mkdir -p  <span class="hljs-variable">$OVPN_USER_KEYS_DIR</span>/<span class="hljs-variable">$user</span><br>  cp <span class="hljs-variable">$PKI_DIR</span><span class="hljs-regexp">/ca.crt $OVPN_USER_KEYS_DIR/</span><span class="hljs-variable">$user</span>/   <span class="hljs-comment"># CA 根证书</span><br>  cp <span class="hljs-variable">$PKI_DIR</span><span class="hljs-regexp">/issued/</span><span class="hljs-variable">$user</span>.crt <span class="hljs-variable">$OVPN_USER_KEYS_DIR</span><span class="hljs-regexp">/$user/</span>   <span class="hljs-comment"># 客户端证书</span><br>  cp <span class="hljs-variable">$PKI_DIR</span><span class="hljs-regexp">/private/</span><span class="hljs-variable">$user</span>.key <span class="hljs-variable">$OVPN_USER_KEYS_DIR</span><span class="hljs-regexp">/$user/</span>  <span class="hljs-comment"># 客户端证书密钥</span><br>  cp <span class="hljs-regexp">/etc/</span>client<span class="hljs-regexp">/sample.ovpn $OVPN_USER_KEYS_DIR/</span><span class="hljs-variable">$user</span>/<span class="hljs-variable">$user</span>.ovpn <span class="hljs-comment"># 客户端配置文件</span><br>  sed -i <span class="hljs-string">&#x27;s/admin/&#x27;</span><span class="hljs-string">&quot;$user&quot;</span><span class="hljs-string">&#x27;/g&#x27;</span> <span class="hljs-variable">$OVPN_USER_KEYS_DIR</span><span class="hljs-regexp">/$user/</span><span class="hljs-variable">$user</span>.ovpn<br>  cd <span class="hljs-variable">$OVPN_USER_KEYS_DIR</span><br>  zip -r <span class="hljs-variable">$user</span>.zip <span class="hljs-variable">$user</span><br>done<br><span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>脚本会自动生成客户端证书，执行方式如下，如果需要生成多个用户则在参数加上就行</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># sh  auto-<span class="hljs-keyword">generate</span>-client<span class="hljs-variable">.sh</span> test1 test2 .....<br></code></pre></td></tr></table></figure><p><img src="/img/2021-03-25-Build-openvpn-intranet-access-vpc-on-cvm/4.png" alt="upload-image"> </p><p>将对应的zip包拷贝给用户，然后再openvpn中指定对应的ovpn文件进行配置下连接即可</p>]]></content>
    
    
    <categories>
      
      <category>openvpn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>openvpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio之VirtualService如何限制CORS请求头</title>
    <link href="/2021/03/19/2021-03-19-How-does-istio&#39;s-VirtualService-limit-CORS-request-headers/"/>
    <url>/2021/03/19/2021-03-19-How-does-istio&#39;s-VirtualService-limit-CORS-request-headers/</url>
    
    <content type="html"><![CDATA[<p>有的时候服务被访问的时候可能会存在一些CORS漏洞，这里我们就需要设置下Access-Control-Allow-Origin，但是这个服务如果是通过istio来进行管理，那么我们怎么来限制哪些域名可以进行访问我们的服务呢？下面我们来配置下</p><h1 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h1><p>首先我们在k8s中部署一个nginx服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">mesh</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br></code></pre></td></tr></table></figure><h1 id="部署Gateway"><a href="#部署Gateway" class="headerlink" title="部署Gateway"></a>部署Gateway</h1><p>这里我们用公网的ingress作为访问的入口，绑定88端口进行访问</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-gw</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mesh</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">servers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">port:</span><br>        <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">88</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP-88-2qiw</span><br>        <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP</span><br>      <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istio-ingressgateway</span><br>    <span class="hljs-attribute">istio</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingressgateway</span><br></code></pre></td></tr></table></figure><h1 id="VirtualService不做任何限制"><a href="#VirtualService不做任何限制" class="headerlink" title="VirtualService不做任何限制"></a>VirtualService不做任何限制</h1><p>我们正常部署一个VirtualService，不做任何Origin限制，这里返回头Access-Control-Allow-Origin里面应该是*</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-vs</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mesh</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mesh/nginx-gw</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>            <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx.mesh.svc.cluster.local</span><br><br></code></pre></td></tr></table></figure><p>下面我们测试下看看，access-control-allow-origin返回确实是*</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-3-centos</span> <span class="hljs-string">grpcurl</span>]<span class="hljs-comment"># curl -I 106.55.219.93:88</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Sat,</span> <span class="hljs-number">20</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 11:18:16 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=utf-8</span><br><span class="hljs-attr">content-length:</span> <span class="hljs-number">9593</span><br><span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">*</span><br><span class="hljs-attr">access-control-allow-credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="VirtualService加上Origins限制"><a href="#VirtualService加上Origins限制" class="headerlink" title="VirtualService加上Origins限制"></a>VirtualService加上Origins限制</h1><p>这里我们只允许origin带这2个域名才能访问nginx.niewx.cn和test.niewx.cn，注意下这里用的正则匹配，如果有多个域名用|分割开，如果有https和http可以在https后面加个？</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-vs</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mesh</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mesh/nginx-gw</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>            <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx.mesh.svc.cluster.local</span><br>      <span class="hljs-attribute">corsPolicy</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">allowOrigins</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">regex: &#x27;https?://nginx.niewx.cn|https?://test.niewx.cn&#x27;</span><br></code></pre></td></tr></table></figure><p>下面我们来测试下，看下请求里面origin带的域名在我们的配置里面会怎么样，不在我们配置的域名会怎么样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@baron-cvm</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># curl  -I -v -H &#x27;Origin: https://test.niewx.cn&#x27; 106.55.219.93:88</span><br><span class="hljs-string">*</span> <span class="hljs-string">About</span> <span class="hljs-string">to</span> <span class="hljs-string">connect()</span> <span class="hljs-string">to</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span> <span class="hljs-string">port</span> <span class="hljs-number">88</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">*</span>   <span class="hljs-string">Trying</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span><span class="hljs-string">...</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connected</span> <span class="hljs-string">to</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span> <span class="hljs-string">(106.55.219.93)</span> <span class="hljs-string">port</span> <span class="hljs-number">88</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">HEAD</span> <span class="hljs-string">/</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">User-Agent:</span> <span class="hljs-string">curl/7.29.0</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Host:</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span><span class="hljs-string">:88</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Origin:</span> <span class="hljs-string">https://test.niewx.cn</span><br><span class="hljs-string">&gt;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">21</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 12:52:07 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">21</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 12:52:07 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-length:</span> <span class="hljs-number">612</span><br><span class="hljs-attr">content-length:</span> <span class="hljs-number">612</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">last-modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">09</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 15:27:51 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">last-modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">09</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 15:27:51 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">etag:</span> <span class="hljs-string">&quot;604793f7-264&quot;</span><br><span class="hljs-attr">etag:</span> <span class="hljs-string">&quot;604793f7-264&quot;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">accept-ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">accept-ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">0</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">https://test.niewx.cn</span><br><span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">https://test.niewx.cn</span><br><br><span class="hljs-string">&lt;</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connection</span> <span class="hljs-comment">#0 to host 106.55.219.93 left intact</span><br>[<span class="hljs-string">root@baron-cvm</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># curl  -I -v -H &#x27;Origin: https://nginx.niewx.cn&#x27; 106.55.219.93:88</span><br><span class="hljs-string">*</span> <span class="hljs-string">About</span> <span class="hljs-string">to</span> <span class="hljs-string">connect()</span> <span class="hljs-string">to</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span> <span class="hljs-string">port</span> <span class="hljs-number">88</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">*</span>   <span class="hljs-string">Trying</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span><span class="hljs-string">...</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connected</span> <span class="hljs-string">to</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span> <span class="hljs-string">(106.55.219.93)</span> <span class="hljs-string">port</span> <span class="hljs-number">88</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">HEAD</span> <span class="hljs-string">/</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">User-Agent:</span> <span class="hljs-string">curl/7.29.0</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Host:</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span><span class="hljs-string">:88</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Origin:</span> <span class="hljs-string">https://nginx.niewx.cn</span><br><span class="hljs-string">&gt;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">21</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 12:52:16 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">21</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 12:52:16 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-length:</span> <span class="hljs-number">612</span><br><span class="hljs-attr">content-length:</span> <span class="hljs-number">612</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">last-modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">09</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 15:27:51 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">last-modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">09</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 15:27:51 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">etag:</span> <span class="hljs-string">&quot;604793f7-264&quot;</span><br><span class="hljs-attr">etag:</span> <span class="hljs-string">&quot;604793f7-264&quot;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">accept-ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">accept-ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">0</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">https://nginx.niewx.cn</span><br><span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">https://nginx.niewx.cn</span><br><br><span class="hljs-string">&lt;</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connection</span> <span class="hljs-comment">#0 to host 106.55.219.93 left intact</span><br>[<span class="hljs-string">root@baron-cvm</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># curl  -I -v -H &#x27;Origin: https://example.niewx.cn&#x27; 106.55.219.93:88</span><br><span class="hljs-string">*</span> <span class="hljs-string">About</span> <span class="hljs-string">to</span> <span class="hljs-string">connect()</span> <span class="hljs-string">to</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span> <span class="hljs-string">port</span> <span class="hljs-number">88</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">*</span>   <span class="hljs-string">Trying</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span><span class="hljs-string">...</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connected</span> <span class="hljs-string">to</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span> <span class="hljs-string">(106.55.219.93)</span> <span class="hljs-string">port</span> <span class="hljs-number">88</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">HEAD</span> <span class="hljs-string">/</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">User-Agent:</span> <span class="hljs-string">curl/7.29.0</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Host:</span> <span class="hljs-number">106.55</span><span class="hljs-number">.219</span><span class="hljs-number">.93</span><span class="hljs-string">:88</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Origin:</span> <span class="hljs-string">https://example.niewx.cn</span><br><span class="hljs-string">&gt;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">21</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 12:52:28 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">21</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 12:52:28 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-length:</span> <span class="hljs-number">612</span><br><span class="hljs-attr">content-length:</span> <span class="hljs-number">612</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">last-modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">09</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 15:27:51 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">last-modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">09</span> <span class="hljs-string">Mar</span> <span class="hljs-number">2021 15:27:51 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">etag:</span> <span class="hljs-string">&quot;604793f7-264&quot;</span><br><span class="hljs-attr">etag:</span> <span class="hljs-string">&quot;604793f7-264&quot;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">accept-ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">accept-ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">1</span><br><br><span class="hljs-string">&lt;</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connection</span> <span class="hljs-comment">#0 to host 106.55.219.93 left intact</span><br></code></pre></td></tr></table></figure><p>从上面测试，我们分别用了test.niewx.cn、nginx.test.cn、example.niewx.cn这3个域名的https方式作为origin去请求我们的gateway，发现不在我们配置的allowOrigins白名单里面access-control-allow-origin这个字段是不存在的。但是我们发现example.niewx.cn这个域名不在allowOrigins配置，发起请求还是能正常返回内容，这是因为这里nginx的后端处理逻辑是这样，如果需要response不返回内容，需要在后端代码进行处理下跨域请求才行，配置下不在access-control-allow-origin里面就返回其他错误码。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Istio</tag>
      
      <tag>VirtualService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeadm证书过期如何替换</title>
    <link href="/2021/01/10/2021-01-10-How-to-replace-the-expired-kubeadm-certificate/"/>
    <url>/2021/01/10/2021-01-10-How-to-replace-the-expired-kubeadm-certificate/</url>
    
    <content type="html"><![CDATA[<p>通常我们通过kubeadm搭建的集群，证书都是由kubeadm生成的，证书的有效期只有1年，如果证书过期后，你再访问集群就会报错Unable to connect to the server: x509: certificate has expired or is not yet valid，今天我们来说下如何替换下证书过期的问题，本次集群的版本是1.15.10。</p><h1 id="查看当前证书有效期"><a href="#查看当前证书有效期" class="headerlink" title="查看当前证书有效期"></a>查看当前证书有效期</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master ~]# sudo openssl x509 -in <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver.crt -noout -text |<span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27; Not &#x27;</span><br>            Not Before: Dec <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">36</span> <span class="hljs-number">2019</span> GMT<br>            Not After : Dec <span class="hljs-number">20</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">36</span> <span class="hljs-number">2020</span> GMT<br></code></pre></td></tr></table></figure><h1 id="配置集群kubeadm-conf"><a href="#配置集群kubeadm-conf" class="headerlink" title="配置集群kubeadm.conf"></a>配置集群kubeadm.conf</h1><p>master节点上配置kubeadm.conf，然后填写集群的master和node节点ip信息，配置文件创建在master的&#x2F;root&#x2F;kubeadm.conf目录下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.15.10</span>  <span class="hljs-comment"># kubernetes 版本</span><br><span class="hljs-attr">apiServer:</span><br>  <span class="hljs-attr">certSANs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.21</span><span class="hljs-number">.21</span> <span class="hljs-comment"># master 所有节点IP地址，包括master和slave</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.21</span><span class="hljs-number">.22</span> <span class="hljs-comment"># slave</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.21</span><span class="hljs-number">.23</span> <span class="hljs-comment"># slave</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">service-node-port-range:</span> <span class="hljs-number">80</span><span class="hljs-number">-32767</span><br>    <span class="hljs-attr">advertise-address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">&quot;192.168.21.21:6443&quot;</span>  <span class="hljs-comment"># APIserver 地址,也就是master节点地址</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/google_containers</span> <span class="hljs-comment">#这里使用国内的镜像仓库，否则在重新签发的时候会报错</span><br></code></pre></td></tr></table></figure><h1 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gauss">[root<span class="hljs-comment">@master ~]# kubeadm alpha certs renew all --config kubeadm.conf</span><br><span class="hljs-comment">certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed</span><br><span class="hljs-comment">certificate for serving the Kubernetes API renewed</span><br><span class="hljs-comment">certificate the apiserver uses to access etcd renewed</span><br><span class="hljs-comment">certificate for the API server to connect to kubelet renewed</span><br><span class="hljs-comment">certificate embedded in the kubeconfig file for the controller manager to use renewed</span><br><span class="hljs-comment">certificate for liveness probes to healtcheck etcd renewed</span><br><span class="hljs-comment">certificate for etcd nodes to communicate with each other renewed</span><br><span class="hljs-comment">certificate for serving etcd renewed</span><br><span class="hljs-comment">certificate for the front proxy client renewed</span><br><span class="hljs-comment">certificate embedded in the kubeconfig file for the scheduler manager to use renewed</span><br><span class="hljs-comment">[root@</span>master ~]<span class="hljs-meta"># sudo openssl x509 -in /etc/kubernetes/pki/apiserver.crt -noout -text |grep &#x27; Not &#x27;</span><br>            <span class="hljs-keyword">Not</span> Before: Dec <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">36</span> <span class="hljs-number">2019</span> GMT<br>            <span class="hljs-keyword">Not</span> After : Feb <span class="hljs-number">10</span> <span class="hljs-number">04</span>:<span class="hljs-number">10</span>:<span class="hljs-number">04</span> <span class="hljs-number">2022</span> GMT<br></code></pre></td></tr></table></figure><h1 id="重新生成配置文件"><a href="#重新生成配置文件" class="headerlink" title="重新生成配置文件"></a>重新生成配置文件</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@master ~</span>]<span class="hljs-meta"># mv /etc/kubernetes/*.conf ~/.</span><br>[<span class="hljs-meta">root@master ~</span>]<span class="hljs-meta"># kubeadm init phase kubeconfig all --config kubeadm.conf</span><br>[<span class="hljs-meta">kubeconfig</span>] Using kubeconfig folder <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br>[<span class="hljs-meta">kubeconfig</span>] Writing <span class="hljs-string">&quot;admin.conf&quot;</span> kubeconfig file<br>[<span class="hljs-meta">kubeconfig</span>] Writing <span class="hljs-string">&quot;kubelet.conf&quot;</span> kubeconfig file<br>[<span class="hljs-meta">kubeconfig</span>] Writing <span class="hljs-string">&quot;controller-manager.conf&quot;</span> kubeconfig file<br>[<span class="hljs-meta">kubeconfig</span>] Writing <span class="hljs-string">&quot;scheduler.conf&quot;</span> kubeconfig file<br></code></pre></td></tr></table></figure><h1 id="更新kubeconfig"><a href="#更新kubeconfig" class="headerlink" title="更新kubeconfig"></a>更新kubeconfig</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master ~]# mv $HOME<span class="hljs-regexp">/.kube/</span>config $HOME<span class="hljs-regexp">/.kube/</span>config.old<br>[root@master ~]# sudo cp -i <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/admin.conf $HOME/</span>.kube/config<br>[root@master ~]# sudo chown $(id -u):$(id -g) $HOME<span class="hljs-regexp">/.kube/</span>config<br></code></pre></td></tr></table></figure><h1 id="重启master组件pod"><a href="#重启master组件pod" class="headerlink" title="重启master组件pod"></a>重启master组件pod</h1><p>重启kube-apiserver,kube-controller,kube-scheduler,etcd这4个容器</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">[root@master ~]# docker ps | <span class="hljs-type">grep</span> -v pause | <span class="hljs-type">grep</span> -E <span class="hljs-string">&quot;etcd|scheduler|controller|apiserver&quot;</span> | <span class="hljs-type">awk</span> &#x27;&#123;print $<span class="hljs-number">1</span>&#125;&#x27; | <span class="hljs-type">awk</span> &#x27;&#123;print <span class="hljs-string">&quot;docker&quot;</span>,<span class="hljs-string">&quot;restart&quot;</span>,$<span class="hljs-number">1</span>&#125;&#x27; | <span class="hljs-type">bash</span><br>a3e5533b5fe9<br>da6f74758c54<br><span class="hljs-number">01053200</span>a9ee<br></code></pre></td></tr></table></figure><h1 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h1><p>这里生成token是为了用于给node节点重新加入集群</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubeadm</span> token create<br>xdy3g8.<span class="hljs-number">4</span>nzmh2eezaz3ccx0<br></code></pre></td></tr></table></figure><h1 id="重启master节点kubelet"><a href="#重启master节点kubelet" class="headerlink" title="重启master节点kubelet"></a>重启master节点kubelet</h1><p>这里生成了新的证书后，发现master节点一直是Notready，然后查看kubelet日志发现是证书问题，这里是kubelet没重启，没有读取到最新的证书，重启kubelet即可</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@master ~]# kubectl get nodes<br>NAME     STATUS     ROLES    AGE    VERSION<br>master   NotReady   master   <span class="hljs-number">416d</span>   v1.<span class="hljs-number">15</span>.<span class="hljs-number">0</span><br>node1    Ready      &lt;none&gt;   <span class="hljs-number">416d</span>   v1.<span class="hljs-number">15</span>.<span class="hljs-number">0</span><br>node2    Ready      &lt;none&gt;   <span class="hljs-number">416d</span>   v1.<span class="hljs-number">15</span>.<span class="hljs-number">0</span><br>[root@master ~]# systemctl status kubelet<br>● kubelet.service - kubelet: The Kubernetes Node Agent<br>   Loaded: loaded (/usr/lib/systemd/system/kubelet.service<span class="hljs-comment">; enabled; vendor preset: disabled)</span><br>  Drop-In: /usr/lib/systemd/system/kubelet.service.d<br>           └─<span class="hljs-number">10</span>-kubeadm.conf<br>   Active: active (running) since 六 <span class="hljs-number">2020-08-22</span> <span class="hljs-number">15</span>:<span class="hljs-number">53</span>:<span class="hljs-number">38</span> CST<span class="hljs-comment">; 5 months 19 days ago</span><br>     Docs: https://kubernetes.io/docs/<br> Main PID: <span class="hljs-number">10568</span> (kubelet)<br>    Tasks: <span class="hljs-number">20</span><br>   Memory: <span class="hljs-number">80</span>.<span class="hljs-number">8</span>M<br>   CGroup: /system.slice/kubelet.service<br>           └─<span class="hljs-number">10568</span> /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --cgroup-driver=syste...<br><br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:20</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">20.349191</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] k8s.io/client-go/informers/factory.go:<span class="hljs-number">133</span>: Failed to list *v1beta1.RuntimeClass: runtimeclasses.n... cluster scope<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:20</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">20.549091</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] k8s.io/kubernetes/pkg/kubelet/kubelet.go:<span class="hljs-number">453</span>: Failed to list *v1.Node: nodes &quot;master&quot; is forbidde... cluster scope<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:20</span> master kubelet[<span class="hljs-number">10568</span>]: W<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">20.748794</span>   <span class="hljs-number">10568</span> status_manager.go:<span class="hljs-number">485</span>] Failed to get status for pod &quot;kube-scheduler-master_kube-system(<span class="hljs-number">72815</span>ad5dd205fae43f0c83b411c... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:20</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">20.948658</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] k8s.io/kubernetes/pkg/kubelet/kubelet.go:<span class="hljs-number">444</span>: Failed to list *v1.Service: services is forbidden: ... cluster scope<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:21</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">21.149729</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:<span class="hljs-number">47</span>: Failed to list *v1.Pod: pods is forbidden: ... cluster scope<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:21</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">21.349456</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] object-&quot;kube-system&quot;/&quot;kube-proxy-token-xr7jb&quot;: Failed to list *v1.Secret: secrets &quot;kube-proxy-tok... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:21</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">21.548626</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] object-&quot;kube-system&quot;/&quot;kube-flannel-cfg&quot;: Failed to list *v1.ConfigMap: configmaps &quot;kube-flannel-c... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:21</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">21.749376</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] k8s.io/client-go/informers/factory.go:<span class="hljs-number">133</span>: Failed to list *v1beta1.CSIDriver: csidrivers.storage.... cluster scope<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:21</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">21.948609</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] object-&quot;kube-system&quot;/&quot;kube-proxy&quot;: Failed to list *v1.ConfigMap: configmaps &quot;kube-proxy&quot; is forbi... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:22</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">22.149386</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] object-&quot;kube-system&quot;/&quot;coredns-token-b7r9d&quot;: Failed to list *v1.Secret: secrets &quot;coredns-token-b7r... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:22</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">22.348419</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] object-&quot;kube-system&quot;/&quot;coredns&quot;: Failed to list *v1.ConfigMap: configmaps &quot;coredns&quot; is forbidden: ... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:22</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">22.450047</span>   <span class="hljs-number">10568</span> transport.go:<span class="hljs-number">110</span>] It has been <span class="hljs-number">5m</span>0s since a valid client cert was found, but the server is not responsive. <span class="hljs-keyword">A</span> restart...l credentials.<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:22</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">22.549144</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] object-&quot;kube-system&quot;/&quot;flannel-token-<span class="hljs-number">8</span>rcqc&quot;: Failed to list *v1.Secret: secrets &quot;flannel-token-<span class="hljs-number">8</span>rc... &quot;kube-system&quot;<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:22</span> master kubelet[<span class="hljs-number">10568</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">22.749477</span>   <span class="hljs-number">10568</span> reflector.go:<span class="hljs-number">125</span>] k8s.io/client-go/informers/factory.go:<span class="hljs-number">133</span>: Failed to list *v1beta1.RuntimeClass: runtimeclasses.n... cluster scope<br><br>[root@master ~]# systemctl restart kubelet<br>[root@master ~]# kubectl get nodes<br>NAME     STATUS     ROLES    AGE    VERSION<br>master   NotReady   master   <span class="hljs-number">416d</span>   v1.<span class="hljs-number">15</span>.<span class="hljs-number">0</span><br>node1    Ready      &lt;none&gt;   <span class="hljs-number">416d</span>   v1.<span class="hljs-number">15</span>.<span class="hljs-number">0</span><br>node2    Ready      &lt;none&gt;   <span class="hljs-number">416d</span>   v1.<span class="hljs-number">15</span>.<span class="hljs-number">0</span><br>[root@master ~]# systemctl status kubelet<br>● kubelet.service - kubelet: The Kubernetes Node Agent<br>   Loaded: loaded (/usr/lib/systemd/system/kubelet.service<span class="hljs-comment">; enabled; vendor preset: disabled)</span><br>  Drop-In: /usr/lib/systemd/system/kubelet.service.d<br>           └─<span class="hljs-number">10</span>-kubeadm.conf<br>   Active: active (running) since 三 <span class="hljs-number">2021-02-10</span> <span class="hljs-number">12</span>:<span class="hljs-number">19</span>:<span class="hljs-number">47</span> CST<span class="hljs-comment">; 14s ago</span><br>     Docs: https://kubernetes.io/docs/<br> Main PID: <span class="hljs-number">107339</span> (kubelet)<br>    Tasks: <span class="hljs-number">19</span><br>   Memory: <span class="hljs-number">64</span>.<span class="hljs-number">1</span>M<br>   CGroup: /system.slice/kubelet.service<br>           └─<span class="hljs-number">107339</span> /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --cgroup-driver=syst...<br><br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.385973</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">203</span>] operationExecutor.VerifyControllerAttachedVolume started for volume &quot;ca-certs&quot; (UniqueName: &quot;ku...<span class="hljs-number">6140d</span>b63012c&quot;)<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.385985</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">203</span>] operationExecutor.VerifyControllerAttachedVolume started for volume &quot;etc-pki&quot; (UniqueName: &quot;kub...<span class="hljs-number">6140d</span>b63012c&quot;)<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.385998</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">203</span>] operationExecutor.VerifyControllerAttachedVolume started for volume &quot;k8s-certs&quot; (UniqueName: &quot;k...<span class="hljs-number">6140d</span>b63012c&quot;)<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.386012</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">203</span>] operationExecutor.VerifyControllerAttachedVolume started for volume &quot;ca-certs&quot; (UniqueName: &quot;ku...de<span class="hljs-number">2b46660416</span>&quot;)<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.386026</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">203</span>] operationExecutor.VerifyControllerAttachedVolume started for volume &quot;k8s-certs&quot; (UniqueName: &quot;k...de<span class="hljs-number">2b46660416</span>&quot;)<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.386039</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">203</span>] operationExecutor.VerifyControllerAttachedVolume started for volume &quot;xtables-lock&quot; (UniqueName:...df9dafada3c6&quot;)<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:51</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">51.386048</span>  <span class="hljs-number">107339</span> reconciler.go:<span class="hljs-number">150</span>] Reconciler: start to sync state<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:52</span> master kubelet[<span class="hljs-number">107339</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">52.490132</span>  <span class="hljs-number">107339</span> configmap.go:<span class="hljs-number">203</span>] Couldn&#x27;t get configMap kube-system/coredns: couldn&#x27;t propagate object cache: timed out waiting for the condition<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:52</span> master kubelet[<span class="hljs-number">107339</span>]: E<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">52.490327</span>  <span class="hljs-number">107339</span> nestedpendingoperations.go:<span class="hljs-number">270</span>] Operation for &quot;\&quot;kubernetes.io/configmap/<span class="hljs-number">571e9358</span>-c71e-<span class="hljs-number">4</span>e4c-b956-<span class="hljs-number">44</span>baaf7457c8-conf....<span class="hljs-number">628156112</span> (du<br><span class="hljs-number">2</span>月 <span class="hljs-number">10 12:19:57</span> master kubelet[<span class="hljs-number">107339</span>]: I<span class="hljs-number">0210 12:19</span>:<span class="hljs-number">57.748120</span>  <span class="hljs-number">107339</span> transport.go:<span class="hljs-number">132</span>] certificate rotation detected, shutting down client connections to start using new credentials<br>Hint: Some lines were ellipsized, use -l to show in full.<br></code></pre></td></tr></table></figure><h1 id="node节点重新加入集群"><a href="#node节点重新加入集群" class="headerlink" title="node节点重新加入集群"></a>node节点重新加入集群</h1><p>我们分别登录node1和node2节点，首先删除旧的配置文件，然后停掉kubelet，然后执行命令加入集群即可，加入集群命令在不同node节点修改成对应节点名称。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@node1 ~]<span class="hljs-comment"># rm -rf /etc/kubernetes/kubelet.conf</span><br>[root@node1 ~]<span class="hljs-comment"># rm -rf /etc/kubernetes/bootstrap-kubelet.conf</span><br>[root@node1 ~]<span class="hljs-comment"># rm -rf /etc/kubernetes/pki/ca.crt</span><br>[root@node1 ~]<span class="hljs-comment"># systemctl stop kubelet</span><br>[root@node1 ~]<span class="hljs-comment"># sudo kubeadm join --token=xdy3g8.4nzmh2eezaz3ccx0  192.168.21.21:6443 --node-name node1 --discovery-token-unsafe-skip-ca-verification</span><br>[preflight] Running pre-flight checks<br>[preflight] Reading configuration <span class="hljs-keyword">from</span> the cluster...<br>[preflight] FYI: You can look at this config file <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br>[kubelet-start] Downloading configuration <span class="hljs-keyword">for</span> the kubelet <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;kubelet-config-1.15&quot;</span> ConfigMap <span class="hljs-keyword">in</span> the kube-system namespace<br>[kubelet-start] Writing kubelet configuration <span class="hljs-keyword">to</span> file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br>[kubelet-start] Writing kubelet environment file <span class="hljs-keyword">with</span> flags <span class="hljs-keyword">to</span> file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br>[kubelet-start] Activating the kubelet service<br>[kubelet-start] Waiting <span class="hljs-keyword">for</span> the kubelet <span class="hljs-keyword">to</span> perform the TLS Bootstrap...<br><br>This node has joined the cluster:<br>* Certificate signing request was sent <span class="hljs-keyword">to</span> apiserver <span class="hljs-keyword">and</span> a response was received.<br>* The Kubelet was informed <span class="hljs-keyword">of</span> the <span class="hljs-keyword">new</span> secure connection details.<br><br>Run <span class="hljs-string">&#x27;kubectl get nodes&#x27;</span> <span class="hljs-literal">on</span> the control-plane <span class="hljs-keyword">to</span> see this node join the cluster.<br></code></pre></td></tr></table></figure><h1 id="验证集群是否正常"><a href="#验证集群是否正常" class="headerlink" title="验证集群是否正常"></a>验证集群是否正常</h1><p>执行完上面操作，到master上验证下集群是否正常，查看node和pod都没问题则说明更新证书成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get nodes<br>NAME     STATUS   ROLES    AGE    <span class="hljs-keyword">VERSION</span><br><span class="hljs-keyword">master</span>   <span class="hljs-title">Ready</span>    <span class="hljs-keyword">master</span>   <span class="hljs-title">416d</span>   v1.<span class="hljs-number">15.0</span><br>node1    Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">416</span>d   v1.<span class="hljs-number">15.0</span><br>node2    Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">416</span>d   v1.<span class="hljs-number">15.0</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -A<br>NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-bccdc95cf-hpxnx          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">22</span>         <span class="hljs-number">251</span>d<br>kube-system   coredns-bccdc95cf-txff8          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">29</span>         <span class="hljs-number">270</span>d<br>kube-system   etcd-<span class="hljs-keyword">master</span>                      <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">39</span>         <span class="hljs-number">416</span>d<br>kube-system   kube-apiserver-<span class="hljs-keyword">master</span>            <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">39</span>         <span class="hljs-number">416</span>d<br>kube-system   kube-controller-manager-<span class="hljs-keyword">master</span>   <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">31</span>         <span class="hljs-number">416</span>d<br>kube-system   kube-flannel-ds-amd64-<span class="hljs-number">94</span>qpm      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">12</span>         <span class="hljs-number">270</span>d<br>kube-system   kube-flannel-ds-amd64-knhbk      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">21</span>         <span class="hljs-number">297</span>d<br>kube-system   kube-flannel-ds-amd64-vshcz      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">21</span>         <span class="hljs-number">297</span>d<br>kube-system   kube-proxy-glkk9                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">12</span>         <span class="hljs-number">270</span>d<br>kube-system   kube-proxy-js6cb                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">29</span>         <span class="hljs-number">416</span>d<br>kube-system   kube-proxy-vqr5l                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">33</span>         <span class="hljs-number">416</span>d<br>kube-system   kube-scheduler-<span class="hljs-keyword">master</span>            <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">31</span>         <span class="hljs-number">416</span>d<br>kube-system   tiller-deploy-<span class="hljs-number">75</span>f5747884-cvhs9   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">23</span>         <span class="hljs-number">297</span>d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Kubeadm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s中如何控制pod中容器的启动顺序</title>
    <link href="/2020/12/25/2020-12-25-How-to-control-the-startup-sequence-of-containers-in-pod-in-k8s/"/>
    <url>/2020/12/25/2020-12-25-How-to-control-the-startup-sequence-of-containers-in-pod-in-k8s/</url>
    
    <content type="html"><![CDATA[<p>我们在部署服务的时候，通常会遇到这种场景就是2个服务部署在同一个pod中，但是这2个服务又有先后的依赖关系，那么我们如何在pod中如何来控制容器的启动顺序呢？今天我们来讲一下如何在pod如何控制2个容器的启动顺序，我们在这里在一个pod里面部署springboot和centos的2个容器作为示例，centos的启动需要依赖于springboot的服务启动正常再启动。</p><p>正常我们在一个pod中部署2个容器，启动的顺序都是随机的，其实我们在这里设置启动顺序就是通过脚本来判读springboot服务是否启动，如果启动了我再启动centos。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">container-start-order</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">container-start-order</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">container-start-order</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">container-start-order</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">container-start-order</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">container-start-order</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">container-start-order</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">while</span> [[ <span class="hljs-string">&quot;$(curl -s -o /dev/null -w &#x27;&#x27;<span class="hljs-template-variable">%&#123;http_code&#125;</span>&#x27;&#x27; localhost:8080)&quot;</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;200&#x27;</span> ]]<span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">Waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">springboot;sleep</span> <span class="hljs-number">5</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span> <span class="hljs-string">echo</span> <span class="hljs-string">springboot</span> <span class="hljs-string">available;</span> <span class="hljs-string">top</span> <span class="hljs-string">-b</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/bash</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">centos:7</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">centos</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nwx-test.tencentcloudcr.com/nwx/springboot:springboot-4801f1daf265728c1061f2fa0ff20b1eeedb9416</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">springboot</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tcr.ipstcr-erzjx59w-public</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>我们在centos中设置依赖的启动命令，下面这条命令的意思是我们在centos中每隔5s去curl springboot的服务，如果正常启动，则启动centos，启动命令是top -b，如果是您的服务镜像这个设置成你自己的服务启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -s -o /dev/null -w &#x27;&#x27;%&#123;http_code&#125;&#x27;&#x27; localhost:8080)</span>&quot;</span> != <span class="hljs-string">&#x27;200&#x27;</span> ]]; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> Waiting <span class="hljs-keyword">for</span> springboot;<span class="hljs-built_in">sleep</span> 5; <span class="hljs-keyword">done</span>; <span class="hljs-built_in">echo</span> springboot available; top -b<br></code></pre></td></tr></table></figure><p>下面我们启动pod，看看是否会达到我们预期目标，centos依赖springboot的服务启动后再启动</p><p><img src="/img/2020-12-25-How-to-control-the-startup-sequence-of-containers-in-pod-in-k8s/1.png" alt="upload-image"> </p><p><img src="/img/2020-12-25-How-to-control-the-startup-sequence-of-containers-in-pod-in-k8s/2.png" alt="upload-image"> </p><p><img src="/img/2020-12-25-How-to-control-the-startup-sequence-of-containers-in-pod-in-k8s/3.png" alt="upload-image"> </p><p>从事件和容器启动日志的时间，我们可以发现springboot是在6:41 56毫秒才访问成功，查看centos的日志可以发现，6:41 56毫秒前每隔5s探测一次springboot服务是否启动成功，到了6:41 56毫秒返回200后则执行top -b启动centos。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上搭建kong网关</title>
    <link href="/2020/12/22/2020-12-22-Build-Kong-Gateway-on-TKE/"/>
    <url>/2020/12/22/2020-12-22-Build-Kong-Gateway-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>本文介绍下如何在k8s上搭建kong网关及kong网关的简单使用，kong是一个服务控制平台，通过允许客户管理服务和 API 的整个生命周期，将组织的信息代理到所有服务。Kong Enterprise 建立在 Kong Gateway 之上，使用户能够简化跨混合云和多云部署的 API 和微服务管理。</p><p>Kong Enterprise 旨在利用工作流自动化和现代 GitOps 实践在分散式体系结构上运行。通过kong，用户可以：</p><ul><li>分散应用程序&#x2F;服务并过渡到微服务</li><li>创建丰富的的 API 开发人员生态系统</li><li>主动识别与 API 相关的异常和威胁</li><li>保护和管理 API&#x2F;服务，并在整个组织中提高 API 可见性</li></ul><p>kong的架构大致如下图</p><p><img src="/img/2020-12-22-Build-Kong-Gateway-on-TKE/1.png" alt="upload-image"> </p><p><img src="/img/2020-12-22-Build-Kong-Gateway-on-TKE/2.png" alt="upload-image"> </p><h1 id="部署kong网关"><a href="#部署kong网关" class="headerlink" title="部署kong网关"></a>部署kong网关</h1><p>我们在部署kong网关的时候可以选择用数据库Postgres来存储路由规则，也可部署一个单机的kong服务，注意部署kong的过程中，如果官方镜像拉不下来可以替换镜像成siriuszg&#x2F;kong-ingress-controller</p><h2 id="不带数据库部署kong"><a href="#不带数据库部署kong" class="headerlink" title="不带数据库部署kong"></a>不带数据库部署kong</h2><p>部署单机的kong服务，我们可以通过helm和kustomize来部署</p><p>helm部署的方式，我们将kong部署到kong这个命名空间下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl create kong</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm repo add kong https://charts.konghq.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm repo update</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm install kong --generate-name --<span class="hljs-built_in">set</span> ingressController.installCRDs=<span class="hljs-literal">false</span> --namespace kong</span><br></code></pre></td></tr></table></figure><p>kustomize部署kong到集群，首先需要安装下kustomize则个工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sh install_kustomize.sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> kustomize /usr/local/bin</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kustomize build github.com/kubernetes-ingress-controller/deploy/manifests/base | kubectl apply -f -</span><br></code></pre></td></tr></table></figure><h2 id="带数据库部署kong"><a href="#带数据库部署kong" class="headerlink" title="带数据库部署kong"></a>带数据库部署kong</h2><p>github的kubernetes-ingress-controller项目上有带数据库的yaml文件，我们下周下来修改下就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/Kong/kubernetes-ingress-controller.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root/kubernetes-ingress-controller/deploy/manifests/postgres</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改下postgres.yaml的卷大小为10G和base目录下kong-ingress-dbless.yaml的镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kustomize build /root/kubernetes-ingress-controller/deploy/manifests/postgres | kubectl apply -f -</span><br></code></pre></td></tr></table></figure><h2 id="验证kong网关是否部署成功"><a href="#验证kong网关是否部署成功" class="headerlink" title="验证kong网关是否部署成功"></a>验证kong网关是否部署成功</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM-0-13-centos ~]# <span class="hljs-attribute">HOST</span>=$(kubectl <span class="hljs-built_in">get</span> svc --namespace kong kong-proxy -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&#x27;&#123;.status.loadBalancer.ingress[0].ip&#125;&#x27;</span>)<br>[root@VM-0-13-centos ~]# <span class="hljs-attribute">PORT</span>=$(kubectl <span class="hljs-built_in">get</span> svc --namespace kong kong-proxy -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&#x27;&#123;.spec.ports[0].port&#125;&#x27;</span>)<br>[root@VM-0-13-centos ~]# <span class="hljs-built_in">export</span> <span class="hljs-attribute">PROXY_IP</span>=<span class="hljs-variable">$&#123;HOST&#125;</span>:$&#123;PORT&#125;<br>[root@VM-0-13-centos base]# curl <span class="hljs-variable">$PROXY_IP</span><br>&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;no Route matched with those values&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>出现这个信息表示kong网关部署成功</p><h1 id="部署kong的UI管理服务konga"><a href="#部署kong的UI管理服务konga" class="headerlink" title="部署kong的UI管理服务konga"></a>部署kong的UI管理服务konga</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kong</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">konga</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">konga</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">konga</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">konga</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_ADAPTER</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">postgres</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_URI</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;postgresql://kong:kong@postgres:5432/kong&quot;</span>  <span class="hljs-comment">#根据实际的kong数据库配置</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">pantsel/konga</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">konga</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">1337</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">konga</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kong</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">1337</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">1337</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">konga</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">konga-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kong</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">nwx-ingress</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">kong.tke.niewx.cn</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">konga</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">1337</span><br></code></pre></td></tr></table></figure><p>在浏览器输入<a href="http://kong.tke.niewx.cn访问页面/">http://kong.tke.niewx.cn访问页面</a></p><p><img src="/img/2020-12-22-Build-Kong-Gateway-on-TKE/3.png" alt="upload-image"></p><p>创建一个admin账号，这里我们账号为tke，创建完登录即可，这里需要暴露kong的8001端口，作为kong admin api</p><p><img src="/img/2020-12-22-Build-Kong-Gateway-on-TKE/4.png" alt="upload-image"></p><p>然后配置一个链接连接后端的amin api，这里填写kong的serviceip和端口即可</p><h1 id="配置kong-ingress"><a href="#配置kong-ingress" class="headerlink" title="配置kong-ingress"></a>配置kong-ingress</h1><p>首先我们在default下部署一个httpbin服务和service在，这里我们已经部署好了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/kennethreitz/httpbin</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">resources:</span> &#123;&#125;<br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30178</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p>接下来我们创建一个kong的ingress网关来访问后端的httpbin服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">konghq.com/strip-path:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">kong</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kong-ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">httpbin</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8000</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/foo</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">httpbin</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8000</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/bar</span><br></code></pre></td></tr></table></figure><p>创建好之后，我们通过kong的入口lb类型service的vip访问后端的httpbin服务，其他的ingress配置方式可以参考<a href="https://docs.konghq.com/kubernetes-ingress-controller/1.1.x/guides/using-kongplugin-resource/">https://docs.konghq.com/kubernetes-ingress-controller/1.1.x/guides/using-kongplugin-resource/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">manifests</span>]<span class="hljs-comment"># curl -i 159.75.145.38/bar/status/200</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=utf-8</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">keep-alive</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">10</span> <span class="hljs-string">Jan</span> <span class="hljs-number">2021 07:44:25 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">*</span><br><span class="hljs-attr">access-control-allow-credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">x-envoy-decorator-operation:</span> <span class="hljs-string">httpbin.default.svc.cluster.local:8000/*</span><br><span class="hljs-attr">X-Kong-Upstream-Latency:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">X-Kong-Proxy-Latency:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">Via:</span> <span class="hljs-number">2.2</span><span class="hljs-number">.1</span><br><br>[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">manifests</span>]<span class="hljs-comment"># curl -i 159.75.145.38/foo/status/200</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=utf-8</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">keep-alive</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Sun,</span> <span class="hljs-number">10</span> <span class="hljs-string">Jan</span> <span class="hljs-number">2021 08:02:37 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">*</span><br><span class="hljs-attr">access-control-allow-credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">x-envoy-decorator-operation:</span> <span class="hljs-string">httpbin.default.svc.cluster.local:8000/*</span><br><span class="hljs-attr">X-Kong-Upstream-Latency:</span> <span class="hljs-number">4</span><br><span class="hljs-attr">X-Kong-Proxy-Latency:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">Via:</span> <span class="hljs-number">2.2</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>从上面的访问我们可以发现已经成功的通过kong访问到了后端的httpbin服务。</p>]]></content>
    
    
    <categories>
      
      <category>Kong</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TKE</tag>
      
      <tag>Kong</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上搭建企业级镜像仓库Harbor</title>
    <link href="/2020/12/20/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/"/>
    <url>/2020/12/20/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>本次我们来讲解下如何在TKE上搭建企业级镜像仓库Harbor，这里我们采用的是helm方式部署到TKE集群上，helm部署的harbor会通过ingress暴露前端页面提供访问，一般我们需要通过域名的https方式来访问Harbor仓库，所以我们需要做如下准备：</p><ul><li>腾讯云上申请一个TKE集群</li><li>安装helm</li><li>集群上安装nginx-ingress这个插件，可以参考<a href="https://cloud.tencent.com/document/product/457/50503">https://cloud.tencent.com/document/product/457/50503</a></li><li>腾讯云上申请一个域名，在dnspod将域名解析到nginx-ingress的入口lb上，我这里将*.tke.niewx.cn解析到我的nginx-ingress入口lb上</li><li>腾讯云上申请免费的ssl证书，解析到你的harbor域名，我这里的域名是harbor.tke.niewx.cn</li></ul><p>如上都准备好，我们就开始进行部署harbor到TKE集群中，本次搭建仅作为示例，不做实际的使用。</p><h1 id="helm下载harbor的chart包"><a href="#helm下载harbor的chart包" class="headerlink" title="helm下载harbor的chart包"></a>helm下载harbor的chart包</h1><p>因为我们需要修改chart包中一些参数，我们需要先下载chart包，然后修改value.yaml中的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">helm repo add harbor https://helm.goharbor.io</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm fetch harbor/harbor 1.5.2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tar -zxvf harbor-1.5.2.tgz</span><br></code></pre></td></tr></table></figure><h1 id="修改value-yaml"><a href="#修改value-yaml" class="headerlink" title="修改value.yaml"></a>修改value.yaml</h1><p>这里我们只指出value.yanl需要修改的地方，大家可以根据的注释说明进行修改，这里ingress我用的nginx-ingress插件，和原生的控制器有点差别，这里我们会先不修改，后续会删除helm创建的ingress，重新配置ingress。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">expose:</span><br><span class="hljs-symbol">  type:</span> ingress<br><span class="hljs-symbol">  tls:</span><br><span class="hljs-symbol">    enabled:</span> false  <span class="hljs-meta">#如果没有证书，则设置为false</span><br><span class="hljs-symbol">    certSource:</span> auto<br><span class="hljs-symbol">    auto:</span><br><span class="hljs-symbol">      commonName:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">    secret:</span><br><span class="hljs-symbol">      secretName:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      notarySecretName:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  ingress:</span><br><span class="hljs-symbol">    hosts:</span><br><span class="hljs-symbol">      core:</span> core.harbor.domain<br><span class="hljs-symbol">      notary:</span> notary.harbor.domain<br><span class="hljs-symbol">    controller:</span> default<br><span class="hljs-symbol">    annotations:</span><br>      ingress.kubernetes.io/ssl-redirect: <span class="hljs-string">&quot;true&quot;</span><br>      ingress.kubernetes.io/proxy-body-size: <span class="hljs-string">&quot;0&quot;</span><br>      nginx.ingress.kubernetes.io/ssl-redirect: <span class="hljs-string">&quot;true&quot;</span><br>      nginx.ingress.kubernetes.io/proxy-body-size: <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-symbol">  clusterIP:</span><br><span class="hljs-symbol">    name:</span> harbor<br><span class="hljs-symbol">    ports:</span><br><span class="hljs-symbol">      httpPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">      httpsPort:</span> <span class="hljs-number">443</span><br><span class="hljs-symbol">      notaryPort:</span> <span class="hljs-number">4443</span><br><span class="hljs-symbol">  nodePort:</span><br><span class="hljs-symbol">    name:</span> harbor<br><span class="hljs-symbol">    ports:</span><br><span class="hljs-symbol">      http:</span><br><span class="hljs-symbol">        port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">        nodePort:</span> <span class="hljs-number">30002</span><br><span class="hljs-symbol">      https:</span><br><span class="hljs-symbol">        port:</span> <span class="hljs-number">443</span><br><span class="hljs-symbol">        nodePort:</span> <span class="hljs-number">30003</span><br><span class="hljs-symbol">      notary:</span><br><span class="hljs-symbol">        port:</span> <span class="hljs-number">4443</span><br><span class="hljs-symbol">        nodePort:</span> <span class="hljs-number">30004</span><br><span class="hljs-symbol">  loadBalancer:</span><br><span class="hljs-symbol">    name:</span> harbor<br><span class="hljs-symbol">    IP:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">    ports:</span><br><span class="hljs-symbol">      httpPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">      httpsPort:</span> <span class="hljs-number">443</span><br><span class="hljs-symbol">      notaryPort:</span> <span class="hljs-number">4443</span><br><span class="hljs-symbol">    annotations:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">    sourceRanges:</span> []<br><br><span class="hljs-meta"># If Harbor is deployed behind the proxy, set it as the URL of proxy</span><br><span class="hljs-symbol">externalURL:</span> https:<span class="hljs-comment">//harbor.tke.niewx.cn  # 配置上需要给harbor访问的域名</span><br><br>......<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">persistence:</span><br><span class="hljs-symbol">  enabled:</span> true<br>  <span class="hljs-meta"># Setting it to <span class="hljs-string">&quot;keep&quot;</span> to avoid removing PVCs during a helm delete</span><br>  <span class="hljs-meta"># operation. Leaving it empty will delete PVCs after the chart deleted</span><br>  <span class="hljs-meta"># (this does not apply for PVCs that are created for internal database</span><br>  <span class="hljs-meta"># and redis components, i.e. they are never deleted automatically)</span><br><span class="hljs-symbol">  resourcePolicy:</span> <span class="hljs-string">&quot;keep&quot;</span><br><span class="hljs-symbol">  persistentVolumeClaim:</span><br><span class="hljs-symbol">    registry:</span><br>      <span class="hljs-meta"># Use the existing PVC which must be created manually before bound,</span><br>      <span class="hljs-meta"># and specify the <span class="hljs-string">&quot;subPath&quot;</span> <span class="hljs-keyword">if</span> the PVC is shared with other components</span><br><span class="hljs-symbol">      existingClaim:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-meta"># Specify the <span class="hljs-string">&quot;storageClass&quot;</span> used to provision the volume. Or the default</span><br>      <span class="hljs-meta"># StorageClass will be used(the default).</span><br>      <span class="hljs-meta"># Set it to <span class="hljs-string">&quot;-&quot;</span> to disable dynamic provisioning</span><br><span class="hljs-symbol">      storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      subPath:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      accessMode:</span> ReadWriteOnce<br><span class="hljs-symbol">      size:</span> <span class="hljs-number">10</span>Gi <span class="hljs-meta"># 根据需要修改磁盘大小，腾讯云上cbs盘最小要求10G</span><br><span class="hljs-symbol">    chartmuseum:</span><br><span class="hljs-symbol">      existingClaim:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      subPath:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      accessMode:</span> ReadWriteOnce<br><span class="hljs-symbol">      size:</span> <span class="hljs-number">10</span>Gi  <span class="hljs-meta"># 根据需要修改磁盘大小，腾讯云上cbs盘最小要求10G</span><br><span class="hljs-symbol">    jobservice:</span><br><span class="hljs-symbol">      existingClaim:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      subPath:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      accessMode:</span> ReadWriteOnce<br><span class="hljs-symbol">      size:</span> <span class="hljs-number">10</span>Gi  <span class="hljs-meta"># 根据需要修改磁盘大小，腾讯云上cbs盘最小要求10G</span><br>    <span class="hljs-meta"># If external database is used, the following settings for database will</span><br>    <span class="hljs-meta"># be ignored</span><br><span class="hljs-symbol">    database:</span><br><span class="hljs-symbol">      existingClaim:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      subPath:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      accessMode:</span> ReadWriteOnce<br><span class="hljs-symbol">      size:</span> <span class="hljs-number">10</span>Gi  <span class="hljs-meta"># 根据需要修改磁盘大小，腾讯云上cbs盘最小要求10G</span><br>    <span class="hljs-meta"># If external Redis is used, the following settings for Redis will</span><br>    <span class="hljs-meta"># be ignored</span><br><span class="hljs-symbol">    redis:</span><br><span class="hljs-symbol">      existingClaim:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      subPath:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      accessMode:</span> ReadWriteOnce<br><span class="hljs-symbol">      size:</span> <span class="hljs-number">10</span>Gi  <span class="hljs-meta"># 根据需要修改磁盘大小，腾讯云上cbs盘最小要求10G</span><br><span class="hljs-symbol">    trivy:</span><br><span class="hljs-symbol">      existingClaim:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      subPath:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">      accessMode:</span> ReadWriteOnce<br><span class="hljs-symbol">      size:</span> <span class="hljs-number">10</span>Gi  <span class="hljs-meta"># 根据需要修改磁盘大小，腾讯云上cbs盘最小要求10G</span><br>  <br>..........<br></code></pre></td></tr></table></figure><h1 id="创建harbor服务"><a href="#创建harbor服务" class="headerlink" title="创建harbor服务"></a>创建harbor服务</h1><p>这里我们创建一个harbor的命名空间用来部署harbor</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># kubectl create ns harbor<br># helm install ./harbor --generate-name --namespace harbor<br><br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos harbor]# kubectl get pod -n harbor<br>NAME                                                      READY   STATUS    RESTARTS   AGE<br>harbor<span class="hljs-string">-1610108910</span>-harbor-chartmuseum<span class="hljs-string">-5874</span>b9c6f-drk8f      1/1     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-clair-cb9fb7cd-t58l8             2/2     Running   3          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-core<span class="hljs-string">-69</span>d8dd696b-wzdp8            1/1     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-database<span class="hljs-string">-0</span>                       1/1     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-jobservice<span class="hljs-string">-754</span>bfbfd65-qk9ps      1/1     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-notary-server<span class="hljs-string">-7</span>f4ccfd65c-kbc62   1/1     Running   1          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-notary-signer<span class="hljs-string">-676</span>f5dfbb7-p8r6q   1/1     Running   1          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-portal<span class="hljs-string">-59</span>b9d4f876-p44bm          1/1     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-redis<span class="hljs-string">-0</span>                          1/1     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-registry<span class="hljs-string">-7</span>c445d6cd8-qfvkc        2/2     Running   0          16h<br>harbor<span class="hljs-string">-1610108910</span>-harbor-trivy<span class="hljs-string">-0</span>                          1/1     Running   0          16h<br></code></pre></td></tr></table></figure><h1 id="通过nginx-ingress配置harbor访问域名"><a href="#通过nginx-ingress配置harbor访问域名" class="headerlink" title="通过nginx-ingress配置harbor访问域名"></a>通过nginx-ingress配置harbor访问域名</h1><p>这边等pod启动后，我们通过nginx-ingress来配置下harbor的域名，因为harbor需要提供https服务，我们需要在ingress配置tls，因此需要先将我们之前申请的证书通过secret进行挂载。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># kubectl <span class="hljs-keyword">create</span> secret tls harbor-ssl --<span class="hljs-keyword">key</span> <span class="hljs-number">2</span>_harbor.tke.niewx.cn.<span class="hljs-keyword">key</span> --cert <span class="hljs-number">1</span>_harbor.tke.niewx.cn_bundle.crt -n harbor<br></code></pre></td></tr></table></figure><p>配置ingress转发harbor-portal的前端页面访问service</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">ingress.cloud.tencent.com/direct-access</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nwx-ingress</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.extensiveParameters</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;&#123;&quot;AddressIPVersion&quot;:&quot;IPV4&quot;&#125;&#x27;</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.http-rules</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;[&#123;&quot;host&quot;:&quot;harbor.tke.niewx.cn&quot;,&quot;path&quot;:&quot;/&quot;,&quot;backend&quot;:&#123;&quot;serviceName&quot;:&quot;harbor-1610088954-harbor-portal&quot;,&quot;servicePort&quot;:&quot;80&quot;&#125;&#125;]&#x27;</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.https-rules</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;null&quot;</span><br>    <span class="hljs-attribute">kubernetes.io/ingress.rule-mix</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>    <span class="hljs-attribute">nginx.ingress.kubernetes.io/proxy-body-size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1000m</span><br>    <span class="hljs-attribute">nginx.ingress.kubernetes.io/use-regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-ingress</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: harbor.tke.niewx.cn</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-1610108910-harbor-portal</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-1610108910-harbor-core</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/api</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-1610108910-harbor-core</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/service</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-1610108910-harbor-core</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-1610108910-harbor-core</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/chartrepo</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-1610108910-harbor-core</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/c</span><br>  <span class="hljs-attribute">tls</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">harbor.tke.niewx.cn</span><br>    <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor-ssl</span><br><span class="hljs-attribute">status</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">loadBalancer</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">ingress</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ip: 81.71.131.235</span><br></code></pre></td></tr></table></figure><p>配置好之后，可以将helm创建的ingresss删除掉，然后直接浏览器输入 <a href="https://harbor.tke.niewx.cn/">https://harbor.tke.niewx.cn</a> 进行访问，默认初始账号密码是 admin&#x2F;Harbor12345，建议后续修改admin的密码，输入后正常登录即说明部署成功。</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/1.png" alt="upload-image"> </p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/2.png" alt="upload-image"> </p><h1 id="往harbor上传下载镜像"><a href="#往harbor上传下载镜像" class="headerlink" title="往harbor上传下载镜像"></a>往harbor上传下载镜像</h1><p>我们在harbor上创建了一个tke的项目，用来测试上传下载镜像</p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos harbor]# docker login harbor.tke.niewx.<span class="hljs-keyword">cn</span><br>Authenticating with existing credentials...<br>Stored credentials invalid <span class="hljs-built_in">or</span> expired<br>Username (admin): admin<br>Password: <br>WARNING! Your password will <span class="hljs-keyword">be</span> stored unencrypted in /root/.docker/config.json.<br>Configure <span class="hljs-keyword">a</span> credential helper <span class="hljs-keyword">to</span> <span class="hljs-built_in">remove</span> this warning. See<br>https://docs.docker.<span class="hljs-keyword">com</span>/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos harbor]# docker <span class="hljs-keyword">tag</span> nginx:latest harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos harbor]# docker push harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>The push refers <span class="hljs-keyword">to</span> repository [harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx]<br><span class="hljs-number">4</span>eaf0ea085df: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">2</span>c7498eef94a: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">7</span>d2b207c2679: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">5</span>c4e5adc71a8: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">87</span>c8a1d8f54f: Layer already <span class="hljs-built_in">exists</span> <br>latest: digest: <span class="hljs-built_in">sha256</span>:<span class="hljs-number">13</span>e4551010728646aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71 size: <span class="hljs-number">1362</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/3.png" alt="upload-image"> </p><p><strong>注意</strong>: 这里我们在上传镜像的时候遇到了一个问题，一般镜像文件比较大，推送可能会报错413 Request Entity Too Large，原来是上传文件太大，导致上传失败，这里我们在ingress修改下上传body大小就可以了，在ingress注解中加入就可以正常推送了 nginx.ingress.kubernetes.io&#x2F;proxy-body-size: 1000m</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>我们在其他机器上拉取镜像试试</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-3</span>-centos ~]<span class="hljs-meta"># docker pull harbor.tke.niewx.cn/tke/nginx:latest</span><br><span class="hljs-symbol">latest:</span> Pulling from tke/nginx<br><span class="hljs-symbol">Digest:</span> sha256:<span class="hljs-number">13e4551010728646</span>aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71<br><span class="hljs-symbol">Status:</span> Downloaded newer image for harbor.tke.niewx.cn<span class="hljs-keyword">/tke/</span>nginx:latest<br></code></pre></td></tr></table></figure><p>因为我们的镜像仓库是公开的，不需要登录也可以拉取，这里我们配置成私有的，需要先登录才能拉取镜像</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/4.png" alt="upload-image"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]<span class="hljs-comment"># docker pull harbor.tke.niewx.cn/tke/nginx:latest</span><br>Error response from daemon: unauthorized: unauthorized to access repository: tke<span class="hljs-regexp">/nginx, action: pull: unauthorized to access repository: tke/</span>nginx, action: pull<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]<span class="hljs-comment"># docker login harbor.tke.niewx.cn -u admin</span><br>Password: <br>WARNING! Your password will be stored unencrypted <span class="hljs-keyword">in</span> <span class="hljs-regexp">/root/</span>.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https:<span class="hljs-regexp">//</span>docs.docker.com<span class="hljs-regexp">/engine/</span>reference<span class="hljs-regexp">/commandline/</span>login/<span class="hljs-comment">#credentials-store</span><br><br>Login Succeeded<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]<span class="hljs-comment"># docker pull harbor.tke.niewx.cn/tke/nginx:latest</span><br>latest: Pulling from tke/nginx<br>Digest: sha256:<span class="hljs-number">13</span>e4551010728646aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> harbor.tke.niewx.cn<span class="hljs-regexp">/tke/</span>nginx:latest<br></code></pre></td></tr></table></figure><p>这里我们将镜像仓库改成私有的就需要登录才能拉取镜像。</p><h1 id="创建子用户访问镜像仓库"><a href="#创建子用户访问镜像仓库" class="headerlink" title="创建子用户访问镜像仓库"></a>创建子用户访问镜像仓库</h1><p>我们创建一个tke的子账号，但是没有加入到项目中，我们看看能否拉取镜像</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/5.png" alt="upload-image"> </p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/6.png" alt="upload-image"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]<span class="hljs-comment"># docker pull harbor.tke.niewx.cn/tke/nginx:latest</span><br>latest: Pulling from tke/nginx<br>Digest: sha256:<span class="hljs-number">13</span>e4551010728646aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> harbor.tke.niewx.cn<span class="hljs-regexp">/tke/</span>nginx:latest<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]<span class="hljs-comment"># docker login harbor.tke.niewx.cn -u tke</span><br>Password: <br>WARNING! Your password will be stored unencrypted <span class="hljs-keyword">in</span> <span class="hljs-regexp">/root/</span>.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https:<span class="hljs-regexp">//</span>docs.docker.com<span class="hljs-regexp">/engine/</span>reference<span class="hljs-regexp">/commandline/</span>login/<span class="hljs-comment">#credentials-store</span><br><br>Login Succeeded<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]<span class="hljs-comment"># docker pull harbor.tke.niewx.cn/tke/nginx:latest</span><br>Error response from daemon: unauthorized: unauthorized to access repository: tke<span class="hljs-regexp">/nginx, action: pull: unauthorized to access repository: tke/</span>nginx, action: pull<br></code></pre></td></tr></table></figure><p>从测试结果看是无法拉取镜像的，我们将tke用户加入到tke这个项目中再测试下，这里我们可以给tke分配不同的角色来分配不同的权限</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/7.png" alt="upload-image"></p><ul><li>受限访客:受限访客对项目没有完全的读取权限。他们可以拉镜像，但不能推送，并且看不到日志或项目的其他成员。例如，可以为共享项目访问权限的不同组织的用户创建有限的来宾。</li><li>访客:访客具有指定项目的只读权限。他们可以提取和重新标记镜像，但不能推送。</li><li>开发者:开发者具有项目的读写权限。</li><li>维护人员: 维护人员的权限超出了”开发者”的权限，包括扫描镜像、查看复制作业以及删除镜像和掌舵图表的能力。</li><li>项目管理员:在创建新项目时，您将被分配到项目中的”项目管理人”角色。除了读写权限外，”ProjectAdmin”还具有一些管理权限，例如添加和删除成员、启动漏洞扫描。</li></ul><p>除了上述角色之外，还有两个系统级角色：</p><ul><li>harbor系统管理员:”港口系统管理员”拥有最多的权限。除了上述权限外，”Harbor 系统管理员”还可以列出所有项目、将普通用户设置为管理员、删除用户以及设置所有镜像的漏洞扫描策略。公共项目”库”也归管理员所有。</li><li>匿名:当用户未登录时，该用户将被视为”匿名”用户。匿名用户无法访问私有项目，并且对公共项目具有只读访问权限。</li></ul><h2 id="分配访客权限给tke账号"><a href="#分配访客权限给tke账号" class="headerlink" title="分配访客权限给tke账号"></a>分配访客权限给tke账号</h2><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/8.png" alt="upload-image"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]# docker pull harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>latest: Pulling from tke/nginx<br>Digest: <span class="hljs-built_in">sha256</span>:<span class="hljs-number">13</span>e4551010728646aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71<br>Status: Image <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span> <span class="hljs-keyword">to</span> date <span class="hljs-keyword">for</span> harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]# docker push harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>The push refers <span class="hljs-keyword">to</span> repository [harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx]<br><span class="hljs-number">4</span>eaf0ea085df: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">2</span>c7498eef94a: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">7</span>d2b207c2679: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">5</span>c4e5adc71a8: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">87</span>c8a1d8f54f: Layer already <span class="hljs-built_in">exists</span> <br>unauthorized: unauthorized <span class="hljs-keyword">to</span> access repository: tke/nginx, action: push: unauthorized <span class="hljs-keyword">to</span> access repository: tke/nginx, action: push<br></code></pre></td></tr></table></figure><p>可以发现，我们分配了访客权限给tke，我们只能拉取镜像，不能push镜像</p><h2 id="分配开发者权限给tke账号"><a href="#分配开发者权限给tke账号" class="headerlink" title="分配开发者权限给tke账号"></a>分配开发者权限给tke账号</h2><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/9.png" alt="upload-image"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]# docker pull harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>latest: Pulling from tke/nginx<br>Digest: <span class="hljs-built_in">sha256</span>:<span class="hljs-number">13</span>e4551010728646aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71<br>Status: Image <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span> <span class="hljs-keyword">to</span> date <span class="hljs-keyword">for</span> harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">3</span>-centos ~]# docker push harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx:latest<br>The push refers <span class="hljs-keyword">to</span> repository [harbor.tke.niewx.<span class="hljs-keyword">cn</span>/tke/nginx]<br><span class="hljs-number">4</span>eaf0ea085df: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">2</span>c7498eef94a: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">7</span>d2b207c2679: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">5</span>c4e5adc71a8: Layer already <span class="hljs-built_in">exists</span> <br><span class="hljs-number">87</span>c8a1d8f54f: Layer already <span class="hljs-built_in">exists</span> <br>latest: digest: <span class="hljs-built_in">sha256</span>:<span class="hljs-number">13</span>e4551010728646aa7e1b1ac5313e04cf75d051fa441396832fcd6d600b5e71 size: <span class="hljs-number">1362</span><br></code></pre></td></tr></table></figure><p>分配了开发者后就可以推送镜像了，因为开发者有读写项目的权限，其他角色大家可以进行测试实践下，我们可以灵活的通过角色控制子用户的权限。</p><h1 id="Harbor镜像同步到TCR"><a href="#Harbor镜像同步到TCR" class="headerlink" title="Harbor镜像同步到TCR"></a>Harbor镜像同步到TCR</h1><p>我们测试下如何将harbor的镜像仓库同步到腾讯云上的TCR上，首先我们在Harobor上添加我们的TCR实例</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/10.png" alt="upload-image"></p><p>然后创建复制规则</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/11.png" alt="upload-image"></p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/12.png" alt="upload-image"></p><p>配置好之后点击运行发现复制失败</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/13.png" alt="upload-image"></p><p>规则中我们没有填写命名空间，复制不会自动创建TCR的命名空间，所以需要先在tcr上创建一个tke的命名空间，创建后再执行复制操作即可</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/14.png" alt="upload-image"></p><p>这里我们发现复制成功了，我们去tcr控制台查看镜像也是存在的</p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/15.png" alt="upload-image"></p><p><img src="/img/2020-12-20-Build-an-enterprise-level-mirror-warehouse-Harbor-on-TKE/16.png" alt="upload-image"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/goharbor/harbor-helm">https://github.com/goharbor/harbor-helm</a></p>]]></content>
    
    
    <categories>
      
      <category>Harbor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
      <tag>Harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之配置安全策略</title>
    <link href="/2020/12/14/2020-12-14-Configure-security-policy-of-istio-entry-series/"/>
    <url>/2020/12/14/2020-12-14-Configure-security-policy-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本章我们来讲讲如何通过istio来给业务pod进行安全的配置。istio的安全配置对于业务是透明的，istio的安全架构如下，主要是在istiod里进行认证和授权。</p><p><img src="/img/2020-12-14-Configure-security-policy-of-istio-entry-series/1.png" alt="upload-image"> </p><p>首先我们给demo下的httpbin这个服务配置一个安全策略，这里默认访问策略是拒绝所有访问</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>EOF<br></code></pre></td></tr></table></figure><p>下面我们通过sleep服务来测试下是否可以访问到httpbin</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl get pod -n demo<br>NAME                          READY   STATUS    RESTARTS   AGE<br>httpbin<span class="hljs-number">-5</span>f<span class="hljs-number">48</span>f<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">76</span>b-q<span class="hljs-number">5</span>rvv      <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>d<span class="hljs-number">2</span>h<br>httpbin-v<span class="hljs-number">2</span><span class="hljs-number">-5</span>bd<span class="hljs-number">46</span>f<span class="hljs-number">68</span>f<span class="hljs-number">9</span>-fjp<span class="hljs-number">84</span>   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">47</span>h<br>sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span>        <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>d<span class="hljs-number">2</span>h<br>[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/get<br>RBAC: access denied[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin-v<span class="hljs-number">2</span>.demo:<span class="hljs-number">8000</span>/get<br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin-v2.demo:8000&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;8fda928356944839&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;724aa8178d074e838fda928356944839&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Attempt-Count&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Decorator-Operation&quot;</span>: <span class="hljs-string">&quot;httpbin-v2.demo.svc.cluster.local:8000/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Peer-Metadata&quot;</span>: <span class="hljs-string">&quot;ChoKCkNMVVNURVJfSUQSDBoKS3ViZXJuZXRlcwobCgxJTlNUQU5DRV9JUFMSCxoJMTAuMC4xLjMyCt0BCgZMQUJFTFMS0gEqzwEKDgoDYXBwEgcaBXNsZWVwChcKDGlzdGlvLmlvL3JldhIHGgUxLTYtOQohChFwb2QtdGVtcGxhdGUtaGFzaBIMGgo1YjdiZjU2YzU0CiQKGXNlY3VyaXR5LmlzdGlvLmlvL3Rsc01vZGUSBxoFaXN0aW8KKgofc2VydmljZS5pc3Rpby5pby9jYW5vbmljYWwtbmFtZRIHGgVzbGVlcAovCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIIGgZsYXRlc3QKGgoHTUVTSF9JRBIPGg1jbHVzdGVyLmxvY2FsCiAKBE5BTUUSGBoWc2xlZXAtNWI3YmY1NmM1NC1iaHNrOAoTCglOQU1FU1BBQ0USBhoEZGVtbwpGCgVPV05FUhI9GjtrdWJlcm5ldGVzOi8vYXBpcy9hcHBzL3YxL25hbWVzcGFjZXMvZGVtby9kZXBsb3ltZW50cy9zbGVlcAoaCg9TRVJWSUNFX0FDQ09VTlQSBxoFc2xlZXAKGAoNV09SS0xPQURfTkFNRRIHGgVzbGVlcA==&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Peer-Metadata-Id&quot;</span>: <span class="hljs-string">&quot;sidecar~10.0.1.32~sleep-5b7bf56c54-bhsk8.demo~demo.svc.cluster.local&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://httpbin-v2.demo:8000/get&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们部署了v1和v2这2个版本的httpbin，发现只有httpbin-v2可以访问到</p><p>下面我们制定下只允许在demo这个namespace下和demo这个命名空间下拥有sleep这个sa身份的才能访问</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ALLOW</span><br> <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/demo/sa/sleep&quot;]</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">namespaces</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;demo&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>下面我们测试下，分别通过demo和nwxdemo中这2个命名空间下的sleep服务来访问下demo下的httpbin服务</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/get<br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.demo:8000&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;408e7d7f4363a9bf&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;89c42647d4f04419&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;7f9fb7b5cffbb30b408e7d7f4363a9bf&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Attempt-Count&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Forwarded-Client-Cert&quot;</span>: <span class="hljs-string">&quot;By=spiffe://cluster.local/ns/demo/sa/httpbin;Hash=8047b0dc92219d97bf966222da87d61ac7c857f8a562f487f7a44e936da499e0;Subject=\&quot;</span>\<span class="hljs-string">&quot;;URI=spiffe://cluster.local/ns/demo/sa/sleep&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://httpbin.demo:8000/get&quot;</span><br>&#125;<br>[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-fh<span class="hljs-number">29</span>m -n nwxdemo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/get<br>RBAC: access denied<br></code></pre></td></tr></table></figure><p>可以发下只有demo下的pod才有访问权限。</p><p>接下来我们放通下nwxdemo下的sleep服务访问权限</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ALLOW</span><br> <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/nwxdemo/sa/sleep&quot;]</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">namespaces</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;demo&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>我们放通nwxdemo下拥有sleep这个sa的服务允许访问就行。</p><p>下面我们配置下限制只能访问httpbin特定的接口</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ALLOW</span><br> <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/demo/sa/sleep&quot;]</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">namespaces</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;demo&quot;]</span><br>   <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>       <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>       <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;/get&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>测试可以发现，sleep只能访问到httpbin的get接口，无法访问ip</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/get<br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.demo:8000&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;22a55f5bbea49ab5&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;33800e033e1cb882&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;cc3a5b206a1a57be22a55f5bbea49ab5&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Attempt-Count&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Forwarded-Client-Cert&quot;</span>: <span class="hljs-string">&quot;By=spiffe://cluster.local/ns/demo/sa/httpbin;Hash=8047b0dc92219d97bf966222da87d61ac7c857f8a562f487f7a44e936da499e0;Subject=\&quot;</span>\<span class="hljs-string">&quot;;URI=spiffe://cluster.local/ns/demo/sa/sleep&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://httpbin.demo:8000/get&quot;</span><br>&#125;<br>[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/ip<br>RBAC: access denied<br></code></pre></td></tr></table></figure><p>下面我们给安全规则的条件再加一个限制，加上请求的header</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ALLOW</span><br> <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/demo/sa/sleep&quot;]</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">namespaces</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;demo&quot;]</span><br>   <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>       <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>       <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;/get&quot;]</span><br>   <span class="hljs-attribute">when</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">key: request.headers[x-rfma-token]</span><br>     <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;test*&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>从下面的测试访问看，我们只有加上请求头x-rfma-token:test*才能访问到httpbin，否则是访问不通的。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/get<br>RBAC: access denied[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span>-bhsk<span class="hljs-number">8</span> -n demo -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.demo:<span class="hljs-number">8000</span>/get -H <span class="hljs-keyword">x</span>-rfma-token:test<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.demo:8000&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;4f565c230a76c4c8&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;d4d8fed86d2ea3f5&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;c7cd5c2f28b112664f565c230a76c4c8&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Envoy-Attempt-Count&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Forwarded-Client-Cert&quot;</span>: <span class="hljs-string">&quot;By=spiffe://cluster.local/ns/demo/sa/httpbin;Hash=8047b0dc92219d97bf966222da87d61ac7c857f8a562f487f7a44e936da499e0;Subject=\&quot;</span>\<span class="hljs-string">&quot;;URI=spiffe://cluster.local/ns/demo/sa/sleep&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;X-Rfma-Token&quot;</span>: <span class="hljs-string">&quot;test1&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://httpbin.demo:8000/get&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>安全策略里面主要存在以下几个字段，我们可以通过下面字段配置更丰富的安全访问策略</p><p>来源（source）：</p><ul><li>principal&#x2F;namespace&#x2F;ipBlock</li></ul><p>操作（to）：</p><ul><li>host&#x2F;method&#x2F;path</li></ul><p>条件（when）：</p><ul><li>request</li><li>source&#x2F;destination</li></ul>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之提升系统弹性能力</title>
    <link href="/2020/12/11/2020-12-11-Improve-system-flexibility-of-istio-entry-series/"/>
    <url>/2020/12/11/2020-12-11-Improve-system-flexibility-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本章我们来讲讲如何通过istio来提升系统的弹性能力，弹性能力主要包含如下几个方面，我们今天看看如何用istio中的一些功能去解决这些问题。</p><ul><li>容错性：重试、幂等</li><li>伸缩性：自动水平扩展（autoscaling）</li><li>过载保护：超时、熔断、降级、限流</li><li>弹性测试：故障注入</li></ul><p>今天我们讲讲如何通过istio中的超时、重试、熔断、故障注入来提升服务的弹性能力。</p><p>首先我们通过VirtualService来暴露我们之前部署的httpbin服务</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin-gateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>EOF<br></code></pre></td></tr></table></figure><h1 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h1><p>首先我们给httpbin配置一个超时</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin-gateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>    <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1s</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/2020-12-11-Improve-system-flexibility-of-istio-entry-series/1.png" alt="upload-image"> </p><p>我们访问下delay接口，配置一个2s的，会发现有超时错误</p><h1 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h1><p>首先我们给httpbin的VirtualService的增加一个重试配置</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin-gateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>    <span class="hljs-attribute">retry</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">attempts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>      <span class="hljs-attribute">perTryTimeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1s</span><br>    <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8s</span><br>EOF<br></code></pre></td></tr></table></figure><p>然后再浏览器中输入<a href="http://106.55.219.93/status/500%EF%BC%8C%E5%8E%BBhttpbin%E7%9A%84enovy%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E6%98%AF%E5%90%A6%E6%9C%89%E8%BF%9B%E8%A1%8C%E9%87%8D%E8%AF%95">http://106.55.219.93/status/500，去httpbin的enovy中查看日志是否有进行重试</a></p><p><img src="/img/2020-12-11-Improve-system-flexibility-of-istio-entry-series/2.png" alt="upload-image"> </p><p>从日志中我们看出来重试调用了3次&#x2F;status&#x2F;500的接口</p><h1 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h1><p>我们先给httpbin来配置下熔断</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">kubectl apply -f - &lt;&lt;EOF<br>apiVersion: networking.istio.io/v1alpha3<br>kind: DestinationRule<br>metadata:<br>  name: httpbin<br>  <span class="hljs-keyword">namespace</span>: <span class="hljs-symbol">demo</span><br><span class="hljs-symbol">spec</span>:<br>  <span class="hljs-symbol">host</span>: <span class="hljs-symbol">httpbin</span><br>  <span class="hljs-symbol">trafficPolicy</span>:<br>    <span class="hljs-symbol">connectionPool</span>:<br>      <span class="hljs-symbol">tcp</span>:<br>        <span class="hljs-symbol">maxConnections</span>: <span class="hljs-symbol">1</span><br>      <span class="hljs-symbol">http</span>:<br>        <span class="hljs-symbol">http1MaxPendingRequests</span>: <span class="hljs-symbol">1</span><br>        <span class="hljs-symbol">maxRequestsPerConnection</span>: <span class="hljs-symbol">1</span><br>      <span class="hljs-symbol">outlierDetection</span>:<br>        <span class="hljs-symbol">consecutiveErrors</span>: <span class="hljs-symbol">1</span><br>        <span class="hljs-symbol">interval</span>: <span class="hljs-symbol">1s</span><br>        <span class="hljs-symbol">baseEjectionTime</span>: <span class="hljs-symbol">3m</span><br>        <span class="hljs-symbol">maxEjectionPercent</span>: <span class="hljs-symbol">100</span><br><span class="hljs-symbol">EOF</span><br></code></pre></td></tr></table></figure><p>具体的测试方法可以参考之前的熔断详细介绍<a href="https://www.niewx.cn/istio/2020/12/02/istio%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%94%E6%96%AD/">https://www.niewx.cn/istio/2020/12/02/istio%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%94%E6%96%AD/</a></p><h1 id="故障注入延迟"><a href="#故障注入延迟" class="headerlink" title="故障注入延迟"></a>故障注入延迟</h1><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin-gateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>            <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>            <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>      <span class="hljs-attribute">fault</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">delay</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">fixedDelay</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3000ms</span><br>          <span class="hljs-attribute">percentage</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br></code></pre></td></tr></table></figure><p>这里我们给httpbin服务注入一个3s的延迟，刷新页面可以发现需要3s才能刷新出页面</p><h1 id="故障注入终止"><a href="#故障注入终止" class="headerlink" title="故障注入终止"></a>故障注入终止</h1><p>我们给httpbin配置一个终止故障，刷新页面会发现有出现终止报错</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin-gateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>            <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>            <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>      <span class="hljs-attribute">fault</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">abort</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">httpStatus</span><span class="hljs-punctuation">:</span> <span class="hljs-string">500</span><br>          <span class="hljs-attribute">percentage</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-12-11-Improve-system-flexibility-of-istio-entry-series/3.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之自动化灰度发布</title>
    <link href="/2020/12/10/2020-12-10-Automated-grayscale-release-of-istio-entry-series/"/>
    <url>/2020/12/10/2020-12-10-Automated-grayscale-release-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本章我们学习下如何通过Flagger来实现自动灰度发布的流程，Flagger的实现原理和介绍如下图。</p><p><img src="/img/2020-12-10-Automated-grayscale-release-of-istio-entry-series/1.png" alt="upload-image"> </p><p><img src="/img/2020-12-10-Automated-grayscale-release-of-istio-entry-series/2.png" alt="upload-image"> </p><p>下面我们来部署一下flagger</p><h1 id="添加flagger的helm-repo仓库"><a href="#添加flagger的helm-repo仓库" class="headerlink" title="添加flagger的helm repo仓库"></a>添加flagger的helm repo仓库</h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@VM-0-13-centos ~]<span class="hljs-comment"># helm repo add flagger https://flagger.app</span><br><span class="hljs-string">&quot;flagger&quot;</span> has been added <span class="hljs-keyword">to</span> your repositories<br></code></pre></td></tr></table></figure><h1 id="安装flagger的CRD"><a href="#安装flagger的CRD" class="headerlink" title="安装flagger的CRD"></a>安装flagger的CRD</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-13-centos ~]<span class="hljs-comment"># kubectl apply -f https://raw.githubusercontent.com/weaveworks/flagger/master/artifacts/flagger/crd.yaml</span><br>customresourcedefinition.apiextensions.k8s.io/canaries.flagger.app created<br>customresourcedefinition.apiextensions.k8s.io/metrictemplates.flagger.app created<br>customresourcedefinition.apiextensions.k8s.io/alertproviders.flagger.app created<br></code></pre></td></tr></table></figure><h1 id="部署flagger"><a href="#部署flagger" class="headerlink" title="部署flagger"></a>部署flagger</h1><p>这里我们需要指定下prometheus的地址，和mesh提供商</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm<span class="hljs-built_in"> upgrade </span>-i flagger flagger/flagger \<br><span class="hljs-attribute">--namespace</span>=istio-system \<br>--<span class="hljs-built_in">set</span> crd.<span class="hljs-attribute">create</span>=<span class="hljs-literal">false</span> \<br>--<span class="hljs-built_in">set</span> <span class="hljs-attribute">meshProvider</span>=istio \<br>--<span class="hljs-built_in">set</span> <span class="hljs-attribute">metricsServer</span>=http://prometheus-prometheus-oper-prometheus.monitor:9090<br></code></pre></td></tr></table></figure><h1 id="通过slack来进行灰度发布消息接受"><a href="#通过slack来进行灰度发布消息接受" class="headerlink" title="通过slack来进行灰度发布消息接受"></a>通过slack来进行灰度发布消息接受</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm<span class="hljs-built_in"> upgrade </span>-i flagger flagger/flagger \<br><span class="hljs-attribute">--namespace</span>=istio-system \<br>--<span class="hljs-built_in">set</span> crd.<span class="hljs-attribute">create</span>=<span class="hljs-literal">false</span> \<br>--<span class="hljs-built_in">set</span> slack.<span class="hljs-attribute">url</span>=https://hooks.slack.com/services/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 \<br>--<span class="hljs-built_in">set</span> slack.<span class="hljs-attribute">channel</span>=flagger \<br>--<span class="hljs-built_in">set</span> slack.<span class="hljs-attribute">user</span>=flagger<br></code></pre></td></tr></table></figure><h1 id="部署grafana查看灰度发布的过程"><a href="#部署grafana查看灰度发布的过程" class="headerlink" title="部署grafana查看灰度发布的过程"></a>部署grafana查看灰度发布的过程</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm<span class="hljs-built_in"> upgrade </span>-i flagger-grafana flagger/grafana \<br><span class="hljs-attribute">--namespace</span>=istio-system \<br>--<span class="hljs-built_in">set</span> <span class="hljs-attribute">url</span>=http://prometheus-prometheus-oper-prometheus.monitor:9090 \<br>--<span class="hljs-built_in">set</span> <span class="hljs-attribute">user</span>=admin \<br>--<span class="hljs-built_in">set</span> <span class="hljs-attribute">password</span>=admin<br></code></pre></td></tr></table></figure><h1 id="配置一个ingress网关暴露服务"><a href="#配置一个ingress网关暴露服务" class="headerlink" title="配置一个ingress网关暴露服务"></a>配置一个ingress网关暴露服务</h1><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF </span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">public-gateway</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istio-system</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">istio</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingressgateway</span><br>  <span class="hljs-attribute">servers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">port:</span><br>        <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP</span><br>      <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><h1 id="部署demo服务"><a href="#部署demo服务" class="headerlink" title="部署demo服务"></a>部署demo服务</h1><p>demo应用部署参考<a href="https://www.niewx.cn/istio/2020/12/08/istio%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%E5%87%86%E5%A4%87/">https://www.niewx.cn/istio/2020/12/08/istio%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%E5%87%86%E5%A4%87/</a></p><h1 id="部署负载测试工具"><a href="#部署负载测试工具" class="headerlink" title="部署负载测试工具"></a>部署负载测试工具</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -k https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/weaveworks/</span>flagger<span class="hljs-regexp">/tree/m</span>aster<span class="hljs-regexp">/kustomize/</span>tester<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]<span class="hljs-comment"># kubectl get pod </span><br>NAME                                  READY   STATUS    RESTARTS   AGE<br>flagger-loadtester-<span class="hljs-number">77</span>b756b8d6-vhwxn   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">98</span>s<br></code></pre></td></tr></table></figure><h1 id="httpbin配置hpa"><a href="#httpbin配置hpa" class="headerlink" title="httpbin配置hpa"></a>httpbin配置hpa</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">k</span> <span class="hljs-string">apply</span> <span class="hljs-string">-n</span> <span class="hljs-string">demo</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">autoscaling/v2beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">HorizontalPodAutoscaler</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">scaleTargetRef:</span><br>    <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">4</span><br>  <span class="hljs-attr">metrics:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">Resource</span><br>    <span class="hljs-attr">resource:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">cpu</span><br>      <span class="hljs-comment"># scale up if usage is above</span><br>      <span class="hljs-comment"># 99% of the requested CPU (100m)</span><br>      <span class="hljs-attr">targetAverageUtilization:</span> <span class="hljs-number">99</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h1 id="配置flagger的Canary"><a href="#配置flagger的Canary" class="headerlink" title="配置flagger的Canary"></a>配置flagger的Canary</h1><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f -&lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">flagger.app/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Canary</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># deployment reference</span><br>  <span class="hljs-attribute">targetRef</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-comment"># the maximum time in seconds for the canary deployment</span><br>  <span class="hljs-comment"># to make progress before it is rollback (default 600s)</span><br>  <span class="hljs-attribute">progressDeadlineSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60</span><br>  <span class="hljs-comment"># HPA reference (optional)</span><br>  <span class="hljs-attribute">autoscalerRef</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">autoscaling/v2beta1</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HorizontalPodAutoscaler</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">service</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># service port number</span><br>    <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>    <span class="hljs-comment"># container port number or name (optional)</span><br>    <span class="hljs-attribute">targetPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>    <span class="hljs-comment"># Istio gateways (optional)</span><br>    <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">public-gateway.istio-system.svc.cluster.local</span><br>  <span class="hljs-attribute">analysis</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># schedule interval (default 60s)</span><br>    <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br>    <span class="hljs-comment"># max number of failed metric checks before rollback</span><br>    <span class="hljs-attribute">threshold</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5</span><br>    <span class="hljs-comment"># max traffic percentage routed to canary</span><br>    <span class="hljs-comment"># percentage (0-100)</span><br>    <span class="hljs-attribute">maxWeight</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br>    <span class="hljs-comment"># canary increment step</span><br>    <span class="hljs-comment"># percentage (0-100)</span><br>    <span class="hljs-attribute">stepWeight</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20</span><br>    <span class="hljs-attribute">metrics</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: request-success-rate</span><br>      <span class="hljs-comment"># minimum req success rate (non 5xx responses)</span><br>      <span class="hljs-comment"># percentage (0-100)</span><br>      <span class="hljs-attribute">thresholdRange</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">min</span><span class="hljs-punctuation">:</span> <span class="hljs-string">99</span><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: latency</span><br>      <span class="hljs-attribute">templateRef</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">latency</span><br>        <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istio-system</span><br>      <span class="hljs-comment"># maximum req duration P99</span><br>      <span class="hljs-comment"># milliseconds</span><br>      <span class="hljs-attribute">thresholdRange</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">max</span><span class="hljs-punctuation">:</span> <span class="hljs-string">500</span><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br>    <span class="hljs-comment"># testing (optional)</span><br>    <span class="hljs-attribute">webhooks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: load-test</span><br>        <span class="hljs-attribute">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://flagger-loadtester/</span><br>        <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5s</span><br>        <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">cmd</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hey -z 1m -q 10 -c 2 http://httpbin-canary.demo:8000/headers&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><p>我们查看下canary的状态</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]<span class="hljs-comment"># k get canary -n demo</span><br>NAME      STATUS        WEIGHT   LASTTRANSITIONTIME<br>httpbin   Initialized   <span class="hljs-number">0</span>        <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">21</span>T08:<span class="hljs-number">39</span>:<span class="hljs-number">13</span>Z<br><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]<span class="hljs-comment"># kubectl get all -n demo</span><br>NAME                                   READY   STATUS    RESTARTS   AGE<br>pod<span class="hljs-regexp">/httpbin-66cdbdb6c5-mqlqt           1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">52</span>s<br>pod<span class="hljs-regexp">/httpbin-66cdbdb6c5-wgjxs           1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m<br>pod<span class="hljs-regexp">/httpbin-primary-7c49484c4d-rd2xh   1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">12</span>m<br>pod<span class="hljs-regexp">/httpbin-primary-7c49484c4d-s2tdm   1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">12</span>m<br>pod<span class="hljs-regexp">/sleep-5b7bf56c54-x99lq             1/</span><span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">165</span>m<br><br>NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE<br>service<span class="hljs-regexp">/httpbin           ClusterIP   172.16.8.254    &lt;none&gt;        8000/</span>TCP   <span class="hljs-number">8</span>d<br>service<span class="hljs-regexp">/httpbin-canary    ClusterIP   172.16.24.30    &lt;none&gt;        8000/</span>TCP   <span class="hljs-number">12</span>m<br>service<span class="hljs-regexp">/httpbin-primary   ClusterIP   172.16.96.245   &lt;none&gt;        8000/</span>TCP   <span class="hljs-number">12</span>m<br>service<span class="hljs-regexp">/sleep             ClusterIP   172.16.77.228   &lt;none&gt;        80/</span>TCP     <span class="hljs-number">8</span>d<br><br>NAME                              READY   UP-TO-DATE   AVAILABLE   AGE<br>deployment.apps<span class="hljs-regexp">/httpbin           2/</span><span class="hljs-number">2</span>     <span class="hljs-number">2</span>            <span class="hljs-number">2</span>           <span class="hljs-number">8</span>d<br>deployment.apps<span class="hljs-regexp">/httpbin-primary   2/</span><span class="hljs-number">2</span>     <span class="hljs-number">2</span>            <span class="hljs-number">2</span>           <span class="hljs-number">12</span>m<br>deployment.apps<span class="hljs-regexp">/sleep             1/</span><span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">8</span>d<br><br>NAME                                         DESIRED   CURRENT   READY   AGE<br>replicaset.apps/httpbin-<span class="hljs-number">66</span>cdbdb6c5           <span class="hljs-number">2</span>         <span class="hljs-number">2</span>         <span class="hljs-number">2</span>       <span class="hljs-number">8</span>d<br>replicaset.apps/httpbin-primary-<span class="hljs-number">7</span>c49484c4d   <span class="hljs-number">2</span>         <span class="hljs-number">2</span>         <span class="hljs-number">2</span>       <span class="hljs-number">12</span>m<br>replicaset.apps/sleep-<span class="hljs-number">5</span>b7bf56c54             <span class="hljs-number">1</span>         <span class="hljs-number">1</span>         <span class="hljs-number">1</span>       <span class="hljs-number">8</span>d<br><br>NAME                                                  REFERENCE                    TARGETS         MINPODS   MAXPODS   REPLICAS   AGE<br>horizontalpodautoscaler.autoscaling<span class="hljs-regexp">/httpbin           Deployment/</span>httpbin           &lt;unknown&gt;/<span class="hljs-number">99</span>%   <span class="hljs-number">2</span>         <span class="hljs-number">4</span>         <span class="hljs-number">2</span>          <span class="hljs-number">14</span>m<br>horizontalpodautoscaler.autoscaling<span class="hljs-regexp">/httpbin-primary   Deployment/</span>httpbin-primary   &lt;unknown&gt;/<span class="hljs-number">99</span>%   <span class="hljs-number">2</span>         <span class="hljs-number">4</span>         <span class="hljs-number">2</span>          <span class="hljs-number">12</span>m<br><br>NAME                         STATUS        WEIGHT   LASTTRANSITIONTIME<br>canary.flagger.app/httpbin   Initialized   <span class="hljs-number">0</span>        <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">21</span>T08:<span class="hljs-number">39</span>:<span class="hljs-number">13</span>Z<br></code></pre></td></tr></table></figure><p>从上面可以看出，canary初始化为我们创建了2个service，httpbin-canary和httpbin-primary，同时也创建了httpbin-primary这个负载，同时还给我们创建一个</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-3</span>-centos ~]<span class="hljs-meta"># kubectl get vs -n demo -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">items:</span><br>- apiVersion: networking.istio.io/v1beta1<br><span class="hljs-symbol">  kind:</span> VirtualService<br><span class="hljs-symbol">  metadata:</span><br><span class="hljs-symbol">    creationTimestamp:</span> <span class="hljs-string">&quot;2020-12-21T08:39:13Z&quot;</span><br><span class="hljs-symbol">    generation:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">    managedFields:</span><br>    - apiVersion: networking.istio.io/v1alpha3<br><span class="hljs-symbol">      fieldsType:</span> FieldsV1<br><span class="hljs-symbol">      fieldsV1:</span><br><span class="hljs-symbol">        f:</span>metadata:<br><span class="hljs-symbol">          f:</span>ownerReferences:<br>            .: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">            k:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;fd474481-0191-4f68-a606-13d88d5040e8&quot;</span><span class="hljs-punctuation">&#125;</span>:<br>              .: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">              f:</span>apiVersion: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">              f:</span>blockOwnerDeletion: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">              f:</span>controller: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">              f:</span>kind: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">              f:</span>name: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">              f:</span>uid: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">        f:</span>spec:<br>          .: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">          f:</span>gateways: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">          f:</span>hosts: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">          f:</span>http: <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">      manager:</span> flagger<br><span class="hljs-symbol">      operation:</span> Update<br><span class="hljs-symbol">      time:</span> <span class="hljs-string">&quot;2020-12-21T08:39:13Z&quot;</span><br><span class="hljs-symbol">    name:</span> httpbin<br><span class="hljs-symbol">    namespace:</span> demo<br><span class="hljs-symbol">    ownerReferences:</span><br>    - apiVersion: flagger.app/v1beta1<br><span class="hljs-symbol">      blockOwnerDeletion:</span> true<br><span class="hljs-symbol">      controller:</span> true<br><span class="hljs-symbol">      kind:</span> Canary<br><span class="hljs-symbol">      name:</span> httpbin<br><span class="hljs-symbol">      uid:</span> fd474481<span class="hljs-number">-0191</span><span class="hljs-number">-4</span>f68-a606<span class="hljs-number">-13</span>d88d5040e8<br><span class="hljs-symbol">    resourceVersion:</span> <span class="hljs-string">&quot;3463233849&quot;</span><br><span class="hljs-symbol">    selfLink:</span> <span class="hljs-keyword">/apis/</span>networking.istio.io<span class="hljs-keyword">/v1beta1/</span>namespaces<span class="hljs-keyword">/demo/</span>virtualservices/httpbin<br><span class="hljs-symbol">    uid:</span> <span class="hljs-number">62</span>d89418<span class="hljs-number">-2e1</span>c<span class="hljs-number">-41</span>b1-b072<span class="hljs-number">-25595</span>c519cd4<br><span class="hljs-symbol">  spec:</span><br><span class="hljs-symbol">    gateways:</span><br>    - public-gateway.istio-system.svc.cluster.local<br><span class="hljs-symbol">    hosts:</span><br>    - httpbin<br><span class="hljs-symbol">    http:</span><br>    - route:<br>      - destination:<br><span class="hljs-symbol">          host:</span> httpbin-primary<br><span class="hljs-symbol">        weight:</span> <span class="hljs-number">100</span><br>      - destination:<br><span class="hljs-symbol">          host:</span> httpbin-canary<br><span class="hljs-symbol">        weight:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">kind:</span> List<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="发布httpbin服务触发灰度发布"><a href="#发布httpbin服务触发灰度发布" class="headerlink" title="发布httpbin服务触发灰度发布"></a>发布httpbin服务触发灰度发布</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-3</span>-centos ~]# kubectl -n demo <span class="hljs-keyword">set</span> image <span class="hljs-comment">deployment</span>/httpbin httpbin=ccr.ccs.tencentyun.com/<span class="hljs-comment">v_cjweichen</span>/nwx-reg:v1<br>deployment.apps/<span class="hljs-comment">httpbin image updated</span><br></code></pre></td></tr></table></figure><h1 id="不断的去循环访问"><a href="#不断的去循环访问" class="headerlink" title="不断的去循环访问"></a>不断的去循环访问</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#循环访问</span><br>k <span class="hljs-built_in">exec</span> -it -n demo pod/sleep-6bdb595bcb-bstrp -c <span class="hljs-built_in">sleep</span> sh<br><br><span class="hljs-keyword">while</span> [ 1 ]; <span class="hljs-keyword">do</span> curl http://httpbin.demo:8000/headers;<span class="hljs-built_in">sleep</span> 2s; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h1 id="检查canary的流量版本权重变化"><a href="#检查canary的流量版本权重变化" class="headerlink" title="检查canary的流量版本权重变化"></a>检查canary的流量版本权重变化</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">k <span class="hljs-built_in">describe</span> vs httpbin -ndemo<br><br>k <span class="hljs-built_in">describe</span> canary httpbin -n <span class="hljs-built_in">demo</span><br></code></pre></td></tr></table></figure><p>最终会将所有canary版本提成primary版本，删除旧的版本，vs中也会将httpbin-canary的权重配置为100</p><h1 id="通过grafana查看流量的变化"><a href="#通过grafana查看流量的变化" class="headerlink" title="通过grafana查看流量的变化"></a>通过grafana查看流量的变化</h1><p><img src="/img/2020-12-10-Automated-grayscale-release-of-istio-entry-series/3.png" alt="upload-image"> </p><h1 id="slack查看灰度发布的流程信息"><a href="#slack查看灰度发布的流程信息" class="headerlink" title="slack查看灰度发布的流程信息"></a>slack查看灰度发布的流程信息</h1><p><img src="/img/2020-12-10-Automated-grayscale-release-of-istio-entry-series/4.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Flagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes上实现gitlab的CICD</title>
    <link href="/2020/12/09/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/"/>
    <url>/2020/12/09/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/</url>
    
    <content type="html"><![CDATA[<p>本次我们来讲解下如何在k8s上搭建gitlab，并且通过gitlab内Pipeline的ci&#x2F;cd将代码部署到k8s集群内。</p><p>本次k8s环境基于tke托管集群1.18进行测试，镜像仓库使用的是腾讯云的ccr仓库。</p><h1 id="搭建gitlab"><a href="#搭建gitlab" class="headerlink" title="搭建gitlab"></a>搭建gitlab</h1><p>部署gitla需要部署三个服务，分别是redis、postgresql、gitlab这三个服务，下面我们来讲解具体部署及部署yaml文件</p><p>我们先创建一个gitlab的命名空间，后续部署的所有服务都在这个命名空间下</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl create ns gitlab</span><br></code></pre></td></tr></table></figure><h2 id="redis部署"><a href="#redis部署" class="headerlink" title="redis部署"></a>redis部署</h2><p>redis服务是提供给Gitlab服务使用，并不需要暴露在集群外部，因此我们在gitlab&lt;-&gt;redis之间调用的时候，采用内部通信的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">sameersbn/redis</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/redis</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">redis-cli</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">ping</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">redis-cli</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">ping</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure><h2 id="postgresql部署"><a href="#postgresql部署" class="headerlink" title="postgresql部署"></a>postgresql部署</h2><p>postgresql部署主要存储gitlab的数据使用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">sameersbn/postgresql:10</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_USER</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">gitlab</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_PASS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">passw0rd</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_NAME</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">gitlab_production</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_EXTENSION</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">pg_trgm</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">postgres</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5432</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/postgresql</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">pg_isready</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-h</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-U</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">postgres</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">pg_isready</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-h</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-U</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">postgres</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">gitlab-postgresql</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">postgres</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">5432</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">postgres</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">postgresql</span><br></code></pre></td></tr></table></figure><h2 id="gitlab部署"><a href="#gitlab部署" class="headerlink" title="gitlab部署"></a>gitlab部署</h2><p>gitlab服务的部署就相对复杂一些，要添加正确的redis和postgresql的链接信息，同时为了在集群外部访问gitlab,我们需要用treafik给gitlab配置一个ingress,所以最后的时候我们需要给gitlab的服务分配一个测试域名，我们这里的域名是gitlab.k8s.niewx.cn，treafik的搭建可以参考我之前的文章。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">sameersbn/gitlab:11.8.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TZ</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">Asia/Shanghai</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_TIMEZONE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">Beijing</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_SECRETS_DB_KEY_BASE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">long-and-random-alpha-numeric-string</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_SECRETS_SECRET_KEY_BASE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">long-and-random-alpha-numeric-string</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_SECRETS_OTP_KEY_BASE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">long-and-random-alpha-numeric-string</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_ROOT_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">admin123456</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_ROOT_EMAIL</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">nwx_qdlg@163.com</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_HOST</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">gitlab.k8s.niewx.cn</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_PORT</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;80&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_SSH_PORT</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;30022&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_NOTIFY_ON_BROKEN_BUILDS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;true&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_NOTIFY_PUSHER</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;false&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_BACKUP_SCHEDULE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">daily</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GITLAB_BACKUP_TIME</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-number">01</span><span class="hljs-string">:00</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_TYPE</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">postgres</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_HOST</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">postgresql</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_PORT</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;5432&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_USER</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">gitlab</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_PASS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">passw0rd</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_NAME</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">gitlab_production</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">REDIS_HOST</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">redis</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">REDIS_PORT</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;6379&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ssh</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">22</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/home/git/data</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">180</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">gitlab</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ssh</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">ssh</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30022</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-webui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`gitlab.k8s.niewx.cn`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="验证登录gitlab"><a href="#验证登录gitlab" class="headerlink" title="验证登录gitlab"></a>验证登录gitlab</h2><p>在浏览器输入<a href="http://gitlab.k8s.niewx.cn/%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BE%93%E5%85%A5%E4%B9%8B%E5%89%8D%E5%9C%A8gitlab%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E8%83%BD%E6%88%90%E5%8A%9F%E7%99%BB%E5%BD%95%E5%8D%B3%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F">http://gitlab.k8s.niewx.cn/，然后输入之前在gitlab中配置的账号密码能成功登录即部署成功</a></p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/1.png" alt="upload-image"> </p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/2.png" alt="upload-image"> </p><h1 id="配置gitlab-runner"><a href="#配置gitlab-runner" class="headerlink" title="配置gitlab-runner"></a>配置gitlab-runner</h1><p>我们可以部署全局的runner进行使用，也可以单独给某个项目部署runner</p><h2 id="部署全局的runner进行使用"><a href="#部署全局的runner进行使用" class="headerlink" title="部署全局的runner进行使用"></a>部署全局的runner进行使用</h2><p>首先声明一个Configmap gitlab-runner.configmap.yaml来为Gitlab Runner提供需要的环境变量以及一些资源约束信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  REGISTER_NON_INTERACTIVE:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">  REGISTER_LOCKED:</span> <span class="hljs-string">&quot;false&quot;</span><br><span class="hljs-symbol">  METRICS_SERVER:</span> <span class="hljs-string">&quot;0.0.0.0:9100&quot;</span><br><span class="hljs-symbol">  CI_SERVER_URL:</span> <span class="hljs-string">&quot;http://gitlab.gitlab.svc.cluster.local/ci&quot;</span> <span class="hljs-meta"># k8s内gitlab服务的通信地址格式:svc.namespace.svc.cluster.local, 同时加上/ci这个prefix，这里也可以使用外网访问地址</span><br><span class="hljs-symbol">  RUNNER_REQUEST_CONCURRENCY:</span> <span class="hljs-string">&quot;4&quot;</span><br><span class="hljs-symbol">  RUNNER_EXECUTOR:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-symbol">  KUBERNETES_NAMESPACE:</span> <span class="hljs-string">&quot;gitlab&quot;</span> <span class="hljs-meta"># 服务运行的namespace</span><br><span class="hljs-symbol">  KUBERNETES_PRIVILEGED:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">  KUBERNETES_CPU_LIMIT:</span> <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-symbol">  KUBERNETES_MEMORY_LIMIT:</span> <span class="hljs-string">&quot;1Gi&quot;</span><br><span class="hljs-symbol">  KUBERNETES_SERVICE_CPU_LIMIT:</span> <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-symbol">  KUBERNETES_SERVICE_MEMORY_LIMIT:</span> <span class="hljs-string">&quot;1Gi&quot;</span><br><span class="hljs-symbol">  KUBERNETES_HELPER_CPU_LIMIT:</span> <span class="hljs-string">&quot;500m&quot;</span><br><span class="hljs-symbol">  KUBERNETES_HELPER_MEMORY_LIMIT:</span> <span class="hljs-string">&quot;100Mi&quot;</span><br><span class="hljs-symbol">  KUBERNETES_PULL_POLICY:</span> <span class="hljs-string">&quot;if-not-present&quot;</span> <span class="hljs-meta"># image的拉取策略</span><br><span class="hljs-symbol">  KUBERNETES_TERMINATIONGRACEPERIODSECONDS:</span> <span class="hljs-string">&quot;10&quot;</span><br><span class="hljs-symbol">  KUBERNETES_POLL_INTERVAL:</span> <span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-symbol">  KUBERNETES_POLL_TIMEOUT:</span> <span class="hljs-string">&quot;360&quot;</span><br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> gitlab-ci-runner<br><span class="hljs-symbol">  name:</span> gitlab-ci-runner-cm<br><span class="hljs-symbol">  namespace:</span> gitlab<br></code></pre></td></tr></table></figure><p>同样的，还需要准备一个Configmapgitlab-ci-runner-scripts.configmap.yml存储清理未被正常调度的Gitlab Runner的Pod. 正常来说，Gitlab runner在完成自己的使命之后，Kubernetes就会发送一个TERM signal信号用于正常的注销Gitlab runner, 所以那些被强制终止的Pod是不会自动的被清理的，而这个脚本就是完成这部分Pod的清理工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>data:<br>  run.sh: |<br>    <span class="hljs-comment">#!/bin/bash</span><br>    <span class="hljs-function"><span class="hljs-title">unregister</span></span>() &#123;<br>        <span class="hljs-built_in">kill</span> %1<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unregistering runner <span class="hljs-variable">$&#123;RUNNER_NAME&#125;</span> ...&quot;</span><br>        /usr/bin/gitlab-ci-multi-runner unregister -t <span class="hljs-string">&quot;<span class="hljs-subst">$(/usr/bin/gitlab-ci-multi-runner list 2&gt;&amp;1 | tail -n1 | awk &#x27;&#123;print $4&#125;&#x27; | cut -d&#x27;=&#x27; -f2)</span>&quot;</span> -n <span class="hljs-variable">$&#123;RUNNER_NAME&#125;</span><br>        <span class="hljs-built_in">exit</span> $?<br>    &#125;<br>    <span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;unregister&#x27;</span> EXIT HUP INT QUIT PIPE TERM<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Registering runner <span class="hljs-variable">$&#123;RUNNER_NAME&#125;</span> ...&quot;</span><br>    /usr/bin/gitlab-ci-multi-runner register -r <span class="hljs-variable">$&#123;GITLAB_CI_TOKEN&#125;</span><br>    sed -i <span class="hljs-string">&#x27;s/^concurrent.*/concurrent = &#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;RUNNER_REQUEST_CONCURRENCY&#125;</span>&quot;</span><span class="hljs-string">&#x27;/&#x27;</span> /home/gitlab-runner/.gitlab-runner/config.toml<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting runner <span class="hljs-variable">$&#123;RUNNER_NAME&#125;</span> ...&quot;</span><br>    /usr/bin/gitlab-ci-multi-runner run -n <span class="hljs-variable">$&#123;RUNNER_NAME&#125;</span> &amp;<br>    <span class="hljs-built_in">wait</span><br>kind: ConfigMap<br>metadata:<br>  labels:<br>    app: gitlab-ci-runner<br>  name: gitlab-ci-runner-scripts<br>  namespace: gitlab<br></code></pre></td></tr></table></figure><p>我们需要创建一个Secretgitlab-ci-token-secret.yaml来存储Gitlab Runner的Token.以便上面的脚本能正常的运行，在secret内需要存放base64加密后的字符串。<br>我们还需要获取下全局token，获取方式如下</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/3.png" alt="upload-image"> </p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/4.png" alt="upload-image"> </p><p>获取后对token进行base64编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> H4EC7Q12GsCVsDU1jM-y | <span class="hljs-built_in">base64</span> <br></code></pre></td></tr></table></figure><p>然后配置到secret中</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> gitlab-ci-token<br><span class="hljs-symbol">  namespace:</span> gitlab <span class="hljs-meta"># 指定命名空间</span><br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> gitlab-ci-runner<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  GITLAB_CI_TOKEN:</span> SDRFQzdRMTJHc0NWc0RVMWpNLXkK <span class="hljs-meta"># 这是base64加密Gitlab runner token之后的字符串</span><br></code></pre></td></tr></table></figure><p>我们通过sts(statefulset控制器)gitlab-runner-sts.yaml创建Gitlab Runner。在开始运行的时候，尝试取消注册所有的同名 Runner，当节点丢失时（NodeLost事件）尤其有用。然后再尝试重新注册自己并开始运行。在正常停止 Pod 的时候，Runner 将会运行unregister命令来尝试取消自己，所以 Gitlab 就不能再使用这个 Runner 了，这个是通过 Kubernetes Pod 生命周期中的hooks来完成的，在运行Gitlab Runner的时候，我们通过Envfrom调用之前创建的脚本以及Gitlab runner运行需要的环境变量信息.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-runner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span> <span class="hljs-comment"># gitlab运行的命名空间</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-ci-runner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">updateStrategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span> <span class="hljs-comment"># Gitlab Runner的更新模式</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">gitlab-ci-runner</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-ci-runner</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-ci-runner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-runner-scripts</span><br>        <span class="hljs-attr">projected:</span><br>          <span class="hljs-attr">sources:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-runner-scripts</span><br>              <span class="hljs-attr">items:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">run.sh</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">run.sh</span><br>                <span class="hljs-attr">mode:</span> <span class="hljs-number">0755</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">gitlab-ci</span> <span class="hljs-comment"># 创建一个serviceAccount,创建pod</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">runAsNonRoot:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">999</span><br>        <span class="hljs-attr">supplementalGroups:</span> [<span class="hljs-number">999</span>]<br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">gitlab-runner:latest</span> <span class="hljs-comment"># 指定镜像的版本</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-runner</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/scripts/run.sh</span><br>        <span class="hljs-attr">envFrom:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">configMapRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-runner-cm</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">secretRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-token</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RUNNER_NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9100</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci-runner-scripts</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/scripts&quot;</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br></code></pre></td></tr></table></figure><p>从sts配置清单中看到，我们还需要一个ServiceAccount来有足够的权限做一些事情，因此我们创建一个gitlab-ci的ServiceAccount, 配置清单为:gitlab-runner-rbac.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;*&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;*&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-ci</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>上面都部署之后可以查看下runner是否连上了gitlab，runner状态为shared则表示正常。</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/5.png" alt="upload-image"> </p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/6.png" alt="upload-image"> </p><h2 id="单独给某个项目部署runner"><a href="#单独给某个项目部署runner" class="headerlink" title="单独给某个项目部署runner"></a>单独给某个项目部署runner</h2><p>下面我们单独给某个项目配置一个runner，其实主要的区别就是采用token不一样。下面我们部署一下</p><p>首先我们将一个测试的项目上传到gitlab上，项目地址git clone <a href="https://github.com/haoshuwei/gitlab-ci-k8s-demo.git">https://github.com/haoshuwei/gitlab-ci-k8s-demo.git</a></p><p>然后我们获取一下项目的token</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/7.png" alt="upload-image"> </p><p>下面我们通过helm方式来部署下runner</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/haoshuwei/gi</span>tlab-runner.git<br></code></pre></td></tr></table></figure><p>然后修改下value.yaml中的配置，主要是配置url和项目token进去，修改gitlabUrl和runnerRegistrationToken字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># GitLab Runner Image</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://hub.docker.com/r/gitlab-runner/tags/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>image: gitlab-runner:alpine-v11.4.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Specify a imagePullPolicy</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># &#x27;Always&#x27; if imageTag is &#x27;latest&#x27;, else set to &#x27;IfNotPresent&#x27;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>imagePullPolicy: IfNotPresent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Default container image to use for initcontainer</span></span><br>init:<br>  image: busybox<br>  tag: latest<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># The GitLab Server URL (with protocol) that want to register the runner against</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-register</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>gitlabUrl: &quot;http://gitlab.k8s.niewx.cn/&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># The Registration Token for adding new Runners to the GitLab Server. This must</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># be retreived from your GitLab Instance.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/ce/ci/runners/README.html#creating-and-registering-a-runner</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>runnerRegistrationToken: &quot;Uw28p4b-Q2yJ8kHSGER7&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># The Runner Token for adding new Runners to the GitLab Server. This must</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># be retreived from your GitLab Instance. It is token of already registered runner.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: (we don&#x27;t yet have docs for that, but we want to use existing token)</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">runnerToken: <span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">## Unregister all runners before termination</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Updating the runner&#x27;s chart version or configuration will cause the runner container</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># to be terminated and created again. This may cause your Gitlab instance to reference</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># non-existant runners. Un-registering the runner before termination mitigates this issue.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-unregister</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>unregisterRunners: true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set the certsSecretName in order to pass custom certficates for GitLab Runner to use</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Provide resource name for a Kubernetes Secret Object in the same namespace,</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># this is used to populate the /etc/gitlab-runner/certs directory</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/configuration/tls-self-signed.html#supported-options-for-self-signed-certificates</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">certsSecretName:</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Configure the maximum number of concurrent jobs</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>concurrent: 10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Defines in seconds how often to check GitLab for a new builds</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>checkInterval: 30<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Configure GitLab Runner&#x27;s logging level. Available values are: debug, info, warn, error, fatal, panic</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">logLevel:</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># For RBAC support:</span></span><br>rbac:<br>  create: true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Run the gitlab-bastion container with the ability to deploy/manage containers of jobs</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># cluster-wide or only within namespace</span></span><br>  clusterWideAccess: false<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Use the following Kubernetes Service Account name if RBAC is disabled in this Helm chart (see rbac.create)</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">serviceAccountName: default</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Configure integrated Prometheus metrics exporter</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/monitoring/#configuration-of-the-metrics-http-server</span></span><br>metrics:<br>  enabled: true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Configuration for the Pods that that the runner launches for each new job</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>runners:<br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Default container image to use for builds when none is specified</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  image: ubuntu:16.04<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Specify one or more imagePullSecrets</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">imagePullSecrets: []</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Specify the image pull policy: never, if-not-present, always. The cluster default will be used if not set.</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">imagePullPolicy: <span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Specify whether the runner should be locked to a specific project: true, false. Defaults to true.</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">locked: <span class="hljs-literal">true</span></span><br>  <br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Specify the tags associated with the runner. Comma-separated list of tags.</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/ce/ci/runners/#using-tags</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  tags: &quot;k8s-runner&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Run all containers with the privileged flag enabled</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># This will allow the docker:dind image to run if you need to run Docker</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># commands. Please read the docs before turning this on:</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/executors/kubernetes.html#using-docker-dind</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  privileged: true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># The name of the secret containing runnerToken and runnerRegistrationToken</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">secret: gitlab-runner</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Namespace to run Kubernetes jobs in (defaults to the same namespace of this release)</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  namespace: gitlab<br><br><br>  cachePath: &quot;/opt/cache&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Distributed runners caching</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># ref: https://gitlab.com/gitlab-org/gitlab-runner/blob/master/docs/configuration/autoscale.md#distributed-runners-caching</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Create a secret &#x27;s3access&#x27; containing &#x27;accesskey&#x27; &amp; &#x27;secretkey&#x27;</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># ref: https://aws.amazon.com/blogs/security/wheres-my-secret-access-key/</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># $ kubectl create secret generic s3access --\</span></span><br><span class="language-bash">  <span class="hljs-comment">##   --from-literal=accesskey=&quot;YourAccessKey&quot; \</span></span><br><span class="language-bash">  <span class="hljs-comment">##   --from-literal=secretkey=&quot;YourSecretKey&quot;</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># ref: https://kubernetes.io/docs/concepts/configuration/secret/</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  cache: &#123;&#125;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">cacheType: s3</span><br>    # s3ServerAddress: s3.amazonaws.com<br>    # s3BucketName:<br>    # s3BucketLocation:<br>    # s3CacheInsecure: false<br>    # s3CachePath: &quot;gitlab_runner&quot;<br>    # cacheShared: true<br>    # secretName: s3access<br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Build Container specific configuration</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  builds: &#123;&#125;<br>    # cpuLimit: 200m<br>    # memoryLimit: 256Mi<br>    # cpuRequests: 100m<br>    # memoryRequests: 128Mi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Service Container specific configuration</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  services: &#123;&#125;<br>    # cpuLimit: 200m<br>    # memoryLimit: 256Mi<br>    # cpuRequests: 100m<br>    # memoryRequests: 128Mi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Helper Container specific configuration</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>  helpers: &#123;&#125;<br>    # cpuLimit: 200m<br>    # memoryLimit: 256Mi<br>    # cpuRequests: 100m<br>    # memoryRequests: 128Mi<br>    # image: gitlab-runner-helper:x86_64-latest<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># Service Account to be used for runners</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">serviceAccountName:</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment"># If Gitlab is not reachable through $CI_SERVER_URL</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">cloneUrl:</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Configure resource requests and limits</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: http://kubernetes.io/docs/user-guide/compute-resources/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br>resources: &#123;&#125;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">limits:</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">  memory: 256Mi</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">  cpu: 200m</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">requests:</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">  memory: 128Mi</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">  cpu: 100m</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Configure environment variables that will be present when the registration command runs</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># This provides further control over the registration process and the config.toml file</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: `gitlab-runner register --help`</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">envVars:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  - name: RUNNER_EXECUTOR</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    value: kubernetes</span><br></code></pre></td></tr></table></figure><p>然后执行helm打包和部署命令进行部署</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">helm <span class="hljs-keyword">package</span> <span class="hljs-title">.</span><br>helm install <span class="hljs-comment">--namespace gitlab gitlab-runner *.tgz</span><br></code></pre></td></tr></table></figure><p>GitLab Runner对缓存方案的支持有限，所以您需要使用挂载Volume的方式做缓存。在上面的示例中，安装GitLab Runner时默认使用&#x2F;opt&#x2F;cache目录作为缓存空间。您也可以通过修改values.yaml文件中的runners.cachePath字段修改缓存目录。</p><p>例如，如需建立Maven缓存，您可以在variables下添加MAVEN_OPTS变量并指定本地缓存目录：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">variables:</span><br><span class="hljs-symbol">  KUBECONFIG:</span> <span class="hljs-keyword">/etc/</span>deploy/config<br><span class="hljs-symbol">  MAVEN_OPTS:</span> <span class="hljs-string">&quot;-Dmaven.repo.local=/opt/cache/.m2/repository&quot;</span><br></code></pre></td></tr></table></figure><p>修改templates&#x2F;configmap.yaml文件中的以下字段挂载docker.sock和用于cache的volume。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua">cat &gt;&gt;/home/gitlab-runner/.gitlab-runner/<span class="hljs-built_in">config</span>.toml &lt;&lt;EOF<br>            <span class="hljs-string">[[runners.kubernetes.volumes.pvc]]</span><br>              name = <span class="hljs-string">&quot;gitlab-runner-cache&quot;</span><br>              mount_path = <span class="hljs-string">&quot;&#123;&#123; .Values.runners.cachePath &#125;&#125;&quot;</span><br>            <span class="hljs-string">[[runners.kubernetes.volumes.host_path]]</span><br>              name = <span class="hljs-string">&quot;docker&quot;</span><br>              mount_path = <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>              read_only = <span class="hljs-literal">true</span><br>              host_path = <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    EOF<br></code></pre></td></tr></table></figure><p>runner pod运行成功后，在项目中可以查看到Runners activated for this project，则表示连接gitlab成功</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/8.png" alt="upload-image"> </p><h1 id="测试项目自动化部署到k8s集群中"><a href="#测试项目自动化部署到k8s集群中" class="headerlink" title="测试项目自动化部署到k8s集群中"></a>测试项目自动化部署到k8s集群中</h1><p>下面我们分别用gitlab-java-demo和gitlab-ci-k8s-demo这2个项目来测试下通过项目runner和全局runner将代码部署到k8s集群中</p><h2 id="项目runner部署gitlab-java-demo"><a href="#项目runner部署gitlab-java-demo" class="headerlink" title="项目runner部署gitlab-java-demo"></a>项目runner部署gitlab-java-demo</h2><p>首先我们给项目配置一下全局变量，.gitlab-ci.yml构建文件可以使用</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/9.png" alt="upload-image"> </p><ul><li>REGISTRY_USERNAME：镜像仓库用户名。</li><li>REGISTRY_PASSWORD：镜像仓库密码。</li><li>kube_config：KubeConfig的编码字符串。</li></ul><p>执行以下命令生成KubeConfig的编码字符串：echo $(cat ~&#x2F;.kube&#x2F;config | base64) | tr -d “ “</p><p>.gitlab-ci.yml如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">docker:stable</span><br><span class="hljs-attribute">stages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">package</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">docker_build</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deploy_k8s</span><br><span class="hljs-attribute">variables</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">KUBECONFIG</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/etc/deploy/config</span><br>  <span class="hljs-attribute">MAVEN_OPTS</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-Dmaven.repo.local=/opt/cache/.m2/repository&quot;</span><br><span class="hljs-attribute">mvn_build_job</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">maven:3.3.9-jdk-8</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">package</span><br>  <span class="hljs-attribute">tags</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-runner</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn package -B -DskipTests</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp target/demo.war /opt/cache</span><br><span class="hljs-attribute">docker_build_job</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">docker:latest</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">docker_build</span><br>  <span class="hljs-attribute">tags</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-runner</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD  ccr.ccs.tencentyun.com</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir target</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp /opt/cache/demo.war target/demo.war</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker build -t ccr.ccs.tencentyun.com/v_cjweichen/nwx-reg:$CI_PIPELINE_ID .</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker push ccr.ccs.tencentyun.com/v_cjweichen/nwx-reg:$CI_PIPELINE_ID</span><br><span class="hljs-attribute">deploy_k8s_job</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/haoshuwei24/kubectl:1.16.6</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deploy_k8s</span><br>  <span class="hljs-attribute">tags</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-runner</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir -p /etc/deploy</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo $kube_config |base64 -d &gt; $KUBECONFIG</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sed -i &quot;s/IMAGE_TAG/$CI_PIPELINE_ID/g&quot; deployment.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat deployment.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl apply -f deployment.yaml</span><br></code></pre></td></tr></table></figure><p>将代码提交后则会自动构建，构建成功会根据项目的deployment.yaml文件将pod部署k8s集群中。</p><h2 id="全局runner部署gitlab-ci-k8s-demo"><a href="#全局runner部署gitlab-ci-k8s-demo" class="headerlink" title="全局runner部署gitlab-ci-k8s-demo"></a>全局runner部署gitlab-ci-k8s-demo</h2><p>测试代码如下：<a href="https://github.com/nieweixing/gitlab-ci-k8s-demo">https://github.com/nieweixing/gitlab-ci-k8s-demo</a></p><p>首先我们给项目配置一下全局变量，.gitlab-ci.yml构建文件可以使用</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/9.png" alt="upload-image"> </p><p>分配配置如下几个变量</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/10.png" alt="upload-image"> </p><ul><li>镜像地址：CI_REGISTRY_IMAGE</li><li>镜像仓库密码：CI_REGISTRY_PASSWORD</li><li>镜像仓库用户名：CI_REGISTRY_USER</li></ul><p>为了能够创建和删除一些资源，我们也需要对象的 RBAC 权限，这里为了简单，我们直接新建一个ServiceAccount，绑定上一个tke:admin的权限(gitlab-sa.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tke:admin</span><br></code></pre></td></tr></table></figure><p>然后我们获取一下ServiceAccount的token和集群的ca证书，已经api地址，进行k8s集群的配置</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/11.png" alt="upload-image"> </p><p>下面我们配置一下.gitlab-ci.yml，内容如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">golang:1.10.3-stretch</span><br>  <span class="hljs-attribute">entrypoint</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;/bin/sh&quot;, &quot;-c&quot;]</span><br><br><span class="hljs-comment"># The problem is that to be able to use go get, one needs to put</span><br><span class="hljs-comment"># the repository in the $GOPATH. So for example if your gitlab domain</span><br><span class="hljs-comment"># is mydomainperso.com, and that your repository is repos/projectname, and</span><br><span class="hljs-comment"># the default GOPATH being /go, then you&#x27;d need to have your</span><br><span class="hljs-comment"># repository in /go/src/mydomainperso.com/repos/projectname</span><br><span class="hljs-comment"># Thus, making a symbolic link corrects this.</span><br><span class="hljs-attribute">before_script</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir -p &quot;/go/src/git.qikqiak.com/$&#123;CI_PROJECT_NAMESPACE&#125;&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ln -sf &quot;$&#123;CI_PROJECT_DIR&#125;&quot; &quot;/go/src/git.qikqiak.com/$&#123;CI_PROJECT_PATH&#125;&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cd &quot;/go/src/git.qikqiak.com/$&#123;CI_PROJECT_PATH&#125;/&quot;</span><br><br><span class="hljs-attribute">stages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">release</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">review</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deploy</span><br><br><span class="hljs-attribute">test</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">make test</span><br><br><span class="hljs-attribute">test2</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep 3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo &quot;We did it! Something else runs in parallel!&quot;</span><br><br><span class="hljs-attribute">compile</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># Add here all the dependencies, or use glide/govendor/...</span><br>    <span class="hljs-comment"># to get them automatically.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">make build</span><br>  <span class="hljs-attribute">artifacts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">app</span><br><br><span class="hljs-attribute">image_build</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">release</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">docker:latest</span><br>  <span class="hljs-attribute">variables</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">DOCKER_DRIVER</span><span class="hljs-punctuation">:</span> <span class="hljs-string">overlay</span><br>    <span class="hljs-attribute">DOCKER_HOST</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tcp://localhost:2375</span><br>  <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: docker:17.03-dind</span><br>      <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;--insecure-registry=ccr.ccs.tencentyun.com&quot;]</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker info</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker login -u &quot;$&#123;CI_REGISTRY_USER&#125;&quot; -p &quot;$&#123;CI_REGISTRY_PASSWORD&#125;&quot; ccr.ccs.tencentyun.com</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker build -t &quot;$&#123;CI_REGISTRY_IMAGE&#125;:latest&quot; .</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker tag &quot;$&#123;CI_REGISTRY_IMAGE&#125;:latest&quot; &quot;$&#123;CI_REGISTRY_IMAGE&#125;:$&#123;CI_COMMIT_REF_NAME&#125;&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test ! -z &quot;$&#123;CI_COMMIT_TAG&#125;&quot; &amp;&amp; docker push &quot;$&#123;CI_REGISTRY_IMAGE&#125;:latest&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker push &quot;$&#123;CI_REGISTRY_IMAGE&#125;:$&#123;CI_COMMIT_REF_NAME&#125;&quot;</span><br><br><span class="hljs-attribute">deploy_review</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cnych/kubectl</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">review</span><br>  <span class="hljs-attribute">only</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">branches</span><br>  <span class="hljs-attribute">except</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attribute">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://dev-gitlab-k8s-demo.k8s.niewx.cn</span><br>    <span class="hljs-attribute">on_stop</span><span class="hljs-punctuation">:</span> <span class="hljs-string">stop_review</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl version</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cd manifests/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sed -i &quot;s/__CI_ENVIRONMENT_SLUG__/$&#123;CI_ENVIRONMENT_SLUG&#125;/&quot; deployment.yaml ingress.yaml service.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sed -i &quot;s/__VERSION__/$&#123;CI_COMMIT_REF_NAME&#125;/&quot; deployment.yaml ingress.yaml service.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br>      if kubectl apply -f deployment.yaml | grep -q unchanged; then<br>          echo &quot;=&gt; Patching deployment to force image update.&quot;<br>          kubectl patch -f deployment.yaml -p &quot;&#123;\&quot;spec\&quot;:&#123;\&quot;template\&quot;:&#123;\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;\&quot;ci-last-updated\&quot;:\&quot;$(date +&#x27;%s&#x27;)\&quot;&#125;&#125;&#125;&#125;&#125;&quot;<br>      <span class="hljs-attribute">else</span><br><span class="hljs-attribute">          echo &quot;=&gt; Deployment apply has changed the object, no need to force image update.&quot;</span><br><span class="hljs-attribute">      fi</span><br><span class="hljs-attribute">    - kubectl apply -f service.yaml || true</span><br><span class="hljs-attribute">    - kubectl apply -f ingress.yaml</span><br><span class="hljs-attribute">    - kubectl rollout status -f deployment.yaml</span><br><span class="hljs-attribute">    - kubectl get all,ing -l ref=$&#123;CI_ENVIRONMENT_SLUG&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">stop_review</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cnych/kubectl</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">review</span><br>  <span class="hljs-attribute">variables</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">GIT_STRATEGY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">none</span><br>  <span class="hljs-attribute">when</span><span class="hljs-punctuation">:</span> <span class="hljs-string">manual</span><br>  <span class="hljs-attribute">only</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">branches</span><br>  <span class="hljs-attribute">except</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">stop</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl version</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl delete ing -l ref=$&#123;CI_ENVIRONMENT_SLUG&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl delete all -l ref=$&#123;CI_ENVIRONMENT_SLUG&#125;</span><br><br><span class="hljs-attribute">deploy_live</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cnych/kubectl</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deploy</span><br>  <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">live</span><br>    <span class="hljs-attribute">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://live-gitlab-k8s-demo.k8s.niewx.cn</span><br>  <span class="hljs-attribute">only</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attribute">when</span><span class="hljs-punctuation">:</span> <span class="hljs-string">manual</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl version</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cd manifests/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sed -i &quot;s/__CI_ENVIRONMENT_SLUG__/$&#123;CI_ENVIRONMENT_SLUG&#125;/&quot; deployment.yaml ingress.yaml service.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sed -i &quot;s/__VERSION__/$&#123;CI_COMMIT_REF_NAME&#125;/&quot; deployment.yaml ingress.yaml service.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl apply -f deployment.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl apply -f service.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl apply -f ingress.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl rollout status -f deployment.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl get all,ing -l ref=$&#123;CI_ENVIRONMENT_SLUG&#125;</span><br></code></pre></td></tr></table></figure><p>对应的部署yaml文件如下</p><p>部署deloyment文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-k8s-demo</span><br>    <span class="hljs-attr">ref:</span> <span class="hljs-string">__CI_ENVIRONMENT_SLUG__</span><br>    <span class="hljs-attr">track:</span> <span class="hljs-string">stable</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-k8s-demo</span><br>      <span class="hljs-attr">ref:</span> <span class="hljs-string">__CI_ENVIRONMENT_SLUG__</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-k8s-demo</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">__CI_ENVIRONMENT_SLUG__</span><br>        <span class="hljs-attr">track:</span> <span class="hljs-string">stable</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myregistry</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/v_cjweichen/nwx-reg:__VERSION__</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8000</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>service yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-k8s-demo</span><br>    <span class="hljs-attr">ref:</span> <span class="hljs-string">__CI_ENVIRONMENT_SLUG__</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;8000&quot;</span><br>    <span class="hljs-attr">prometheus.io/scheme:</span> <span class="hljs-string">&quot;http&quot;</span><br>    <span class="hljs-attr">prometheus.io/path:</span> <span class="hljs-string">&quot;/metrics&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">gitlab-k8s-demo</span><br>    <span class="hljs-attr">ref:</span> <span class="hljs-string">__CI_ENVIRONMENT_SLUG__</span><br></code></pre></td></tr></table></figure><p>traefik ingress暴露域名文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitlab</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">entryPoints</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attribute">routes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match: Host(`__CI_ENVIRONMENT_SLUG__.k8s.niewx.cn`)</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__</span><br>      <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br></code></pre></td></tr></table></figure><p>将上述文件提交到gitlab就会自动执行构建，构建成功会把应用自动部署到k8s上</p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/12.png" alt="upload-image"> </p><p>然后我们通过<a href="http://dev-gitlab-k8s-demo.k8s.niewx.cn访问下,如果出现如下信息则部署访问成功/">http://dev-gitlab-k8s-demo.k8s.niewx.cn访问下，如果出现如下信息则部署访问成功</a></p><p><img src="/img/2020-12-09-Implement-CICD-of-gitlab-on-Kubernetes/13.png" alt="upload-image"> </p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.qikqiak.com/post/gitlab-ci-k8s-cluster-feature/">https://www.qikqiak.com/post/gitlab-ci-k8s-cluster-feature/</a></p><p><a href="https://mp.weixin.qq.com/s/GHykQWgEtDYgFIeRca8dBw">https://mp.weixin.qq.com/s/GHykQWgEtDYgFIeRca8dBw</a></p><p><a href="https://www.alibabacloud.com/help/zh/doc-detail/106968.htm?spm=a2c63.p38356.b99.660.3db53ce3ZRDjhM#title-xfl-dp6-kta">https://www.alibabacloud.com/help/zh/doc-detail/106968.htm?spm=a2c63.p38356.b99.660.3db53ce3ZRDjhM#title-xfl-dp6-kta</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Gitlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之实战入门准备flux自动化部署</title>
    <link href="/2020/12/08/2020-12-08-Getting-started-in-actual-combat-of-istio-entry-series/"/>
    <url>/2020/12/08/2020-12-08-Getting-started-in-actual-combat-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本章我们学习下如何通过Flux来进行CI&#x2F;CD的代码自动发布。</p><p>学习Flux之前，我们需要进行如下准备工作。</p><p><img src="/img/2020-12-08-Getting-started-in-actual-combat-of-istio-entry-series/1.png" alt="upload-image"> </p><p>flux的具体实现流程如下</p><p><img src="/img/2020-12-08-Getting-started-in-actual-combat-of-istio-entry-series/2.png" alt="upload-image"> </p><h1 id="flux的安装"><a href="#flux的安装" class="headerlink" title="flux的安装"></a>flux的安装</h1><p>首先下载最新的fluxctl客户端安装</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]# wget https:<span class="hljs-comment">//github.com/fluxcd/flux/releases/download/1.21.0/fluxctl_linux_amd64</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]# cp fluxctl_linux_amd64 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>fluxctl<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos ~]# chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>fluxctl<br></code></pre></td></tr></table></figure><p>下面我们给flux创建一个命名空间用来部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl create ns flux</span><br></code></pre></td></tr></table></figure><p>下载flux的部署yaml，部署到k8s集群中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># git clone https://github.com/fluxcd/flux.git</span><br><span class="hljs-comment"># cd flux/deploy</span><br><span class="hljs-comment"># kubectl apply -f .</span><br><span class="hljs-comment"># kubectl get pod -n flux</span><br><span class="hljs-attribute">NAME</span>                         READY   STATUS    RESTARTS   AGE<br><span class="hljs-attribute">flux</span>-<span class="hljs-number">7</span>d79bc76f4-<span class="hljs-number">5</span>xjvn        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>s<br><span class="hljs-attribute">memcached</span>-<span class="hljs-number">5</span>bd7849b84-z99wt   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>s<br><br></code></pre></td></tr></table></figure><p>在flux的flux-deployment.yaml配置你的仓库信息</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@VM-0-13-centos deploy]# cat flux-deployment.yaml | grep git</span><br><span class="hljs-attribute">      - name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">git-key</span><br>          <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">flux-git-deploy</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: git-keygen</span><br>      <span class="hljs-comment"># file, which you will need to do if you host your own git</span><br>      <span class="hljs-comment"># repo rather than using github or the like. You&#x27;ll also need to</span><br>      <span class="hljs-comment"># https://docs.fluxcd.io/en/latest/guides/use-private-git-host</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: git-key</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: git-keygen</span><br>        <span class="hljs-comment"># Include this if you want to supply HTTP basic auth credentials for git</span><br>        <span class="hljs-comment">#     name: flux-git-auth</span><br>        <span class="hljs-comment"># https://$(GIT_AUTHUSER):$(GIT_AUTHKEY)@github.com/user/repository.git</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--git-url=git@github.com:nieweixing/smdemo.git</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--git-branch=master</span><br>        <span class="hljs-comment"># to those under the following relative paths in the git repository</span><br>        <span class="hljs-comment"># - --git-path=subdir1,subdir2</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--git-label=flux-sync</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--git-user=nieweixing</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--git-email=nwx_qdlg@163.com</span><br>        <span class="hljs-comment"># Include these two to enable git commit signing</span><br>        <span class="hljs-comment"># - --git-gpg-key-import=/root/gpg-import</span><br>        <span class="hljs-comment"># - --git-signing-key=&lt;key id&gt;</span><br>        <span class="hljs-comment"># Include this to enable git signature verification</span><br>        <span class="hljs-comment"># - --git-verify-signatures</span><br>        <span class="hljs-comment"># - --git-readonly</span><br>        <span class="hljs-comment"># Instruct flux where to put sync bookkeeping (default &quot;git&quot;, meaning use a tag in the upstream git repo)</span><br>        <span class="hljs-comment"># - --sync-state=git</span><br></code></pre></td></tr></table></figure><p>也可以在部署flux的时候通过命令来部署</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">fluxctl install \<br><span class="hljs-attribute">--git-user</span>=xxx \<br><span class="hljs-attribute">--git-email</span>=xxx@xxx \<br><span class="hljs-attribute">--git-url</span>=git@github.com:malphi/smdemo \<br><span class="hljs-attribute">--namespace</span>=flux | kubectl apply -f -<br></code></pre></td></tr></table></figure><p>主要配置–git-url、–git-user、–git-email这3个配置项，让flux可以管理你的仓库，下面我们把flux的公钥配置的flux的代码仓库中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos deploy]<span class="hljs-comment"># fluxctl identity --k8s-fwd-ns flux</span><br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClmQxfR+HHs7nVwVUtxnr34KBhPIWdexBjhtfKEzdIt<span class="hljs-regexp">/B8eJNKBWF/</span>K2wTJIajyDwj<span class="hljs-regexp">/VctdIBn3/</span><span class="hljs-number">5</span>rf+l98zPbuMQp08ejJvi1d1XYiweohg9Zj6VAYDHdEOc3cqEO34J9+eVoCexB8lkBK9AFg9urpdSVHnqNj1ApDGOH8xpnl98V+DsoPrqCv6bGTGpYNIpSIZMv5OImjTANH1yF5lgxL6blOBv7eAGKikHBo6vN46BzTQHtvcMZGK7SatiroaU+qw7fQw1Gf3s0c0dAuZqDzL97rSDfKYkvFWTg0UQajD4qnmeWx<span class="hljs-regexp">/Mm5GCFN10wTF3OloYXLC1bAS3jmcH6EEpWLaSuQj4ennfzZkxC6tRPiM9ncSDeR8oKGQ2O89honUfXMHW7UYtyRPyzN89X6ySp25cwU+R7Jm9cf4DXmeS1XWVGUewHOQGmBN3X8471nC31CJxqI8n6zuReuyql+w7BVM/</span>s6cELgcLLqRRC2POyacgqOw2n3jVK<span class="hljs-regexp">//i</span>d/h+TBYU= root@flux-<span class="hljs-number">7</span>d79bc76f4-<span class="hljs-number">5</span>xjvn<br></code></pre></td></tr></table></figure><p><img src="/img/2020-12-08-Getting-started-in-actual-combat-of-istio-entry-series/3.png" alt="upload-image"> </p><h1 id="flux部署demo应用"><a href="#flux部署demo应用" class="headerlink" title="flux部署demo应用"></a>flux部署demo应用</h1><p>下面我们给demo部署创建一个新的ns来进行部署，并自动注入istio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-13-centos deploy]<span class="hljs-comment"># k create ns demo</span><br>namespace/demo created<br>[root@VM-0-13-centos deploy]<span class="hljs-comment"># k label namespace demo istio-injection=enabled</span><br>namespace/demo labeled<br></code></pre></td></tr></table></figure><p>下面我们通过flux来进行demo服务的部署，首先将部署的yaml文件上传到smdemo的仓库中</p><p><img src="/img/2020-12-08-Getting-started-in-actual-combat-of-istio-entry-series/4.png" alt="upload-image"> </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># fluxctl sync --k8s-fwd-ns flux</span><br>Synchronizing <span class="hljs-keyword">with</span> ssh://git<span class="hljs-symbol">@github</span>.com/nieweixing/smdemo.git<br>Revision of master <span class="hljs-keyword">to</span> apply is eb8f408<br>Waiting <span class="hljs-keyword">for</span> eb8f408 <span class="hljs-keyword">to</span> be applied ...<br>Done.<br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># kubectl get pod -n demo</span><br>NAME                       READY   STATUS    RESTARTS   AGE<br>httpbin<span class="hljs-number">-66</span>cdbdb6c5<span class="hljs-number">-78</span>df6   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m47s<br><span class="hljs-built_in">sleep</span><span class="hljs-number">-5</span>b7bf56c54<span class="hljs-number">-5</span>ngkp     <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m47s<br></code></pre></td></tr></table></figure><p>执行flux sync后，demo应用的httpbin和sleep就部署到了demo命名空间下，下面我们来进行测试下httpbin服务是否可以访问通</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]# kubectl exec -it <span class="hljs-built_in">sleep</span><span class="hljs-number">-5</span>b7bf56c54<span class="hljs-number">-5</span>ngkp -n demo -c <span class="hljs-built_in">sleep</span> -- curl http:<span class="hljs-comment">//httpbin.demo:8000/ip</span><br>&#123;<br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面的访问结果可以看出，我们的demo应用已经通过flux正常部署到了k8s中。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Flux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之安全授权配置</title>
    <link href="/2020/12/07/2020-12-07-Security-authorization-configuration-of-istio-entry-series/"/>
    <url>/2020/12/07/2020-12-07-Security-authorization-configuration-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>Istio 的授权功能为网格中的工作负载提供网格、命名空间和工作负载级别的访问控制。这种控制层级提供了以下优点：</p><p>工作负载间和最终用户到工作负载的授权。<br>一个简单的 API：它包括一个单独的并且很容易使用和维护的 AuthorizationPolicy CRD。<br>灵活的语义：运维人员可以在 Istio 属性上定义自定义条件，并使用 DENY 和 ALLOW 动作。<br>高性能：Istio 授权是在 Envoy 本地强制执行的。<br>高兼容性：原生支持 HTTP、HTTPS 和 HTTP2，以及任意普通 TCP 协议。</p><h1 id="基于JWT授权"><a href="#基于JWT授权" class="headerlink" title="基于JWT授权"></a>基于JWT授权</h1><p>下面我们新建一个testjwt的命名空间，部署一个sleep和httpbin服务来进行测试，从下面测试，默认是可以访问通的。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl create ns testjwt<br>namespace/testjwt created<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl apply -f &lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n testjwt<br>serviceaccount/httpbin created<br>service/httpbin created<br>deployment.apps/httpbin created<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl apply -f &lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n testjwt<br>serviceaccount/sleep created<br>service/sleep created<br>deployment.apps/sleep created<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl get pod -n testjwt<br>NAME                       READY   STATUS    RESTARTS   AGE<br>httpbin<span class="hljs-string">-74887</span>fc549<span class="hljs-string">-8</span>cq6c   2/2     Running   0          6m41s<br>sleep<span class="hljs-string">-68</span>dc95bf4c-z8z6g     2/2     Running   0          6m28s<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]#  kubectl exec -it $(kubectl get pod -l app=sleep -n testjwt -o jsonpath=&#123;.items..metadata.name&#125;) -c sleep -n testjwt -- curl http://httpbin.testjwt:8000/ip -s -o /dev/null -w &quot;%&#123;http_code&#125;\n&quot;<br>200<br></code></pre></td></tr></table></figure><p>下面我们来配置下身份认证，创建请求认证</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RequestAuthentication&quot;</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jwt-example&quot;</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">testjwt</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">jwtRules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">issuer: &quot;testing@secure.istio.io&quot;</span><br>    <span class="hljs-attribute">jwksUri</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/istio/istio/release-1.8/security/tools/jwt/samples/jwks.json&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><p>测试不合法的jwt访问，会返回401</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl exec <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pod</span> -<span class="hljs-params">l</span> <span class="hljs-params">app</span>=<span class="hljs-params">sleep</span> -<span class="hljs-params">n</span> <span class="hljs-params">testjwt</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">items</span>..<span class="hljs-params">metadata</span>.<span class="hljs-params">name</span>&#125;)</span> -c sleep -n testjwt -- curl <span class="hljs-string">&quot;http://httpbin.testjwt:8000/headers&quot;</span> -H <span class="hljs-string">&quot;Authorization: Bearer invalidToken&quot;</span> -s -o /dev/null -w <span class="hljs-string">&quot;%&#123;http_code&#125;\n&quot;</span><br></code></pre></td></tr></table></figure><p>测试没有授权策略时，都可以访问</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl exec <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pod</span> -<span class="hljs-params">l</span> <span class="hljs-params">app</span>=<span class="hljs-params">sleep</span> -<span class="hljs-params">n</span> <span class="hljs-params">testjwt</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">items</span>..<span class="hljs-params">metadata</span>.<span class="hljs-params">name</span>&#125;)</span> -c sleep -n testjwt -- curl <span class="hljs-string">&quot;http://httpbin.testjwt:8000/headers&quot;</span> -s -o /dev/null -w <span class="hljs-string">&quot;%&#123;http_code&#125;\n&quot;</span><br></code></pre></td></tr></table></figure><p>创建授权策略</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">require-jwt</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">testjwt</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ALLOW</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">requestPrincipals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;testing@secure.istio.io/testing@secure.istio.io&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>解析token</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">TOKEN=<span class="hljs-constructor">$(<span class="hljs-params">curl</span> <span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">malphi</span><span class="hljs-operator">/</span><span class="hljs-params">geektime</span>-<span class="hljs-params">servicemesh</span><span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span><span class="hljs-params">c3</span>-19<span class="hljs-operator">/</span><span class="hljs-params">demo</span>.<span class="hljs-params">jwt</span> -<span class="hljs-params">s</span>)</span><span class="hljs-operator"> &amp;&amp; </span>echo $TOKEN <span class="hljs-pattern-match">| cut -d &#x27;.&#x27; -f2 - | base64 --decode -</span><br></code></pre></td></tr></table></figure><p>测试带token的请求</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl exec <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pod</span> -<span class="hljs-params">l</span> <span class="hljs-params">app</span>=<span class="hljs-params">sleep</span> -<span class="hljs-params">n</span> <span class="hljs-params">testjwt</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">items</span>..<span class="hljs-params">metadata</span>.<span class="hljs-params">name</span>&#125;)</span> -c sleep -n testjwt -- curl <span class="hljs-string">&quot;http://httpbin.testjwt:8000/headers&quot;</span> -s -o /dev/null -H <span class="hljs-string">&quot;Authorization: Bearer $TOKEN&quot;</span> -w <span class="hljs-string">&quot;%&#123;http_code&#125;\n&quot;</span><br></code></pre></td></tr></table></figure><h1 id="HTTP流量授权"><a href="#HTTP流量授权" class="headerlink" title="HTTP流量授权"></a>HTTP流量授权</h1><p>使用 Istio，您可以轻松地为网格中的workloads设置访问控制。下面看看如何使用 Istio 授权设置访问控制。首先，配置一个简单的 deny-all 策略，来拒绝工作负载的所有请求，然后逐渐地、增量地授予对工作负载更多的访问权</p><p>运行下面的命令在 default 命名空间里创建一个 deny-all 策略。该策略没有 selector 字段，它会把策略应用于 default 命名空间中的每个工作负载。spec: 字段为空值 {}，意思是不允许任何流量，有效地拒绝所有请求。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deny-all</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  &#123;&#125;<br>EOF<br><br></code></pre></td></tr></table></figure><p>我们访问bookinfo页面被拒接</p><p><img src="/img/2020-12-07-Security-authorization-configuration-of-istio-entry-series/3.png" alt="upload-image"> </p><p>运行下面的命令创建一个 productpage-viewer 策略以容许通过 GET 方法访问 productpage 工作负载。该策略没有在 rules 中设置 from 字段，这意味着所有的请求源都被容许访问，包括所有的用户和工作负载</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AuthorizationPolicy&quot;</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;productpage-viewer&quot;</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">productpage</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">to:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>        <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>运行下面的命令创建一个 details-viewer 策略以容许 productpage 工作负载以 GET 方式，通过使用 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;bookinfo-productpage ServiceAccount 去访问 details 工作负载</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AuthorizationPolicy&quot;</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;details-viewer&quot;</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">details</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>        <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/default/sa/bookinfo-productpage&quot;]</span><br>    <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>        <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>运行下面的命令创建一个 reviews-viewer 策略以容许 productpage 工作负载以 GET 方式，通过使用 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;bookinfo-productpage ServiceAccount 去访问 reviews 工作负载</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AuthorizationPolicy&quot;</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;reviews-viewer&quot;</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>        <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/default/sa/bookinfo-productpage&quot;]</span><br>    <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>        <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>运行下面的命令创建一个 ratings-viewer 策略以容许 reviews 工作负载以 GET 方式，通过使用 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;bookinfo-reviews ServiceAccount 去访问 ratings 工作负载</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AuthorizationPolicy&quot;</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ratings-viewer&quot;</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>        <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/default/sa/bookinfo-reviews&quot;]</span><br>    <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>        <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>在浏览器访问 Bookinfo productpage (http:&#x2F;&#x2F;$GATEWAY_URL&#x2F;productpage)。你会在 “Book Reviews” 部分看到“黑色”和“红色”评分</p><h1 id="TCP流量的授权"><a href="#TCP流量的授权" class="headerlink" title="TCP流量的授权"></a>TCP流量的授权</h1><p>默认情况下，Bookinfo 示例应用只使用 HTTP 协议。 为了演示 TCP 流量的授权，您需要将应用更新到使用 TCP 的版本。 按照下面的步骤，部署 Bookinfo 应用示例，并且将 ratings 服务升级到 v2 版本，在该版本中会使用 TCP 调用后端 MongoDB 服务，然后将授权策略应用到 MongoDB 工作负载上。</p><p>使用 bookinfo-ratings-v2 服务账户安装 ratings 工作负载的 v2 版本：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ kubectl apply -f &lt;(istioctl kube-<span class="hljs-keyword">inject</span> -f samples<span class="hljs-regexp">/bookinfo/</span>platform<span class="hljs-regexp">/kube/</span>bookinfo-ratings-v2.yaml)<br></code></pre></td></tr></table></figure><p>创建适当的 destination rules：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f samples<span class="hljs-regexp">/bookinfo/</span>networking/destination-rule-all-mtls.yaml<br></code></pre></td></tr></table></figure><p>因为 virtual service 规则中引用的 subset 项依赖 destination rules，所以在添加 virtual service 规则之前先等待几秒钟以让 destination rules 传播生效。</p><p>在 destination rules 传播生效后，更新 reviews 工作负载以只使用 v2 版本的 ratings 工作负载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f samples<span class="hljs-regexp">/bookinfo/</span>networking/virtual-service-ratings-db.yaml<br></code></pre></td></tr></table></figure><p>浏览 Bookinfo 的产品页面（http:&#x2F;&#x2F;$GATEWAY_URL&#x2F;productpage）。</p><p>在这一页面中，您会在 Book Reviews 模块中看到一条错误信息：“Ratings service is currently unavailable.”。 这是因为我们现在用的是 v2 版本的 ratings 工作负载，但是我们还没有部署 MongoDB。</p><p>部署Mongodb</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">kubectl apply -f &lt;(istioctl kube-<span class="hljs-keyword">inject</span> -f samples<span class="hljs-regexp">/bookinfo/</span>platform<span class="hljs-regexp">/kube/</span>bookinfo-db.yaml)<br></code></pre></td></tr></table></figure><p>浏览 Bookinfo 的产品页面（http:&#x2F;&#x2F;$GATEWAY_URL&#x2F;productpage）。</p><p>确认 Book Reviews 模块显示了书评。</p><p>部署了 MongoDB 工作负载之后，在将授权配置为仅允许授权请求之前，我们需要为工作负载应用默认的 deny-all 策略，以确保默认情况下拒绝对 MongoDB 工作负载的所有请求。</p><p>对 MongoDB 工作负载应用默认的 deny-all 策略：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deny-all</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mongodb</span><br>EOF<br></code></pre></td></tr></table></figure><p>打开 Bookinfo 的 productpage 页面（http:&#x2F;&#x2F;$GATEWAY_URL&#x2F;productpage）。您会看到：</p><p>页面左下角的 Book Details 中包含了书籍类型、页数以及出版商等信息。</p><p>页面右下角的 Book Reviews 显示了错误信息：“Ratings service is currently unavailable”。</p><p>在配置了默认拒绝所有请求之后，我们需要创建一个 bookinfo-ratings-v2 策略以允许来自 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;bookinfo-ratings-v2 服务账户在 27017 端口上对 MongoDB 工作负载的请求。 我们授权给这个服务账户，是因为来自 ratings-v2 工作负载的请求都用的是 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;bookinfo-ratings-v2 服务账户发出的。</p><p>为来自 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;bookinfo-ratings-v2 服务账户的 TCP 流量增强工作负载级别的访问控制：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bookinfo-ratings-v2</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mongodb</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>        <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/default/sa/bookinfo-ratings-v2&quot;]</span><br>    <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;27017&quot;]</span><br>EOF<br></code></pre></td></tr></table></figure><p>打开 Bookinfo 的 productpage 页面（http:&#x2F;&#x2F;$GATEWAY_URL&#x2F;productpage），您现在应该看到以下各节按预期工作：</p><p>页面左下角的 Book Details 中包含了书籍类型、页数以及出版商等信息。</p><p>页面右下角的 Book Reviews 显示了红色星级的书评。</p><p>恭喜！ 您已经成功部署了通过 TCP 流量进行通信的工作负载，并应用了网格级别和工作负载级别的授权策略来对请求实施访问控制。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之TLS安全认证的配置</title>
    <link href="/2020/12/07/2020-12-07-TLS-security-authentication-configuration-of-istio-entry-series/"/>
    <url>/2020/12/07/2020-12-07-TLS-security-authentication-configuration-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>Istio的自动双向TLS特性，您只需配置认证策略即可使用双向 TLS，而无需关注目标规则。</p><p>Istio 跟踪迁移到 sidecar 的服务端工作负载，并将客户端 sidecar 配置为自动向这些工作负载发送双向 TLS 流量， 同时将明文流量发送到没有 sidecar 的工作负载。这使您可以通过最少的配置，逐步在网格中使用双向 TLS。</p><p>istio1.5版本的安全认证默认是使用的SDS（安全发现服务），并且这个服务趋于稳定、默认开启</p><h1 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h1><p><img src="/img/2020-12-07-TLS-security-authentication-configuration-of-istio-entry-series/1.png" alt="upload-image"> </p><p>首先我们生成一下所需要证书秘钥</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.为服务创建根证书和私钥：<br>openssl req -x509 -sha256 -nodes -days <span class="hljs-number">365</span> -newkey rsa:<span class="hljs-number">2048</span> -subj <span class="hljs-string">&#x27;/O=example Inc./CN=example.com&#x27;</span> -keyout example<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.key</span> -out example<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.crt</span><br><br><span class="hljs-number">2</span>.为httpbin<span class="hljs-selector-class">.example</span>.com创建证书和私钥：<br>openssl req -out httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.csr</span> -newkey rsa:<span class="hljs-number">2048</span> -nodes -keyout httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=httpbin.example.com/O=httpbin organization&quot;</span><br>openssl x509 -req -days <span class="hljs-number">365</span> -CA example<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.crt</span> -CAkey example<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.key</span> -set_serial <span class="hljs-number">0</span> -<span class="hljs-keyword">in</span> httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.csr</span> -out httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span>.crt<br></code></pre></td></tr></table></figure><p>部署一下httpbin这个服务，之前部署就可以不用部署了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/citizenstig/httpbin</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>接下来给网关配置一个secret来挂载这个证书</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl create -n istio-system secret tls httpbin-credential <span class="hljs-attr">--key</span>=httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.key</span> <span class="hljs-attr">--cert</span>=httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span>.crt<br></code></pre></td></tr></table></figure><p>配置ingress网关</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mygateway</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">istio</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingressgateway </span><br>  <span class="hljs-attribute">servers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">port:</span><br>      <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">443</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTPS</span><br>    <span class="hljs-attribute">tls</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">SIMPLE  #单向TLS</span><br>      <span class="hljs-attribute">credentialName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin-credential</span><br>    <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin.example.com</span><br>EOF<br></code></pre></td></tr></table></figure><p>给httpbin配置一个VirtualService</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;httpbin.example.com&quot;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mygateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">uri:</span><br>        <span class="hljs-attribute">prefix</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/status</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">uri:</span><br>        <span class="hljs-attribute">prefix</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/delay</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin   </span><br>EOF<br></code></pre></td></tr></table></figure><p>下面我们执行这条命令测试一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl -v -HHost:httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span> <span class="hljs-attr">--resolve</span> httpbin<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">443</span>:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-attr">--cacert</span> example<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.crt</span> <span class="hljs-string">&quot;https://httpbin.example.com:443/status/418&quot;</span><br></code></pre></td></tr></table></figure><h1 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h1><p>借助 Istio 的自动双向 TLS 特性，您只需配置认证策略即可使用双向 TLS，而无需关注目标规则。</p><p>Istio 跟踪迁移到 sidecar 的服务端工作负载，并将客户端 sidecar 配置为自动向这些工作负载发送双向 TLS 流量， 同时将明文流量发送到没有 sidecar 的工作负载。这使您可以通过最少的配置，逐步在网格中使用双向 TLS</p><p><img src="/img/2020-12-07-TLS-security-authentication-configuration-of-istio-entry-series/2.png" alt="upload-image"> </p><p>我们创建一个testauth的ns，在里面部署一下sleep服务，然后去请求default下的httpbin服务。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl create ns testauth<br>namespace/testauth created<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl apply -f samples/sleep/sleep.yaml -n testauth<br>serviceaccount/sleep created<br>service/sleep created<br>deployment.apps/sleep created<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# k get pod -n testauth<br>NAME                     READY   STATUS    RESTARTS   AGE<br>sleep<span class="hljs-string">-5</span>b7bf56c54<span class="hljs-string">-8</span>gt4q   1/1     Running   0          21s<br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl exec -it sleep<span class="hljs-string">-5</span>b7bf56c54<span class="hljs-string">-8</span>gt4q -n testauth -c sleep -- curl http://httpbin.default:8000/ip<br>&#123;<br>  &quot;origin&quot;: &quot;127.0.0.1&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里默认是可以访问通的，因为我们还没配置双向tls认证，下面我们来配置下认证策略</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">kubectl apply -f - &lt;&lt;EOF<br><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;PeerAuthentication&quot;</span><br><span class="hljs-symbol">metadata:</span><br>  name: <span class="hljs-string">&quot;default&quot;</span><br>  namespace: <span class="hljs-string">&quot;default&quot;</span> <span class="hljs-meta">#基于default下的一个对等认证</span><br><span class="hljs-symbol">spec:</span><br>  mtls:<br>    mode: PERMISSIVE  <span class="hljs-meta">#兼容模式</span><br>EOF<br></code></pre></td></tr></table></figure><p>兼容模式下默认是可以访问的</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@VM-0-13-centos</span> istio<span class="hljs-number">-1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b<span class="hljs-number">7</span>bf<span class="hljs-number">56</span><span class="hljs-keyword">c</span><span class="hljs-number">54</span><span class="hljs-number">-8</span>gt<span class="hljs-number">4</span>q -n testauth -<span class="hljs-keyword">c</span> sleep -- curl http://httpbin.<span class="hljs-keyword">default</span>:<span class="hljs-number">8000</span>/ip<br>&#123;<br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们把对等认证模式改成严格模式</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">kubectl apply -f - &lt;&lt;EOF<br><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;PeerAuthentication&quot;</span><br><span class="hljs-symbol">metadata:</span><br>  name: <span class="hljs-string">&quot;default&quot;</span><br>  <span class="hljs-keyword">namespace</span>: <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-symbol">spec:</span><br>  mtls:<br>    mode: <span class="hljs-keyword">STRICT</span> #严格模式<br>EOF<br></code></pre></td></tr></table></figure><p>再执行访问请求就会被拒绝</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]<span class="hljs-comment"># kubectl exec -it sleep-5b7bf56c54-8gt4q -n testauth -c sleep -- curl http://httpbin.default:8000/ip</span><br>curl: (<span class="hljs-number">56</span>) Recv failure: Connection reset by peer<br>command terminated with <span class="hljs-keyword">exit</span> code <span class="hljs-number">56</span><br></code></pre></td></tr></table></figure><p>那么如何让sleep去访问到httpbin呢，我们只需要将sleep注入到istio就可以，因为istio会去管理证书和秘钥</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]<span class="hljs-comment"># kubectl apply -f &lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n testauth</span><br>serviceaccount/<span class="hljs-keyword">sleep</span> unchanged<br>service/<span class="hljs-keyword">sleep</span> unchanged<br>deployment.apps/<span class="hljs-keyword">sleep</span> configured<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]<span class="hljs-comment"># kubectl get pod -n testauth</span><br>NAME                     READY   STATUS        RESTARTS   AGE<br><span class="hljs-keyword">sleep</span>-<span class="hljs-number">5</span>b7bf56c54-<span class="hljs-number">8</span>gt4q   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Terminating   <span class="hljs-number">0</span>          <span class="hljs-number">10</span>m<br><span class="hljs-keyword">sleep</span>-<span class="hljs-number">68</span>dc95bf4c-fwftq   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running       <span class="hljs-number">0</span>          <span class="hljs-number">38</span>s<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]<span class="hljs-comment"># kubectl exec -it sleep-68dc95bf4c-fwftq -n testauth -c sleep -- curl http://httpbin.default:8000/ip</span><br>&#123;<br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将sleep服务注入到istio中，就可以访问到httpbin的服务了，我们上面是针对ns进行对等认证的策略配置，也可以进行全局的对等认证的配置，只需要将ns去掉就行。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">kubectl apply -f - &lt;&lt;EOF<br><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;PeerAuthentication&quot;</span><br><span class="hljs-symbol">metadata:</span><br>  name: <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-symbol">spec:</span><br>  mtls:<br>    mode: <span class="hljs-keyword">STRICT</span><br>EOF<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之Jaeger分布式追踪</title>
    <link href="/2020/12/06/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/"/>
    <url>/2020/12/06/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>分布式追踪可以让用户对跨多个分布式服务网格的 1 个请求进行追踪分析。这样进而可以通过可视化的方式更加深入地了解请求的延迟，序列化和并行度。</p><p>Istio 利用 Envoy 的分布式追踪功能提供了开箱即用的追踪集成。确切地说，Istio 提供了安装各种各种追踪后端服务的选项，并且通过配置代理来自动发送追踪 span 到追踪后端服务。</p><p>下面了解如何让您的应用程序参与 Jaeger 的追踪， 而不管您用来构建应用程序的语言、框架或平台是什么。</p><p><img src="/img/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/1.png" alt="upload-image"> </p><p>使用demo方式安装的istio，默认会安装jaeger到集群中，使用jaeger默认需要打开tracing，如果没有打开则需要执行下面命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--set</span> values<span class="hljs-selector-class">.tracing</span>.enabled=true<br><span class="hljs-attr">--set</span> values<span class="hljs-selector-class">.global</span><span class="hljs-selector-class">.tracer</span><span class="hljs-selector-class">.zipkin</span><span class="hljs-selector-class">.address</span> = &lt;jaeger-collector-service&gt;.&lt;jaeger-collector-namespace&gt;:<span class="hljs-number">9411</span><br></code></pre></td></tr></table></figure><p>下面我们进入jaeger界面看看</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@VM-0-3-centos</span> ~]<span class="hljs-comment"># kubectl get svc -n istio-system | grep jaeger-query</span><br>jaeger-query                NodePort       172.16.54.199    <span class="hljs-variable">&lt;none&gt;</span>           16686:31110TCP       11d<br></code></pre></td></tr></table></figure><p>浏览器输入http:&#x2F;&#x2F;节点ip:31110，然后就可以查看到jaeger基本页面</p><p><img src="/img/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/2.png" alt="upload-image"> </p><p>我们看一下bookinfo的首页转发到后端details服务的一个链路</p><p><img src="/img/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/3.png" alt="upload-image"> </p><p>点击一个链路进去查看每个服务对应的响应时长</p><p><img src="/img/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/4.png" alt="upload-image"> </p><p>还可以点击具体的响应信息</p><p><img src="/img/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/5.png" alt="upload-image"></p><p>jaeger还支持图形方式展示调用的链路</p><p><img src="/img/2020-12-06-Jaeger-distributed-tracking-of-istio-entry-series/6.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Jaeger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之获取Envoy访问日志</title>
    <link href="/2020/12/05/2020-12-05-Get-Envoy-access-log-of-istio-entry-series/"/>
    <url>/2020/12/05/2020-12-05-Get-Envoy-access-log-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>Istio 最简单的日志类型是 Envoy 的访问日志。Envoy 代理打印访问信息到标准输出。Envoy 容器的标准输出能够通过 kubectl logs 命令打印出来。</p><p>下面我们来学习一下如何查看Envoy的日志来进行分析问题。首先我们部署一个sleep和httpbin的服务，通过sleep来调用httpbin，通过查看httpbin的envoy的日志分析业务请求。</p><p>首先我们查看下Envoy的日志访问是否开启，我们查看下istio这个configmap中的配置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]# kubectl describe <span class="hljs-keyword">cm</span> istio -n istio-<span class="hljs-built_in">system</span> | <span class="hljs-keyword">grep</span> accessLogFile<br>                &#123;<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>:&#123;<span class="hljs-string">&quot;mesh&quot;</span>:<span class="hljs-comment">&quot;# Set enableTracing to false to disable request tracing.\nenableTracing: true\n\n# Set accessLogFile to...</span><br># Set accessLogFile <span class="hljs-keyword">to</span> <span class="hljs-built_in">empty</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">to</span> disable access <span class="hljs-built_in">log</span>.<br>accessLogFile: <span class="hljs-string">&quot;/dev/stdout&quot;</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]# kubectl describe <span class="hljs-keyword">cm</span> istio -n istio-<span class="hljs-built_in">system</span> | <span class="hljs-keyword">grep</span> accessLogEncoding<br>accessLogEncoding: <span class="hljs-string">&#x27;JSON&#x27;</span><br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]# kubectl describe <span class="hljs-keyword">cm</span> istio -n istio-<span class="hljs-built_in">system</span> | <span class="hljs-keyword">grep</span> accessLogFormat<br>accessLogFormat: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数配置项</th><th>说明</th></tr></thead><tbody><tr><td>global.proxy.accessLogFile</td><td>日志输出文件，空为关闭输出</td></tr><tr><td>global.proxy.accessLogEncoding</td><td>日志编码格式：JSON、TEXT</td></tr><tr><td>global.proxy.accessLogFormat</td><td>配置显示在日志中的字段，空为默认格式</td></tr><tr><td>global.proxy.logLevel</td><td>日志级别，空为 warning，可选trace、debug、info、warning、error、critical、off</td></tr></tbody></table><p>如果你的日志中下面的配置项没有开启，然后配置一下istio这个cm，重新加载一下istiod这个pod既可。这里我们已经开启了日志输出，用的是JSON格式。</p><p>下面我们来对httpbin来进行访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># kubectl exec -it $(kubectl get pod -l app=sleep -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;) -c sleep -- curl -v httpbin:8000/status/418</span><br><span class="hljs-string">*</span>   <span class="hljs-string">Trying</span> <span class="hljs-number">172.16</span><span class="hljs-number">.22</span><span class="hljs-number">.210</span><span class="hljs-string">:8000...</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connected</span> <span class="hljs-string">to</span> <span class="hljs-string">httpbin</span> <span class="hljs-string">(172.16.22.210)</span> <span class="hljs-string">port</span> <span class="hljs-number">8000</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">GET</span> <span class="hljs-string">/status/418</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Host:</span> <span class="hljs-string">httpbin:8000</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">User-Agent:</span> <span class="hljs-string">curl/7.69.1</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-string">&gt;</span> <br><span class="hljs-string">*</span> <span class="hljs-string">Mark</span> <span class="hljs-string">bundle</span> <span class="hljs-string">as</span> <span class="hljs-string">not</span> <span class="hljs-string">supporting</span> <span class="hljs-string">multiuse</span><br><span class="hljs-string">&lt;</span> <span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">418</span> <span class="hljs-string">Unknown</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">server:</span> <span class="hljs-string">envoy</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">date:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">08</span> <span class="hljs-string">Dec</span> <span class="hljs-number">2020 03:13:10 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">x-more-info:</span> <span class="hljs-string">http://tools.ietf.org/html/rfc2324</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">*</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">access-control-allow-credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">content-length:</span> <span class="hljs-number">135</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">16</span><br><span class="hljs-string">&lt;</span> <br><br>    <span class="hljs-string">-=[</span> <span class="hljs-string">teapot</span> <span class="hljs-string">]=-</span><br><br>       <span class="hljs-string">_...._</span><br>     <span class="hljs-string">.&#x27;</span>  <span class="hljs-string">_</span> <span class="hljs-string">_</span> <span class="hljs-string">`.</span><br>    <span class="hljs-string">|</span> <span class="hljs-string">.&quot;`</span> <span class="hljs-string">^</span> <span class="hljs-string">`&quot;.</span> <span class="hljs-string">_,</span><br>    <span class="hljs-string">\_;`&quot;---&quot;`|//</span><br>      <span class="hljs-string">|</span>       <span class="hljs-string">;/</span><br>      <span class="hljs-string">\_</span>     <span class="hljs-string">_/</span><br>        <span class="hljs-string">`&quot;&quot;&quot;`</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connection</span> <span class="hljs-comment">#0 to host httpbin left intact</span><br></code></pre></td></tr></table></figure><p>我们分别查看下sleep和httpbin的日志</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta"># kubectl logs -l app=sleep -c istio-proxy</span><br>&#123;<span class="hljs-string">&quot;bytes_sent&quot;</span>:<span class="hljs-string">&quot;135&quot;</span>,<span class="hljs-string">&quot;upstream_cluster&quot;</span>:<span class="hljs-string">&quot;outbound|8000||httpbin.default.svc.cluster.local&quot;</span>,<span class="hljs-string">&quot;downstream_remote_address&quot;</span>:<span class="hljs-string">&quot;10.0.1.38:35842&quot;</span>,<span class="hljs-string">&quot;authority&quot;</span>:<span class="hljs-string">&quot;httpbin:8000&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/status/418&quot;</span>,<span class="hljs-string">&quot;protocol&quot;</span>:<span class="hljs-string">&quot;HTTP/1.1&quot;</span>,<span class="hljs-string">&quot;upstream_service_time&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;upstream_local_address&quot;</span>:<span class="hljs-string">&quot;10.0.1.38:41142&quot;</span>,<span class="hljs-string">&quot;duration&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;upstream_transport_failure_reason&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;route_name&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-string">&quot;downstream_local_address&quot;</span>:<span class="hljs-string">&quot;172.16.22.210:8000&quot;</span>,<span class="hljs-string">&quot;user_agent&quot;</span>:<span class="hljs-string">&quot;curl/7.69.1&quot;</span>,<span class="hljs-string">&quot;response_code&quot;</span>:<span class="hljs-string">&quot;418&quot;</span>,<span class="hljs-string">&quot;response_flags&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;start_time&quot;</span>:<span class="hljs-string">&quot;2020-12-08T03:24:22.162Z&quot;</span>,<span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;request_id&quot;</span>:<span class="hljs-string">&quot;b6d7d73c-3f47-919f-9836-e8cd5d8df2da&quot;</span>,<span class="hljs-string">&quot;upstream_host&quot;</span>:<span class="hljs-string">&quot;10.0.1.41:80&quot;</span>,<span class="hljs-string">&quot;x_forwarded_for&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;requested_server_name&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;bytes_received&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;istio_policy_status&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>&#125;<br>[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-meta">#  kubectl logs -l app=httpbin -c istio-proxy</span><br>&#123;<span class="hljs-string">&quot;istio_policy_status&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;bytes_sent&quot;</span>:<span class="hljs-string">&quot;135&quot;</span>,<span class="hljs-string">&quot;upstream_cluster&quot;</span>:<span class="hljs-string">&quot;inbound|8000|http|httpbin.default.svc.cluster.local&quot;</span>,<span class="hljs-string">&quot;downstream_remote_address&quot;</span>:<span class="hljs-string">&quot;10.0.1.38:41142&quot;</span>,<span class="hljs-string">&quot;authority&quot;</span>:<span class="hljs-string">&quot;httpbin:8000&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/status/418&quot;</span>,<span class="hljs-string">&quot;protocol&quot;</span>:<span class="hljs-string">&quot;HTTP/1.1&quot;</span>,<span class="hljs-string">&quot;upstream_service_time&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;upstream_local_address&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:48374&quot;</span>,<span class="hljs-string">&quot;duration&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;upstream_transport_failure_reason&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;route_name&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-string">&quot;downstream_local_address&quot;</span>:<span class="hljs-string">&quot;10.0.1.41:80&quot;</span>,<span class="hljs-string">&quot;user_agent&quot;</span>:<span class="hljs-string">&quot;curl/7.69.1&quot;</span>,<span class="hljs-string">&quot;response_code&quot;</span>:<span class="hljs-string">&quot;418&quot;</span>,<span class="hljs-string">&quot;response_flags&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;start_time&quot;</span>:<span class="hljs-string">&quot;2020-12-08T03:24:22.162Z&quot;</span>,<span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;request_id&quot;</span>:<span class="hljs-string">&quot;b6d7d73c-3f47-919f-9836-e8cd5d8df2da&quot;</span>,<span class="hljs-string">&quot;upstream_host&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:80&quot;</span>,<span class="hljs-string">&quot;x_forwarded_for&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;requested_server_name&quot;</span>:<span class="hljs-string">&quot;outbound_.8000_._.httpbin.default.svc.cluster.local&quot;</span>,<span class="hljs-string">&quot;bytes_received&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>下面我们来分析一下对应的日志，envoy的日志主要分为下面的部分</p><p><img src="/img/2020-12-05-Get-Envoy-access-log-of-istio-entry-series/1.png" alt="upload-image"> </p><p>sleep客户端的日志格式化如下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br><span class="hljs-string">&quot;bytes_sent&quot;</span>: <span class="hljs-string">&quot;135&quot;</span>,<br><span class="hljs-string">&quot;upstream_cluster&quot;</span>: <span class="hljs-string">&quot;outbound|8000||httpbin.default.svc.cluster.local&quot;</span>,<br><span class="hljs-string">&quot;downstream_remote_address&quot;</span>: <span class="hljs-string">&quot;10.0.1.38:35842&quot;</span>,  <span class="hljs-meta">#客户端sleep的podip+随机端口</span><br><span class="hljs-string">&quot;authority&quot;</span>: <span class="hljs-string">&quot;httpbin:8000&quot;</span>,<br><span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/status/418&quot;</span>,<br><span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;HTTP/1.1&quot;</span>,<br><span class="hljs-string">&quot;upstream_service_time&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br><span class="hljs-string">&quot;upstream_local_address&quot;</span>: <span class="hljs-string">&quot;10.0.1.38:41142&quot;</span>,  <span class="hljs-meta">#服务端httpbin的podip+随机端口</span><br><span class="hljs-string">&quot;duration&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br><span class="hljs-string">&quot;upstream_transport_failure_reason&quot;</span>: <span class="hljs-string">&quot;-&quot;</span>,<br><span class="hljs-string">&quot;route_name&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br><span class="hljs-string">&quot;downstream_local_address&quot;</span>: <span class="hljs-string">&quot;172.16.22.210:8000&quot;</span>,  <span class="hljs-meta">#服务端httpbin的svcip</span><br><span class="hljs-string">&quot;user_agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span>,<br><span class="hljs-string">&quot;response_code&quot;</span>: <span class="hljs-string">&quot;418&quot;</span>,<br><span class="hljs-string">&quot;response_flags&quot;</span>: <span class="hljs-string">&quot;-&quot;</span>,<br><span class="hljs-string">&quot;start_time&quot;</span>: <span class="hljs-string">&quot;2020-12-08T03:24:22.162Z&quot;</span>,<br><span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br><span class="hljs-string">&quot;request_id&quot;</span>: <span class="hljs-string">&quot;b6d7d73c-3f47-919f-9836-e8cd5d8df2da&quot;</span>,<br><span class="hljs-string">&quot;upstream_host&quot;</span>: <span class="hljs-string">&quot;10.0.1.41:80&quot;</span>,  <span class="hljs-meta"># 服务端的podip和端口</span><br><span class="hljs-string">&quot;x_forwarded_for&quot;</span>: <span class="hljs-string">&quot;-&quot;</span>,<br><span class="hljs-string">&quot;requested_server_name&quot;</span>: <span class="hljs-string">&quot;-&quot;</span>,<br><span class="hljs-string">&quot;bytes_received&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br><span class="hljs-string">&quot;istio_policy_status&quot;</span>: <span class="hljs-string">&quot;-&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>httpbin服务端的日志格式化如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;istio_policy_status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;bytes_sent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;135&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;upstream_cluster&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inbound|8000|http|httpbin.default.svc.cluster.local&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;downstream_remote_address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.0.1.38:41142&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;authority&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;httpbin:8000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/status/418&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HTTP/1.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;upstream_service_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;upstream_local_address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1:48374&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;upstream_transport_failure_reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;route_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;downstream_local_address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.0.1.41:80&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;user_agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;curl/7.69.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;response_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;418&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;response_flags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-12-08T03:24:22.162Z&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;request_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;b6d7d73c-3f47-919f-9836-e8cd5d8df2da&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;upstream_host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1:80&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;x_forwarded_for&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;requested_server_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;outbound_.8000_._.httpbin.default.svc.cluster.local&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;bytes_received&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个有个非常重要的字段是RESPONSE_FLAGS，主要有以下几种含义</p><ul><li>UH：upstream cluster 中没有健康的 host，503</li><li>UF：upstream 连接失败，503</li><li>UO：upstream overflow（熔断）</li><li>NR：没有路由配置，404</li><li>URX：请求被拒绝因为限流或最大连接次数</li></ul>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Envoy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之prometheus和grafana</title>
    <link href="/2020/12/04/2020-12-04-prometheus-and-grafana-of-istio-entry-series/"/>
    <url>/2020/12/04/2020-12-04-prometheus-and-grafana-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>通过demo方式部署istio，会默认部署promethes和grafana来作为指标的监控和展示，我们可以把promethes和grafana对应的service通过nodeport的方式来进行访问。</p><h1 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h1><p>浏览器上输入 <a href="http://node_ip:nodeport/graph，在查询框中输入istio_requests_total查看指标">http://node_ip:nodeport/graph，在查询框中输入istio_requests_total查看指标</a></p><p><img src="/img/2020-12-04-prometheus-and-grafana-of-istio-entry-series/1.png" alt="upload-image"> </p><p>其他查询：</p><ul><li>请求 productpage 服务的总次数：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">istio_requests_total&#123;destination_service<span class="hljs-operator">=</span><span class="hljs-string">&quot;productpage.default.svc.cluster.local&quot;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>请求 reviews 服务 V3 版本的总次数：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">istio_requests_total&#123;<span class="hljs-attribute">destination_service</span>=<span class="hljs-string">&quot;reviews.default.svc.cluster.local&quot;</span>, <span class="hljs-attribute">destination_version</span>=<span class="hljs-string">&quot;v3&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>该查询返回所有请求 reviews 服务 v3 版本的当前总次数。</p><ul><li>过去 5 分钟 productpage 服务所有实例的请求频次：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">rate</span><span class="hljs-params">(istio_requests_total&#123;destination_service=~<span class="hljs-string">&quot;productpage.*&quot;</span>, response_code=<span class="hljs-string">&quot;200&quot;</span>&#125;[<span class="hljs-number">5</span>m])</span></span><br></code></pre></td></tr></table></figure><p>这里我们有一些常用的istio指标</p><ul><li>请求数（istio_requests_total）</li><li>请求时长（istio_request_duration_milliseconds）</li><li>请求大小（istio_request_bytes）</li><li>响应大小（istio_response_bytes）</li><li>TCP 发送字节数（istio_tcp_sent_bytes_total）</li><li>TCP 接受字节数（istio_tcp_received_bytes_total）</li><li>TCP 连接打开数（istio_tcp_connections_opened_total）</li><li>TCP 连接关闭数（istio_tcp_connections_closed_total）</li></ul><h1 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h1><p>浏览器上输入 <a href="http://node_ip:nodeport，查看grafana展示界面，这里对应的nodeport是grafana的service所对应的。">http://node_ip:nodeport，查看grafana展示界面，这里对应的nodeport是grafana的service所对应的。</a></p><p>grafana默认提供了以下几个dashboard</p><p><img src="/img/2020-12-04-prometheus-and-grafana-of-istio-entry-series/2.png" alt="upload-image"> </p><p>我们访问bookinfo的界面，可以在mesh的dashboard查看到流量的变化情况</p><p><img src="/img/2020-12-04-prometheus-and-grafana-of-istio-entry-series/4.png" alt="upload-image"> </p><p>service dashboard给出了服务，以及更进一步的服务的客户端工作负载（调用该服务的工作负载）和服务工作负载（提供该服务的工作负载）的详细指标</p><p><img src="/img/2020-12-04-prometheus-and-grafana-of-istio-entry-series/3.png" alt="upload-image"> </p><p>workload dashboard给出了每一个工作负载，以及更进一步的该工作负载的入站工作负载（将请求发送到该工作负载的工作负载）和出站服务（此工作负载向其发送请求的服务）的详细指标。</p><p><img src="/img/2020-12-04-prometheus-and-grafana-of-istio-entry-series/5.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Promnetheus</tag>
      
      <tag>Grafana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之Kiali网络可视化</title>
    <link href="/2020/12/04/2020-12-04-Kiali-network-visualization-of-istio-entry-series/"/>
    <url>/2020/12/04/2020-12-04-Kiali-network-visualization-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>Kiali组件，使用基于 Web 的图形用户界面来查看网格和 Istio 配置对象的服务图。 使用 Kiali Public API 返回的 JSON 数据生成图形数据。</p><p>Kiali拥有如下的功能</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/1.png" alt="upload-image"> </p><p>Kiali的架构如下</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/2.png" alt="upload-image"> </p><p>istio中的组件web界面命令行打开方式</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[root@VM-0-13-centos treafik]</span># istioctl dashboard<br>Access to Istio web UIs<br><br>Usage:<br>  istioctl dashboard <span class="hljs-comment">[flags]</span><br>  istioctl dashboard <span class="hljs-comment">[command]</span><br><br>Aliases:<br>  dashboard, dash, d<br><br>Available Commands:<br>  controlz    <span class="hljs-keyword">Open</span> ControlZ web UI<br>  envoy       <span class="hljs-keyword">Open</span> Envoy admin web UI<br>  grafana     <span class="hljs-keyword">Open</span> Grafana web UI<br>  jaeger      <span class="hljs-keyword">Open</span> Jaeger web UI<br>  kiali       <span class="hljs-keyword">Open</span> Kiali web UI<br>  prometheus  <span class="hljs-keyword">Open</span> Prometheus web UI<br>  zipkin      <span class="hljs-keyword">Open</span> Zipkin web UI<br><br></code></pre></td></tr></table></figure><p>进入web界面，我们可以在Application中查看应用情况</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/3.png" alt="upload-image"> </p><p>可以到Graph中查看对应服务的调用拓扑图</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/4.png" alt="upload-image"> </p><p>可以在service中查看对应的service情况和所配置的VirtualService和DestinationRule</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/5.png" alt="upload-image"> </p><p>我们还可以在service中查看对应服务的访问情况</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/6.png" alt="upload-image"> </p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/7.png" alt="upload-image"> </p><p>我们还可以对istio的配置进行检查，我们在istio config页面对istio的配置进行检查修改，查看到有红色感叹号的说明配置异常，点击进去看</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/8.png" alt="upload-image"> </p><p>我们按照提示修改后然后保存重新加载即可</p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/9.png" alt="upload-image"> </p><p><img src="/img/2020-12-04-Kiali-network-visualization-of-istio-entry-series/10.png" alt="upload-image"> </p><p>这里修改后，这个DestinationRule显示正常</p><p>删除kiali的方式，可以执行如下命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">delete</span> <span class="hljs-keyword">all</span>,secrets,<span class="hljs-keyword">sa</span>,configmaps,deployments,ingresses,clusterroles,clusterrolebindings,customresourcedefinitions --selector=app=kiali -n istio-<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Kiali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之流量镜像</title>
    <link href="/2020/12/03/2020-12-03-Traffic-mirroring-of-istio-entry-series/"/>
    <url>/2020/12/03/2020-12-03-Traffic-mirroring-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>流量镜像，也称为影子流量，是一个以尽可能低的风险为生产带来变化的强大的功能。镜像会将实时流量的副本发送到镜像服务。镜像流量发生在主服务的关键请求路径之外。</p><p><img src="/img/2020-12-03-Traffic-mirroring-of-istio-entry-series/1.png" alt="upload-image"> </p><p>我们会经常遇到一些这样的问题，就是在本地测试是正常的，一上线就出问题了，测试覆盖率很高，但是为什么，还是会出现问题，这是因为线上的访问环境和本地有很大差异，特别是流量和数据。这里我们可以用流量镜像来解决这个问题。</p><p>首先部署2个httpbin的版本，把流量全部路由到v1版本的测试服务。然后，执行规则将一部分流量镜像到v2版本</p><p>httpbin-v1</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt;EOF | istioctl kube-inject -f - | kubectl create -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin-v1</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>      <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">image: docker.io/kennethreitz/httpbin</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;gunicorn&quot;, &quot;--access-logfile&quot;, &quot;-&quot;, &quot;-b&quot;, &quot;0.0.0.0:80&quot;, &quot;httpbin:app&quot;]</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>EOF<br></code></pre></td></tr></table></figure><p>httpbin-v2</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt;EOF | istioctl kube-inject -f - | kubectl create -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin-v2</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>      <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">image: docker.io/kennethreitz/httpbin</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;gunicorn&quot;, &quot;--access-logfile&quot;, &quot;-&quot;, &quot;-b&quot;, &quot;0.0.0.0:80&quot;, &quot;httpbin:app&quot;]</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>EOF<br></code></pre></td></tr></table></figure><p>查看下pod的运行情况,这里v1和v2版本都已经运行</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl get pod  | grep httpbin-v<br>httpbin-v1<span class="hljs-string">-649</span>dfb4766-kscz5       2/2     Running   0          51s<br>httpbin-v2<span class="hljs-string">-76</span>dcc56c5<span class="hljs-string">-99</span>q65        2/2     Running   0          26s<br></code></pre></td></tr></table></figure><p>接下来我们给httpbin部署一个service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>部署一个sleep服务用来执行curl请求</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt;EOF | istioctl kube-inject -f - | kubectl create -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sleep</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sleep</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sleep</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: sleep</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tutum/curl</span><br>        <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;/bin/sleep&quot;,&quot;infinity&quot;]</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>EOF<br></code></pre></td></tr></table></figure><p>默认svc会将流量负载到v1和v2版本，这里我们配置将流量只转发到v1版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>下面我们来对httpbin发起请求来测试一下</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@<span class="hljs-symbol">VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b7bf56c54-krj9n -c sleep -- sh -c <span class="hljs-string">&#x27;curl  http://httpbin:8000/headers&#x27;</span> | python -m json.tool<br>&#123;<br>    <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin:8000&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;fe987c2ce7e2b1ed&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;2ad53d6b71ccbc6c&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;ebc0ec67ece15107fe987c2ce7e2b1ed&quot;</span>,<br>        <span class="hljs-string">&quot;X-Forwarded-Client-Cert&quot;</span>: <span class="hljs-string">&quot;By=spiffe://cluster.local/ns/default/sa/default;Hash=fc446005ac6e411b601b432459d05464eb3355fb081401eddce96ee810a5074a;Subject=\&quot;\&quot;;URI=spiffe://cluster.local/ns/default/sa/sleep&quot;</span><br>    &#125;<br>&#125;<br>[root@<span class="hljs-symbol">VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl logs -f httpbin-v1<span class="hljs-number">-649</span>dfb4766-kscz5 -c httpbin<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Starting</span> gunicorn <span class="hljs-number">19.9</span><span class="hljs-number">.0</span><br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Listening</span> at: http://<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span> (<span class="hljs-number">1</span>)<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Using</span> worker: sync<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">9</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Booting</span> worker with pid: <span class="hljs-number">9</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">07</span>/<span class="hljs-symbol">Dec</span>/<span class="hljs-number">2020</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;GET /headers HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">516</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.69.1&quot;</span><br><br><br><br>[root@<span class="hljs-symbol">VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl logs -f httpbin-v2<span class="hljs-number">-76</span>dcc56c5<span class="hljs-number">-99</span>q65 -c httpbin<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Starting</span> gunicorn <span class="hljs-number">19.9</span><span class="hljs-number">.0</span><br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Listening</span> at: http://<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span> (<span class="hljs-number">1</span>)<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Using</span> worker: sync<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">8</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Booting</span> worker with pid: <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>从上面的日志可以发下，只有httpbin v1中有产生日志，这里说明流量只转发到v1版本，接下来我们改变流量规则将流量镜像到v2</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attribute">weight</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br>    <span class="hljs-attribute">mirror</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>      <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attribute">mirror_percent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br>EOF<br></code></pre></td></tr></table></figure><p>这个路由规则发送 100% 流量到 v1。最后一段mirror字段表示你将镜像流量到 httpbin:v2 服务。当流量被镜像时，请求将发送到镜像服务中，并在 headers 中的 Host&#x2F;Authority 属性值上追加 -shadow。例如cluster-1变为cluster-1-shadow。</p><p>此外，重点注意这些被镜像的流量是『即发即弃』的，就是说镜像请求的响应会被丢弃。</p><p>您可以使用mirror_percent属性来设置镜像流量的百分比，而不是镜像全部请求。为了兼容老版本，如果这个属性不存在，将镜像所有流量。</p><p>下面我们来进行测试下，对httpbin发起请求，看看v1和v2版本是否会收到请求</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@<span class="hljs-symbol">VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl exec -it sleep<span class="hljs-number">-5</span>b7bf56c54-krj9n -c sleep -- sh -c <span class="hljs-string">&#x27;curl  http://httpbin:8000/headers&#x27;</span> | python -m json.tool<br>&#123;<br>    <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin:8000&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;cb8d626990ce882b&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;3f57b73d4468f2a2&quot;</span>,<br>        <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;a61409e7f4c4d713cb8d626990ce882b&quot;</span>,<br>        <span class="hljs-string">&quot;X-Forwarded-Client-Cert&quot;</span>: <span class="hljs-string">&quot;By=spiffe://cluster.local/ns/default/sa/httpbin;Hash=fc446005ac6e411b601b432459d05464eb3355fb081401eddce96ee810a5074a;Subject=\&quot;\&quot;;URI=spiffe://cluster.local/ns/default/sa/sleep&quot;</span><br>    &#125;<br>&#125;<br>[root@<span class="hljs-symbol">VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl logs -f httpbin-v1<span class="hljs-number">-649</span>dfb4766-kscz5 -c httpbin<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Starting</span> gunicorn <span class="hljs-number">19.9</span><span class="hljs-number">.0</span><br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Listening</span> at: http://<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span> (<span class="hljs-number">1</span>)<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Using</span> worker: sync<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">9</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Booting</span> worker with pid: <span class="hljs-number">9</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">07</span>/<span class="hljs-symbol">Dec</span>/<span class="hljs-number">2020</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;GET /headers HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">516</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.69.1&quot;</span><br>^<span class="hljs-symbol">C</span><br>[root@<span class="hljs-symbol">VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl logs -f httpbin-v2<span class="hljs-number">-76</span>dcc56c5<span class="hljs-number">-99</span>q65 -c httpbin<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Starting</span> gunicorn <span class="hljs-number">19.9</span><span class="hljs-number">.0</span><br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Listening</span> at: http://<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span> (<span class="hljs-number">1</span>)<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">1</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Using</span> worker: sync<br>[<span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-07</span> <span class="hljs-number">02</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0000</span>] [<span class="hljs-number">8</span>] [<span class="hljs-symbol">INFO</span>] <span class="hljs-symbol">Booting</span> worker with pid: <span class="hljs-number">8</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">07</span>/<span class="hljs-symbol">Dec</span>/<span class="hljs-number">2020</span>:<span class="hljs-number">03</span>:<span class="hljs-number">06</span>:<span class="hljs-number">36</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;GET /headers HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">556</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.69.1&quot;</span><br></code></pre></td></tr></table></figure><p>可以发现，我们对httpbin发起访问，v1和v2版本日志都会打印，说明都会有流量进来，如果需要检查内部流量，我们可以通过如下方法</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># export SLEEP_POD=$(kubectl get pod -l app=sleep -o jsonpath=&#123;.items..metadata.name&#125;)</span><br>[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># export V1_POD_IP=$(kubectl get pod -l app=httpbin,version=v1 -o jsonpath=&#123;.items..status.podIP&#125;)</span><br>[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># export V2_POD_IP=$(kubectl get pod -l app=httpbin,version=v2 -o jsonpath=&#123;.items..status.podIP&#125;)</span><br>[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl exec -it $SLEEP_POD -c istio-proxy -- sudo tcpdump -A -s 0 host $V1_POD_IP or host $V2_POD_IP</span><br><span class="hljs-section">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br>listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes<br><span class="hljs-section">05:47:50.159513 IP sleep-7b9f8bfcd-2djx5.38836 &gt; 10-233-75-11.httpbin.default.svc.cluster.local.80: Flags [P.], seq 4039989036:4039989832, ack 3139734980, win 254, options [nop,nop,TS val 77427918 ecr 76730809], length 796: HTTP: GET /headers HTTP/1.1</span><br>E..P2.X.X.X.<br>.K.<br>.K....P..W,.$.......+.....<br>..t.....GET /headers HTTP/1.1<br><span class="hljs-section">host: httpbin:8000</span><br><span class="hljs-section">user-agent: curl/7.35.0</span><br><span class="hljs-section">accept: */*</span><br><span class="hljs-section">x-forwarded-proto: http</span><br><span class="hljs-section">x-request-id: 571c0fd6-98d4-4c93-af79-6a2fe2945847</span><br><span class="hljs-section">x-envoy-decorator-operation: httpbin.default.svc.cluster.local:8000/*</span><br><span class="hljs-section">x-b3-traceid: 82f3e0a76dcebca2</span><br><span class="hljs-section">x-b3-spanid: 82f3e0a76dcebca2</span><br><span class="hljs-section">x-b3-sampled: 0</span><br><span class="hljs-section">x-istio-attributes: Cj8KGGRlc3RpbmF0aW9uLnNlcnZpY2UuaG9zdBIjEiFodHRwYmluLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwKPQoXZGVzdGluYXRpb24uc2VydmljZS51aWQSIhIgaXN0aW86Ly9kZWZhdWx0L3NlcnZpY2VzL2h0dHBiaW4KKgodZGVzdGluYXRpb24uc2VydmljZS5uYW1lc3BhY2USCRIHZGVmYXVsdAolChhkZXN0aW5hdGlvbi5zZXJ2aWNlLm5hbWUSCRIHaHR0cGJpbgo6Cgpzb3VyY2UudWlkEiwSKmt1YmVybmV0ZXM6Ly9zbGVlcC03YjlmOGJmY2QtMmRqeDUuZGVmYXVsdAo6ChNkZXN0aW5hdGlvbi5zZXJ2aWNlEiMSIWh0dHBiaW4uZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbA==</span><br><span class="hljs-section">content-length: 0</span><br><br><br><span class="hljs-section">05:47:50.159609 IP sleep-7b9f8bfcd-2djx5.49560 &gt; 10-233-71-7.httpbin.default.svc.cluster.local.80: Flags [P.], seq 296287713:296288571, ack 4029574162, win 254, options [nop,nop,TS val 77427918 ecr 76732809], length 858: HTTP: GET /headers HTTP/1.1</span><br>E.....X.X...<br>.K.<br>.G....P......l......e.....<br>..t.....GET /headers HTTP/1.1<br><span class="hljs-section">host: httpbin-shadow:8000</span><br><span class="hljs-section">user-agent: curl/7.35.0</span><br><span class="hljs-section">accept: */*</span><br><span class="hljs-section">x-forwarded-proto: http</span><br><span class="hljs-section">x-request-id: 571c0fd6-98d4-4c93-af79-6a2fe2945847</span><br><span class="hljs-section">x-envoy-decorator-operation: httpbin.default.svc.cluster.local:8000/*</span><br><span class="hljs-section">x-b3-traceid: 82f3e0a76dcebca2</span><br><span class="hljs-section">x-b3-spanid: 82f3e0a76dcebca2</span><br><span class="hljs-section">x-b3-sampled: 0</span><br><span class="hljs-section">x-istio-attributes: Cj8KGGRlc3RpbmF0aW9uLnNlcnZpY2UuaG9zdBIjEiFodHRwYmluLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwKPQoXZGVzdGluYXRpb24uc2VydmljZS51aWQSIhIgaXN0aW86Ly9kZWZhdWx0L3NlcnZpY2VzL2h0dHBiaW4KKgodZGVzdGluYXRpb24uc2VydmljZS5uYW1lc3BhY2USCRIHZGVmYXVsdAolChhkZXN0aW5hdGlvbi5zZXJ2aWNlLm5hbWUSCRIHaHR0cGJpbgo6Cgpzb3VyY2UudWlkEiwSKmt1YmVybmV0ZXM6Ly9zbGVlcC03YjlmOGJmY2QtMmRqeDUuZGVmYXVsdAo6ChNkZXN0aW5hdGlvbi5zZXJ2aWNlEiMSIWh0dHBiaW4uZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbA==</span><br><span class="hljs-section">x-envoy-internal: true</span><br><span class="hljs-section">x-forwarded-for: 10.233.75.12</span><br><span class="hljs-section">content-length: 0</span><br><br><br><span class="hljs-section">05:47:50.166734 IP 10-233-75-11.httpbin.default.svc.cluster.local.80 &gt; sleep-7b9f8bfcd-2djx5.38836: Flags [P.], seq 1:472, ack 796, win 276, options [nop,nop,TS val 77427925 ecr 77427918], length 471: HTTP: HTTP/1.1 200 OK</span><br>E....3X.?...<br>.K.<br>.K..P...$....ZH...........<br>..t...t.HTTP/1.1 200 OK<br><span class="hljs-section">server: envoy</span><br><span class="hljs-section">date: Fri, 15 Feb 2019 05:47:50 GMT</span><br><span class="hljs-section">content-type: application/json</span><br><span class="hljs-section">content-length: 241</span><br><span class="hljs-section">access-control-allow-origin: *</span><br><span class="hljs-section">access-control-allow-credentials: true</span><br><span class="hljs-section">x-envoy-upstream-service-time: 3</span><br><br>&#123;<br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin:8000&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.35.0&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;82f3e0a76dcebca2&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;82f3e0a76dcebca2&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-section">05:47:50.166789 IP sleep-7b9f8bfcd-2djx5.38836 &gt; 10-233-75-11.httpbin.default.svc.cluster.local.80: Flags [.], ack 472, win 262, options [nop,nop,TS val 77427925 ecr 77427925], length 0</span><br>E..42.X.X.\.<br>.K.<br>.K....P..ZH.$.............<br>..t...t.<br><span class="hljs-section">05:47:50.167234 IP 10-233-71-7.httpbin.default.svc.cluster.local.80 &gt; sleep-7b9f8bfcd-2djx5.49560: Flags [P.], seq 1:512, ack 858, win 280, options [nop,nop,TS val 77429926 ecr 77427918], length 511: HTTP: HTTP/1.1 200 OK</span><br>E..3..X.&gt;...<br>.G.<br>.K..P....l....;...........<br>..|...t.HTTP/1.1 200 OK<br><span class="hljs-section">server: envoy</span><br><span class="hljs-section">date: Fri, 15 Feb 2019 05:47:49 GMT</span><br><span class="hljs-section">content-type: application/json</span><br><span class="hljs-section">content-length: 281</span><br><span class="hljs-section">access-control-allow-origin: *</span><br><span class="hljs-section">access-control-allow-credentials: true</span><br><span class="hljs-section">x-envoy-upstream-service-time: 3</span><br><br>&#123;<br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin-shadow:8000&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.35.0&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;82f3e0a76dcebca2&quot;</span>,<br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;82f3e0a76dcebca2&quot;</span>,<br>    <span class="hljs-string">&quot;X-Envoy-Internal&quot;</span>: <span class="hljs-string">&quot;true&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-section">05:47:50.167253 IP sleep-7b9f8bfcd-2djx5.49560 &gt; 10-233-71-7.httpbin.default.svc.cluster.local.80: Flags [.], ack 512, win 262, options [nop,nop,TS val 77427926 ecr 77429926], length 0</span><br>E..4..X.X...<br>.K.<br>.G....P...;..n............<br>..t...|.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之故障注入</title>
    <link href="/2020/12/02/2020-12-02-Fault-injection-of-istio-entry-series/"/>
    <url>/2020/12/02/2020-12-02-Fault-injection-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本篇文章讲解了istio如何注入故障并测试应用程序的弹性。</p><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/1.png" alt="upload-image"> </p><h1 id="延迟故障"><a href="#延迟故障" class="headerlink" title="延迟故障"></a>延迟故障</h1><p>下面我们来进行故障注入的配置，我们给ratings的v2版本注入一个延迟，这里导致调用出现延迟故障。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml</span><br>virtualservice.networking.istio.io/productpage unchanged<br>virtualservice.networking.istio.io/reviews configured<br>virtualservice.networking.istio.io/ratings configured<br>virtualservice.networking.istio.io/details unchanged<br>[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml</span><br>virtualservice.networking.istio.io/reviews configured<br></code></pre></td></tr></table></figure><p>经过上面的配置，下面是请求的流程：</p><ul><li>productpage → reviews:v2 → ratings (针对 jason 用户)</li><li>productpage → reviews:v1 (其他用户)</li></ul><p>我们来测试下是否生效，我们刷新页面发现没有登录的是没有星标的v1版本</p><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/2.png" alt="upload-image"> </p><p>登录jason用户查看到的是v2版本</p><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/3.png" alt="upload-image"> </p><p>下面我们配置一下延迟</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-ratings-test-delay.yaml</span><br><span class="hljs-string">virtualservice.networking.istio.io/ratings</span> <span class="hljs-string">configured</span><br>[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># cat samples/bookinfo/networking/virtual-service-ratings-test-delay.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">end-user:</span><br>          <span class="hljs-attr">exact:</span> <span class="hljs-string">jason</span><br>    <span class="hljs-attr">fault:</span><br>      <span class="hljs-attr">delay:</span><br>        <span class="hljs-attr">percentage:</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-number">100.0</span><br>        <span class="hljs-attr">fixedDelay:</span> <span class="hljs-string">7s</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/4.png" alt="upload-image"> </p><p>刷新页面出现了错误，这是因为延迟超过了硬编码的时间，我们推出jason用户发现又会恢复正常。</p><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/5.png" alt="upload-image"> </p><p>从上面的故障注入可以发下，是配置在VirtualService中，配置的字段是fault，我们在这里配置的是延迟故障，其实fault还有一种故障叫abort（终止），下面我们来配置下终止故障。</p><h1 id="终止故障"><a href="#终止故障" class="headerlink" title="终止故障"></a>终止故障</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-ratings-test-abort.yaml</span><br><span class="hljs-string">virtualservice.networking.istio.io/ratings</span> <span class="hljs-string">configured</span><br>[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># cat samples/bookinfo/networking/virtual-service-ratings-test-abort.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">end-user:</span><br>          <span class="hljs-attr">exact:</span> <span class="hljs-string">jason</span><br>    <span class="hljs-attr">fault:</span><br>      <span class="hljs-attr">abort:</span><br>        <span class="hljs-attr">percentage:</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-number">100.0</span><br>        <span class="hljs-attr">httpStatus:</span> <span class="hljs-number">500</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure><p>使用用户jason登陆到&#x2F;productpage 页面。如果规则成功传播到所有的 pod，您应该能立即看到页面加载并看到 Ratings service is currently unavailable 消息。</p><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/6.png" alt="upload-image"> </p><p>如果您注销用户 jason 或在匿名窗口（或其他浏览器）中打开 Bookinfo 应用程序， 您将看到 &#x2F;productpage 为除 jason 以外的其他用户调用了 reviews:v1（完全不调用 ratings）。 因此，您不会看到任何错误消息。</p><p><img src="/img/2020-12-02-Fault-injection-of-istio-entry-series/7.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之熔断</title>
    <link href="/2020/12/02/2020-12-02-Fuse-of-istio-entry-series/"/>
    <url>/2020/12/02/2020-12-02-Fuse-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>熔断，是创建弹性微服务应用程序的重要模式。熔断能够使您的应用程序具备应对来自故障、潜在峰值和其他未知网络因素影响的能力。</p><p><img src="/img/2020-12-02-Fuse-of-istio-entry-series/1.png" alt="upload-image"> </p><p>下面我们给httpbin来配置一个熔断，首先配置一个httpbin服务</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># kubectl apply -f samples<span class="hljs-regexp">/httpbin/</span>httpbin.yaml<br></code></pre></td></tr></table></figure><p>接下来我们给httpbin配置一个熔断</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>  <span class="hljs-attribute">trafficPolicy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">connectionPool</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">tcp</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">maxConnections</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>      <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">http1MaxPendingRequests</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>        <span class="hljs-attribute">maxRequestsPerConnection</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>    <span class="hljs-attribute">outlierDetection</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">consecutiveErrors</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1s</span><br>      <span class="hljs-attribute">baseEjectionTime</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3m</span><br>      <span class="hljs-attribute">maxEjectionPercent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br>EOF<br></code></pre></td></tr></table></figure><p>创建客户端程序以发送流量到 httpbin 服务。这是一个名为 Fortio 的负载测试客户的，其可以控制连接数、并发数及发送 HTTP 请求的延迟。通过 Fortio 能够有效的触发前面 在 DestinationRule 中设置的熔断策略</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl apply -f samples/httpbin/sample-client/fortio-deploy.yaml<br>service/fortio created<br>deployment.apps/fortio-deploy created<br><br>[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl get pod | grep fortio<br>fortio-deploy<span class="hljs-string">-6</span>dc9b4d7d9<span class="hljs-string">-9</span>x5z7    2/2     Running   0          43s<br></code></pre></td></tr></table></figure><p>下面我们测试下通过fortio来给httpbin发送请求</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl exec -it fortio-deploy<span class="hljs-number">-6</span>dc9b4d7d9<span class="hljs-number">-9</span>x5z7  -c fortio /usr/bin/fortio <span class="hljs-comment">-- load -curl  http://httpbin:8000/get</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-keyword">server</span>: envoy<br><span class="hljs-type">date</span>: Fri, <span class="hljs-number">04</span> <span class="hljs-type">Dec</span> <span class="hljs-number">2020</span> <span class="hljs-number">12</span>:<span class="hljs-number">17</span>:<span class="hljs-number">57</span> GMT<br>content-<span class="hljs-keyword">type</span>: application/<span class="hljs-type">json</span><br>content-length: <span class="hljs-number">587</span><br><span class="hljs-keyword">access</span>-control-allow-origin: *<br><span class="hljs-keyword">access</span>-control-allow-credentials: <span class="hljs-keyword">true</span><br>x-envoy-upstream-service-<span class="hljs-type">time</span>: <span class="hljs-number">37</span><br><br>&#123;<br>  &quot;args&quot;: &#123;&#125;,<br>  &quot;headers&quot;: &#123;<br>    &quot;Content-Length&quot;: &quot;0&quot;,<br>    &quot;Host&quot;: &quot;httpbin:8000&quot;,<br>    &quot;User-Agent&quot;: &quot;fortio.org/fortio-1.11.3&quot;,<br>    &quot;X-B3-Parentspanid&quot;: &quot;070afd311a4e532b&quot;,<br>    &quot;X-B3-Sampled&quot;: &quot;1&quot;,<br>    &quot;X-B3-Spanid&quot;: &quot;b3369d3b27c55b85&quot;,<br>    &quot;X-B3-Traceid&quot;: &quot;f08dc74221df6d07070afd311a4e532b&quot;,<br>    &quot;X-Forwarded-Client-Cert&quot;: &quot;By=spiffe://cluster.local/ns/default/sa/httpbin;Hash=2c501c6908e66700666a37f904f60943d6621533226c6d4890d691dbe3cef78b;Subject=\&quot;\&quot;;URI=spiffe://cluster.local/ns/default/sa/default&quot;<br>  &#125;,<br>  &quot;origin&quot;: &quot;127.0.0.1&quot;,<br>  &quot;url&quot;: &quot;http://httpbin:8000/get&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 DestinationRule 配置中，您定义了 maxConnections: 1 和 http1MaxPendingRequests: 1。 这些规则意味着，如果并发的连接和请求数超过一个，在 istio-proxy 进行进一步的请求和连接时，后续请求或 连接将被阻止。</p><p>下面我们来测试下发送并发数为 2 的连接（-c 2），请求 20 次（-n 20）</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl exec -it fortio-deploy-6dc9b4d7d9-9x5z7  -c fortio -- /usr/bin/fortio load -c 2 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get</span><br>12:20:12 I logger.go:127&gt; Log level is now<span class="hljs-number"> 3 </span>Warning (was<span class="hljs-number"> 2 </span>Info)<br>Fortio 1.11.3 running at<span class="hljs-number"> 0 </span>queries per second, 4-&gt;4 procs, for<span class="hljs-number"> 20 </span>calls: http://httpbin:8000/get<br>Starting at max qps with<span class="hljs-number"> 2 </span>thread(s) [gomax 4] for exactly<span class="hljs-number"> 20 </span>calls (10 per thread + 0)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:20:12 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>Ended after 51.733608ms :<span class="hljs-number"> 20 </span>calls. qps=386.6<br>Aggregated Function Time : count<span class="hljs-number"> 20 </span>avg 0.0050693187 +/- 0.009171 min 0.000166044 max 0.034073146 sum 0.101386374<br><span class="hljs-comment"># range, mid point, percentile, count</span><br>&gt;= 0.000166044 &lt;= 0.001 , 0.000583022 , 40.00, 8<br>&gt; 0.002 &lt;= 0.003 , 0.0025 , 55.00, 3<br>&gt; 0.003 &lt;= 0.004 , 0.0035 , 80.00, 5<br>&gt; 0.004 &lt;= 0.005 , 0.0045 , 85.00, 1<br>&gt; 0.006 &lt;= 0.007 , 0.0065 , 90.00, 1<br>&gt; 0.025 &lt;= 0.03 , 0.0275 , 95.00, 1<br>&gt; 0.03 &lt;= 0.0340731 , 0.0320366 , 100.00, 1<br><span class="hljs-comment"># target 50% 0.00266667</span><br><span class="hljs-comment"># target 75% 0.0038</span><br><span class="hljs-comment"># target 90% 0.007</span><br><span class="hljs-comment"># target 99% 0.0332585</span><br><span class="hljs-comment"># target 99.9% 0.0339917</span><br>Sockets used:<span class="hljs-number"> 11 </span>(for perfect keepalive, would be 2)<br>Jitter: false<br>Code<span class="hljs-number"> 200 </span>:<span class="hljs-number"> 11 </span>(55.0 %)<br>Code<span class="hljs-number"> 503 </span>:<span class="hljs-number"> 9 </span>(45.0 %)<br>Response Header Sizes : count<span class="hljs-number"> 20 </span>avg 126.55 +/- 114.5 min<span class="hljs-number"> 0 </span>max<span class="hljs-number"> 231 </span>sum 2531<br>Response Body/Total Sizes : count<span class="hljs-number"> 20 </span>avg 557.85 +/- 286.6 min<span class="hljs-number"> 241 </span>max<span class="hljs-number"> 818 </span>sum 11157<br>All done<span class="hljs-number"> 20 </span>calls (plus<span class="hljs-number"> 0 </span>warmup) 5.069 ms avg, 386.6 qps<br></code></pre></td></tr></table></figure><p>Code 200 : 11 (55.0 %)<br>Code 503 : 9 (45.0 %)<br>这里可以看出有55%的请求是成功的，45%的请求被拦截住了</p><p>我们接着测试下3个并发执行30次</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl exec -it fortio-deploy-6dc9b4d7d9-9x5z7  -c fortio -- /usr/bin/fortio load -c 3 -qps 0 -n 30 -loglevel Warning http://httpbin:8000/get</span><br>12:22:06 I logger.go:127&gt; Log level is now<span class="hljs-number"> 3 </span>Warning (was<span class="hljs-number"> 2 </span>Info)<br>Fortio 1.11.3 running at<span class="hljs-number"> 0 </span>queries per second, 4-&gt;4 procs, for<span class="hljs-number"> 30 </span>calls: http://httpbin:8000/get<br>Starting at max qps with<span class="hljs-number"> 3 </span>thread(s) [gomax 4] for exactly<span class="hljs-number"> 30 </span>calls (10 per thread + 0)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>12:22:06 W http_client.go:693&gt; Parsed non ok code<span class="hljs-number"> 503 </span>(HTTP/1.1 503)<br>Ended after 57.165625ms :<span class="hljs-number"> 30 </span>calls. qps=524.79<br>Aggregated Function Time : count<span class="hljs-number"> 30 </span>avg 0.0035633327 +/- 0.007463 min 0.000232569 max 0.031839734 sum 0.106899982<br><span class="hljs-comment"># range, mid point, percentile, count</span><br>&gt;= 0.000232569 &lt;= 0.001 , 0.000616284 , 46.67, 14<br>&gt; 0.001 &lt;= 0.002 , 0.0015 , 53.33, 2<br>&gt; 0.002 &lt;= 0.003 , 0.0025 , 83.33, 9<br>&gt; 0.003 &lt;= 0.004 , 0.0035 , 86.67, 1<br>&gt; 0.005 &lt;= 0.006 , 0.0055 , 93.33, 2<br>&gt; 0.03 &lt;= 0.0318397 , 0.0309199 , 100.00, 2<br><span class="hljs-comment"># target 50% 0.0015</span><br><span class="hljs-comment"># target 75% 0.00272222</span><br><span class="hljs-comment"># target 90% 0.0055</span><br><span class="hljs-comment"># target 99% 0.0315638</span><br><span class="hljs-comment"># target 99.9% 0.0318121</span><br>Sockets used:<span class="hljs-number"> 17 </span>(for perfect keepalive, would be 3)<br>Jitter: false<br>Code<span class="hljs-number"> 200 </span>:<span class="hljs-number"> 14 </span>(46.7 %)<br>Code<span class="hljs-number"> 503 </span>:<span class="hljs-number"> 16 </span>(53.3 %)<br>Response Header Sizes : count<span class="hljs-number"> 30 </span>avg 107.4 +/- 114.8 min<span class="hljs-number"> 0 </span>max<span class="hljs-number"> 231 </span>sum 3222<br>Response Body/Total Sizes : count<span class="hljs-number"> 30 </span>avg 509.86667 +/- 287.4 min<span class="hljs-number"> 241 </span>max<span class="hljs-number"> 818 </span>sum 15296<br>All done<span class="hljs-number"> 30 </span>calls (plus<span class="hljs-number"> 0 </span>warmup) 3.563 ms avg, 524.8 qps<br></code></pre></td></tr></table></figure><p>Code 200 : 14 (46.7 %)<br>Code 503 : 16 (53.3 %)<br>这里可以看出有46.7%的请求是成功的，53.3%的请求被拦截住了</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs coq">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl exec fortio-deploy<span class="hljs-number">-6</span>dc9b4d7d9<span class="hljs-number">-9</span>x5z7 -c istio-proxy -- pilot-agent request GET stats | <span class="hljs-type">grep</span> httpbin | <span class="hljs-type">grep</span> pending<br>cluster.outbound|<span class="hljs-type">15443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.circuit_breakers.default.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">15443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.circuit_breakers.high.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">15443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_active: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">15443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_failure_eject: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">15443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_overflow: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">15443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_total: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.circuit_breakers.default.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.circuit_breakers.high.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_active: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_failure_eject: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_overflow: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">443</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_total: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">8000</span>|<span class="hljs-type">|httpbin</span>.default.svc.cluster.local.circuit_breakers.default.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">8000</span>|<span class="hljs-type">|httpbin</span>.default.svc.cluster.local.circuit_breakers.high.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">8000</span>|<span class="hljs-type">|httpbin</span>.default.svc.cluster.local.upstream_rq_pending_active: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">8000</span>|<span class="hljs-type">|httpbin</span>.default.svc.cluster.local.upstream_rq_pending_failure_eject: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">8000</span>|<span class="hljs-type">|httpbin</span>.default.svc.cluster.local.upstream_rq_pending_overflow: <span class="hljs-number">25</span><br>cluster.outbound|<span class="hljs-type">8000</span>|<span class="hljs-type">|httpbin</span>.default.svc.cluster.local.upstream_rq_pending_total: <span class="hljs-number">26</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.circuit_breakers.default.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.circuit_breakers.high.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_active: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_failure_eject: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_overflow: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">httpbin</span>|<span class="hljs-type">istio</span>-egressgateway.istio-system.svc.cluster.local.upstream_rq_pending_total: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">|httpbin</span>.org.circuit_breakers.default.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">|httpbin</span>.org.circuit_breakers.high.rq_pending_open: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">|httpbin</span>.org.upstream_rq_pending_active: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">|httpbin</span>.org.upstream_rq_pending_failure_eject: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">|httpbin</span>.org.upstream_rq_pending_overflow: <span class="hljs-number">0</span><br>cluster.outbound|<span class="hljs-type">80</span>|<span class="hljs-type">|httpbin</span>.org.upstream_rq_pending_total: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>cluster.outbound|8000||httpbin.default.svc.cluster.local.upstream_rq_pending_overflow: 25  这意味着，目前为止已有25个调用被标记为熔断</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之超时重试</title>
    <link href="/2020/12/02/2020-12-02-Retry-after-timeout-of-istio-entry-series%E8%AF%95/"/>
    <url>/2020/12/02/2020-12-02-Retry-after-timeout-of-istio-entry-series%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>对于一个系统来说弹性能力很重要，比如出现了超时故障，系统如何去重试，下面我们来讲讲istio中的超时重试。</p><p><img src="/img/2020-12-03-Traffic-mirroring-of-istio-entry-series/1.png" alt="upload-image"> </p><p>下面我们在VirtualService中添加超时和重试的配置项，我们将流量打到v2版本，并且给Ratings服务配置一个延迟。</p><p><img src="/img/2020-12-03-Traffic-mirroring-of-istio-entry-series/2.png" alt="upload-image"> </p><p>首先我们将流量打到v2版本</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>EOF<br></code></pre></td></tr></table></figure><p>页面刷新查看只能查看到有黑色星标的v2版本</p><p><img src="/img/2020-12-03-Traffic-mirroring-of-istio-entry-series/3.png" alt="upload-image"> </p><p>接下来我们给ratings服务注入一个2s的延迟。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fault:</span><br>      <span class="hljs-attribute">delay</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">percent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br>        <span class="hljs-attribute">fixedDelay</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2s</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>EOF<br></code></pre></td></tr></table></figure><p>下面我们给reviews服务注入一个1s超时设置，其实就是配置一个timeout的字段</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1s</span><br>EOF<br></code></pre></td></tr></table></figure><p>我们再进行测试刷新会失败，我们设置的延迟是2s，超时时间是1s，所以这里会失败。</p><p><img src="/img/2020-12-03-Traffic-mirroring-of-istio-entry-series/4.png" alt="upload-image"> </p><p>下面我们来进行重试的配置，首先需要把reviews的超时配置去掉。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>EOF<br></code></pre></td></tr></table></figure><p>接下来，我们给ratings服务配置一下5s的延迟和一个重试2次的配置项retries</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fault:</span><br>      <span class="hljs-attribute">delay</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">percent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br>        <span class="hljs-attribute">fixedDelay</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5s</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">attempts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br>      <span class="hljs-attribute">perTryTimeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1s</span><br>EOF<br></code></pre></td></tr></table></figure><p>下面我们查看一下ratings的istio-proxy的log，看看是不是出现2次重试的日志</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># kubectl logs -f ratings-v<span class="hljs-number">1</span><span class="hljs-number">-6</span>f<span class="hljs-number">855</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>fff<span class="hljs-number">-684</span>lz -<span class="hljs-keyword">c</span> istio-proxy<br></code></pre></td></tr></table></figure><p><img src="/img/2020-12-03-Traffic-mirroring-of-istio-entry-series/5.png" alt="upload-image"> </p><p>这里我们查看日志发现有2次的重试的日志，说明我们重试配置成功。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之流量转移</title>
    <link href="/2020/12/01/2020-12-01-Traffic-shift-of-istio-entry-series/"/>
    <url>/2020/12/01/2020-12-01-Traffic-shift-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>一个常见的用例是将流量从一个版本的微服务逐渐迁移到另一个版本。在 Istio 中，您可以通过配置一系列规则来实现此目标， 这些规则将一定百分比的流量路由到一个或另一个服务。在本任务中，您将会把 50％ 的流量发送到 reviews:v1，另外 50％ 的流量发送到 reviews:v3。然后，再把 100％ 的流量发送到 reviews:v3 来完成迁移。</p><p>istio中的流量转移常用于蓝绿部署中</p><p><img src="/img/2020-12-01-Traffic-shift-of-istio-entry-series/1.png" alt="upload-image"> </p><p>首先我们将访问bokinfo所有的流量都指向v1版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml</span><br><span class="hljs-string">virtualservice.networking.istio.io/productpage</span> <span class="hljs-string">created</span><br><span class="hljs-string">virtualservice.networking.istio.io/reviews</span> <span class="hljs-string">configured</span><br><span class="hljs-string">virtualservice.networking.istio.io/ratings</span> <span class="hljs-string">created</span><br><span class="hljs-string">virtualservice.networking.istio.io/details</span> <span class="hljs-string">created</span><br>[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># cat samples/bookinfo/networking/virtual-service-all-v1.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">productpage</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">productpage</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">details</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">details</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">details</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><p>然后我们把50%的流量转到v1版本，50%的流量转到v3版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml</span><br><span class="hljs-string">virtualservice.networking.istio.io/reviews</span> <span class="hljs-string">configured</span><br>[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># cat samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attr">weight:</span> <span class="hljs-number">50</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v3</span><br>      <span class="hljs-attr">weight:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>刷新浏览器中的 &#x2F;productpage 页面，大约有50%的几率会看到页面中出带红色星级的评价内容。这是因为v3版本的reviews访问了带星级评级的 ratings 服务，但v1版本却没有。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之Gateway网关</title>
    <link href="/2020/11/30/2020-11-30-Gateway-gateway-of-istio-entry-series/"/>
    <url>/2020/11/30/2020-11-30-Gateway-gateway-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>在Kubernetes环境中，使用Kubernetes Ingress资源来指定需要暴露到集群外的服务。 在 Istio 服务网格中，更好的选择（同样适用于 Kubernetes 及其他环境）是使用一种新的配置模型，名为 Istio Gateway。 Gateway 允许应用一些诸如监控和路由规则的 Istio 特性来管理进入集群的流量。</p><p><img src="/img/2020-11-30-Gateway-gateway-of-istio-entry-series/1.png" alt="upload-image"> </p><h1 id="ingress网关"><a href="#ingress网关" class="headerlink" title="ingress网关"></a>ingress网关</h1><p>ingress是一个入口网关，给服务提供一个访问入口，下面我们来给bookinfo配置一个访问的入口来访问details。</p><p><img src="/img/2020-11-30-Gateway-gateway-of-istio-entry-series/2.png" alt="upload-image"> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">bookinfo</span>]<span class="hljs-comment"># kubectl create -f - &lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-gateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">istio:</span> <span class="hljs-string">ingressgateway</span><br>  <span class="hljs-attr">servers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span><br>      <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">HTTP</span><br>    <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-gateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">gateways:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">test-gateway</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">/details</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/health</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">details</span><br>        <span class="hljs-attr">port:</span><br>          <span class="hljs-attr">number:</span> <span class="hljs-number">9080</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>我们在网关只配置访问入口，具体的路由规则在VirtualService进行配置。</p><p>下面我们再来做一个测试，通过配置ingress网关来访问我们部署的httpbin服务</p><p>首先部署一个httpbin的服务</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-13</span>-centos istio<span class="hljs-string">-1</span>.5.1]# kubectl apply -f samples/httpbin/httpbin.yaml<br></code></pre></td></tr></table></figure><p>查看一下ingressgateway的svc对应的公网ip，假如你没有负载均衡也可以用nodeport来进行配置</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span>]# kubectl get svc -n istio-system | grep gateway<br>istio-ingressgateway        LoadBalancer   <span class="hljs-number">172.16.99.203</span>    <span class="hljs-number">42.194.246.130</span>   <span class="hljs-number">15020:32289</span>/TCP,<span class="hljs-number">80:30066</span>/TCP,<span class="hljs-number">443:32311</span>/TCP,<span class="hljs-number">15029:31532</span>/TCP,<span class="hljs-number">15030:31660</span>/TCP,<span class="hljs-number">15031:30183</span>/TCP,<span class="hljs-number">15032:30388</span>/TCP,<span class="hljs-number">31400:30952</span>/TCP,<span class="hljs-number">15443:31259</span>/TCP   <span class="hljs-number">3d</span>19h<br></code></pre></td></tr></table></figure><p>部署ingressgateway来访问httpbin</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin-gateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">istio:</span> <span class="hljs-string">ingressgateway</span> <span class="hljs-comment"># use Istio default gateway implementation</span><br>  <span class="hljs-attr">servers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span><br>      <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">HTTP</span><br>    <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;httpbin.example.com&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>为通过 Gateway 的入口流量配置路由</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;httpbin.example.com&quot;</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin-gateway</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">uri:</span><br>        <span class="hljs-attribute">prefix</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/status</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">uri:</span><br>        <span class="hljs-attribute">prefix</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/delay</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8000</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>EOF<br></code></pre></td></tr></table></figure><p>已为 httpbin 服务创建了虚拟服务配置，包含两个路由规则，允许流量流向路径 &#x2F;status 和 &#x2F;delay。</p><p>gateways 列表规约了哪些请求允许通过 httpbin-gateway 网关。 所有其他外部请求均被拒绝并返回 404 响应。</p><p>我们来通过网关svc的公网ip来进行测试一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># curl -I -HHost:httpbin.example.com http://42.194.246.130/status/200</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Thu,</span> <span class="hljs-number">03</span> <span class="hljs-string">Dec</span> <span class="hljs-number">2020 04:04:34 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=utf-8</span><br><span class="hljs-attr">access-control-allow-origin:</span> <span class="hljs-string">*</span><br><span class="hljs-attr">access-control-allow-credentials:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">content-length:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">x-envoy-upstream-service-time:</span> <span class="hljs-number">6</span><br><br>[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># curl -I -HHost:httpbin.example.com http://42.194.246.130/headers</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">404</span> <span class="hljs-string">Not</span> <span class="hljs-string">Found</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">Thu,</span> <span class="hljs-number">03</span> <span class="hljs-string">Dec</span> <span class="hljs-number">2020 04:04:48 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">server:</span> <span class="hljs-string">istio-envoy</span><br><span class="hljs-attr">transfer-encoding:</span> <span class="hljs-string">chunked</span><br></code></pre></td></tr></table></figure><p>使用 -H 标识将 HTTP 头部参数 Host 设置为 “httpbin.example.com”。 该操作为必须操作，因为 ingress Gateway 已被配置用来处理 “httpbin.example.com” 的服务请求，而在测试环境中并没有为该主机绑定 DNS 而是简单直接地向 ingress IP 发送请求</p><h1 id="egress网关"><a href="#egress网关" class="headerlink" title="egress网关"></a>egress网关</h1><p>由于默认情况下，来自 Istio-enable Pod 的所有出站流量都会重定向到其 Sidecar 代理，群集外部 URL 的可访问性取决于代理的配置。默认情况下，Istio 将 Envoy 代理配置为允许传递未知服务的请求。尽管这为入门 Istio 带来了方便，但是，通常情况下，配置更严格的控制是更可取的。</p><p><img src="/img/2020-11-30-Gateway-gateway-of-istio-entry-series/3.png" alt="upload-image"> </p><p>三种访问外部服务的方法：</p><ul><li>允许 Envoy 代理将请求传递到未在网格内配置过的服务。</li><li>配置 service entries 以提供对外部服务的受控访问。</li><li>对于特定范围的 IP，完全绕过 Envoy 代理。</li></ul><p>下面我们将httpbin注册为网格内部的服务，并配置流控策略。</p><h2 id="创建一个sleep服务访问httpbin接口"><a href="#创建一个sleep服务访问httpbin接口" class="headerlink" title="创建一个sleep服务访问httpbin接口"></a>创建一个sleep服务访问httpbin接口</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]<span class="hljs-meta"># kubectl apply -f samples/sleep/sleep.yaml</span><br>serviceaccount/sleep created<br>service/sleep created<br>deployment.apps/sleep created<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]<span class="hljs-meta"># kubectl apply -f - &lt;&lt; EOF </span><br><span class="hljs-symbol">apiVersion:</span> networking.istio.io/v1alpha3<br><span class="hljs-symbol">kind:</span> ServiceEntry<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> httpbin-ext<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  hosts:</span><br>  - httpbin.org<br><span class="hljs-symbol">  ports:</span><br>  - number: <span class="hljs-number">80</span><br><span class="hljs-symbol">    name:</span> http<br><span class="hljs-symbol">    protocol:</span> HTTP<br><span class="hljs-symbol">  resolution:</span> DNS<br><span class="hljs-symbol">  location:</span> MESH_EXTERNAL<br>EOF<br>serviceentry.networking.istio.io/httpbin-ext created<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]<span class="hljs-meta"># kubectl get se</span><br>NAME          HOSTS           LOCATION        RESOLUTION   AGE<br>httpbin-ext   [httpbin.org]   MESH_EXTERNAL   DNS          <span class="hljs-number">11</span>s<br><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]<span class="hljs-meta"># kubectl exec -it sleep-5b7bf56c54-krj9n -c sleep -- curl http:<span class="hljs-comment">//httpbin.org/ip</span></span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;106.53.155.140&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="配置egress网关"><a href="#配置egress网关" class="headerlink" title="配置egress网关"></a>配置egress网关</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@VM-0-13-centos istio-1.5.1]# kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">istio-egressgateway</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">istio</span><span class="hljs-punctuation">:</span> <span class="hljs-string">egressgateway</span><br>  <span class="hljs-attribute">servers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">port:</span><br>      <span class="hljs-attribute">number</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP</span><br>    <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin.org</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="配置VirtualService和DestinationRule"><a href="#配置VirtualService和DestinationRule" class="headerlink" title="配置VirtualService和DestinationRule"></a>配置VirtualService和DestinationRule</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-13-centos</span> <span class="hljs-string">istio-1.5.1</span>]<span class="hljs-comment"># kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">vs-for-egressgateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin.org</span><br>  <span class="hljs-attr">gateways:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">istio-egressgateway</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mesh</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">gateways:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mesh</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">istio-egressgateway.istio-system.svc.cluster.local</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">httpbin</span><br>        <span class="hljs-attr">port:</span><br>          <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">gateways:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">istio-egressgateway</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">httpbin.org</span><br>        <span class="hljs-attr">port:</span><br>          <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dr-for-egressgateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">istio-egressgateway.istio-system.svc.cluster.local</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpbin</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@VM-0-13-centos</span> istio-1.5.1]<span class="hljs-comment"># kubectl exec -it sleep-5b7bf56c54-krj9n -c sleep -- curl http://httpbin.org/ip</span><br>&#123;<br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;10.0.1.38, 106.53.152.241&quot;</span><br>&#125;<br><br>[root<span class="hljs-meta">@VM-0-13-centos</span> tke]<span class="hljs-comment"># kubectl logs -f istio-egressgateway-666956b747-zp4vh -n istio-system</span><br><br>[2020-12-02T12:51:35.467Z] <span class="hljs-string">&quot;GET /ip HTTP/2&quot;</span> 200 - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> 0 44 462 461 <span class="hljs-string">&quot;10.0.1.38&quot;</span> <span class="hljs-string">&quot;curl/7.69.1&quot;</span> <span class="hljs-string">&quot;fdfc6cbd-a888-96b1-a45e-e6edfe68caec&quot;</span> <span class="hljs-string">&quot;httpbin.org&quot;</span> <span class="hljs-string">&quot;3.230.36.204:80&quot;</span> outbound|<span class="hljs-string">80</span>||<span class="hljs-string">httpbin.org 10.0.2.116:38220 10.0.2.116:80 10.0.1.38:37650 - -</span><br></code></pre></td></tr></table></figure><p>从上面发现，我们发现到httpbind的请求都是通过egress去访问的。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之ServiceEntry</title>
    <link href="/2020/11/30/2020-11-30-ServiceEntry-of-istio-entry-series/"/>
    <url>/2020/11/30/2020-11-30-ServiceEntry-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>ServiceEntry是用来将网络外部的服务纳入到网格内部进行管理，这个和ingress刚好相反，通过ServiceEntry我们可以通过网格来管理外部服务请求，管理外部服务的流量控制以及扩展我们得mesh网格。</p><p><img src="/img/2020-11-30-ServiceEntry-of-istio-entry-series/1.png" alt="upload-image"> </p><p>下面我们来做学习一下ServiceEntry的配置。</p><p>首先我们配置一个sleep服务</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl apply -f samples/<span class="hljs-built_in">sleep</span>/<span class="hljs-built_in">sleep</span>.yaml<br></code></pre></td></tr></table></figure><p>我们通过httpbin这个服务来模拟外部服务，我们先来访问一下httpbin的外部服务</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gams">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl exec -it <span class="hljs-built_in">sleep</span><span class="hljs-number">-5</span>b7bf56c54-krj9n -c <span class="hljs-built_in">sleep</span> curl http:<span class="hljs-comment">//httpbin.org/headers</span><br>&#123;<br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.org&quot;</span>, <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span>, <br>    <span class="hljs-string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="hljs-string">&quot;Root=1-5fc87774-4f54154c2980a5b025f89352&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;6af159684e0aa32b&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;db66efff3f1277d7&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;fad0512b316618c66af159684e0aa32b&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Decorator-Operation&quot;</span>: <span class="hljs-string">&quot;httpbin.org:80/*&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Internal&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Peer-Metadata&quot;</span>: <span class="hljs-string">&quot;ChwKDElOU1RBTkNFX0lQUxIMGgoxMC4wLjIuMTE2CpACCgZMQUJFTFMShQIqggIKHAoDYXBwEhUaE2lzdGlvLWVncmVzc2dhdGV3YXkKEwoFY2hhcnQSChoIZ2F0ZXdheXMKFAoIaGVyaXRhZ2USCBoGVGlsbGVyChgKBWlzdGlvEg8aDWVncmVzc2dhdGV3YXkKIQoRcG9kLXRlbXBsYXRlLWhhc2gSDBoKNjY2OTU2Yjc0NwoSCgdyZWxlYXNlEgcaBWlzdGlvCjgKH3NlcnZpY2UuaXN0aW8uaW8vY2Fub25pY2FsLW5hbWUSFRoTaXN0aW8tZWdyZXNzZ2F0ZXdheQosCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIFGgMxLjUKGgoHTUVTSF9JRBIPGg1jbHVzdGVyLmxvY2FsCi4KBE5BTUUSJhokaXN0aW8tZWdyZXNzZ2F0ZXdheS02NjY5NTZiNzQ3LXpwNHZoChsKCU5BTUVTUEFDRRIOGgxpc3Rpby1zeXN0ZW0KXAoFT1dORVISUxpRa3ViZXJuZXRlczovL2FwaXMvYXBwcy92MS9uYW1lc3BhY2VzL2lzdGlvLXN5c3RlbS9kZXBsb3ltZW50cy9pc3Rpby1lZ3Jlc3NnYXRld2F5CjgKD1NFUlZJQ0VfQUNDT1VOVBIlGiNpc3Rpby1lZ3Jlc3NnYXRld2F5LXNlcnZpY2UtYWNjb3VudAomCg1XT1JLTE9BRF9OQU1FEhUaE2lzdGlvLWVncmVzc2dhdGV3YXk=&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Peer-Metadata-Id&quot;</span>: <span class="hljs-string">&quot;router~10.0.2.116~istio-egressgateway-666956b747-zp4vh.istio-system~istio-system.svc.cluster.local&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们可以直接访问到httpbin服务，这是因为istio默认是访问所有的外部服务的，为了测试服务入口，我们修改下istio的configmap，配置成REGISTRY_ONLY才能访问。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-13</span><span class="hljs-operator">-</span>centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl <span class="hljs-keyword">get</span> configmap istio <span class="hljs-operator">-</span>n istio<span class="hljs-operator">-</span><span class="hljs-keyword">system</span> <span class="hljs-operator">-</span>o yaml <span class="hljs-operator">|</span> sed <span class="hljs-string">&#x27;s/mode: ALLOW_ANY/mode: REGISTRY_ONLY/g&#x27;</span> <span class="hljs-operator">|</span> kubectl replace <span class="hljs-operator">-</span>n istio<span class="hljs-operator">-</span><span class="hljs-keyword">system</span> <span class="hljs-operator">-</span>f <span class="hljs-operator">-</span><br>configmap<span class="hljs-operator">/</span>istio replaced<br></code></pre></td></tr></table></figure><p>配置生效后，sleep无法访问到httpbin服务，下面我们来定义一个服务入口让sleep可以访问外部的httpbin服务</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ kubectl apply -f - &lt;&lt; EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ServiceEntry</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin-ext</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">httpbin.org</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">number: 80</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP</span><br>  <span class="hljs-attribute">resolution</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DNS</span><br>  <span class="hljs-attribute">location</span><span class="hljs-punctuation">:</span> <span class="hljs-string">MESH_EXTERNAL</span><br>EOF<br></code></pre></td></tr></table></figure><p>我们在ServiceEntry配置了host为httpbin.org，对应的端口为80，下面我们再测试下</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gams">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos istio<span class="hljs-number">-1.5</span><span class="hljs-number">.1</span>]# kubectl exec -it <span class="hljs-built_in">sleep</span><span class="hljs-number">-5</span>b7bf56c54-krj9n -c <span class="hljs-built_in">sleep</span> curl http:<span class="hljs-comment">//httpbin.org/headers</span><br>&#123;<br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.org&quot;</span>, <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;curl/7.69.1&quot;</span>, <br>    <span class="hljs-string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="hljs-string">&quot;Root=1-5fc87bc5-60893e2d0634966b7c765ba9&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Parentspanid&quot;</span>: <span class="hljs-string">&quot;9d40fcfc23d415b3&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Sampled&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Spanid&quot;</span>: <span class="hljs-string">&quot;d06c579a9b828d76&quot;</span>, <br>    <span class="hljs-string">&quot;X-B3-Traceid&quot;</span>: <span class="hljs-string">&quot;97183bca9a86ba7b9d40fcfc23d415b3&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Decorator-Operation&quot;</span>: <span class="hljs-string">&quot;httpbin.org:80/*&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Internal&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Peer-Metadata&quot;</span>: <span class="hljs-string">&quot;ChwKDElOU1RBTkNFX0lQUxIMGgoxMC4wLjIuMTE2CpACCgZMQUJFTFMShQIqggIKHAoDYXBwEhUaE2lzdGlvLWVncmVzc2dhdGV3YXkKEwoFY2hhcnQSChoIZ2F0ZXdheXMKFAoIaGVyaXRhZ2USCBoGVGlsbGVyChgKBWlzdGlvEg8aDWVncmVzc2dhdGV3YXkKIQoRcG9kLXRlbXBsYXRlLWhhc2gSDBoKNjY2OTU2Yjc0NwoSCgdyZWxlYXNlEgcaBWlzdGlvCjgKH3NlcnZpY2UuaXN0aW8uaW8vY2Fub25pY2FsLW5hbWUSFRoTaXN0aW8tZWdyZXNzZ2F0ZXdheQosCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIFGgMxLjUKGgoHTUVTSF9JRBIPGg1jbHVzdGVyLmxvY2FsCi4KBE5BTUUSJhokaXN0aW8tZWdyZXNzZ2F0ZXdheS02NjY5NTZiNzQ3LXpwNHZoChsKCU5BTUVTUEFDRRIOGgxpc3Rpby1zeXN0ZW0KXAoFT1dORVISUxpRa3ViZXJuZXRlczovL2FwaXMvYXBwcy92MS9uYW1lc3BhY2VzL2lzdGlvLXN5c3RlbS9kZXBsb3ltZW50cy9pc3Rpby1lZ3Jlc3NnYXRld2F5CjgKD1NFUlZJQ0VfQUNDT1VOVBIlGiNpc3Rpby1lZ3Jlc3NnYXRld2F5LXNlcnZpY2UtYWNjb3VudAomCg1XT1JLTE9BRF9OQU1FEhUaE2lzdGlvLWVncmVzc2dhdGV3YXk=&quot;</span>, <br>    <span class="hljs-string">&quot;X-Envoy-Peer-Metadata-Id&quot;</span>: <span class="hljs-string">&quot;router~10.0.2.116~istio-egressgateway-666956b747-zp4vh.istio-system~istio-system.svc.cluster.local&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现配置后是可以访问外部的服务的。下面我们来看看如何通过ServiceEntry来访问外部的https服务</p><p>创建一个ServiceEntry，允许对外部https服务的访问。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># kubectl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ServiceEntry</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">baidu</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">www.baidu.com</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">number: 443</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTPS</span><br>  <span class="hljs-attribute">resolution</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DNS</span><br>  <span class="hljs-attribute">location</span><span class="hljs-punctuation">:</span> <span class="hljs-string">MESH_EXTERNAL</span><br>EOF<br></code></pre></td></tr></table></figure><p>执行测试命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it <span class="hljs-keyword">sleep</span>-<span class="hljs-number">5</span>b7bf56c54-krj9n -<span class="hljs-keyword">c</span> <span class="hljs-keyword">sleep</span> -- curl -I https://www.baidu.<span class="hljs-keyword">com</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;HTTP/&quot;</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]# kubectl exec -it <span class="hljs-keyword">sleep</span>-<span class="hljs-number">5</span>b7bf56c54-krj9n -<span class="hljs-keyword">c</span> <span class="hljs-keyword">sleep</span> -- curl -I https://www.baidu.<span class="hljs-keyword">com</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;HTTP/&quot;</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><p>查看sleep pod的sidecar日志</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>]# kubectl logs <span class="hljs-keyword">sleep</span>-<span class="hljs-number">5</span>b7bf56c54-krj9n -<span class="hljs-keyword">c</span> istio-proxy | tail | <span class="hljs-keyword">grep</span> baidu<br>[<span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">03</span>T04:<span class="hljs-number">15</span>:<span class="hljs-number">57.157</span>Z] <span class="hljs-string">&quot;- - -&quot;</span> <span class="hljs-number">0</span> - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-number">781</span> <span class="hljs-number">4652</span> <span class="hljs-number">23</span> - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;14.215.177.39:443&quot;</span> PassthroughCluster <span class="hljs-number">10.0</span>.<span class="hljs-number">1.38</span>:<span class="hljs-number">59692</span> <span class="hljs-number">14.215</span>.<span class="hljs-number">177.39</span>:<span class="hljs-number">443</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">1.38</span>:<span class="hljs-number">59690</span> www.baidu.<span class="hljs-keyword">com</span> -<br>[<span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">03</span>T04:<span class="hljs-number">17</span>:<span class="hljs-number">20.514</span>Z] <span class="hljs-string">&quot;- - -&quot;</span> <span class="hljs-number">0</span> - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-number">781</span> <span class="hljs-number">4652</span> <span class="hljs-number">20</span> - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;14.215.177.38:443&quot;</span> outbound|<span class="hljs-number">443</span>||www.baidu.<span class="hljs-keyword">com</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">1.38</span>:<span class="hljs-number">41854</span> <span class="hljs-number">14.215</span>.<span class="hljs-number">177.38</span>:<span class="hljs-number">443</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">1.38</span>:<span class="hljs-number">41852</span> www.baidu.<span class="hljs-keyword">com</span> -<br>[<span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">03</span>T04:<span class="hljs-number">18</span>:<span class="hljs-number">48.342</span>Z] <span class="hljs-string">&quot;- - -&quot;</span> <span class="hljs-number">0</span> - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-number">781</span> <span class="hljs-number">4652</span> <span class="hljs-number">24</span> - <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;14.215.177.39:443&quot;</span> outbound|<span class="hljs-number">443</span>||www.baidu.<span class="hljs-keyword">com</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">1.38</span>:<span class="hljs-number">36252</span> <span class="hljs-number">14.215</span>.<span class="hljs-number">177.39</span>:<span class="hljs-number">443</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">1.38</span>:<span class="hljs-number">36250</span> www.baidu.<span class="hljs-keyword">com</span> -<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>ServiceEntry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之VirtualService和DestinationRule</title>
    <link href="/2020/11/29/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/"/>
    <url>/2020/11/29/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本文我们讲解下如何通过用Virtual Service和 Destination Rule设置服务路由规则。</p><p>我们还是以之前部署的bookinfo示例进行操作，我们通过Virtual Service路由到reviews的v1版本。</p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/1.png" alt="upload-image"> </p><p>bookinfo默认访问的情况是刷新页面会出现三种颜色星标，后续我们需要做的就是刷新页面让星标颜色不变。</p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/2.png" alt="upload-image"> </p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/3.png" alt="upload-image"> </p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/4.png" alt="upload-image"> </p><p>下面我们直接创建对应的VirtualService和DestinationRule</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml</span><br>virtualservice.networking.istio.io/productpage created<br>virtualservice.networking.istio.io/reviews created<br>virtualservice.networking.istio.io/ratings created<br>virtualservice.networking.istio.io/details created<br>[root@VM-0-13-centos istio-1.5.1]<span class="hljs-comment"># kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml</span><br>destinationrule.networking.istio.io/productpage created<br>destinationrule.networking.istio.io/reviews created<br>destinationrule.networking.istio.io/ratings created<br>destinationrule.networking.istio.io/details created<br></code></pre></td></tr></table></figure><p>再次刷新页面会一直停留在这个页面，一直都并不会变化，这个说明我们指向v1版本的路由规则实现了。</p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/5.png" alt="upload-image"> </p><p>接下来我们详细的研究下VirtualService和DestinationRule的配置</p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/6.png" alt="upload-image"> </p><p>samples&#x2F;bookinfo&#x2F;networking&#x2F;virtual-service-all-v1.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">productpage</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span>   <span class="hljs-comment"># 设置目标地址</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">productpage</span><br>  <span class="hljs-attr">http:</span>     <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span>  <span class="hljs-comment">#子集版本</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span>  <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">details</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">details</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">details</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>samples&#x2F;bookinfo&#x2F;networking&#x2F;destination-rule-all.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">productpage</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">productpage</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span> <span class="hljs-comment">#目标路径</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span>  <span class="hljs-comment">#目标规则</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v3</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v3</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2-mysql</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2-mysql</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2-mysql-vm</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2-mysql-vm</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">details</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">details</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>来自特定用户的所有流量路由到特定服务版本。在这，来自名为 jason 的用户的所有流量将被路由到服务 reviews:v2</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">$ kubectl get virtualservice reviews -o yaml</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">...</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">headers:</span><br>        <span class="hljs-attribute">end-user</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">exact</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jason</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure><p>我们登录jason用户，查看的都是带星标的v2版本</p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/7.png" alt="upload-image"> </p><p>登录非jason用户查看到的都是不带星标的v1版本</p><p><img src="/img/2020-11-29-VirtualService-and-DestinationRule-of-istio-entry-series/8.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
      <tag>VirtualService</tag>
      
      <tag>DestinationRule</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之安装部署篇</title>
    <link href="/2020/11/28/2020-11-28-Installation-and-deployment-of-istio-entry-series/"/>
    <url>/2020/11/28/2020-11-28-Installation-and-deployment-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本篇我们讲一下如何部署istio到k8s集群，并且部署一个bookinfo样例来进行istio的访问测试。</p><h1 id="部署istio"><a href="#部署istio" class="headerlink" title="部署istio"></a>部署istio</h1><p>这里我们部署的istio版本是1.5.1，对应的k8s集群版本是1.18.4。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 获取安装脚本</span><br><span class="hljs-attribute">curl</span> -L https://istio.io/downloadIstio |ISTIO_VERSION=<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span>  sh -<br><br><span class="hljs-comment"># 安装istio客户端</span><br>export PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/root/istio-1.5.1/bin&quot;</span><br><br><span class="hljs-comment"># 查看istio版本，报错是因为我们还没部署istio，暂时可以忽略</span><br>[root<span class="hljs-variable">@VM</span>-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos istio-<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span>]<span class="hljs-comment"># istioctl version</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">11</span>-29T08:<span class="hljs-number">18</span>:<span class="hljs-number">41</span>.074811Z<span class="hljs-literal">warn</span>will use `--remote=<span class="hljs-literal">false</span>` to retrieve version <span class="hljs-literal">info</span> due to `<span class="hljs-literal">no</span> Istio pods in namespace <span class="hljs-string">&quot;istio-system&quot;</span>`<br><span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>istioctl安装配置的选择</p><table><thead><tr><th>安装方式</th><th>示例</th></tr></thead><tbody><tr><td>默认安装</td><td>istioctl manifest apply</td></tr><tr><td>选择profile</td><td>istioctl manifest apply –set profile&#x3D;demo</td></tr><tr><td>自定义安装选项</td><td>istioctl manifest apply –set addonComponents.grafana.enabled&#x3D;true</td></tr><tr><td>自定义安装清单</td><td>istioctl manifest apply –set installPackagePath&#x3D;&lt;发布路径&gt;&#x2F;install&#x2F;kubernetes&#x2F;operator&#x2F;charts</td></tr></tbody></table><p>这里我们采用demo的配置进行安装部署，demo包含了istio的所有组件</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gams">istioctl manifest apply --<span class="hljs-keyword">set</span> profile=demo<br><br>[root@VM-0-13-centos ~<span class="hljs-comment">]# kubectl get pod -n istio-system</span><br>NAME                                    <span class="hljs-comment">READY   STATUS    RESTARTS   AGE</span><br>grafana-84b9bb5d7f-s2btw                <span class="hljs-comment">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>m52s<br>istio-egressgateway<span class="hljs-number">-666956</span>b747-zp4vh    <span class="hljs-number">1</span>/<span class="hljs-comment">1     Running   0          6m58s</span><br>istio-ingressgateway-84c4db59b7-654fn   <span class="hljs-comment">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>m58s<br>istio-tracing<span class="hljs-number">-5</span>c87579565<span class="hljs-number">-5</span>z4rn          <span class="hljs-number">1</span>/<span class="hljs-comment">1     Running   0          6m52s</span><br>istiod-5bffb974b6-dh8jc                 <span class="hljs-comment">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>m16s<br>kiali<span class="hljs-number">-5</span>ddbc4cf59-xc7gd                  <span class="hljs-number">1</span>/<span class="hljs-comment">1     Running   0          6m52s</span><br>prometheus-668f978454-mr9pl             <span class="hljs-comment">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>m52s<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]# kubectl get svc -n istio-<span class="hljs-keyword">system</span><br>NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)                                                                                                                                      AGE<br>grafana                     ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.118</span><span class="hljs-number">.255</span>   &lt;none&gt;           <span class="hljs-number">3000</span>/<span class="hljs-comment">TCP                                                                                                                                     7m4s</span><br>istio-egressgateway         <span class="hljs-comment">ClusterIP      172.16.106.170   &lt;none&gt;           80</span>/TCP,<span class="hljs-number">443</span>/<span class="hljs-comment">TCP,15443</span>/TCP                                                                                                                     <span class="hljs-number">7</span>m10s<br>istio-ingressgateway        LoadBalancer   <span class="hljs-number">172.16</span><span class="hljs-number">.99</span><span class="hljs-number">.203</span>    <span class="hljs-number">42.194</span><span class="hljs-number">.246</span><span class="hljs-number">.130</span>   <span class="hljs-number">15020</span>:<span class="hljs-number">32289</span>/<span class="hljs-comment">TCP,80:30066</span>/TCP,<span class="hljs-number">443</span>:<span class="hljs-number">32311</span>/<span class="hljs-comment">TCP,15029:31532</span>/TCP,<span class="hljs-number">15030</span>:<span class="hljs-number">31660</span>/<span class="hljs-comment">TCP,15031:30183</span>/TCP,<span class="hljs-number">15032</span>:<span class="hljs-number">30388</span>/<span class="hljs-comment">TCP,31400:30952</span>/TCP,<span class="hljs-number">15443</span>:<span class="hljs-number">31259</span>/<span class="hljs-comment">TCP   7m10s</span><br>istio-pilot                 <span class="hljs-comment">ClusterIP      172.16.65.31     &lt;none&gt;           15010</span>/TCP,<span class="hljs-number">15011</span>/<span class="hljs-comment">TCP,15012</span>/TCP,<span class="hljs-number">8080</span>/<span class="hljs-comment">TCP,15014</span>/TCP,<span class="hljs-number">443</span>/<span class="hljs-comment">TCP                                                                                     7m28s</span><br>istiod                      <span class="hljs-comment">ClusterIP      172.16.5.124     &lt;none&gt;           15012</span>/TCP,<span class="hljs-number">443</span>/<span class="hljs-comment">TCP                                                                                                                            7m28s</span><br>jaeger-agent                <span class="hljs-comment">ClusterIP      None             &lt;none&gt;           5775</span>/UDP,<span class="hljs-number">6831</span>/<span class="hljs-comment">UDP,6832</span>/UDP                                                                                                                   <span class="hljs-number">7</span>m4s<br>jaeger-collector            ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.34</span><span class="hljs-number">.1</span>      &lt;none&gt;           <span class="hljs-number">14267</span>/<span class="hljs-comment">TCP,14268</span>/TCP,<span class="hljs-number">14250</span>/<span class="hljs-comment">TCP                                                                                                                7m4s</span><br>jaeger-collector-headless   <span class="hljs-comment">ClusterIP      None             &lt;none&gt;           14250</span>/TCP                                                                                                                                    <span class="hljs-number">7</span>m4s<br>jaeger-query                ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.54</span><span class="hljs-number">.199</span>    &lt;none&gt;           <span class="hljs-number">16686</span>/<span class="hljs-comment">TCP                                                                                                                                    7m4s</span><br>kiali                       <span class="hljs-comment">ClusterIP      172.16.121.70    &lt;none&gt;           20001</span>/TCP                                                                                                                                    <span class="hljs-number">7</span>m4s<br>prometheus                  ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.38</span><span class="hljs-number">.123</span>    &lt;none&gt;           <span class="hljs-number">9090</span>/<span class="hljs-comment">TCP                                                                                                                                     7m4s</span><br>tracing                     <span class="hljs-comment">ClusterIP      172.16.110.87    &lt;none&gt;           80</span>/TCP                                                                                                                                       <span class="hljs-number">7</span>m3s<br>zipkin                      ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.120</span><span class="hljs-number">.180</span>   &lt;none&gt;           <span class="hljs-number">9411</span>/<span class="hljs-comment">TCP                                                                                                                                     7m3s</span><br></code></pre></td></tr></table></figure><p>istio的安装部署的验证方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">istioctl manifest generate &gt; <span class="hljs-variable">$HOME</span>/generated-manifest.yaml</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl apply -f <span class="hljs-variable">$HOME</span>/generated-manifest.yaml</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">istioctl verify-install -f <span class="hljs-variable">$HOME</span>/generated-manifest.yam</span><br></code></pre></td></tr></table></figure><p>如果某个命名空间不想自动注入，只需为该namespace加上istio-injection&#x3D;disabled标签即可。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">kubectl <span class="hljs-keyword">label</span><span class="language-bash"> ns <span class="hljs-built_in">test</span> istio-injection=disabled</span><br></code></pre></td></tr></table></figure><p>istio删除方式</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">istioctl manifest <span class="hljs-keyword">generate</span> --set profile=demo | kubectl delete -f -<br></code></pre></td></tr></table></figure><p>istio的demo中包含一个dashboard，组件叫kiali，我们可以通过kiali来查看组件的运行情况和负载的注入情况。</p><p>我们可以通过下面命令开启kiali的访问</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos treafik]<span class="hljs-comment"># istioctl dashboard kiali</span><br>http:<span class="hljs-regexp">//l</span>ocalhost:<span class="hljs-number">20001</span>/kiali<br>Failed to <span class="hljs-keyword">open</span> browser; <span class="hljs-keyword">open</span> http:<span class="hljs-regexp">//l</span>ocalhost:<span class="hljs-number">20001</span>/kiali in your browser.<br></code></pre></td></tr></table></figure><p>也可以通过treafik来暴露一个域名进行访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kiali-webui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">istio-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`istio.k8s.niewx.cn`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kiali</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">20001</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-28-Installation-and-deployment-of-istio-entry-series/1.png" alt="upload-image"> </p><p>通过域名进行访问，登录的账号密码默认为admin&#x2F;admin</p><h1 id="部署bookinfo测试样例"><a href="#部署bookinfo测试样例" class="headerlink" title="部署bookinfo测试样例"></a>部署bookinfo测试样例</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 运行default命名空间下注入sidecar</span><br><br>kubectl label namespace default istio-injection=enabled<br><br><span class="hljs-comment"># 部署bookinfo应用</span><br>kubectl apply -f samples<span class="hljs-regexp">/bookinfo/</span>platform<span class="hljs-regexp">/kube/</span>bookinfo.yaml<br><br></code></pre></td></tr></table></figure><h1 id="部署bookinfo的访问入口ingressgateway"><a href="#部署bookinfo的访问入口ingressgateway" class="headerlink" title="部署bookinfo的访问入口ingressgateway"></a>部署bookinfo的访问入口ingressgateway</h1><p>bookinfo的访问入口，是部署一个ingressgateway，具体yaml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 部署bookinfo的访问入口</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo-gateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">istio:</span> <span class="hljs-string">ingressgateway</span> <span class="hljs-comment"># use istio default controller</span><br>  <span class="hljs-attr">servers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span><br>      <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">HTTP</span><br>    <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">gateways:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">bookinfo-gateway</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/productpage</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">/static</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/login</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/logout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">/api/v1/products</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">port:</span><br>          <span class="hljs-attr">number:</span> <span class="hljs-number">9080</span><br></code></pre></td></tr></table></figure><p>ingressgateway定义了允许访问bookinfo的访问host，还有一个VirtualService来将流量转发到后端的哪个服务。</p><p><img src="/img/2020-11-28-Installation-and-deployment-of-istio-entry-series/2.png" alt="upload-image"> </p><p>到这里，我们就已经在集群中部署了istion，并且将一个bookinfo的应用通过ingressgateway的方式暴露出去提供访问。</p>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门系列之产品介绍</title>
    <link href="/2020/11/28/2020-11-28-Product-introduction-of-istio-entry-series/"/>
    <url>/2020/11/28/2020-11-28-Product-introduction-of-istio-entry-series/</url>
    
    <content type="html"><![CDATA[<p>本文我们大概讲一下istio的介绍，istio有哪些功能以及istio的一些设计架构原理。</p><h1 id="istio介绍"><a href="#istio介绍" class="headerlink" title="istio介绍"></a>istio介绍</h1><p>istio 解决了开发人员和运维人员所面临的从单体应用向分布式微服务架构转变的挑战。了解它是如何做到这一点的可以让我们更详细地理解 Istio 的服务网格。</p><p>术语服务网格用来描述组成这些应用程序的微服务网络以及它们之间的交互。随着服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、度量和监控等。服务网格通常还有更复杂的运维需求，比如 A&#x2F;B 测试、金丝雀发布、速率限制、访问控制和端到端认证。</p><p>Istio 提供了对整个服务网格的行为洞察和操作控制的能力，以及一个完整的满足微服务应用各种需求的解决方案。</p><p>istio从之前的版本到现在的最新版本1.8版本有很大的变更，这里我们后续介绍下istio的1.5.1版本功能及其使用。</p><h1 id="istio提供的功能"><a href="#istio提供的功能" class="headerlink" title="istio提供的功能"></a>istio提供的功能</h1><p>通过负载均衡、服务间的身份验证、监控等方法，Istio 可以轻松地创建一个已经部署了服务的网络，而服务的代码只需很少更改甚至无需更改。通过在整个环境中部署一个特殊的 sidecar 代理为服务添加 Istio 的支持，而代理会拦截微服务之间的所有网络通信，然后使用其控制平面的功能来配置和管理 Istio，这包括：</p><ul><li>为 HTTP、gRPC、WebSocket 和 TCP 流量自动负载均衡。</li><li>通过丰富的路由规则、重试、故障转移和故障注入对流量行为进行细粒度控制。</li><li>可插拔的策略层和配置 API，支持访问控制、速率限制和配额。</li><li>集群内（包括集群的入口和出口）所有流量的自动化度量、日志记录和追踪。</li><li>在具有强大的基于身份验证和授权的集群中实现安全的服务间通信。</li><li>Istio 为可扩展性而设计，可以满足不同的部署需求。</li></ul><h1 id="istio特性"><a href="#istio特性" class="headerlink" title="istio特性"></a>istio特性</h1><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/1.png" alt="upload-image"> </p><p>Istio 以统一的方式提供了许多跨服务网络的关键功能：</p><ul><li>流量管理</li></ul><p>Istio 简单的规则配置和流量路由允许您控制服务之间的流量和 API 调用过程。Istio 简化了服务级属性（如熔断器、超时和重试）的配置，并且让它轻而易举的执行重要的任务（如 A&#x2F;B 测试、金丝雀发布和按流量百分比划分的分阶段发布）。</p><p>有了更好的对流量的可视性和开箱即用的故障恢复特性，您就可以在问题产生之前捕获它们，无论面对什么情况都可以使调用更可靠，网络更健壮。</p><ul><li>安全</li></ul><p>Istio 的安全特性解放了开发人员，使其只需要专注于应用程序级别的安全。Istio 提供了底层的安全通信通道，并为大规模的服务通信管理认证、授权和加密。有了 Istio，服务通信在默认情况下就是受保护的，可以让您在跨不同协议和运行时的情况下实施一致的策略——而所有这些都只需要很少甚至不需要修改应用程序。</p><p>Istio 是独立于平台的，可以与 Kubernetes（或基础设施）的网络策略一起使用。但它更强大，能够在网络和应用层面保护pod到 pod 或者服务到服务之间的通信。</p><ul><li>可观察性</li></ul><p>Istio 健壮的追踪、监控和日志特性让您能够深入的了解服务网格部署。通过 Istio 的监控能力，可以真正的了解到服务的性能是如何影响上游和下游的；而它的定制 Dashboard 提供了对所有服务性能的可视化能力，并让您看到它如何影响其他进程。</p><p>Istio 的 Mixer 组件负责策略控制和遥测数据收集。它提供了后端抽象和中介，将一部分 Istio 与后端的基础设施实现细节隔离开来，并为运维人员提供了对网格与后端基础实施之间交互的细粒度控制。</p><p>所有这些特性都使您能够更有效地设置、监控和加强服务的 SLO。当然，底线是您可以快速有效地检测到并修复出现的问题。</p><h1 id="istio架构"><a href="#istio架构" class="headerlink" title="istio架构"></a>istio架构</h1><p>istio的1.0版本，架构如下，控制面分为Pilot、Citadel、Mixer，数据面还是采用的envoy</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/3.png" alt="upload-image"> </p><p>istio的1.5版本有一些变更，控制面整合为一个istiod，并且去除了Mixer，还有一些问题修改和性能的提升</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/2.png" alt="upload-image"> </p><h1 id="istio的核心资源"><a href="#istio的核心资源" class="headerlink" title="istio的核心资源"></a>istio的核心资源</h1><h2 id="虚拟服务（Virtual-Service）"><a href="#虚拟服务（Virtual-Service）" class="headerlink" title="虚拟服务（Virtual Service）"></a>虚拟服务（Virtual Service）</h2><p>虚拟服务（Virtual Service） 和目标规则（Destination Rule） 是 Istio 流量路由功能的关键拼图。虚拟服务让您配置如何在服务网格内将请求路由到服务，这基于 Istio 和平台提供的基本的连通性和服务发现能力。每个虚拟服务包含一组路由规则，Istio 按顺序评估它们，Istio 将每个给定的请求匹配到虚拟服务指定的实际目标地址。您的网格可以有多个虚拟服务，也可以没有，取决于您的使用场景。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/4.png" alt="upload-image"> </p><p>下面的虚拟服务根据请求是否来自特定的用户，把它们路由到服务的不同版本。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">headers:</span><br>        <span class="hljs-attribute">end-user</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">exact</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jason</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><h2 id="目标规则（Destination-Rule）"><a href="#目标规则（Destination-Rule）" class="headerlink" title="目标规则（Destination Rule）"></a>目标规则（Destination Rule）</h2><p>与虚拟服务一样，目标规则也是 Istio 流量路由功能的关键部分。您可以将虚拟服务视为将流量如何路由到给定目标地址，然后使用目标规则来配置该目标的流量。在评估虚拟服务路由规则之后，目标规则将应用于流量的“真实”目标地址。</p><p>特别是，您可以使用目标规则来指定命名的服务子集，例如按版本为所有给定服务的实例分组。然后可以在虚拟服务的路由规则中使用这些服务子集来控制到服务不同实例的流量。</p><p>目标规则还允许您在调用整个目的地服务或特定服务子集时定制 Envoy 的流量策略，比如您喜欢的负载均衡模型、TLS 安全模式或熔断器设置。在目标规则参考中可以看到目标规则选项的完整列表</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/5.png" alt="upload-image"> </p><p>在下面的示例中，目标规则为 my-svc 目标服务配置了 3 个具有不同负载均衡策略的子集：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">my-destination-rule</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">my-svc</span><br>  <span class="hljs-attribute">trafficPolicy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">loadBalancer</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">simple</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RANDOM</span><br>  <span class="hljs-attribute">subsets</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: v1</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: v2</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attribute">trafficPolicy</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">loadBalancer</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">simple</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ROUND_ROBIN</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: v3</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><h2 id="网关（Gateway）"><a href="#网关（Gateway）" class="headerlink" title="网关（Gateway）"></a>网关（Gateway）</h2><p>使用网关为网格来管理入站和出站流量，可以让您指定要进入或离开网格的流量。网关配置被用于运行在网格边界的独立 Envoy 代理，而不是服务工作负载的 sidecar 代理。</p><p>与 Kubernetes Ingress API 这种控制进入系统流量的其他机制不同，Istio 网关让您充分利用流量路由的强大能力和灵活性。您可以这么做的原因是 Istio 的网关资源可以配置 4-6 层的负载均衡属性，如对外暴露的端口、TLS 设置等。作为替代应用层流量路由（L7）到相同的 API 资源，您绑定了一个常规的 Istio 虚拟服务到网关。这让您可以像管理网格中其他数据平面的流量一样去管理网关流量。</p><p>网关主要用于管理进入的流量，但您也可以配置出口网关。出口网关让您为离开网格的流量配置一个专用的出口节点，这可以限制哪些服务可以或应该访问外部网络，或者启用出口流量安全控制为您的网格添加安全性。您也可以使用网关配置一个纯粹的内部代理。</p><p>Istio 提供了一些预先配置好的网关代理部署（istio-ingressgateway 和 istio-egressgateway）供您使用——如果使用我们的演示安装它们都已经部署好了；如果使用默认或 sds 配置文件则只部署了入口网关。可以将您自己的网关配置应用到这些部署或配置您自己的网关代理。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/6.png" alt="upload-image"> </p><p>下面的示例展示了一个外部 HTTPS 入口流量的网关配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> networking.istio.io/v1alpha3<br><span class="hljs-symbol">kind:</span> Gateway<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> ext-host-gwy<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    app:</span> my-gateway-controller<br><span class="hljs-symbol">  servers:</span><br>  - port:<br><span class="hljs-symbol">      number:</span> <span class="hljs-number">443</span><br><span class="hljs-symbol">      name:</span> https<br><span class="hljs-symbol">      protocol:</span> HTTPS<br><span class="hljs-symbol">    hosts:</span><br>    - ext-host.example.com<br><span class="hljs-symbol">    tls:</span><br><span class="hljs-symbol">      mode:</span> SIMPLE<br><span class="hljs-symbol">      serverCertificate:</span> <span class="hljs-keyword">/tmp/</span>tls.crt<br><span class="hljs-symbol">      privateKey:</span> <span class="hljs-keyword">/tmp/</span>tls.key<br></code></pre></td></tr></table></figure><p>这个网关配置让 HTTPS 流量从 ext-host.example.com 通过 443 端口流入网格，但没有为请求指定任何路由规则。为想要工作的网关指定路由，您必须把网关绑定到虚拟服务上。正如下面的示例所示，使用虚拟服务的 gateways 字段进行设置：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">virtual-svc</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ext-host.example.com</span><br>  <span class="hljs-attribute">gateways</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ext-host-gwy</span><br></code></pre></td></tr></table></figure><p>然后就可以为出口流量配置带有路由规则的虚拟服务。</p><h2 id="服务入口（Service-Entry）"><a href="#服务入口（Service-Entry）" class="headerlink" title="服务入口（Service Entry）"></a>服务入口（Service Entry）</h2><p>使用服务入口（Service Entry） 来添加一个入口到 Istio 内部维护的服务注册中心。添加了服务入口后，Envoy 代理可以向服务发送流量，就好像它是网格内部的服务一样。配置服务入口允许您管理运行在网格外的服务的流量，它包括以下几种能力：</p><ul><li>为外部目标 redirect 和转发请求，例如来自 web 端的 API 调用，或者流向遗留老系统的服务。</li><li>为外部目标定义重试、超时和故障注入策略。</li><li>添加一个运行在虚拟机的服务来扩展您的网格。</li><li>从逻辑上添加来自不同集群的服务到网格，在 Kubernetes 上实现一个多集群 Istio 网格。</li></ul><p>您不需要为网格服务要使用的每个外部服务都添加服务入口。默认情况下，Istio 配置 Envoy 代理将请求传递给未知服务。但是，您不能使用 Istio 的特性来控制没有在网格中注册的目标流量。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/7.png" alt="upload-image"> </p><p>下面示例的 mesh-external 服务入口将 ext-resource 外部依赖项添加到 Istio 的服务注册中心：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ServiceEntry</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">svc-entry</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ext-svc.example.com</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">number: 443</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTPS</span><br>  <span class="hljs-attribute">location</span><span class="hljs-punctuation">:</span> <span class="hljs-string">MESH_EXTERNAL</span><br>  <span class="hljs-attribute">resolution</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DNS</span><br></code></pre></td></tr></table></figure><p>您指定的外部资源使用 hosts 字段。可以使用完全限定名或通配符作为前缀域名。</p><p>您可以配置虚拟服务和目标规则，以更细粒度的方式控制到服务入口的流量，这与网格中的任何其他服务配置流量的方式相同。例如，下面的目标规则配置流量路由以使用双向 TLS 来保护到 ext-svc.example.com 外部服务的连接，我们使用服务入口配置了该外部服务：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> networking.istio.io/v1alpha3<br><span class="hljs-symbol">kind:</span> DestinationRule<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> ext-res-dr<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  host:</span> ext-svc.example.com<br><span class="hljs-symbol">  trafficPolicy:</span><br><span class="hljs-symbol">    tls:</span><br><span class="hljs-symbol">      mode:</span> MUTUAL<br><span class="hljs-symbol">      clientCertificate:</span> <span class="hljs-keyword">/etc/</span>certs/myclientcert.pem<br><span class="hljs-symbol">      privateKey:</span> <span class="hljs-keyword">/etc/</span>certs/client_private_key.pem<br><span class="hljs-symbol">      caCertificates:</span> <span class="hljs-keyword">/etc/</span>certs/rootcacerts.pem<br></code></pre></td></tr></table></figure><h2 id="Sidecar"><a href="#Sidecar" class="headerlink" title="Sidecar"></a>Sidecar</h2><p>默认情况下，Istio 让每个 Envoy 代理都可以访问来自和它关联的工作负载的所有端口的请求，然后转发到对应的工作负载。您可以使用 sidecar 配置去做下面的事情：</p><ul><li>微调 Envoy 代理接受的端口和协议集。</li><li>限制 Envoy 代理可以访问的服务集合。</li></ul><p>您可能希望在较庞大的应用程序中限制这样的 sidecar 可达性，配置每个代理能访问网格中的任意服务可能会因为高内存使用量而影响网格的性能。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/8.png" alt="upload-image"> </p><h2 id="网络弹性和测试"><a href="#网络弹性和测试" class="headerlink" title="网络弹性和测试"></a>网络弹性和测试</h2><p>除了为您的网格导流之外，Istio 还提供了可选的故障恢复和故障注入功能，您可以在运行时动态配置这些功能。使用这些特性可以让您的应用程序运行稳定，确保服务网格能够容忍故障节点，并防止局部故障级联影响到其他节点。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/9.png" alt="upload-image"> </p><h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>超时是 Envoy 代理等待来自给定服务的答复的时间量，以确保服务不会因为等待答复而无限期的挂起，并在可预测的时间范围内调用成功或失败。HTTP 请求的默认超时时间是 15 秒，这意味着如果服务在 15 秒内没有响应，调用将失败。</p><p>对于某些应用程序和服务，Istio 的缺省超时可能不合适。例如，超时太长可能会由于等待失败服务的回复而导致过度的延迟；而超时过短则可能在等待涉及多个服务返回的操作时触发不必要地失败。为了找到并使用最佳超时设置，Istio 允许您使用虚拟服务按服务轻松地动态调整超时，而不必修改您的业务代码。下面的示例是一个虚拟服务，它对 ratings 服务的 v1 子集的调用指定 10 秒超时：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10s</span><br></code></pre></td></tr></table></figure><h3 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h3><p>重试设置指定如果初始调用失败，Envoy 代理尝试连接服务的最大次数。通过确保调用不会因为临时过载的服务或网络等问题而永久失败，重试可以提高服务可用性和应用程序的性能。重试之间的间隔（25ms+）是可变的，并由 Istio 自动确定，从而防止被调用服务被请求淹没。HTTP 请求的默认重试行为是在返回错误之前重试两次。</p><p>与超时一样，Istio 默认的重试行为在延迟方面可能不适合您的应用程序需求（对失败的服务进行过多的重试会降低速度）或可用性。您可以在虚拟服务中按服务调整重试设置，而不必修改业务代码。您还可以通过添加每次重试的超时来进一步细化重试行为，并指定每次重试都试图成功连接到服务所等待的时间量。下面的示例配置了在初始调用失败后最多重试 3 次来连接到服务子集，每个重试都有 2 秒的超时。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">attempts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>      <span class="hljs-attribute">perTryTimeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2s</span><br></code></pre></td></tr></table></figure><h3 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h3><p>熔断器是 Istio 为创建具有弹性的微服务应用提供的另一个有用的机制。在熔断器中，设置一个对服务中的单个主机调用的限制，例如并发连接的数量或对该主机调用失败的次数。一旦限制被触发，熔断器就会“跳闸”并停止连接到该主机。使用熔断模式可以快速失败而不必让客户端尝试连接到过载或有故障的主机。</p><p>熔断适用于在负载均衡池中的“真实”网格目标地址，您可以在目标规则中配置熔断器阈值，让配置适用于服务中的每个主机。下面的示例将 v1 子集的reviews服务工作负载的并发连接数限制为 100：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attribute">subsets</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: v1</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attribute">trafficPolicy</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">connectionPool</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">tcp</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">maxConnections</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100</span><br></code></pre></td></tr></table></figure><h3 id="故障注入"><a href="#故障注入" class="headerlink" title="故障注入"></a>故障注入</h3><p>在配置了网络，包括故障恢复策略之后，可以使用 Istio 的故障注入机制来为整个应用程序测试故障恢复能力。故障注入是一种将错误引入系统以确保系统能够承受并从错误条件中恢复的测试方法。使用故障注入特别有用，能确保故障恢复策略不至于不兼容或者太严格，这会导致关键服务不可用。</p><p>与其他错误注入机制（如延迟数据包或在网络层杀掉 Pod）不同，Istio 允许在应用层注入错误。这使您可以注入更多相关的故障，例如 HTTP 错误码，以获得更多相关的结果。</p><p>您可以注入两种故障，它们都使用虚拟服务配置：</p><ul><li>延迟：延迟是时间故障。它们模拟增加的网络延迟或一个超载的上游服务。</li><li>终止：终止是崩溃失败。他们模仿上游服务的失败。终止通常以 HTTP 错误码或 TCP 连接失败的形式出现。</li></ul><p>例如，下面的虚拟服务为千分之一的访问 ratings 服务的请求配置了一个 5 秒的延迟：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fault:</span><br>      <span class="hljs-attribute">delay</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">percentage</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0.1</span><br>        <span class="hljs-attribute">fixedDelay</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5s</span><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">destination:</span><br>        <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attribute">subset</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure><h1 id="istio安全设计"><a href="#istio安全设计" class="headerlink" title="istio安全设计"></a>istio安全设计</h1><h2 id="istio认证"><a href="#istio认证" class="headerlink" title="istio认证"></a>istio认证</h2><p>Istio 提供两种类型的认证：</p><ul><li><p>Peer authentication：用于服务到服务的认证，以验证进行连接的客户端。Istio 提供双向 TLS 作为传输认证的全栈解决方案，无需更改服务代码就可以启用它。这个解决方案：</p><ul><li>为每个服务提供强大的身份，表示其角色，以实现跨群集和云的互操作性。</li><li>保护服务到服务的通信。</li><li>提供密钥管理系统，以自动进行密钥和证书的生成，分发和轮换。</li></ul></li><li><p>Request authentication：用于最终用户认证，以验证附加到请求的凭据。 Istio 使用 JSON Web Token（JWT）验证启用请求级认证，并使用自定义认证实现或任何 OpenID Connect 的认证实现（例如下面列举的）来简化的开发人员体验。</p><ul><li>ORY Hydra</li><li>Keycloak</li><li>Auth0</li><li>Firebase Auth</li><li>Google Auth</li></ul></li></ul><p>您可以使用 peer 和 request 认证策略为在 Istio 网格中接收请求的工作负载指定认证要求。网格运维人员使用 .yaml 文件来指定策略。部署后，策略将保存在 Istio 配置存储中。Istio 控制器监视配置存储。</p><p>一有任何的策略变更，新策略都会转换为适当的配置，告知 PEP 如何执行所需的认证机制。控制平面可以获取公共密钥，并将其附加到配置中以进行 JWT 验证。或者，Istiod 提供了 Istio 系统管理的密钥和证书的路径，并将它们安装到应用程序 pod 用于双向 TLS。您可以在 PKI 部分中找到更多信息。</p><p>Istio 异步发送配置到目标端点。代理收到配置后，新的认证要求会立即生效。</p><p>发送请求的客户端服务负责遵循必要的认证机制。对于 peer authentication，应用程序负责获取 JWT 凭证并将其附加到请求。对于双向 TLS，Istio 会自动将两个 PEPs 之间的所有流量升级为双向 TLS。如果认证策略禁用了双向 TLS 模式，则 Istio 将继续在 PEPs 之间使用纯文本。要覆盖此行为，请使用 destination rules显式禁用双向 TLS 模式。您可以在双向 TLS 认证 中找到有关双向 TLS 如何工作的更多信息。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/10.png" alt="upload-image"> </p><p>本节中提供了更多 Istio 认证策略方面的细节。正如认证架构中所说的，认证策略是对服务收到的请求生效的。要在双向 TLS 中指定客户端认证策略，需要在 DetinationRule 中设置 TLSSettings。TLS 设置参考文档中有更多这方面的信息。</p><p>和其他的 Istio 配置一样，可以用 .yaml 文件的形式来编写认证策略。部署策略使用 kubectl。 下面例子中的认证策略要求：与带有 app:reviews 标签的工作负载的传输层认证，必须使用双向 TLS：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;security.istio.io/v1beta1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;PeerAuthentication&quot;</span><br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-string">&quot;example-peer-policy&quot;</span><br><span class="hljs-symbol">  namespace:</span> <span class="hljs-string">&quot;foo&quot;</span><br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> reviews<br><span class="hljs-symbol">  mtls:</span><br><span class="hljs-symbol">    mode:</span> STRICT<br></code></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>Istio 的授权功能为网格中的工作负载提供网格、命名空间和工作负载级别的访问控制。这种控制层级提供了以下优点：</p><ul><li>工作负载间和最终用户到工作负载的授权。</li><li>一个简单的 API：它包括一个单独的并且很容易使用和维护的 AuthorizationPolicy CRD。</li><li>灵活的语义：运维人员可以在 Istio 属性上定义自定义条件，并使用 DENY 和 ALLOW 动作。</li><li>高性能：Istio 授权是在 Envoy 本地强制执行的。</li><li>高兼容性：原生支持 HTTP、HTTPS 和 HTTP2，以及任意普通 TCP 协议。</li></ul><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/11.png" alt="upload-image"> </p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/12.png" alt="upload-image"> </p><p>要配置授权策略，请创建一个 AuthorizationPolicy 自定义资源。 一个授权策略包括选择器（selector），动作（action） 和一个规则（rules）列表：</p><ul><li>selector 字段指定策略的目标</li><li>action 字段指定允许还是拒绝请求</li><li>rules 指定何时触发动作</li><li>rules 下的 from 字段指定请求的来源</li><li>rules 下的 to 字段指定请求的操作</li><li>rules 下的 when 字段指定应用规则所需的条件</li></ul><p>以下示例显示了一个授权策略，该策略允许两个源（服务帐号 cluster.local&#x2F;ns&#x2F;default&#x2F;sa&#x2F;sleep 和命名空间 dev），在使用有效的 JWT 令牌发送请求时，可以访问命名空间 foo 中的带有标签 app: httpbin 和 version: v1 的工作负载。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">security.istio.io/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AuthorizationPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">foo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpbin</span><br>     <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br> <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ALLOW</span><br> <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">from:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">principals</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;cluster.local/ns/default/sa/sleep&quot;]</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>       <span class="hljs-attribute">namespaces</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;dev&quot;]</span><br>   <span class="hljs-attribute">to</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">operation:</span><br>       <span class="hljs-attribute">methods</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;GET&quot;]</span><br>   <span class="hljs-attribute">when</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">key: request.auth.claims[iss]</span><br>     <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;https://accounts.google.com&quot;]</span><br></code></pre></td></tr></table></figure><h1 id="istio可观察性"><a href="#istio可观察性" class="headerlink" title="istio可观察性"></a>istio可观察性</h1><p>Istio 为网格内所有的服务通信生成详细的遥测数据。这种遥测技术提供了服务行为的可观察性，使运维人员能够排查故障、维护和优化应用程序，而不会给服务的开发人员带来任何额外的负担。通过 Istio，运维人员可以全面了解到受监控的服务如何与其他服务以及 Istio 组件进行交互。</p><p>Istio 生成以下类型的遥测数据，以提供对整个服务网格的可观察性：</p><ul><li>指标。Istio 基于 4 个监控的黄金标识（延迟、流量、错误、饱和）生成了一系列服务指标。Istio 还为网格控制平面提供了更详细的指标。除此以外还提供了一组默认的基于这些指标的网格监控仪表板。</li><li>分布式追踪。Istio 为每个服务生成分布式追踪 span，运维人员可以理解网格内服务的依赖和调用流程。</li><li>访问日志。当流量流入网格中的服务时，Istio 可以生成每个请求的完整记录，包括源和目标的元数据。此信息使运维人员能够将服务行为的审查控制到单个工作负载实例的级别。</li></ul><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>指标（Metric）提供了一种以聚合的方式监控和理解行为的方法。</p><p>为了监控服务行为，Istio 为服务网格中所有出入的服务流量都生成了指标。这些指标提供了关于行为的信息，例如总流量数、错误率和请求响应时间。</p><p>除了监控网格中服务的行为外，监控网格本身的行为也很重要。Istio 组件可以导出自身内部行为的指标，以提供对网格控制平面的功能和健康情况的洞察能力。</p><p>Istio 指标收集由运维人员配置来驱动。运维人员决定如何以及何时收集指标，以及指标本身的详细程度。这使得它能够灵活地调整指标收集来满足个性化需求。</p><h3 id="代理级别指标"><a href="#代理级别指标" class="headerlink" title="代理级别指标"></a>代理级别指标</h3><p>Istio 指标收集从 sidecar 代理（Envoy）开始。每个代理为通过它的所有流量（入站和出站）生成一组丰富的指标。代理还提供关于它本身管理功能的详细统计信息，包括配置信息和健康信息。</p><p>Envoy 生成的指标提供了资源（例如监听器和集群）粒度上的网格监控。因此，为了监控 Envoy 指标，需要了解网格服务和 Envoy 资源之间的连接。</p><p>Istio 允许运维人员在每个工作负载实例上选择生成和收集哪个 Envoy 指标。默认情况下，Istio 只支持 Envoy 生成的统计数据的一小部分，以避免依赖过多的后端服务，还可以减少与指标收集相关的 CPU 开销。然而，运维人员可以在需要时轻松地扩展收集到的代理指标集。这支持有针对性地调试网络行为，同时降低了跨网格监控的总体成本。</p><p>Envoy 文档包括了 Envoy 统计信息收集的详细说明。Envoy 统计里的操作手册提供了有关控制代理级别指标生成的更多信息。</p><p>代理级别指标的例子：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">envoy_cluster_internal_upstream_r<span class="hljs-string">q&#123;response_code_class=&quot;2xx&quot;,cluster_name=&quot;xds-grpc&quot;&#125;</span> <span class="hljs-number">7163</span><br>envoy_cluster_upstream_rq_completed&#123;cluster_name=<span class="hljs-string">&quot;xds-grpc&quot;</span>&#125; <span class="hljs-number">7164</span><br>envoy_cluster_ssl_connection_error&#123;cluster_name=<span class="hljs-string">&quot;xds-grpc&quot;</span>&#125; <span class="hljs-number">0</span><br>envoy_cluster_lb_subsets_removed&#123;cluster_name=<span class="hljs-string">&quot;xds-grpc&quot;</span>&#125; <span class="hljs-number">0</span><br>envoy_cluster_internal_upstream_r<span class="hljs-string">q&#123;response_code=&quot;503&quot;,cluster_name=&quot;xds-grpc&quot;&#125;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="服务级别指标"><a href="#服务级别指标" class="headerlink" title="服务级别指标"></a>服务级别指标</h3><p>除了代理级别指标之外，Istio 还提供了一组用于监控服务通信的面向服务的指标。这些指标涵盖了四个基本的服务监控需求：延迟、流量、错误和饱和情况。Istio 带有一组默认的仪表板，用于监控基于这些指标的服务行为。</p><p>默认的 Istio 指标由 Istio 提供的配置集定义并默认导出到 Prometheus。运维人员可以自由地修改这些指标的形态和内容，更改它们的收集机制，以满足各自的监控需求。</p><p>收集指标任务为定制 Istio 指标生成提供了更详细的信息。</p><p>服务级别指标的使用完全是可选的。运维人员可以选择关闭指标的生成和收集来满足自身需要。</p><p>服务级别指标的例子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">istio_requests_total&#123;<br>  <span class="hljs-attribute">connection_security_policy</span>=<span class="hljs-string">&quot;mutual_tls&quot;</span>,<br>  <span class="hljs-attribute">destination_app</span>=<span class="hljs-string">&quot;details&quot;</span>,<br>  <span class="hljs-attribute">destination_principal</span>=<span class="hljs-string">&quot;cluster.local/ns/default/sa/default&quot;</span>,<br>  <span class="hljs-attribute">destination_service</span>=<span class="hljs-string">&quot;details.default.svc.cluster.local&quot;</span>,<br>  <span class="hljs-attribute">destination_service_name</span>=<span class="hljs-string">&quot;details&quot;</span>,<br>  <span class="hljs-attribute">destination_service_namespace</span>=<span class="hljs-string">&quot;default&quot;</span>,<br>  <span class="hljs-attribute">destination_version</span>=<span class="hljs-string">&quot;v1&quot;</span>,<br>  <span class="hljs-attribute">destination_workload</span>=<span class="hljs-string">&quot;details-v1&quot;</span>,<br>  <span class="hljs-attribute">destination_workload_namespace</span>=<span class="hljs-string">&quot;default&quot;</span>,<br>  <span class="hljs-attribute">reporter</span>=<span class="hljs-string">&quot;destination&quot;</span>,<br>  <span class="hljs-attribute">request_protocol</span>=<span class="hljs-string">&quot;http&quot;</span>,<br>  <span class="hljs-attribute">response_code</span>=<span class="hljs-string">&quot;200&quot;</span>,<br>  <span class="hljs-attribute">response_flags</span>=<span class="hljs-string">&quot;-&quot;</span>,<br>  <span class="hljs-attribute">source_app</span>=<span class="hljs-string">&quot;productpage&quot;</span>,<br>  <span class="hljs-attribute">source_principal</span>=<span class="hljs-string">&quot;cluster.local/ns/default/sa/default&quot;</span>,<br>  <span class="hljs-attribute">source_version</span>=<span class="hljs-string">&quot;v1&quot;</span>,<br>  <span class="hljs-attribute">source_workload</span>=<span class="hljs-string">&quot;productpage-v1&quot;</span>,<br>  <span class="hljs-attribute">source_workload_namespace</span>=<span class="hljs-string">&quot;default&quot;</span><br>&#125; 214<br></code></pre></td></tr></table></figure><h3 id="控制平面指标"><a href="#控制平面指标" class="headerlink" title="控制平面指标"></a>控制平面指标</h3><p>每一个 Istio 的组件（Pilot、Galley、Mixer）都提供了对自身监控指标的集合。这些指标容许监控 Istio 自己的行为（这与网格内的服务有所不同）。</p><p>有关这些被维护指标的更多信息，请查看每个组件的参考文档：</p><ul><li><a href="https://istio.io/latest/zh/docs/reference/commands/pilot-discovery/#metrics">Pilot</a></li><li><a href="https://istio.io/latest/zh/docs/reference/commands/galley/#metrics">Galley</a></li><li><a href="https://istio.io/latest/zh/docs/reference/commands/mixs/#metrics">Mixer</a></li><li><a href="https://istio.io/latest/zh/docs/reference/commands/istio_ca/#metrics">Citadel</a></li></ul><h2 id="分布式追踪"><a href="#分布式追踪" class="headerlink" title="分布式追踪"></a>分布式追踪</h2><p>分布式追踪通过监控流经网格的单个请求，提供了一种监控和理解行为的方法。追踪使网格的运维人员能够理解服务的依赖关系以及在服务网格中的延迟源。</p><p>Istio 支持通过 Envoy 代理进行分布式追踪。代理自动为其应用程序生成追踪 span，只需要应用程序转发适当的请求上下文即可。</p><p>Istio 支持很多追踪系统，包括 Zipkin、Jaeger、LightStep、Datadog。运维人员控制生成追踪的采样率（每个请求生成跟踪数据的速率）。这允许运维人员控制网格生成追踪数据的数量和速率。</p><p>更多关于 Istio 分布式追踪的信息可以在分布式追踪 FAQ 中找到。</p><p>Istio 为一个请求生成的分布式追踪数据：</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/14.png" alt="upload-image"> </p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/15.png" alt="upload-image"> </p><h2 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h2><p>访问日志提供了一种从单个工作负载实例的角度监控和理解行为的方法。</p><p>Istio 可以以一组可配置的格式集生成服务流量的访问日志，为运维人员提供日志记录的方式、内容、时间和位置的完全控制。Istio 向访问日志机制暴露了完整的源和目标元数据，允许对网络通信进行详细的审查。</p><p>访问日志可以在本地生成，或者导出到自定义的后端基础设施，包括 Fluentd。</p><p>更多关于访问日志的内容在收集日志和获取 Envoy 服务日志任务中提供。</p><p><img src="/img/2020-11-28-Product-introduction-of-istio-entry-series/13.png" alt="upload-image"> </p><p>Istio 访问日志例子（JSON 格式）：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-type"></span>&quot;info<span class="hljs-string">&quot;,&quot;</span>time<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-06</span><span class="hljs-number">-11</span>T20:<span class="hljs-type">57</span>:<span class="hljs-number">35.424310</span>Z<span class="hljs-string">&quot;,&quot;</span>instance<span class="hljs-string">&quot;:&quot;</span>accesslog.instance.istio-control<span class="hljs-string">&quot;,&quot;</span>connection_security_policy<span class="hljs-string">&quot;:&quot;</span>mutual_tls<span class="hljs-string">&quot;,&quot;</span>destinationApp<span class="hljs-string">&quot;:&quot;</span>productpage<span class="hljs-string">&quot;,&quot;</span>destinationIp<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">10.44</span><span class="hljs-number">.2</span><span class="hljs-number">.15</span><span class="hljs-string">&quot;,&quot;</span>destinationName<span class="hljs-string">&quot;:&quot;</span>productpage-v1<span class="hljs-number">-6</span>db7564db8-pvsnd<span class="hljs-string">&quot;,&quot;</span>destinationNamespace<span class="hljs-string">&quot;:&quot;</span><span class="hljs-keyword">default</span><span class="hljs-string">&quot;,&quot;</span>destinationOwner<span class="hljs-string">&quot;:&quot;</span>kubernetes:<span class="hljs-type"></span>//apis/apps/v1/namespaces/<span class="hljs-keyword">default</span>/deployments/productpage-v1<span class="hljs-string">&quot;,&quot;</span>destinationPrincipal<span class="hljs-string">&quot;:&quot;</span>cluster.local/ns/<span class="hljs-keyword">default</span>/sa/<span class="hljs-keyword">default</span><span class="hljs-string">&quot;,&quot;</span>destinationServiceHost<span class="hljs-string">&quot;:&quot;</span>productpage.<span class="hljs-keyword">default</span>.svc.cluster.local<span class="hljs-string">&quot;,&quot;</span>destinationWorkload<span class="hljs-string">&quot;:&quot;</span>productpage-v1<span class="hljs-string">&quot;,&quot;</span>httpAuthority<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">35.202</span><span class="hljs-number">.6</span><span class="hljs-number">.119</span><span class="hljs-string">&quot;,&quot;</span>latency<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">35.076236</span>ms<span class="hljs-string">&quot;,&quot;</span>method<span class="hljs-string">&quot;:&quot;</span>GET<span class="hljs-string">&quot;,&quot;</span>protocol<span class="hljs-string">&quot;:&quot;</span>http<span class="hljs-string">&quot;,&quot;</span>receivedBytes<span class="hljs-string">&quot;:917,&quot;</span>referer<span class="hljs-string">&quot;:&quot;</span><span class="hljs-string">&quot;,&quot;</span>reporter<span class="hljs-string">&quot;:&quot;</span>destination<span class="hljs-string">&quot;,&quot;</span>requestId<span class="hljs-string">&quot;:&quot;</span>e3f7cffb<span class="hljs-number">-5642</span><span class="hljs-number">-434</span>d-ae75<span class="hljs-number">-233</span>a05b06158<span class="hljs-string">&quot;,&quot;</span>requestSize<span class="hljs-string">&quot;:0,&quot;</span>requestedServerName<span class="hljs-string">&quot;:&quot;</span>outbound_<span class="hljs-number">.9080</span><span class="hljs-literal">_</span>.<span class="hljs-literal">_</span>.productpage.<span class="hljs-keyword">default</span>.svc.cluster.local<span class="hljs-string">&quot;,&quot;</span>responseCode<span class="hljs-string">&quot;:200,&quot;</span>responseFlags<span class="hljs-string">&quot;:&quot;</span>-<span class="hljs-string">&quot;,&quot;</span>responseSize<span class="hljs-string">&quot;:4183,&quot;</span>responseTimestamp<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-06</span><span class="hljs-number">-11</span>T20:<span class="hljs-type">57</span>:<span class="hljs-number">35.459150</span>Z<span class="hljs-string">&quot;,&quot;</span>sentBytes<span class="hljs-string">&quot;:4328,&quot;</span>sourceApp<span class="hljs-string">&quot;:&quot;</span>istio-ingressgateway<span class="hljs-string">&quot;,&quot;</span>sourceIp<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">10.44</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span><span class="hljs-string">&quot;,&quot;</span>sourceName<span class="hljs-string">&quot;:&quot;</span>ingressgateway<span class="hljs-number">-7748774</span>cbf-bvf4j<span class="hljs-string">&quot;,&quot;</span>sourceNamespace<span class="hljs-string">&quot;:&quot;</span>istio-control<span class="hljs-string">&quot;,&quot;</span>sourceOwner<span class="hljs-string">&quot;:&quot;</span>kubernetes:<span class="hljs-type"></span>//apis/apps/v1/namespaces/istio-control/deployments/ingressgateway<span class="hljs-string">&quot;,&quot;</span>sourcePrincipal<span class="hljs-string">&quot;:&quot;</span>cluster.local/ns/istio-control/sa/<span class="hljs-keyword">default</span><span class="hljs-string">&quot;,&quot;</span>sourceWorkload<span class="hljs-string">&quot;:&quot;</span>ingressgateway<span class="hljs-string">&quot;,&quot;</span>url<span class="hljs-string">&quot;:&quot;</span>/productpage<span class="hljs-string">&quot;,&quot;</span>userAgent<span class="hljs-string">&quot;:&quot;</span>curl/<span class="hljs-number">7.54</span><span class="hljs-number">.0</span><span class="hljs-string">&quot;,&quot;</span>xForwardedFor<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">10.128</span><span class="hljs-number">.0</span><span class="hljs-number">.35</span><span class="hljs-string">&quot;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s之externalTrafficPolicy保留客户端源IP</title>
    <link href="/2020/11/26/2020-11-26-The-externaltrafficpolicy-of-k8s-retains-the-client-source-ip/"/>
    <url>/2020/11/26/2020-11-26-The-externaltrafficpolicy-of-k8s-retains-the-client-source-ip/</url>
    
    <content type="html"><![CDATA[<p>使用k8s暴露我们的服务给外部访问的方式主要是有2种，一种就是nodeport类型，还有一种就是LoadBalancer，通常这2中都会做一个负载均衡，但是有一个问题就是服务端可能无法获取到客户端的真实ip，service.spec.externalTrafficPolicy这个字段就帮您解决了这个问题。</p><p>service.spec.externalTrafficPolicy - 表示此服务是否希望将外部流量路由到节点本地或集群范围的端点。 有两个可用选项：Cluster（默认）和 Local。 Cluster 隐藏了客户端源 IP，可能导致第二跳到另一个节点，但具有良好的整体负载分布。 Local 保留客户端源 IP 并避免 LoadBalancer 和 NodePort 类型服务的第二跳， 但存在潜在的不均衡流量传播风险。</p><p>externalTrafficPolicy存在2种模式，一种是默认的Cluster类型，一种是Local类型，Cluster类型就是service基本的模式负载均衡，今天我们来讲一下Local这种模式，为什么Local模式会出现负载不均衡。</p><p>首先我们创建一个externalTrafficPolicy为Cluster类型的service，大家都知道k8s中的网络策略都是通过kube-proxy来配置iptables规则来进行转发的，下面我们查看下externalTrafficPolicy为Cluster类型的service对应nodeport的iptables规则</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-3</span>-centos ~]# kubectl <span class="hljs-keyword">get</span> svc -n test<br><span class="hljs-type">NAME</span>                          <span class="hljs-keyword">TYPE</span>           <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP     PORT(S)        AGE<br>go-test                       ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.46</span><span class="hljs-number">.161</span>   &lt;<span class="hljs-keyword">none</span>&gt;          <span class="hljs-number">80</span>/TCP         <span class="hljs-number">4</span>d16h<br>nginx                         ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.45</span><span class="hljs-number">.116</span>   &lt;<span class="hljs-keyword">none</span>&gt;          <span class="hljs-number">80</span>/TCP         <span class="hljs-number">7</span>d21h<br>nginx-externaltrafficpolicy   NodePort       <span class="hljs-number">172.16</span><span class="hljs-number">.22</span><span class="hljs-number">.159</span>   &lt;<span class="hljs-keyword">none</span>&gt;          <span class="hljs-number">80</span>:<span class="hljs-number">31015</span>/TCP   <span class="hljs-number">15</span>h<br>nginx-<span class="hljs-keyword">log</span>                     LoadBalancer   <span class="hljs-number">172.16</span><span class="hljs-number">.96</span><span class="hljs-number">.7</span>     <span class="hljs-number">106.55</span><span class="hljs-number">.216</span>.XX   <span class="hljs-number">80</span>:<span class="hljs-number">31465</span>/TCP   <span class="hljs-number">3</span>d<br>springboot                    ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.77</span><span class="hljs-number">.157</span>   &lt;<span class="hljs-keyword">none</span>&gt;          <span class="hljs-number">8080</span>/TCP       <span class="hljs-number">4</span>d<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-3</span>-centos ~]# iptables-save | grep <span class="hljs-number">31465</span><br>-A KUBE-NODEPORTS -p tcp -m <span class="hljs-keyword">comment</span> <span class="hljs-comment">--comment &quot;test/nginx-log:80-80-tcp&quot; -m tcp --dport 31465 -j KUBE-MARK-MASQ</span><br>-A KUBE-NODEPORTS -p tcp -m <span class="hljs-keyword">comment</span> <span class="hljs-comment">--comment &quot;test/nginx-log:80-80-tcp&quot; -m tcp --dport 31465 -j KUBE-SVC-4MORCIL57YHWCCJM</span><br></code></pre></td></tr></table></figure><p>我们nignx-log这个service就是Cluster类型，我们发现节点上对应31465这个nodeport的iptables规则就是放通所有来源ip来进行访问这个端口。</p><p>下面我们再看看Local类型的service，对应的iptables规则是什么样，这里我们nginx-externaltrafficpolicy这个service就是Local类型，对应service的yaml文件如下。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Service<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    service.cloud.tencent.com/local-svc-weighted-balance: <span class="hljs-string">&quot;false&quot;</span><br>    service.kubernetes.io/local-svc-only-bind-node-with-pod: <span class="hljs-string">&quot;false&quot;</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-11-26T10:11:47Z&quot;</span><br><span class="hljs-symbol">  managedFields:</span><br>  - apiVersion: v1<br><span class="hljs-symbol">    manager:</span> tke-apiserver<br><span class="hljs-symbol">    operation:</span> Update<br><span class="hljs-symbol">    time:</span> <span class="hljs-string">&quot;2020-11-26T10:11:47Z&quot;</span><br><span class="hljs-symbol">  name:</span> nginx-externaltrafficpolicy<br><span class="hljs-symbol">  namespace:</span> test<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;2118736256&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>test<span class="hljs-keyword">/services/</span>nginx-externaltrafficpolicy<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">7255</span>ae77<span class="hljs-number">-0</span>d6c<span class="hljs-number">-45</span>da<span class="hljs-number">-8171</span><span class="hljs-number">-60521535</span>d020<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  clusterIP:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.22</span><span class="hljs-number">.159</span><br><span class="hljs-symbol">  externalTrafficPolicy:</span> Local<br><span class="hljs-symbol">  ports:</span><br>  - name: <span class="hljs-number">80</span><span class="hljs-number">-80</span>-tcp<br><span class="hljs-symbol">    nodePort:</span> <span class="hljs-number">31015</span><br><span class="hljs-symbol">    port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">    protocol:</span> TCP<br><span class="hljs-symbol">    targetPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">  selector:</span><br>    k8s-app: nginx-externaltrafficpolicy<br>    qcloud-app: nginx-externaltrafficpolicy<br><span class="hljs-symbol">  sessionAffinity:</span> None<br><span class="hljs-symbol">  type:</span> NodePort<br><span class="hljs-symbol">status:</span><br><span class="hljs-symbol">  loadBalancer:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">[<span class="hljs-string">root</span>@<span class="hljs-string">VM-0-3-centos</span> ~]<span class="hljs-comment"># kubectl get svc -n test | grep nginx-externaltrafficpolicy</span><br><span class="hljs-string">nginx-externaltrafficpolicy</span>   <span class="hljs-string">NodePort</span>       <span class="hljs-string">172</span>.<span class="hljs-string">16</span>.<span class="hljs-string">22</span>.<span class="hljs-string">159</span>   &lt;<span class="hljs-string">none</span>&gt;          <span class="hljs-string">80:31015/</span><span class="hljs-string">TCP</span>   <span class="hljs-string">16h</span><br>[<span class="hljs-string">root</span>@<span class="hljs-string">VM-0-3-centos</span> ~]<span class="hljs-comment"># iptables-save | grep 31015</span><br>-<span class="hljs-string">A</span> <span class="hljs-string">KUBE-NODEPORTS</span> -<span class="hljs-string">s</span> <span class="hljs-string">127</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>/<span class="hljs-string">8</span> -<span class="hljs-string">p</span> <span class="hljs-string">tcp</span> -<span class="hljs-string">m</span> <span class="hljs-string">comment</span> <span class="hljs-built_in">--comment</span> <span class="hljs-string">&quot;test/nginx-externaltrafficpolicy:80-80-tcp&quot;</span> -<span class="hljs-string">m</span> <span class="hljs-string">tcp</span> <span class="hljs-built_in">--dport</span> <span class="hljs-string">31015</span> -<span class="hljs-string">j</span> <span class="hljs-string">KUBE-MARK-MASQ</span><br>-<span class="hljs-string">A</span> <span class="hljs-string">KUBE-NODEPORTS</span> -<span class="hljs-string">p</span> <span class="hljs-string">tcp</span> -<span class="hljs-string">m</span> <span class="hljs-string">comment</span> <span class="hljs-built_in">--comment</span> <span class="hljs-string">&quot;test/nginx-externaltrafficpolicy:80-80-tcp&quot;</span> -<span class="hljs-string">m</span> <span class="hljs-string">tcp</span> <span class="hljs-built_in">--dport</span> <span class="hljs-string">31015</span> -<span class="hljs-string">j</span> <span class="hljs-string">KUBE-XLB-3LS5F4HE6J2O753K</span><br></code></pre></td></tr></table></figure><p>:KUBE-MARK-MASQ - [0:0] &#x2F;<em>对于符合条件的包 set mark 0x4000, 有此标记的数据包会在KUBE-POSTROUTING chain中统一做MASQUERADE</em>&#x2F;</p><p>对于KUBE-MARK-MASQ链中所有规则设置了kubernetes独有MARK标记，在KUBE-POSTROUTING链中对NODE节点上匹配kubernetes独有MARK标记的数据包，进行SNAT处理。</p><p>查看节点上nginx-externaltrafficpolicy的nodeport端口的iptables规则，细心的你肯定发现有个地方和Cluster类型的是不一样的，那就是第一条规则中加了一个源ip网段的访问限制，默认只有127.0.0.0&#x2F;8才能访问这个，那么Local模式的原理这里就清楚了，其实就是这个iptables规则配置的源ip导致的。</p><p>这也就是为啥你访问对应的nodeport的时候，只有pod所在的节点才能访问通，我们在同一个vpc下非集群节点进行访问nginx-externaltrafficpolicy这个pod测试一下</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-0</span><span class="hljs-string">-3</span>-centos ~]# kubectl get pod -n test -o wide | grep nginx-externaltrafficpolicy<span class="hljs-string">-6654865</span>c87<span class="hljs-string">-25</span>cnq<br>nginx-externaltrafficpolicy<span class="hljs-string">-6654865</span>c87<span class="hljs-string">-25</span>cnq   2/2     Running   0          16h     10.0.2.37    10.0.0.3    &lt;none&gt;           1/1<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@VM-0-13-centos ~]# curl 10.0.0.3:31015<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>[root@VM-0-13-centos ~]# curl 10.0.0.10:31015<br><br></code></pre></td></tr></table></figure><p>我们发现nginx-externaltrafficpolicy这个pod部署在10.0.0.3这个node上，我们在10.0.0.13这个节点访问nodeport，只有10.0.0.3这个节点的31015这个nodeport可以通，这也是符合Local模式的。</p><p>有的时候我们在定位问题也可以注意一下这个配置，可能出现只能访问pod所在节点才能通，这里可以检查下这个配置是否配置成了Local。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>externalTrafficPolicy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluent-bit收集不同业务日志</title>
    <link href="/2020/11/26/2020-11-26-fluent_bit-collects-different-business-logs/"/>
    <url>/2020/11/26/2020-11-26-fluent_bit-collects-different-business-logs/</url>
    
    <content type="html"><![CDATA[<p>我们将服务部署在k8s中，通常需要收集业务日志进行分析，那么现在常用的日志采集是怎么做的呢，一般来说是搭建EFK系统来采集日志，今天我们来说说如何采集k8s中的不同业务日志然后投递到es不同的索引，然后通过kibana进行分析和查看。</p><p>对于EFK的搭建，我们这里不做具体的讲解，大家可参考 <a href="https://www.niewx.cn/2020/06/10/Build-EFK-log-collection-system-on-TKE/">https://www.niewx.cn/2020/06/10/Build-EFK-log-collection-system-on-TKE/</a> , 今天我们主要来讲一下如何采集不同业务日志进行分析。</p><p>这里我们一共采集3类日志，分别是nginx日志、golang的日志、以及k8s的系统日志，一般我们采集的业务日志都是将业务日志挂载到节点，然后fluent-bit去采集节点上的日志文件，输出到es，通过kibana展示和查询。</p><h1 id="fluent-bit的部署"><a href="#fluent-bit的部署" class="headerlink" title="fluent-bit的部署"></a>fluent-bit的部署</h1><p>我们这里简单说下fluent-bit的部署,我们通过helm部署。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ helm install --name my-release stable/fluent-bit<br></code></pre></td></tr></table></figure><h1 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h1><h2 id="部署nginx"><a href="#部署nginx" class="headerlink" title="部署nginx"></a>部署nginx</h2><p>我们将nginx的日志挂载到节点的&#x2F;data&#x2F;nginx目录下，对应的yaml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2020-11-24T02:08:08Z&quot;</span><br>  <span class="hljs-attr">generation:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-log</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-log</span><br>  <span class="hljs-attr">managedFields:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">manager:</span> <span class="hljs-string">tke-apiserver</span><br>    <span class="hljs-attr">operation:</span> <span class="hljs-string">Update</span><br>    <span class="hljs-attr">time:</span> <span class="hljs-string">&quot;2020-11-24T02:08:08Z&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">manager:</span> <span class="hljs-string">kube-controller-manager</span><br>    <span class="hljs-attr">operation:</span> <span class="hljs-string">Update</span><br>    <span class="hljs-attr">time:</span> <span class="hljs-string">&quot;2020-11-27T03:21:32Z&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-log</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;2156061896&quot;</span><br>  <span class="hljs-attr">selfLink:</span> <span class="hljs-string">/apis/apps/v1/namespaces/test/deployments/nginx-log</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">eb42b8f7-97f7-405b-a750-d46df6bcd8c6</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-log</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-log</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-log</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-log</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-log</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/nginx/nginx.conf</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">nginx.conf</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log/nginx</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">log</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">qcloudregistrykey</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-conf</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/data/nginx</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">DirectoryOrCreate</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">log</span><br></code></pre></td></tr></table></figure><h2 id="部署golang"><a href="#部署golang" class="headerlink" title="部署golang"></a>部署golang</h2><p>我们将golang的日志文件挂载到节点的&#x2F;data&#x2F;go目录下，对应的yaml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;11&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2020-11-22T09:30:22Z&quot;</span><br>  <span class="hljs-attr">generation:</span> <span class="hljs-number">11</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">go-test</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">go-test</span><br>  <span class="hljs-attr">managedFields:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">manager:</span> <span class="hljs-string">tke-apiserver</span><br>    <span class="hljs-attr">operation:</span> <span class="hljs-string">Update</span><br>    <span class="hljs-attr">time:</span> <span class="hljs-string">&quot;2020-11-27T05:47:59Z&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">manager:</span> <span class="hljs-string">kube-controller-manager</span><br>    <span class="hljs-attr">operation:</span> <span class="hljs-string">Update</span><br>    <span class="hljs-attr">time:</span> <span class="hljs-string">&quot;2020-11-27T05:59:13Z&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">go-test</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;2161865161&quot;</span><br>  <span class="hljs-attr">selfLink:</span> <span class="hljs-string">/apis/apps/v1/namespaces/test/deployments/go-test</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">b267fe91-c0c7-40a5-94e2-cd1d169576a3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">go-test</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">go-test</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">go-test</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">go-test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nwx-test.tencentcloudcr.com/nwx/go-test:go-20201127</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">go-test</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/data/go</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">DirectoryOrCreate</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br></code></pre></td></tr></table></figure><h1 id="修改fluent-bit的配置文件和yaml"><a href="#修改fluent-bit的配置文件和yaml" class="headerlink" title="修改fluent-bit的配置文件和yaml"></a>修改fluent-bit的配置文件和yaml</h1><h2 id="修改fluent-bit-conf"><a href="#修改fluent-bit-conf" class="headerlink" title="修改fluent-bit.conf"></a>修改fluent-bit.conf</h2><p>这里我们将fluent-bit.conf分成多个配置文件进行配置，你也可以配置到一个fluent-bit.conf</p><h3 id="fluent-bit-conf配置项介绍"><a href="#fluent-bit-conf配置项介绍" class="headerlink" title="fluent-bit.conf配置项介绍"></a>fluent-bit.conf配置项介绍</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#1）fluent-bit-configmap.yaml修改部分（红字）：</span><br><span class="hljs-comment">#红色部分修改成自己想要的index名字</span><br>  output-elasticsearch.conf: |<br>   [OUTPUT]<br>       Name            es<br>       Match           *<br>       Host            <span class="hljs-variable">$&#123;FLUENT_ELASTICSEARCH_HOST&#125;</span><br>       Port            <span class="hljs-variable">$&#123;FLUENT_ELASTICSEARCH_PORT&#125;</span><br>       Logstash_Format On<br>       Replace_Dots    On<br>       Retry_Limit     False<br>       Logstash_Prefix test_k8s<br><span class="hljs-comment">#2）fluent-bit-ds.yaml修改部分：</span><br><span class="hljs-comment">#将FLUENT_ELASTICSEARCH_HOST修改成自己的Elasticsearch地址</span><br> env:<br> - name: FLUENT_ELASTICSEARCH_HOST<br>   value: <span class="hljs-string">&quot;es.haha.com&quot;</span><br> - name: FLUENT_ELASTICSEARCH_PORT<br>   value: <span class="hljs-string">&quot;80&quot;</span><br><br><span class="hljs-comment">#1）fluent-bit-configmap.yaml修改部分（红字）：</span><br><span class="hljs-comment">#红色部分修改成自己想要的index名字</span><br>  output-elasticsearch.conf: |<br>   [OUTPUT]<br>       Name            kafka<br>       Match           *<br>       Brokers         <span class="hljs-variable">$&#123;FLUENT_KAFKA_ADDR&#125;</span><br>       Topics          <span class="hljs-variable">$&#123;FLUENT_KAFKA_TOPIC&#125;</span><br>       Timestamp_Key  @timestamp<br>       Retry_Limit    false<br>       <span class="hljs-comment"># hides errors &quot;Receive failed: Disconnected&quot; when kafka kills idle connections</span><br>       rdkafka.log.connection.close false<br>       <span class="hljs-comment"># producer buffer is not included in http://fluentbit.io/documentation/0.12/configuration/memory_usage.html#estimating</span><br>       rdkafka.queue.buffering.max.kbytes <span class="hljs-number">10240</span><br>       <span class="hljs-comment"># for logs you&#x27;ll probably want this ot be 0 or 1, not more</span><br>       rdkafka.request.required.acks <span class="hljs-number">1</span><br><span class="hljs-comment">#2）fluent-bit-ds.yaml修改部分：</span><br><span class="hljs-comment">#将FLUENT_KAFKA_ADDR修改成自己的Kafka地址</span><br> env:<br> - name: FLUENT_KAFKA_ADDR<br>   value: <span class="hljs-string">&quot;es.haha.com&quot;</span><br> - name: FLUENT_KAFKA_TOPIC<br>   value: <span class="hljs-string">&quot;test_k8s&quot;</span>  <br><br>[SERVICE]<br>    Flush         <span class="hljs-number">1</span> <span class="hljs-comment">#buffer里的数据每隔1秒写到output插件里，这里写到ES里。</span><br>    Log_Level     info <span class="hljs-comment">#fluent-bit的日志级别</span><br>    Daemon        off<br>    Parsers_File  parsers.conf <span class="hljs-comment">#指向了另外一个配置文件，里面配置所有的parser。</span><br>    HTTP_Server   On<br>    HTTP_Listen   <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>    HTTP_Port     <span class="hljs-number">2020</span><br> <br>[INPUT]<br>    Name              tail <span class="hljs-comment">#指定了input插件的类型，这里是tail类型</span><br>    Tag              &#123;&#123;<span class="hljs-variable">$Host</span>&#125;&#125;_&#123;&#123;<span class="hljs-variable">$ESIndex</span>&#125;&#125;_&#123;&#123;.ContainerName&#125;&#125;_&#123;&#123;<span class="hljs-variable">$i</span>&#125;&#125; <span class="hljs-comment">#给采集的日志打个标签，后面filter和output根据这个标签选择数据源</span><br>    Path              <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/pods/</span><span class="hljs-variable">$&#123;POD_UID&#125;</span><span class="hljs-regexp">/&#123;&#123;.ContainerName&#125;&#125;/</span>*.log<br>    Path_Key          filename<br>    Parser            docker<br>    DB                <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/pods/</span><span class="hljs-variable">$&#123;POD_UID&#125;</span><span class="hljs-regexp">/&#123;&#123;.ContainerName&#125;&#125;/</span>flb_std.db<span class="hljs-comment">#记录哪个文件采集到哪一行</span><br>    DB.Sync           Full <span class="hljs-comment">#internal SQLite engine用哪种方法同步数据到磁盘，full为安全优先Key</span><br>    Mem_Buf_Limit     <span class="hljs-number">5</span>MB <span class="hljs-comment">#一旦buffer里的数据超过Mem_buf_limit，tail就会暂停采集，直到buffer数据被flush到output</span><br>    Skip_Long_Lines   Off <span class="hljs-comment">#跳过长度大于Buffer_Max_Size的行,默认On,不关闭会出现have long lines.Skipping long lines的错误      </span><br>    Buffer_Chunk_Size <span class="hljs-number">32</span>k <span class="hljs-comment">#tail命令的buffer初始大小，具体作用和对性能的影响还需进一步研究</span><br>    Buffer_Max_Size   <span class="hljs-number">32</span>k <span class="hljs-comment">#tail命令的buffer最大值，具体作用和对性能的影响还需进一步研究</span><br>    Refresh_Interval  <span class="hljs-number">10</span> <span class="hljs-comment">#定时扫描磁盘上的新文件的间隔</span><br>    Rotate_Wait        <span class="hljs-number">5</span> <span class="hljs-comment">#文件rotate后的等待一段时间后再继续监控这个文件，以防flush一些pending data</span><br>    Ignore_Older       <span class="hljs-number">10</span>d <span class="hljs-comment">#忽略近十天来未更改的文件</span><br>[FILTER]<br>    Name                modify <span class="hljs-comment">#插件的类型</span><br>    Match               * <span class="hljs-comment">#匹配到任何数据源</span><br>    Add node_name <span class="hljs-variable">$&#123;NODE_NAME&#125;</span><br>    Add node_ip <span class="hljs-variable">$&#123;NODE_IP&#125;</span><br>    Add pod_name <span class="hljs-variable">$&#123;POD_NAME&#125;</span><br> <br>[OUTPUT]<br>    Name   es <span class="hljs-comment">#插件的类型</span><br>    Match  &#123;&#123;.Host&#125;&#125;_&#123;&#123;.ESIndex&#125;&#125;* <span class="hljs-comment">#匹配到tag为&#123;&#123;.Host&#125;&#125;_&#123;&#123;.ESIndex&#125;&#125;*的数据源</span><br>    Host   &#123;&#123;.HostName&#125;&#125; <span class="hljs-comment">#es的hostname 可以是域名和ip</span><br>    Port   &#123;&#123;.Port&#125;&#125; <span class="hljs-comment">#es的端口</span><br>    Index &#123;&#123;.ESIndex&#125;&#125; <br>    HTTP_User &#123;&#123;.UserName&#125;&#125;<br>    HTTP_Passwd &#123;&#123;.Password&#125;&#125;<br>    Pipeline <span class="hljs-comment">#不要用</span><br>    Logstash_Format  On <span class="hljs-comment">#是否采用类似logstash的index，可以根据时间设置index名字</span><br>    Logstash_Prefix logstash <span class="hljs-comment">#索引名称的前缀</span><br>    Logstash_DateFormat %Y.%m.%d <span class="hljs-comment">#名称后缀格式</span><br>    Time_Key  tail-time <span class="hljs-comment">#Logstash_Format enabled的时候，每条记录会新产生一个时间戳</span><br>    Time_Key_Format %Y-%m-%dT%H:%M:%S <span class="hljs-comment">#新时间戳的格式</span><br>    Generate_ID  On <span class="hljs-comment">#对记录去重，可能有性能消耗。</span><br>    Trace_Output Off <span class="hljs-comment">#打印elasticsearch API calls 调试的时候用。</span><br>    Logstash_Prefix_Key ttt <span class="hljs-comment">#</span><br>    Retry_Limit     <span class="hljs-number">5</span> <span class="hljs-comment">#传输失败后重试次数，默认为2，设置为False时，无限次重试</span><br></code></pre></td></tr></table></figure><h3 id="fluent-bit-filter-conf"><a href="#fluent-bit-filter-conf" class="headerlink" title="fluent-bit-filter.conf"></a>fluent-bit-filter.conf</h3><p>日志过滤配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[FILTER]<br>    Name                kubernetes<br>    Match               kube.*<br>    Kube_Tag_Prefix     kube.var.log.containers.<br>    Kube_URL            https:<span class="hljs-regexp">//</span>kubernetes.default.svc:<span class="hljs-number">443</span><br>    Kube_CA_File        <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>ca.crt<br>    Kube_Token_File     <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>token<br>    Merge_Log           On<br>    K8S-Logging.Parser  On<br>    K8S-Logging.Exclude On  <br></code></pre></td></tr></table></figure><h3 id="fluent-bit-input-conf"><a href="#fluent-bit-input-conf" class="headerlink" title="fluent-bit-input.conf"></a>fluent-bit-input.conf</h3><p>日志源输入配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[INPUT]<br>    Name              <span class="hljs-built_in">tail</span><br>    Path              /var/log/containers/*.<span class="hljs-built_in">log</span><br>    Parser            docker<br>    Tag               kube.*<br>    Refresh_Interval  5<br>    Mem_Buf_Limit     5MB<br>    Skip_Long_Lines   On<br><br>[INPUT]<br>    Name              <span class="hljs-built_in">tail</span><br>    Path               /data/nginx/*.<span class="hljs-built_in">log</span><br>    Tag               nginx.*<br>    Refresh_Interval  5<br>    Mem_Buf_Limit     5MB<br>    Skip_Long_Lines   On<br><br>[INPUT]<br>    Name              <span class="hljs-built_in">tail</span><br>    Path               /data/go/*.<span class="hljs-built_in">log</span><br>    Tag               go.*<br>    Refresh_Interval  5<br>    Mem_Buf_Limit     5MB<br>    Skip_Long_Lines   On<br></code></pre></td></tr></table></figure><h3 id="fluent-bit-output-conf"><a href="#fluent-bit-output-conf" class="headerlink" title="fluent-bit-output.conf"></a>fluent-bit-output.conf</h3><p>日志投递输出配置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[OUTPUT]<br>     Name            es<br>     Match           nginx.*<br>     Host            elasticsearch-<span class="hljs-keyword">master</span><br>     <span class="hljs-title">Port</span>            <span class="hljs-number">9200</span><br>     Logstash_Format  On<br>     Logstash_Prefix  nginx<br>     Replace_Dots    On<br>     Retry_Limit     <span class="hljs-literal">False</span><br><br>[OUTPUT]<br>     Name            es<br>     Match           kube.*<br>     Host            elasticsearch-<span class="hljs-keyword">master</span><br>     <span class="hljs-title">Port</span>            <span class="hljs-number">9200</span><br>     Logstash_Format  On<br>     Logstash_Prefix  k8s<br>     Replace_Dots    On<br>     Retry_Limit     <span class="hljs-literal">False</span><br><br><br>[OUTPUT]<br>     Name            es<br>     Match           go.*<br>     Host            elasticsearch-<span class="hljs-keyword">master</span><br>     <span class="hljs-title">Port</span>            <span class="hljs-number">9200</span><br>     Logstash_Format  On<br>     Logstash_Prefix  go<br>     Replace_Dots    On<br>     Retry_Limit     <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="fluent-bit-service-conf"><a href="#fluent-bit-service-conf" class="headerlink" title="fluent-bit-service.conf"></a>fluent-bit-service.conf</h3><p>日志读取配置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[SERVICE]<br>    Flush        <span class="hljs-number">1</span><br>    Daemon       <span class="hljs-keyword">Off</span><br>    Log_Level    <span class="hljs-keyword">info</span><br>    Parsers_File parsers.conf<br></code></pre></td></tr></table></figure><h3 id="fluent-bit-conf"><a href="#fluent-bit-conf" class="headerlink" title="fluent-bit.conf"></a>fluent-bit.conf</h3><p>fluent-bit的配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@INCLUDE</span> fluent-bit-service.conf<br><span class="hljs-variable">@INCLUDE</span> fluent-bit-input.conf<br><span class="hljs-variable">@INCLUDE</span> fluent-bit-filter.conf<br><span class="hljs-variable">@INCLUDE</span> fluent-bit-output.conf<br></code></pre></td></tr></table></figure><h3 id="parsers-conf"><a href="#parsers-conf" class="headerlink" title="parsers.conf"></a>parsers.conf</h3><p>日志转换配置,这里暂未配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">空<br></code></pre></td></tr></table></figure><h2 id="修改fluent-bit的daemonset的yaml"><a href="#修改fluent-bit的daemonset的yaml" class="headerlink" title="修改fluent-bit的daemonset的yaml"></a>修改fluent-bit的daemonset的yaml</h2><p>我们在fluent-bit的配置文件中指定了日志源的的采集和输出，但是fluent-bit pod是无法获取节点的日志文件，我们需要将节点的文件挂载到pod进行采集。修改的挂载yaml文件如下,其实就是把&#x2F;data&#x2F;nginx和&#x2F;data&#x2F;go这2个目录挂载到fluent-bit的pod中，当然还有默认的k8s日志采集目录&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers和系统日志目录&#x2F;var&#x2F;log，只是这2个目录不用我们自己手动修改，默认yaml会配置这2个。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1<br><span class="hljs-symbol">kind:</span> DaemonSet<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    deprecated.daemonset.template.generation: <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-11-24T05:12:12Z&quot;</span><br><span class="hljs-symbol">  generation:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> fluent-bit<br><span class="hljs-symbol">    chart:</span> fluent-bit<span class="hljs-number">-2.8</span><span class="hljs-number">.16</span><br><span class="hljs-symbol">    heritage:</span> Helm<br><span class="hljs-symbol">    release:</span> nwx-fluent<br><span class="hljs-symbol">  managedFields:</span><br>  - apiVersion: apps/v1<br><span class="hljs-symbol">    manager:</span> Go-http-client<br><span class="hljs-symbol">    operation:</span> Update<br><span class="hljs-symbol">    time:</span> <span class="hljs-string">&quot;2020-11-24T05:12:12Z&quot;</span><br>  - apiVersion: apps/v1<br><span class="hljs-symbol">    manager:</span> tke-apiserver<br><span class="hljs-symbol">    operation:</span> Update<br><span class="hljs-symbol">    time:</span> <span class="hljs-string">&quot;2020-11-27T06:28:28Z&quot;</span><br>  - apiVersion: apps/v1<br><span class="hljs-symbol">    manager:</span> kube-controller-manager<br><span class="hljs-symbol">    operation:</span> Update<br><span class="hljs-symbol">    time:</span> <span class="hljs-string">&quot;2020-11-27T06:29:01Z&quot;</span><br><span class="hljs-symbol">  name:</span> nwx-fluent-fluent-bit<br><span class="hljs-symbol">  namespace:</span> log<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;2162960999&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/apis/</span>apps<span class="hljs-keyword">/v1/</span>namespaces<span class="hljs-keyword">/log/</span>daemonsets/nwx-fluent-fluent-bit<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">62891</span>a61<span class="hljs-number">-809</span>c<span class="hljs-number">-4045</span><span class="hljs-number">-9</span>f34<span class="hljs-number">-4</span>b742cd8cc7c<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  revisionHistoryLimit:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> fluent-bit<br><span class="hljs-symbol">      release:</span> nwx-fluent<br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      annotations:</span><br>        checksum/config: a3e666db2b70ae3c1b8de003ce768a3ed14ff02dd643df16d2d6d2be111d3910<br><span class="hljs-symbol">      creationTimestamp:</span> null<br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> fluent-bit<br><span class="hljs-symbol">        release:</span> nwx-fluent<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - image: fluent/fluent-bit:<span class="hljs-number">1.3</span><span class="hljs-number">.7</span><br><span class="hljs-symbol">        imagePullPolicy:</span> Always<br><span class="hljs-symbol">        name:</span> fluent-bit<br><span class="hljs-symbol">        resources:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">        securityContext:</span><br><span class="hljs-symbol">          privileged:</span> false<br><span class="hljs-symbol">        terminationMessagePath:</span> <span class="hljs-keyword">/dev/</span>termination-log<br><span class="hljs-symbol">        terminationMessagePolicy:</span> File<br><span class="hljs-symbol">        volumeMounts:</span><br>        - mountPath: <span class="hljs-keyword">/var/</span>log<br><span class="hljs-symbol">          name:</span> varlog<br>        - mountPath: <span class="hljs-keyword">/var/</span>lib<span class="hljs-keyword">/docker/</span>containers<br><span class="hljs-symbol">          name:</span> varlibdockercontainers<br><span class="hljs-symbol">          readOnly:</span> true<br>        - mountPath: <span class="hljs-keyword">/etc/</span>fluent-bit.conf<br><span class="hljs-symbol">          name:</span> config<br><span class="hljs-symbol">          subPath:</span> fluent-bit.conf<br>        - mountPath: <span class="hljs-keyword">/etc/</span>fluent-bit-service.conf<br><span class="hljs-symbol">          name:</span> config<br><span class="hljs-symbol">          subPath:</span> fluent-bit-service.conf<br>        - mountPath: <span class="hljs-keyword">/etc/</span>fluent-bit-input.conf<br><span class="hljs-symbol">          name:</span> config<br><span class="hljs-symbol">          subPath:</span> fluent-bit-input.conf<br>        - mountPath: <span class="hljs-keyword">/etc/</span>fluent-bit-filter.conf<br><span class="hljs-symbol">          name:</span> config<br><span class="hljs-symbol">          subPath:</span> fluent-bit-filter.conf<br>        - mountPath: <span class="hljs-keyword">/etc/</span>fluent-bit-output.conf<br><span class="hljs-symbol">          name:</span> config<br><span class="hljs-symbol">          subPath:</span> fluent-bit-output.conf<br>        - mountPath: <span class="hljs-keyword">/data/</span>nginx<br><span class="hljs-symbol">          name:</span> nginx<br>        - mountPath: <span class="hljs-keyword">/data/</span>go<br><span class="hljs-symbol">          name:</span> go<br><span class="hljs-symbol">      dnsPolicy:</span> ClusterFirst<br><span class="hljs-symbol">      restartPolicy:</span> Always<br><span class="hljs-symbol">      schedulerName:</span> default-scheduler<br><span class="hljs-symbol">      securityContext:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">      serviceAccount:</span> nwx-fluent-fluent-bit<br><span class="hljs-symbol">      serviceAccountName:</span> nwx-fluent-fluent-bit<br><span class="hljs-symbol">      terminationGracePeriodSeconds:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">      volumes:</span><br>      - hostPath:<br><span class="hljs-symbol">          path:</span> <span class="hljs-keyword">/var/</span>log<br><span class="hljs-symbol">          type:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">        name:</span> varlog<br>      - hostPath:<br><span class="hljs-symbol">          path:</span> <span class="hljs-keyword">/var/</span>lib<span class="hljs-keyword">/docker/</span>containers<br><span class="hljs-symbol">          type:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">        name:</span> varlibdockercontainers<br>      - configMap:<br><span class="hljs-symbol">          defaultMode:</span> <span class="hljs-number">420</span><br><span class="hljs-symbol">          name:</span> nwx-fluent-fluent-bit-config<br><span class="hljs-symbol">        name:</span> config<br>      - hostPath:<br><span class="hljs-symbol">          path:</span> <span class="hljs-keyword">/data/</span>nginx<br><span class="hljs-symbol">          type:</span> DirectoryOrCreate<br><span class="hljs-symbol">        name:</span> nginx<br>      - hostPath:<br><span class="hljs-symbol">          path:</span> <span class="hljs-keyword">/data/</span>go<br><span class="hljs-symbol">          type:</span> DirectoryOrCreate<br><span class="hljs-symbol">        name:</span> go<br><span class="hljs-symbol">  updateStrategy:</span><br><span class="hljs-symbol">    rollingUpdate:</span><br><span class="hljs-symbol">      maxUnavailable:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">    type:</span> RollingUpdate<br></code></pre></td></tr></table></figure><h1 id="在kibana上创建索引检索日志"><a href="#在kibana上创建索引检索日志" class="headerlink" title="在kibana上创建索引检索日志"></a>在kibana上创建索引检索日志</h1><p>将上面的修改和部署都执行后，我们可以到对应的kibana上创建索引去搜索日志，这里我们已经对golang和nignx服务进行访问了，生成了一些日志</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 访问golang</span><br><span class="hljs-attribute">for</span> i in &#123;<span class="hljs-number">1</span>..<span class="hljs-number">100</span>&#125;; do curl <span class="hljs-number">172.16.46.161:3000</span>/api/v1; done<br><span class="hljs-attribute">for</span> i in &#123;<span class="hljs-number">1</span>..<span class="hljs-number">1000</span>&#125;; do curl <span class="hljs-number">172.16.46.161:3000</span>/; done<br><br><span class="hljs-comment"># 访问nginx</span><br><span class="hljs-attribute">for</span> i in &#123;<span class="hljs-number">1</span>..<span class="hljs-number">1000</span>&#125;; do curl <span class="hljs-number">106</span>.<span class="hljs-number">55</span>.<span class="hljs-number">216</span>.xx; done<br></code></pre></td></tr></table></figure><p>我们先查看下es的索引，看看nignx和golang的日志索引在不在</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-0-3-centos go]<span class="hljs-comment"># curl 172.16.111.218:9200/_cat/indices</span><br>green open k8s-2020.11.27   nOs7_AthSIGY6j_tODcdfA<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1393033 </span>0   632mb   316mb<br>green open k8s-2020.11.19   vUvvsjSSQy6r8VQeDSKZgw<span class="hljs-number"> 1 </span>1   <span class="hljs-number"> 6732 </span>0   5.6mb   2.8mb<br>green open nginx-2020.11.27 LGjCjAW4Q3yJnGd-Y-_E8w<span class="hljs-number"> 1 </span>1  <span class="hljs-number"> 12172 </span>0   4.4mb   2.2mb<br>green open k8s-2020.11.20   nQhDsyryS8aMfMwJCRAEKA<span class="hljs-number"> 1 </span>1 <span class="hljs-number"> 103524 </span>0    34mb    17mb<br>green open k8s-2020.11.21   GHlg75nhRYqZTF3Z3p-D2Q<span class="hljs-number"> 1 </span>1 <span class="hljs-number"> 121832 </span>0  37.5mb  18.9mb<br>green open go-2020.11.27    -jrQRrQOTGWxuiibaA-Fjg<span class="hljs-number"> 1 </span>1   <span class="hljs-number"> 5101 </span>0 404.3kb 203.2kb<br>green open k8s-2020.11.22   B0QA301jRsu-Vmc6N4AD3Q<span class="hljs-number"> 1 </span>1  <span class="hljs-number"> 95367 </span>0  29.1mb  14.5mb<br>green open k8s-2020.11.23   fPlbbGFBR3qiZGn4sAdDYQ<span class="hljs-number"> 1 </span>1  <span class="hljs-number"> 67689 </span>0  20.8mb  10.3mb<br>green open .kibana_1        6DW_R-VvTwOlEvp8gISckA<span class="hljs-number"> 1 </span>1      <span class="hljs-number"> 4 </span>0  71.2kb  35.6kb<br>green open k8s-2020.11.24   JHKRDHVWQqmIkvpxMFTa-w<span class="hljs-number"> 1 </span>1 <span class="hljs-number"> 124659 </span>0  43.2mb  21.7mb<br>green open k8s-2020.11.25   JZ8WQTFnSSeOJRcW6mDl8w<span class="hljs-number"> 1 </span>1  <span class="hljs-number"> 66867 </span>0  21.3mb  10.6mb<br>green open k8s-2020.11.26   FEvX7ZJlRammlS3xrqnqTQ<span class="hljs-number"> 1 </span>1 <span class="hljs-number"> 259974 </span>0 175.9mb  87.9mb<br><br></code></pre></td></tr></table></figure><p>这里查看到是有nginx和golang的日志索引的，下面我们去kibana创建一下index</p><p><img src="/img/2020-11-26-fluent_bit-collects-different-business-logs/1.png" alt="upload-image"> </p><p>我们分别创建nginx-*、go-*、k8s-*分配来查询对应的业务日志</p><p>我们golang日志主要是存在2条类型日志“我访问了&#x2F;api&#x2F;v1这个路径”和“我访问了Hello World这个路径”，下面我们去检索下，看看能不能搜到</p><p><img src="/img/2020-11-26-fluent_bit-collects-different-business-logs/2.png" alt="upload-image"> </p><p><img src="/img/2020-11-26-fluent_bit-collects-different-business-logs/3.png" alt="upload-image"> </p><p>生成的日志我们都是可以搜索到的。</p><p>下面我们在49.235.179.157这个机器上对nginx的service进行访问，看看我们在日志能不能获取到49.235.179.157个客户端ip</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i in &#123;<span class="hljs-number">1</span>..<span class="hljs-number">1000</span>&#125;; do curl <span class="hljs-number">106</span>.<span class="hljs-number">55</span>.<span class="hljs-number">216</span>.xx; done<br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-26-fluent_bit-collects-different-business-logs/4.png" alt="upload-image"> </p><p>刚刚访问的记录我们也可以早上面搜索到</p><p>k8s的一些系统日志和其他pod日志，我们可以在k8s-*这个索引下进行检索，这里我们搜一下我们部署的es的pod日志</p><p><img src="/img/2020-11-26-fluent_bit-collects-different-business-logs/5.png" alt="upload-image"> </p><p>es的日志我们也可以在kibana上查找到</p><p>到这里，对于日志的采集，我们基本上就结束了，这里我们只要按照上面步骤进行挂载和配置，你就可以通过EFK采集到不同的业务日志，然后可以在kibana进行图标的制作和展示。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Log</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>EFK</tag>
      
      <tag>Fluent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之多集群的访问</title>
    <link href="/2020/11/25/2020-11-25-kubectl-access-to-many-clusters/"/>
    <url>/2020/11/25/2020-11-25-kubectl-access-to-many-clusters/</url>
    
    <content type="html"><![CDATA[<p>日常使用k8s的过程中，我们可能存在多个集群需要管理，那么我们用kubectl来进行集群的切换个访问呢，下面简单说一下操作方式。</p><h1 id="多集群kubeconfig合并"><a href="#多集群kubeconfig合并" class="headerlink" title="多集群kubeconfig合并"></a>多集群kubeconfig合并</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root/.kube/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> new-config1    <span class="hljs-comment">#将一个集群kubeconfig内容写入new-config1文件中</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> new-config2    <span class="hljs-comment">#将另一个集群kubeconfig内容写入new-config2文件中</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">KUBECONFIG=new-config1:new-config2  kubectl config view --flatten &gt; <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl config get-contexts   <span class="hljs-comment">#获取集群信息</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl config use-context xxxx-context-default   <span class="hljs-comment">#切换集群</span></span><br></code></pre></td></tr></table></figure><h1 id="多集群kubeconfig中user信息相同如何合并"><a href="#多集群kubeconfig中user信息相同如何合并" class="headerlink" title="多集群kubeconfig中user信息相同如何合并"></a>多集群kubeconfig中user信息相同如何合并</h1><p>有的时候我们的不同集群的kubeconfig,会存在user和name信息都是admin，因为集群一般默认是用admin用户作为kubectl的kubeconfig,当你执行命令进行合并的时候发现新的config文件只会存在一个集群信息可以操作，这是因为user和name信息相同导致合并后只取一个集群的信息。这个需要怎么处理呢，我们这边讲解下，下面文件的token和证书都是测试的，防止泄露集群，信息已被更改。</p><p>集群A的config1</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01URXlOVEF5TURRek9Wb1hEVE13TVRFeU16QXlNRFF6T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWYwCk5yWDFVYXU0d1ppdC9uKy9meWlydHNIUnlYMWJvRDE2bUU3elo3Y3kwSit2WjVTdkZHMW5xbksvMmNzTWF6clUKM0tVTUZpZTE1Z1hvOThwTFBiMnFYaWpnTlZYc1N4ZnhPVG9PajJVU09WV2FiSCswLytRbVdsQXhQa242MUsvZ</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://cls-A.ccs.tencent-cloud.com</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-A-context-default</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-A-context-default</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: admin</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">98Kvn5zx</span><br></code></pre></td></tr></table></figure><p>集群B的config2</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01URXlOVEF5TURRek9Wb1hEVE13TVRFeU16QXlNRFF6T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWYwCk5yWDFVYXU0d1ppdC9uKy9meWlydHNIUnlYMWJvRDE2bUU3elo3Y3kwSit2WjVTdkZHMW5xbksvMmNzTWF6clUKM0tVTUZpZTE1Z1hvOThwTFBiMnFYaWpnTlZYc1N4ZnhPVG9PajJVU09WV2FiSCswLytRbVdsQXhQa242MUsvZ</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://cls-B.ccs.tencent-cloud.com</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-B-context-default</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-B-context-default</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: admin</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">FDSFKvn5zx</span><br></code></pre></td></tr></table></figure><p>执行下面命令会出现合并后可以切换集群，但是切换集群后，获取集群节点等信息都是一个集群的。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">KUBECONFIG=<span class="hljs-keyword">new</span>-config1:<span class="hljs-keyword">new</span>-config2  kubectl config view --<span class="hljs-keyword">flatten</span> &gt; $HOME<span class="hljs-regexp">/.kube/</span>config<br></code></pre></td></tr></table></figure><p>那么我们需要如何修改呢，可以按照下面方式修改下</p><p>修改后集群A的config1</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01URXlOVEF5TURRek9Wb1hEVE13TVRFeU16QXlNRFF6T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWYwCk5yWDFVYXU0d1ppdC9uKy9meWlydHNIUnlYMWJvRDE2bUU3elo3Y3kwSit2WjVTdkZHMW5xbksvMmNzTWF6clUKM0tVTUZpZTE1Z1hvOThwTFBiMnFYaWpnTlZYc1N4ZnhPVG9PajJVU09WV2FiSCswLytRbVdsQXhQa242MUsvZ</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://cls-A.ccs.tencent-cloud.com</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">A</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">A</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">A-admin</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-A-context-default</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-A-context-default</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: A-admin</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">98Kvn5zx</span><br></code></pre></td></tr></table></figure><p>修改后集群B的config2</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01URXlOVEF5TURRek9Wb1hEVE13TVRFeU16QXlNRFF6T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWYwCk5yWDFVYXU0d1ppdC9uKy9meWlydHNIUnlYMWJvRDE2bUU3elo3Y3kwSit2WjVTdkZHMW5xbksvMmNzTWF6clUKM0tVTUZpZTE1Z1hvOThwTFBiMnFYaWpnTlZYc1N4ZnhPVG9PajJVU09WV2FiSCswLytRbVdsQXhQa242MUsvZ</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://cls-B.ccs.tencent-cloud.com</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">B-admin</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-B-context-default</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cls-B-context-default</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: B-admin</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">FDSFKvn5zx</span><br></code></pre></td></tr></table></figure><p>然后再执行合并config命令,执行kubectl切换集群获取集群信息正常</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">KUBECONFIG=<span class="hljs-keyword">new</span>-config1:<span class="hljs-keyword">new</span>-config2  kubectl config view --<span class="hljs-keyword">flatten</span> &gt; $HOME<span class="hljs-regexp">/.kube/</span>config<br></code></pre></td></tr></table></figure><h1 id="kubectx命令切换集群"><a href="#kubectx命令切换集群" class="headerlink" title="kubectx命令切换集群"></a>kubectx命令切换集群</h1><p>我们也可以通过kubectx这个小工具进行集群的切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">yum install git -y</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/ahmetb/kubectx /opt/kubectx</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -s /opt/kubectx/kubectx /usr/local/bin/kubectx</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> KUBECONFIG=<span class="hljs-variable">$KUBECONFIG</span>:<span class="hljs-variable">$HOME</span>/.kube/config1:<span class="hljs-variable">$HOME</span>/.kube/config2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectx</span><br>cls-hzywbn-context-default<br>cls-llbn4z-context-default<br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectx cls-hzywbn88-context-default</span><br>Switched to context &quot;cls-hzywbn-context-default&quot;.<br></code></pre></td></tr></table></figure><h1 id="kubens工具快速切换命名空间"><a href="#kubens工具快速切换命名空间" class="headerlink" title="kubens工具快速切换命名空间"></a>kubens工具快速切换命名空间</h1><p>其实这个项目中还有一个小工具可以快速切换ns，这里我们简单讲解下如何使用</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># ln -s /opt/kubectx/kubens /usr/local/bin/kubens</span><br><span class="hljs-comment"># kubens</span><br>default<br>gitlab<br>istio-system<br>kube-node-lease<br>kube-ops<br>kube-public<br>kube-system<br>log<span class="hljs-built_in"></span><br><span class="hljs-built_in">monitor</span><br><span class="hljs-built_in"></span>tcr-assistant-system<br>test<br>treafik<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>kubeconfig</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之etcd数据库</title>
    <link href="/2020/11/19/2020-11-19-Etcd-database-of-Kubernetes/"/>
    <url>/2020/11/19/2020-11-19-Etcd-database-of-Kubernetes/</url>
    
    <content type="html"><![CDATA[<p>etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用raft协议作为一致性算法，etcd基于Go语言实现。</p><p>etcd作为服务发现系统，有以下的特点：</p><ul><li>简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单</li><li>安全：支持SSL证书验证</li><li>快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作</li><li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性</li></ul><p>由于上面的特点和优势，etcd也被作为k8s默认的存储数据库，今天我们来讲一讲如何部署etcd数据库集群以及etcd的一些常见使用方法。</p><h1 id="Docker-compose搭建etcd集群"><a href="#Docker-compose搭建etcd集群" class="headerlink" title="Docker-compose搭建etcd集群"></a>Docker-compose搭建etcd集群</h1><p>编写docker-compose.yml文件，具体内容如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">byfn</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">etcd1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">quay.io/coreos/etcd</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">etcd1</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">etcd -name etcd1 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster &quot;etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380&quot; -initial-cluster-state new</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2379</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2380</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span><br> <br>  <span class="hljs-attribute">etcd2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">quay.io/coreos/etcd</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">etcd2</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">etcd -name etcd2 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster &quot;etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380&quot; -initial-cluster-state new</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2379</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2380</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span><br>  <br>  <span class="hljs-attribute">etcd3</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">quay.io/coreos/etcd</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">etcd3</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">etcd -name etcd3 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster &quot;etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380&quot; -initial-cluster-state new</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2379</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2380</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span><br></code></pre></td></tr></table></figure><p>参数介绍：</p><ul><li>data-dir 指定节点的数据存储目录，这些数据包括节点ID，集群ID，集群初始化配置，</li><li>Snapshot文件，若未指定—wal-dir，还会存储WAL文件；</li><li>wal-dir 指定节点的was文件的存储目录，若指定了该参数，wal文件会和其他数据文件分开存储。</li><li>name 节点名称</li><li>initial-advertise-peer-urls 告知集群其他节点url.</li><li>listen-peer-urls 监听URL，用于与其他节点通讯</li><li>advertise-client-urls 告知客户端url, 也就是服务的url</li><li>initial-cluster-token 集群的ID</li><li>initial-cluster 集群中所有节点</li><li>initial-cluster-state 监听客户端状态</li><li>listen-client-urls 监听客户端地址</li><li>initial-cluster-state new 初始化集群 为新节点</li></ul><p>然后docker-compose运行etcd的yaml文件，并且插入数据进行检查验证</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos docker-compose]<span class="hljs-comment"># docker-compose up -d</span><br><span class="hljs-regexp">//</span>查看集群节点状态<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos docker-compose]<span class="hljs-comment"># etcdctl --endpoints 127.0.0.1:32771 member list</span><br>ade526d28b1f92f7, started, etcd1, http:<span class="hljs-regexp">//</span>etcd1:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2379</span>, false<br>bd388e7810915853, started, etcd3, http:<span class="hljs-regexp">//</span>etcd3:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2379</span>, false<br>d282ac2ce600c1ce, started, etcd2, http:<span class="hljs-regexp">//</span>etcd2:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2379</span>, false<br><span class="hljs-regexp">//</span>给etcd1节点插入数据<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos docker-compose]<span class="hljs-comment"># curl -L http://127.0.0.1:32771/v2/keys/etcd -XPUT -d value=&quot;Hello etcd1&quot;</span><br>&#123;<span class="hljs-string">&quot;action&quot;</span>:<span class="hljs-string">&quot;set&quot;</span>,<span class="hljs-string">&quot;node&quot;</span>:&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;/etcd&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;Hello etcd1&quot;</span>,<span class="hljs-string">&quot;modifiedIndex&quot;</span>:<span class="hljs-number">8</span>,<span class="hljs-string">&quot;createdIndex&quot;</span>:<span class="hljs-number">8</span>&#125;&#125;<br><span class="hljs-regexp">//</span>检查在etcd2中是否能够查到<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos docker-compose]<span class="hljs-comment"># curl -L http://127.0.0.1:32773/v2/keys/etcd</span><br>&#123;<span class="hljs-string">&quot;action&quot;</span>:<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;node&quot;</span>:&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;/etcd&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;Hello etcd1&quot;</span>,<span class="hljs-string">&quot;modifiedIndex&quot;</span>:<span class="hljs-number">8</span>,<span class="hljs-string">&quot;createdIndex&quot;</span>:<span class="hljs-number">8</span>&#125;&#125;<br><span class="hljs-regexp">//</span>检查在etcd3中是否能够查到<br>[root@VM-<span class="hljs-number">0</span>-<span class="hljs-number">13</span>-centos docker-compose]<span class="hljs-comment"># curl -L http://127.0.0.1:32769/v2/keys/etcd</span><br>&#123;<span class="hljs-string">&quot;action&quot;</span>:<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;node&quot;</span>:&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;/etcd&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;Hello etcd1&quot;</span>,<span class="hljs-string">&quot;modifiedIndex&quot;</span>:<span class="hljs-number">8</span>,<span class="hljs-string">&quot;createdIndex&quot;</span>:<span class="hljs-number">8</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="二进制部署etcd集群"><a href="#二进制部署etcd集群" class="headerlink" title="二进制部署etcd集群"></a>二进制部署etcd集群</h1><p>这个可以参考之前的文章 二进制搭建k8s集群  <a href="https://www.niewx.cn/kubernetes/docker/2020/09/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2k8s/">https://www.niewx.cn/kubernetes/docker/2020/09/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2k8s/</a></p><p>其中部署etcd集群章节有说明如何搭建</p><h1 id="kubeadm集群如何使用etcd集群"><a href="#kubeadm集群如何使用etcd集群" class="headerlink" title="kubeadm集群如何使用etcd集群"></a>kubeadm集群如何使用etcd集群</h1><p>一般我们如果通过kubeadm创建的集群都是单节点的etcd，那么如何配置一个高可用的etcd集群给kubeadm的集群。首先你需要通过kubeadm搭建一个集群，你可以参考文章进行部署<a href="https://www.niewx.cn/kubernetes/docker/2020/09/15/kubeadm%E9%83%A8%E7%BD%B2k8s/">https://www.niewx.cn/kubernetes/docker/2020/09/15/kubeadm%E9%83%A8%E7%BD%B2k8s/</a></p><p>也可以通过<a href="https://www.niewx.cn/kubernetes/docker/2020/05/10/k8s%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/">https://www.niewx.cn/kubernetes/docker/2020/05/10/k8s%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</a> 一键部署包进行安装，这里就不细说了</p><p>集群部署好之后，我们下面来部署etcd集群，并接入对应的集群中，大致步骤如下</p><ul><li>新建一个 2 节点的 etcd cluster</li><li>查看 etcd 的状态</li><li>迁移原来 master 节点上的 etcd 数据到上面新建的 etcd cluster 中</li><li>切换 kube-apiserver 使用新的 etcd endpoint 地址</li><li>清理掉原来的单节点 etcd 服务</li><li>重建一个 etcd 服务，加入新集群</li><li>部署新的 etcd 节点</li><li>更新另外2个节点的 etcd.yaml 配置</li></ul><h2 id="新建一个2节点的-etcd-cluster"><a href="#新建一个2节点的-etcd-cluster" class="headerlink" title="新建一个2节点的 etcd cluster"></a>新建一个2节点的 etcd cluster</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//基于当前 master 节点 tvm-00 的 etcd 配置来修改：</span><br>[root@tvm-<span class="hljs-number">00</span> ~]# scp <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>etcd.yaml <span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-regexp">/tmp/</span><br>[root@tvm-<span class="hljs-number">00</span> ~]# scp <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>etcd.yaml <span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-regexp">/tmp/</span><br><span class="hljs-comment">//修改 etcd 配置，设置成一个全新的 cluster</span><br>[root@tvm-<span class="hljs-number">01</span> ~]# cat <span class="hljs-regexp">/tmp/</span>etcd.yaml <span class="hljs-comment">// (略过部分没有改动的输出内容)</span><br>spec:<br> containers:<br> - command:<br> - etcd<br> - --name=etcd-<span class="hljs-number">01</span><br> - --initial-advertise-peer-urls=http:<span class="hljs-comment">//10.10.9.68:2380</span><br> - --listen-peer-urls=http:<span class="hljs-comment">//10.10.9.68:2380</span><br> - --listen-client-urls=http:<span class="hljs-comment">//127.0.0.1:2379,http://10.10.9.68:2379</span><br> - --advertise-client-urls=http:<span class="hljs-comment">//10.10.9.68:2379</span><br> - --initial-cluster-token=etcd-cluster<br> - --initial-cluster=etcd-<span class="hljs-number">01</span>=http:<span class="hljs-comment">//10.10.9.68:2380,etcd-02=http://10.10.9.69:2380</span><br> - --initial-cluster-state=<span class="hljs-keyword">new</span><br> - --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd<br> image: gcr.io<span class="hljs-regexp">/google_containers/</span>etcd-amd64:<span class="hljs-number">3.1</span>.<span class="hljs-number">10</span> <span class="hljs-comment">// (略过部分没有改动的输出内容)</span><br>[root@tvm-<span class="hljs-number">02</span> ~]# cat <span class="hljs-regexp">/tmp/</span>etcd.yaml <span class="hljs-comment">// (略过部分没有改动的输出内容)</span><br>spec:<br> containers:<br> - command:<br> - etcd<br> - --name=etcd-<span class="hljs-number">02</span><br> - --initial-advertise-peer-urls=http:<span class="hljs-comment">//10.10.9.69:2380</span><br> - --listen-peer-urls=http:<span class="hljs-comment">//10.10.9.69:2380</span><br> - --listen-client-urls=http:<span class="hljs-comment">//127.0.0.1:2379,http://10.10.9.69:2379</span><br> - --advertise-client-urls=http:<span class="hljs-comment">//10.10.9.69:2379</span><br> - --initial-cluster-token=etcd-cluster<br> - --initial-cluster=etcd-<span class="hljs-number">01</span>=http:<span class="hljs-comment">//10.10.9.68:2380,etcd-02=http://10.10.9.69:2380</span><br> - --initial-cluster-state=<span class="hljs-keyword">new</span><br> - --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd<br> image: gcr.io<span class="hljs-regexp">/google_containers/</span>etcd-amd64:<span class="hljs-number">3.1</span>.<span class="hljs-number">10</span> <span class="hljs-comment">//(略过部分没有改动的输出内容)</span><br><span class="hljs-comment">//启动 etcd cluster### 配置文件同步到 manifests 后将会被 kubelet 检测到然后自动将 pod 启动</span><br>[root@tvm-<span class="hljs-number">01</span> ~]# rm <span class="hljs-regexp">/var/</span>lib/etcd -fr<br>[root@tvm-<span class="hljs-number">01</span> ~]# cp -a <span class="hljs-regexp">/tmp/</span>etcd.yaml <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span><br>[root@tvm-<span class="hljs-number">02</span> ~]# rm <span class="hljs-regexp">/var/</span>lib/etcd -fr<br>[root@tvm-<span class="hljs-number">02</span> ~]# cp -a <span class="hljs-regexp">/tmp/</span>etcd.yaml <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span><br></code></pre></td></tr></table></figure><h2 id="查看-etcd-的状态"><a href="#查看-etcd-的状态" class="headerlink" title="查看 etcd 的状态"></a>查看 etcd 的状态</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>下载一个 etcdctl 工具来管理集群：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># cd /usr/local/bin/</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># wget </span><br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/coreos/</span>etcd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.1.10/</span>etcd-v3.<span class="hljs-number">1.10</span>-linux-amd64.tar.gz<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># tar zxf etcd-v3.1.10-linux-amd64.tar.gz</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># mv etcd-v3.1.10-linux-amd64/etcd* .</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --endpoints</span><br> <span class="hljs-string">&quot;http://10.10.9.68:2379,http://10.10.9.69:2379&quot;</span> endpoint status<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">21</span>b9c7066a7e525, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">25</span> kB, true, <span class="hljs-number">7</span>, <span class="hljs-number">194</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">516</span>e519b2158e83a, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">25</span> kB, false, <span class="hljs-number">7</span>, <span class="hljs-number">194</span><br><span class="hljs-regexp">//</span>注意：输出的列从左到右分别表示：endpoint URL, ID, version, database size, leadership status, raft term, and raft status.<span class="hljs-comment">### 符合预期。</span><br></code></pre></td></tr></table></figure><h2 id="迁移原来-master-节点上的-etcd-数据到上面新建的-etcd-cluster-中"><a href="#迁移原来-master-节点上的-etcd-数据到上面新建的-etcd-cluster-中" class="headerlink" title="迁移原来 master 节点上的 etcd 数据到上面新建的 etcd cluster 中"></a>迁移原来 master 节点上的 etcd 数据到上面新建的 etcd cluster 中</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>注意：etcdctl <span class="hljs-number">3</span>.x 版本提供了一个 make-mirror 功能来同步数据<span class="hljs-comment">### 在当前 master 节点 </span><br>tvm-<span class="hljs-number">00</span> 上执行：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl make-mirror --no-dest-prefix=true </span><br>--endpoints=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span> --insecure-skip-tls-verify=true <span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span><br><span class="hljs-regexp">//</span>将数据同步到远端刚才新建的 etcd 集群中<span class="hljs-comment">### 注意1：数据是从 127.0.0.1:2379 写入到 10.10.9.68:2379### 注意2：这个同步只能是手动中止，间隔 30s 打印一次输出</span><br><span class="hljs-regexp">//</span>通过对比集群到状态来判断是否同步完成：<span class="hljs-comment">###（新开一个窗口）</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl endpoint status</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">8</span>e9e05c52164694d, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">1.9</span> MB, true, <span class="hljs-number">2</span>, <span class="hljs-number">342021</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --endpoints </span><br><span class="hljs-string">&quot;http://10.10.9.68:2379,http://10.10.9.69:2379&quot;</span> endpoint status<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">21</span>b9c7066a7e525, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">1.9</span> MB, true, <span class="hljs-number">7</span>, <span class="hljs-number">1794</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">516</span>e519b2158e83a, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">1.9</span> MB, false, <span class="hljs-number">7</span>, <span class="hljs-number">1794</span><br></code></pre></td></tr></table></figure><h2 id="切换-kube-apiserver-使用新的-etcd-endpoint-地址"><a href="#切换-kube-apiserver-使用新的-etcd-endpoint-地址" class="headerlink" title="切换 kube-apiserver 使用新的 etcd endpoint 地址"></a>切换 kube-apiserver 使用新的 etcd endpoint 地址</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>停止 kubelet 服务：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># systemctl stop kubelet</span><br><span class="hljs-regexp">//</span>更新 kube-apiserver.yaml 中 etcd 服务到地址，切到我们到新集群中：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># sed -i &#x27;s#127.0.0.1:2379#10.10.9.68:2379#&#x27; </span><br><span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-apiserver.yaml<br><span class="hljs-regexp">//</span>启动 kubelet 服务：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># systemctl start kubelet</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># kubectl get pods --all-namespaces |grep &#x27;etcd-tvm&#x27;</span><br>kube-system etcd-tvm-<span class="hljs-number">00</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">1</span> <span class="hljs-number">4</span>h<br>kube-system etcd-tvm-<span class="hljs-number">01</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br>kube-system etcd-tvm-<span class="hljs-number">02</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br></code></pre></td></tr></table></figure><h2 id="清理掉原来的单节点-etcd-服务"><a href="#清理掉原来的单节点-etcd-服务" class="headerlink" title="清理掉原来的单节点 etcd 服务"></a>清理掉原来的单节点 etcd 服务</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># mv /etc/kubernetes/manifests/etcd.yaml /tmp/orig.master.etcd.yaml</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># mv /var/lib/etcd /tmp/orig.master.etcd // 观察 pods 的变化：</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># kubectl get pods --all-namespaces |grep &#x27;etcd-tvm&#x27;</span><br>kube-<span class="hljs-keyword">system</span> etcd-tvm-<span class="hljs-number">01</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br>kube-<span class="hljs-keyword">system</span> etcd-tvm-<span class="hljs-number">02</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br>//符合预期 etcd-tvm-<span class="hljs-number">00</span> 停止服务<br></code></pre></td></tr></table></figure><h2 id="重建一个-etcd-服务，加入新集群"><a href="#重建一个-etcd-服务，加入新集群" class="headerlink" title="重建一个 etcd 服务，加入新集群"></a>重建一个 etcd 服务，加入新集群</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># cat /tmp/etcd.yaml //(略过部分没有改动的输出内容)</span><br>spec:<br> containers:<br> - command:<br> - etcd<br> - --name=etcd-<span class="hljs-number">00</span><br> - --initial-advertise-peer-urls=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2380</span><br> - --listen-peer-urls=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2380</span><br> - --listen-client-urls=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span>,http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2379</span><br> - --advertise-client-urls=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2379</span><br> - --initial-cluster-token=etcd-cluster<br>- --initial-cluster=etcd-<span class="hljs-number">00</span>=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2380</span>,etcd-<span class="hljs-number">01</span>=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2380</span>,etcd-<span class="hljs-number">02</span>=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2380</span><br> - --initial-cluster-state=existing<br> - --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd<br> image: gcr.io<span class="hljs-regexp">/google_containers/</span>etcd-amd64:<span class="hljs-number">3.1</span>.<span class="hljs-number">10</span> <span class="hljs-regexp">//</span>(略过部分没有改动的输出内容)<br><span class="hljs-regexp">//</span>注意：上述新节点的配置有一个地方不一样：<br>--initial-cluster-state=existing<br></code></pre></td></tr></table></figure><h2 id="先配置-etcd-cluster-增加一个-member-用于后续操作"><a href="#先配置-etcd-cluster-增加一个-member-用于后续操作" class="headerlink" title="先配置 etcd cluster 增加一个 member 用于后续操作"></a>先配置 etcd cluster 增加一个 member 用于后续操作</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --endpoints=&quot;http://10.10.9.68:2379&quot; member list</span><br><span class="hljs-number">21</span>b9c7066a7e525, started, etcd-<span class="hljs-number">01</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span><br><span class="hljs-number">516</span>e519b2158e83a, started, etcd-<span class="hljs-number">02</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2379</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --endpoints=&quot;http://10.10.9.68:2379&quot; member add etcd-00 --peer-urls=http://10.10.9.67:2380</span><br> Member <span class="hljs-number">6</span>cc2e7728adb6b28 added to cluster <span class="hljs-number">3742</span>ed98339167da<br>ETCD_NAME=<span class="hljs-string">&quot;etcd-00&quot;</span><br> ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd-01=http://10.10.9.68:2380,etcd-02=http://10.10.9.69:2380,etcd-00=http://10.10.9.67:2380&quot;</span><br> ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;existing&quot;</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --endpoints=&quot;http://10.10.9.68:2379&quot; member list</span><br> <span class="hljs-number">21</span>b9c7066a7e525, started, etcd-<span class="hljs-number">01</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span><br> <span class="hljs-number">516</span>e519b2158e83a, started, etcd-<span class="hljs-number">02</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2379</span><br> <span class="hljs-number">6</span>cc2e7728adb6b28, unstarted, , http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2380</span>,<br><span class="hljs-regexp">//</span>部署新的 etcd 节点<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># rm /var/lib/etcd -fr</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># cp -a /tmp/etcd.yaml /etc/kubernetes/manifests/</span><br><span class="hljs-regexp">//</span>再次查看 k8s cluster 信息<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># kubectl get pods --all-namespaces |grep &#x27;etcd-tvm&#x27;</span><br>kube-system etcd-tvm-<span class="hljs-number">00</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">1</span> <span class="hljs-number">4</span>h<br>kube-system etcd-tvm-<span class="hljs-number">01</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br>kube-system etcd-tvm-<span class="hljs-number">02</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br><span class="hljs-regexp">//</span>etcd 的日志：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># kubectl logs -n kube-system --tail=20 etcd-tvm-00</span><br><span class="hljs-regexp">//</span>etcd clister 状态：<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl </span><br>--endpoints=<span class="hljs-string">&quot;http://10.10.9.67:2379,http://10.10.9.68:2379,http://10.10.9.69:2379&quot;</span> member List<br><span class="hljs-number">21</span>b9c7066a7e525, started, etcd-<span class="hljs-number">01</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span><br><span class="hljs-number">516</span>e519b2158e83a, started, etcd-<span class="hljs-number">02</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2379</span><br><span class="hljs-number">6</span>cc2e7728adb6b28, started, etcd-<span class="hljs-number">00</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2380</span>, http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2379</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --endpoints</span><br><span class="hljs-string">&quot;http://10.10.9.67:2379,http://10.10.9.68:2379,http://10.10.9.69:2379&quot;</span> endpoint status<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">6</span>cc2e7728adb6b28, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">3.8</span> MB, false, <span class="hljs-number">7</span>, <span class="hljs-number">5236</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">21</span>b9c7066a7e525, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">3.3</span> MB, true, <span class="hljs-number">7</span>, <span class="hljs-number">5236</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2379</span>, <span class="hljs-number">516</span>e519b2158e83a, <span class="hljs-number">3.1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">3.3</span> MB, false, <span class="hljs-number">7</span>, <span class="hljs-number">5236</span><br></code></pre></td></tr></table></figure><h2 id="更新另外2个节点的-etcd-yaml-配置"><a href="#更新另外2个节点的-etcd-yaml-配置" class="headerlink" title="更新另外2个节点的 etcd.yaml 配置"></a>更新另外2个节点的 etcd.yaml 配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>区别之处：<br>- --initial-cluster=etcd-<span class="hljs-number">00</span>=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.67</span>:<span class="hljs-number">2380</span>,etcd-<span class="hljs-number">01</span>=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.68</span>:<span class="hljs-number">2380</span>,etcd-<span class="hljs-number">02</span>=http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">9.69</span>:<span class="hljs-number">2380</span><br>- --initial-cluster-state=existing<br><span class="hljs-regexp">//</span>将节点 tvm-<span class="hljs-number">00</span> 上 kube-apiserver 使用的 etcd endpoint 切换回来<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># sed -i &#x27;s#10.10.9.68:2379#127.0.0.1:2379#&#x27; </span><br><span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-apiserver.yaml<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># kubectl get pods --all-namespaces |grep api</span><br>kube-system kube-apiserver-tvm-<span class="hljs-number">00</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> Running <span class="hljs-number">0</span> <span class="hljs-number">1</span>m<br></code></pre></td></tr></table></figure><h2 id="kubeadm使用已有etcd集群"><a href="#kubeadm使用已有etcd集群" class="headerlink" title="kubeadm使用已有etcd集群"></a>kubeadm使用已有etcd集群</h2><p>假如我们已经提前搭建好了一个etcd集群，那么在kubeadm进行部署的时候如何去使用这个集群，其实只需要在kubeadm中进行配置即可</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dts">cat <span class="hljs-params">&lt;&lt;EOF &gt;</span> <span class="hljs-keyword">/etc/</span>kubernetes/kubeadm-config.yaml<br><span class="hljs-symbol">apiVersion:</span> kubeadm.k8s.io/v1beta1<br><span class="hljs-symbol">kind:</span> ClusterConfiguration<br><span class="hljs-symbol">kubernetesVersion:</span> v1<span class="hljs-number">.13</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">apiServer:</span><br><span class="hljs-symbol"> certSANs:</span><br> - <span class="hljs-number">10.127</span><span class="hljs-number">.24</span><span class="hljs-number">.179</span><br> - <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">networking:</span><br><span class="hljs-symbol"> podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span><br><span class="hljs-symbol">etcd:</span><br><span class="hljs-symbol"> external:</span><br><span class="hljs-symbol"> endpoints:</span><br> - https:<span class="hljs-comment">//10.39.14.204:2379</span><br> - https:<span class="hljs-comment">//10.39.14.205:2379</span><br> - https:<span class="hljs-comment">//10.39.14.206:2379</span><br><span class="hljs-symbol"> caFile:</span> <span class="hljs-keyword">/etc/</span>kubernetes<span class="hljs-keyword">/pki/</span>etcd/ca.crt<br><span class="hljs-symbol"> certFile:</span> <span class="hljs-keyword">/etc/</span>kubernetes<span class="hljs-keyword">/pki/</span>apiserver-etcd-client.crt<br><span class="hljs-symbol"> keyFile:</span> <span class="hljs-keyword">/etc/</span>kubernetes<span class="hljs-keyword">/pki/</span>apiserver-etcd-client.key<br>EOF<br></code></pre></td></tr></table></figure><h1 id="如何在k8s中搭建etcd集群"><a href="#如何在k8s中搭建etcd集群" class="headerlink" title="如何在k8s中搭建etcd集群"></a>如何在k8s中搭建etcd集群</h1><p>这里我们可以使用 StatefulSet 这个控制器来运行 etcd 集群，etcd 集群的编排的资源清单文件我们可以使用 Kubernetes 源码中提供的，位于目录：test&#x2F;e2e&#x2F;testing-manifests&#x2F;statefulset&#x2F;etcd下面。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">git clone https://github.com/kubernetes/kubernetes<br>cd kubernetes/test/e2e/testing-manifests/statefulset/etcd<br>ll //查看对应的yaml文件如下<br>-rw-r--r--<span class="hljs-number"> 1 </span>nieweixing<span class="hljs-number"> 197121 </span><span class="hljs-number"> 184 </span>11月<span class="hljs-number"> 11 </span>00:10 pdb.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>nieweixing<span class="hljs-number"> 197121 </span><span class="hljs-number"> 258 </span>11月<span class="hljs-number"> 11 </span>00:10 service.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>nieweixing<span class="hljs-number"> 197121 </span>6619 11月<span class="hljs-number"> 11 </span>00:10 statefulset.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>nieweixing<span class="hljs-number"> 197121 </span><span class="hljs-number"> 577 </span>11月<span class="hljs-number"> 11 </span>00:10 tester.yaml<br></code></pre></td></tr></table></figure><p>service.yaml文件中就是一个用户 StatefulSet 使用的 headless service：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">etcd</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">etcd</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">2380</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-server</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">2379</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-client</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">etcd</span><br>  <span class="hljs-attr">publishNotReadyAddresses:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>pdb.yaml文件是用来保证 etcd 的高可用的一个 PodDisruptionBudget 资源对象，PodDisruptionBudget<br>说明详情可以参考文档<a href="https://kubernetes.io/zh/docs/tasks/run-application/configure-pdb/">https://kubernetes.io/zh/docs/tasks/run-application/configure-pdb/</a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> policy/v1beta1<br><span class="hljs-symbol">kind:</span> PodDisruptionBudget<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> etcd-pdb<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    pdb:</span> etcd<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  minAvailable:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> etcd<br></code></pre></td></tr></table></figure><p>statefulset.yaml，这里修改下http:&#x2F;&#x2F;${HOSTNAME}.${SET_NAME}成http:&#x2F;&#x2F;${POD_IP}:PORT这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  labels:<br>    app: etcd<br>  name: etcd<br>spec:<br>  replicas: 3<br>  selector:<br>    matchLabels:<br>      app: etcd<br>  serviceName: etcd<br>  template:<br>    metadata:<br>      labels:<br>        app: etcd<br>    spec:<br>      containers:<br>        - name: etcd<br>          image: k8s.gcr.io/etcd:3.2.24<br>          imagePullPolicy: IfNotPresent<br>          ports:<br>          - containerPort: 2380<br>            name: peer<br>            protocol: TCP<br>          - containerPort: 2379<br>            name: client<br>            protocol: TCP<br>          <span class="hljs-built_in">env</span>:<br>          - name: INITIAL_CLUSTER_SIZE<br>            value: <span class="hljs-string">&quot;3&quot;</span><br>          - name: MY_NAMESPACE<br>            valueFrom:<br>              fieldRef:<br>                fieldPath: metadata.namespace<br>          - name: POD_IP<br>            valueFrom:<br>              fieldRef:<br>                fieldPath: status.podIP<br>          - name: SET_NAME<br>            value: <span class="hljs-string">&quot;etcd&quot;</span><br>          <span class="hljs-built_in">command</span>:<br>            - /bin/sh<br>            - -ec<br>            - |<br>              HOSTNAME=$(hostname)<br><br>              ETCDCTL_API=3<br><br>              <span class="hljs-function"><span class="hljs-title">eps</span></span>() &#123;<br>                  EPS=<span class="hljs-string">&quot;&quot;</span><br>                  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 0 $((<span class="hljs-variable">$&#123;INITIAL_CLUSTER_SIZE&#125;</span> - <span class="hljs-number">1</span>))); <span class="hljs-keyword">do</span><br>                      EPS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;EPS&#125;</span><span class="hljs-variable">$&#123;EPS:+,&#125;</span>http://<span class="hljs-variable">$&#123;SET_NAME&#125;</span>-<span class="hljs-variable">$&#123;i&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2379&quot;</span><br>                  <span class="hljs-keyword">done</span><br>                  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;EPS&#125;</span><br>              &#125;<br><br>              <span class="hljs-function"><span class="hljs-title">member_hash</span></span>() &#123;<br>                  etcdctl member list | grep -w <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTNAME</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123; print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#x27;&#123; print $1&#125;&#x27;</span><br>              &#125;<br><br>              <span class="hljs-function"><span class="hljs-title">initial_peers</span></span>() &#123;<br>                  PEERS=<span class="hljs-string">&quot;&quot;</span><br>                  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 0 $((<span class="hljs-variable">$&#123;INITIAL_CLUSTER_SIZE&#125;</span> - <span class="hljs-number">1</span>))); <span class="hljs-keyword">do</span><br>                    PEERS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PEERS&#125;</span><span class="hljs-variable">$&#123;PEERS:+,&#125;</span><span class="hljs-variable">$&#123;SET_NAME&#125;</span>-<span class="hljs-variable">$&#123;i&#125;</span>=http://<span class="hljs-variable">$&#123;SET_NAME&#125;</span>-<span class="hljs-variable">$&#123;i&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2380&quot;</span><br>                  <span class="hljs-keyword">done</span><br>                  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PEERS&#125;</span><br>              &#125;<br><br>              <span class="hljs-comment"># etcd-SET_ID</span><br>              SET_ID=<span class="hljs-variable">$&#123;HOSTNAME##*-&#125;</span><br><br>              <span class="hljs-comment"># adding a new member to existing cluster (assuming all initial pods are available)</span><br>              <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SET_ID&#125;</span>&quot;</span> -ge <span class="hljs-variable">$&#123;INITIAL_CLUSTER_SIZE&#125;</span> ]; <span class="hljs-keyword">then</span><br>                  <span class="hljs-comment"># export ETCDCTL_ENDPOINTS=$(eps)</span><br>                  <span class="hljs-comment"># member already added?</span><br><br>                  MEMBER_HASH=$(member_hash)<br>                  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MEMBER_HASH&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>                      <span class="hljs-comment"># the member hash exists but for some reason etcd failed</span><br>                      <span class="hljs-comment"># as the datadir has not be created, we can remove the member</span><br>                      <span class="hljs-comment"># and retrieve new hash</span><br>                      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Remove member <span class="hljs-variable">$&#123;MEMBER_HASH&#125;</span>&quot;</span><br>                      etcdctl --endpoints=$(eps) member remove <span class="hljs-variable">$&#123;MEMBER_HASH&#125;</span><br>                  <span class="hljs-keyword">fi</span><br><br>                  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Adding new member&quot;</span><br><br>                  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;etcdctl --endpoints=<span class="hljs-subst">$(eps)</span> member add <span class="hljs-variable">$&#123;HOSTNAME&#125;</span> --peer-urls=http://<span class="hljs-variable">$&#123;HOSTNAME&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2380&quot;</span><br>                  etcdctl member --endpoints=$(eps) add <span class="hljs-variable">$&#123;HOSTNAME&#125;</span> --peer-urls=http://<span class="hljs-variable">$&#123;HOSTNAME&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2380 | grep <span class="hljs-string">&quot;^ETCD_&quot;</span> &gt; /var/run/etcd/new_member_envs<br><br>                  <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>                      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;member add <span class="hljs-variable">$&#123;HOSTNAME&#125;</span> error.&quot;</span><br>                      <span class="hljs-built_in">rm</span> -f /var/run/etcd/new_member_envs<br>                      <span class="hljs-built_in">exit</span> 1<br>                  <span class="hljs-keyword">fi</span><br><br>                  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; Loading env vars of existing cluster...&quot;</span><br>                  sed -ie <span class="hljs-string">&quot;s/^/export /&quot;</span> /var/run/etcd/new_member_envs<br>                  <span class="hljs-built_in">cat</span> /var/run/etcd/new_member_envs<br>                  . /var/run/etcd/new_member_envs<br><br>                  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;etcd --name <span class="hljs-variable">$&#123;HOSTNAME&#125;</span> --initial-advertise-peer-urls <span class="hljs-variable">$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;</span> --listen-peer-urls http://<span class="hljs-variable">$&#123;POD_IP&#125;</span>:2380 --listen-client-urls http://<span class="hljs-variable">$&#123;POD_IP&#125;</span>:2379,http://127.0.0.1:2379 --advertise-client-urls http://<span class="hljs-variable">$&#123;HOSTNAME&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2379 --data-dir /var/run/etcd/default.etcd --initial-cluster <span class="hljs-variable">$&#123;ETCD_INITIAL_CLUSTER&#125;</span> --initial-cluster-state <span class="hljs-variable">$&#123;ETCD_INITIAL_CLUSTER_STATE&#125;</span>&quot;</span><br><br>                  <span class="hljs-built_in">exec</span> etcd --listen-peer-urls http://<span class="hljs-variable">$&#123;POD_IP&#125;</span>:2380 \<br>                      --listen-client-urls http://<span class="hljs-variable">$&#123;POD_IP&#125;</span>:2379,http://127.0.0.1:2379 \<br>                      --advertise-client-urls http://<span class="hljs-variable">$&#123;HOSTNAME&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2379 \<br>                      --data-dir /var/run/etcd/default.etcd<br>              <span class="hljs-keyword">fi</span><br><br>              <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 0 $((<span class="hljs-variable">$&#123;INITIAL_CLUSTER_SIZE&#125;</span> - <span class="hljs-number">1</span>))); <span class="hljs-keyword">do</span><br>                  <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>                      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Waiting for <span class="hljs-variable">$&#123;SET_NAME&#125;</span>-<span class="hljs-variable">$&#123;i&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local to come up&quot;</span><br>                      ping -W 1 -c 1 <span class="hljs-variable">$&#123;SET_NAME&#125;</span>-<span class="hljs-variable">$&#123;i&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local &gt; /dev/null &amp;&amp; <span class="hljs-built_in">break</span><br>                      <span class="hljs-built_in">sleep</span> 1s<br>                  <span class="hljs-keyword">done</span><br>              <span class="hljs-keyword">done</span><br><br>              <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;join member <span class="hljs-variable">$&#123;HOSTNAME&#125;</span>&quot;</span><br>              <span class="hljs-comment"># join member</span><br>              <span class="hljs-built_in">exec</span> etcd --name <span class="hljs-variable">$&#123;HOSTNAME&#125;</span> \<br>                  --initial-advertise-peer-urls http://<span class="hljs-variable">$&#123;HOSTNAME&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2380 \<br>                  --listen-peer-urls http://<span class="hljs-variable">$&#123;POD_IP&#125;</span>:2380 \<br>                  --listen-client-urls http://<span class="hljs-variable">$&#123;POD_IP&#125;</span>:2379,http://127.0.0.1:2379 \<br>                  --advertise-client-urls http://<span class="hljs-variable">$&#123;HOSTNAME&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2379 \<br>                  --initial-cluster-token etcd-cluster-1 \<br>                  --data-dir /var/run/etcd/default.etcd \<br>                  --initial-cluster $(initial_peers) \<br>                  --initial-cluster-state new<br>          lifecycle:<br>            preStop:<br>              <span class="hljs-built_in">exec</span>:<br>                <span class="hljs-built_in">command</span>:<br>                  - /bin/sh<br>                  - -ec<br>                  - |<br>                    HOSTNAME=$(hostname)<br><br>                    <span class="hljs-function"><span class="hljs-title">member_hash</span></span>() &#123;<br>                        etcdctl member list | grep -w <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTNAME</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123; print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#x27;&#123; print $1&#125;&#x27;</span><br>                    &#125;<br><br>                    <span class="hljs-function"><span class="hljs-title">eps</span></span>() &#123;<br>                        EPS=<span class="hljs-string">&quot;&quot;</span><br>                        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 0 $((<span class="hljs-variable">$&#123;INITIAL_CLUSTER_SIZE&#125;</span> - <span class="hljs-number">1</span>))); <span class="hljs-keyword">do</span><br>                            EPS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;EPS&#125;</span><span class="hljs-variable">$&#123;EPS:+,&#125;</span>http://<span class="hljs-variable">$&#123;SET_NAME&#125;</span>-<span class="hljs-variable">$&#123;i&#125;</span>.<span class="hljs-variable">$&#123;SET_NAME&#125;</span>.<span class="hljs-variable">$&#123;MY_NAMESPACE&#125;</span>.svc.cluster.local:2379&quot;</span><br>                        <span class="hljs-keyword">done</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;EPS&#125;</span><br>                    &#125;<br><br>                    <span class="hljs-built_in">export</span> ETCDCTL_ENDPOINTS=$(eps)<br>                    SET_ID=<span class="hljs-variable">$&#123;HOSTNAME##*-&#125;</span><br><br>                    <span class="hljs-comment"># Removing member from cluster</span><br>                    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SET_ID&#125;</span>&quot;</span> -ge <span class="hljs-variable">$&#123;INITIAL_CLUSTER_SIZE&#125;</span> ]; <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Removing <span class="hljs-variable">$&#123;HOSTNAME&#125;</span> from etcd cluster&quot;</span><br>                        etcdctl member remove $(member_hash)<br>                        <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>                            <span class="hljs-comment"># Remove everything otherwise the cluster will no longer scale-up</span><br>                            <span class="hljs-built_in">rm</span> -rf /var/run/etcd/*<br>                        <span class="hljs-keyword">fi</span><br>                    <span class="hljs-keyword">fi</span><br>          volumeMounts:<br>          - mountPath: /var/run/etcd<br>            name: datadir<br>  volumeClaimTemplates:<br>  - metadata:<br>      name: datadir<br>    spec:<br>      accessModes:<br>      - <span class="hljs-string">&quot;ReadWriteOnce&quot;</span><br>      resources:<br>        requests:<br>          <span class="hljs-comment"># upstream recommended max is 700M</span><br>          storage: 10Gi<br></code></pre></td></tr></table></figure><p>执行命令进行部署</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f .<br></code></pre></td></tr></table></figure><p>等pod运行成功后，我们该如何访问呢，这我们给service改成对应的lb类型，这样可以直接通过公网ip个接口就可以访问了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos etcd]# kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>         <span class="hljs-keyword">TYPE</span>           <span class="hljs-keyword">CLUSTER</span>-IP       <span class="hljs-keyword">EXTERNAL</span>-IP     PORT(S)             AGE<br>etcd         ClusterIP      <span class="hljs-keyword">None</span>             &lt;<span class="hljs-keyword">none</span>&gt;          <span class="hljs-number">2380</span>/TCP,<span class="hljs-number">2379</span>/TCP   <span class="hljs-number">22</span>h<br>etcd-test    LoadBalancer   <span class="hljs-number">172.16</span><span class="hljs-number">.83</span><span class="hljs-number">.34</span>     <span class="hljs-number">106.53</span><span class="hljs-number">.131</span>.xx   <span class="hljs-number">2379</span>:<span class="hljs-number">31354</span>/TCP      <span class="hljs-number">21</span>h<br>kube-<span class="hljs-keyword">user</span>    LoadBalancer   <span class="hljs-number">172.16</span><span class="hljs-number">.100</span><span class="hljs-number">.133</span>   <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span>        <span class="hljs-number">443</span>:<span class="hljs-number">31745</span>/TCP       <span class="hljs-number">28</span>h<br>kubernetes   ClusterIP      <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       &lt;<span class="hljs-keyword">none</span>&gt;          <span class="hljs-number">443</span>/TCP             <span class="hljs-number">29</span>h<br></code></pre></td></tr></table></figure><p>这里我们将2379端口通过LoadBalancer  类型的service映射成公网访问了，下面我们来用命令检查下集群。<br>首先下载etcdctl工具，我们登录客户端机器执行下面命令安装etcdctl工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># cd /usr/local/bin/</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># wget </span><br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/etcd-io/</span>etcd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.4.13/</span>etcd-v3.<span class="hljs-number">4.13</span>-linux-amd64.tar.gz<br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># tar zxf etcd-v3.4.13-linux-amd64.tar.gz</span><br>[root@tvm-<span class="hljs-number">00</span> ~]<span class="hljs-comment"># mv etcd-v3.4.13-linux-amd64/etcd* .</span><br></code></pre></td></tr></table></figure><p>然后执行命令检查集群，这边查看集群都是正常，说明这边集群部署成功</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@VM-0-13-centos etcd]<span class="hljs-comment"># etcdctl --endpoints 106.53.131.xx:2379 member list</span><br>42c8b94265b9b79a, started, etcd-2, http:<span class="hljs-string">//etcd-2.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-2.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>9869f0647883a00d, started, etcd-1, http:<span class="hljs-string">//etcd-1.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-1.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>c799a6ef06bc8c14, started, etcd-0, http:<span class="hljs-string">//etcd-0.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-0.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br><br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># etcdctl --endpoints 106.53.131.xx:2379 endpoint status --write-out=table</span><br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>|      ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>| 106.53.131.xx<span class="hljs-function">:2379</span> | c799a6ef06bc8c14 |  3.4.13 |   20 kB |     <span class="hljs-literal">false</span> |      <span class="hljs-literal">false</span> |         3 |          9 |                  9 |        |<br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br></code></pre></td></tr></table></figure><p>下面我们对etcd的pod进行扩缩容看看是否会有影响</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@VM-0-13-centos etcd]<span class="hljs-comment"># kubectl scale statefulsets etcd --replicas=5</span><br>statefulset.apps/etcd scaled<br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># kubectl get pod | grep etcd</span><br>etcd-0   1/1     Running   0          22h<br>etcd-1   1/1     Running   0          22h<br>etcd-2   1/1     Running   0          22h<br>etcd-3   2/2     Running   0          78s<br>etcd-4   2/2     Running   2          53s<br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># etcdctl --endpoints 106.53.131.xx:2379 endpoint status --write-out=table</span><br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>|      ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>| 106.53.131.xx<span class="hljs-function">:2379</span> | 42c8b94265b9b79a |  3.4.13 |   20 kB |      <span class="hljs-literal">true</span> |      <span class="hljs-literal">false</span> |         3 |         11 |                 11 |        |<br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># etcdctl --endpoints 106.53.131.xx:2379 member list</span><br>42c8b94265b9b79a, started, etcd-2, http:<span class="hljs-string">//etcd-2.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-2.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>9869f0647883a00d, started, etcd-1, http:<span class="hljs-string">//etcd-1.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-1.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>c799a6ef06bc8c14, started, etcd-0, http:<span class="hljs-string">//etcd-0.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-0.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>ef933addf9d37a32, started, etcd-3, http:<span class="hljs-string">//etcd-3.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-3.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># kubectl scale statefulsets etcd --replicas=3</span><br>statefulset.apps/etcd scaled<br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># kubectl get pod | grep etcd</span><br>etcd-0   1/1     Running   0          22h<br>etcd-1   1/1     Running   0          22h<br>etcd-2   1/1     Running   0          22h<br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># etcdctl --endpoints 106.53.131.xx:2379 member list</span><br>42c8b94265b9b79a, started, etcd-2, http:<span class="hljs-string">//etcd-2.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-2.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>9869f0647883a00d, started, etcd-1, http:<span class="hljs-string">//etcd-1.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-1.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>c799a6ef06bc8c14, started, etcd-0, http:<span class="hljs-string">//etcd-0.etcd.default.svc.cluster.local</span><span class="hljs-function">:2380</span>, http:<span class="hljs-string">//etcd-0.etcd.default.svc.cluster.local</span><span class="hljs-function">:2379</span>, <span class="hljs-literal">false</span><br>[root@VM-0-13-centos etcd]<span class="hljs-comment"># etcdctl --endpoints 106.53.131.xx:2379 endpoint status --write-out=table</span><br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>|      ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br>| 106.53.131.xx<span class="hljs-function">:2379</span> | c799a6ef06bc8c14 |  3.4.13 |   20 kB |     <span class="hljs-literal">false</span> |      <span class="hljs-literal">false</span> |         3 |         12 |                 12 |        |<br>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">------------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">--------------------</span>+<span class="hljs-params">--------</span>+<br></code></pre></td></tr></table></figure><p>这边扩缩容都是正常，这边可以给etcd配置hpa来实现整真正的高可用。</p><h1 id="etcdctl常用的命令"><a href="#etcdctl常用的命令" class="headerlink" title="etcdctl常用的命令"></a>etcdctl常用的命令</h1><p>为了执行命名方便，我们在客户端机器直接写这个alias，将下面命令写到root目录下的.bashrc文件然后bash一下这个文件，新开一个session窗口，后续直接执行etcdcluster这个命令加参数即可。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">etcdcluster</span>=&#x27;etcdctl --endpoints <span class="hljs-number">106</span>.<span class="hljs-number">53</span>.<span class="hljs-number">131</span>.xx:<span class="hljs-number">2379</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="PUT-options"><a href="#PUT-options" class="headerlink" title="PUT [options]  "></a>PUT [options] <key> <value></h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos etcd]<span class="hljs-comment"># etcdcluster  put foo bar </span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos etcd]<span class="hljs-comment"># etcdcluster  get foo</span><br>foo<br>ba<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos etcd]<span class="hljs-comment"># etcdcluster put foo bar1 --prev-kv //覆盖之前的值</span><br>OK<br>foo<br>bar[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos etcd]<span class="hljs-comment"># etcdcluster get foo</span><br>foo<br>bar1<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos etcd]<span class="hljs-comment"># etcdcluster put foo &quot;bar1 2 3&quot; //插入多个value值</span><br>OK<br></code></pre></td></tr></table></figure><h2 id="GET-options-range-end"><a href="#GET-options-range-end" class="headerlink" title="GET [options]  [range_end]"></a>GET [options] <key> [range_end]</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put foo1 bar1</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put foo2 bar2</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put foo3 bar3</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put foo bar</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster get foo</span><br>foo<br><span class="hljs-keyword">bar</span><br><span class="hljs-keyword"></span>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster get --from-key &#x27;&#x27; //获取所有的键</span><br>foo<br><span class="hljs-keyword">bar</span><br><span class="hljs-keyword"></span>foo1<br><span class="hljs-keyword">bar1</span><br><span class="hljs-keyword"></span>foo2<br><span class="hljs-keyword">bar2</span><br><span class="hljs-keyword"></span>foo3<br><span class="hljs-keyword">bar3</span><br><span class="hljs-keyword"></span>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster get --from-key foo1  //获取名称大于或等于的所有键</span><br>foo1<br><span class="hljs-keyword">bar1</span><br><span class="hljs-keyword"></span>foo2<br><span class="hljs-keyword">bar2</span><br><span class="hljs-keyword"></span>foo3<br><span class="hljs-keyword">bar3[root@VM-0-13-centos </span>~]<span class="hljs-comment"># etcdcluster get foo1 foo3 //获取名称大于等于foo1且小于foo2的所有键</span><br>foo1<br><span class="hljs-keyword">bar1</span><br><span class="hljs-keyword"></span>foo2<br><span class="hljs-keyword">bar2</span><br></code></pre></td></tr></table></figure><h2 id="DEL-options-range-end"><a href="#DEL-options-range-end" class="headerlink" title="DEL [options]  [range_end]"></a>DEL [options] <key> [range_end]</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put foo bar</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster del foo </span><br><span class="hljs-number">1</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put key val //删除某个键</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster del --prev-kv key //返回删除的键值</span><br><span class="hljs-number">1</span><br>key<br>val<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put a 123</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put b 456</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put c 789</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster del --from-key a //从某个键开始删除</span><br><span class="hljs-number">6</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster get --from-key a //检查a后面的是否删除</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put zoo val</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put zoo1 val1</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster put zoo2 val2</span><br>OK<br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster del --prefix zoo //键值前缀匹配删除</span><br><span class="hljs-number">3</span><br>[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]<span class="hljs-comment"># etcdcluster get --from-key zoo</span><br></code></pre></td></tr></table></figure><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@VM<span class="hljs-number">-0</span><span class="hljs-number">-13</span>-centos ~]# etcdcluster <span class="hljs-keyword">snapshot</span> save <span class="hljs-keyword">snapshot</span>.db<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:<span class="hljs-number">1605871537.932119</span>,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;snapshot/v3_snapshot.go:119&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;created temporary db file&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;snapshot.db.part&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:<span class="hljs-string">&quot;2020-11-20T19:25:37.933+0800&quot;</span>,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;clientv3/maintenance.go:200&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;opened snapshot stream; downloading&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:<span class="hljs-number">1605871537.9336457</span>,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;snapshot/v3_snapshot.go:127&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;fetching snapshot&quot;</span>,<span class="hljs-string">&quot;endpoint&quot;</span>:<span class="hljs-string">&quot;106.53.131.85:2379&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:<span class="hljs-string">&quot;2020-11-20T19:25:37.935+0800&quot;</span>,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;clientv3/maintenance.go:208&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;completed snapshot read; closing&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:<span class="hljs-number">1605871537.9402754</span>,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;snapshot/v3_snapshot.go:142&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;fetched snapshot&quot;</span>,<span class="hljs-string">&quot;endpoint&quot;</span>:<span class="hljs-string">&quot;106.53.131.85:2379&quot;</span>,<span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-string">&quot;25 kB&quot;</span>,<span class="hljs-string">&quot;took&quot;</span>:<span class="hljs-number">0.00810019</span>&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:<span class="hljs-number">1605871537.9403143</span>,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;snapshot/v3_snapshot.go:152&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;saved&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;snapshot.db&quot;</span>&#125;<br>Snapshot saved at <span class="hljs-keyword">snapshot</span>.db<br></code></pre></td></tr></table></figure><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@VM-0-13-centos ~]# etcdcluster snapshot <span class="hljs-keyword">restore</span> snapshot.<span class="hljs-keyword">db</span> --data-<span class="hljs-keyword">dir</span>=/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/etcd<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:1605871714.2255018,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;snapshot/v3_snapshot.go:296&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;restoring snapshot&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;snapshot.db&quot;</span>,<span class="hljs-string">&quot;wal-dir&quot;</span>:<span class="hljs-string">&quot;/var/run/etcd/member/wal&quot;</span>,<span class="hljs-string">&quot;data-dir&quot;</span>:<span class="hljs-string">&quot;/var/run/etcd&quot;</span>,<span class="hljs-string">&quot;snap-dir&quot;</span>:<span class="hljs-string">&quot;/var/run/etcd/member/snap&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:1605871714.2265532,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;membership/cluster.go:392&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;added member&quot;</span>,<span class="hljs-string">&quot;cluster-id&quot;</span>:<span class="hljs-string">&quot;cdf818194e3a8c32&quot;</span>,<span class="hljs-string">&quot;local-member-id&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;added-peer-id&quot;</span>:<span class="hljs-string">&quot;8e9e05c52164694d&quot;</span>,<span class="hljs-string">&quot;added-peer-peer-urls&quot;</span>:[<span class="hljs-string">&quot;http://localhost:2380&quot;</span>]&#125;<br>&#123;<span class="hljs-string">&quot;level&quot;</span>:<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;ts&quot;</span>:1605871714.242329,<span class="hljs-string">&quot;caller&quot;</span>:<span class="hljs-string">&quot;snapshot/v3_snapshot.go:309&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;restored snapshot&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;snapshot.db&quot;</span>,<span class="hljs-string">&quot;wal-dir&quot;</span>:<span class="hljs-string">&quot;/var/run/etcd/member/wal&quot;</span>,<span class="hljs-string">&quot;data-dir&quot;</span>:<span class="hljs-string">&quot;/var/run/etcd&quot;</span>,<span class="hljs-string">&quot;snap-dir&quot;</span>:<span class="hljs-string">&quot;/var/run/etcd/member/snap&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>这里只做一些常用简单的命令进行操作，更多的命令使用可以参考<a href="https://github.com/etcd-io/etcd/tree/master/etcdctl%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8%E3%80%82">https://github.com/etcd-io/etcd/tree/master/etcdctl进行操作使用。</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>etcd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes中pod的创建流程</title>
    <link href="/2020/11/17/2020-11-17-Pod-creation-process-in-Kubernetes/"/>
    <url>/2020/11/17/2020-11-17-Pod-creation-process-in-Kubernetes/</url>
    
    <content type="html"><![CDATA[<p>一般我们在创建pod的过程中都是，执行kubectl命令去apply对应的yaml文件，但是在执行这个操作的过程到pod被完成创建，k8s的组件都做了哪些操作呢？下面我们简要说说pod被创建的过程。</p><p><img src="/img/2020-11-17-Pod-creation-process-in-Kubernetes/1.png" alt="upload-image"> </p><ol><li>用户通过kubectl命名发起请求。</li><li>apiserver通过对应的kubeconfig进行认证，认证通过后将yaml中的po信息存到etcd。</li><li>Controller-Manager通过apiserver的watch接口发现了pod信息的更新，执行该资源所依赖的拓扑结构整合，整合后将对应的信息交给apiserver，apiserver写到etcd，此时pod已经可以被调度了。</li><li>Scheduler同样通过apiserver的watch接口更新到pod可以被调度，通过算法给pod分配节点，并将pod和对应节点绑定的信息交给apiserver，apiserver写到etcd，然后将pod交给kubelet。</li><li>kubelet收到pod后，调用CNI接口给pod创建pod网络，调用CRI接口去启动容器，调用CSI进行存储卷的挂载。</li><li>网络，容器，存储创建完成后pod创建完成，等业务进程启动后，pod运行成功。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Pod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s之securityContext</title>
    <link href="/2020/11/16/2020-11-16-securityContext-of-k8s/"/>
    <url>/2020/11/16/2020-11-16-securityContext-of-k8s/</url>
    
    <content type="html"><![CDATA[<p>securityContext是什么呢，有什么作用呢，其实这个就是用来控制容器内的用户权限，你想用什么用户去执行程序或者执行操作等等。</p><h1 id="securityContext介绍"><a href="#securityContext介绍" class="headerlink" title="securityContext介绍"></a>securityContext介绍</h1><p>安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。 安全上下文包括但不限于：</p><ul><li>自主访问控制（Discretionary Access Control）：基于 用户 ID（UID）和组 ID（GID）. 来判定对对象（例如文件）的访问权限。</li><li>安全性增强的 Linux（SELinux）： 为对象赋予安全性标签。</li><li>以特权模式或者非特权模式运行。</li><li>Linux 权能: 为进程赋予 root 用户的部分特权而非全部特权。</li><li>AppArmor：使用程序框架来限制个别程序的权能。</li><li>Seccomp：过滤进程的系统调用。</li><li>AllowPrivilegeEscalation：控制进程是否可以获得超出其父进程的特权。 此布尔值直接控制是否为容器进程设置 no_new_privs标志。 当容器以特权模式运行或者具有 CAP_SYS_ADMIN 权能时，AllowPrivilegeEscalation 总是为 true。</li><li>readOnlyRootFilesystem：以只读方式加载容器的根文件系统。</li></ul><h1 id="如何为-Pod-设置安全性上下文"><a href="#如何为-Pod-设置安全性上下文" class="headerlink" title="如何为 Pod 设置安全性上下文"></a>如何为 Pod 设置安全性上下文</h1><p>要为 Pod 设置安全性设置，可在 Pod 规约中包含 securityContext 字段。securityContext 字段值是一个 PodSecurityContext 对象。你为 Pod 所设置的安全性配置会应用到 Pod 中所有 Container 上。 下面是一个 Pod 的配置文件，该 Pod 定义了 securityContext 和一个 emptyDir 卷</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">security-context-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">securityContext:</span><br>    <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-attr">runAsGroup:</span> <span class="hljs-number">3000</span><br>    <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">2000</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sec-ctx-vol</span><br>    <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sec-ctx-demo</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 1h&quot;</span> ]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sec-ctx-vol</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/demo</span><br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>下面我们来解析下securityContext中每个配置的含义然后到容器内进行验证下是否有生效：</p><ul><li>runAsUser: 1000字段指定 Pod 中的所有容器内的进程都使用用户 ID 1000 来运行。</li></ul><p>进到容器中，我们发现执行任何命名也就是进程的用户都是1000</p><p><img src="/img/2020-11-16-securityContext-of-k8s/1.png" alt="upload-image"> </p><ul><li>runAsGroup: 3000字段指定所有容器中的进程都以主组 ID 3000 来运行。 如果忽略此字段，则容器的主组 ID 将是 root（0）。 当runAsGroup被设置时，所有创建的文件也会划归用户 1000 和组 3000。</li></ul><p><img src="/img/2020-11-16-securityContext-of-k8s/2.png" alt="upload-image"> </p><ul><li>fsGroup: 2000被设置，容器中所有进程也会是附组 ID 2000 的一部分。 卷&#x2F;data&#x2F;demo及在该卷中创建的任何文件的属主都会是组 ID 2000。</li></ul><p><img src="/img/2020-11-16-securityContext-of-k8s/3.png" alt="upload-image"> </p><h1 id="为-Container-设置安全性上下文"><a href="#为-Container-设置安全性上下文" class="headerlink" title="为 Container 设置安全性上下文"></a>为 Container 设置安全性上下文</h1><p>我们可以在pod层面和container层面设置上下文，但是如果2个同时配置了，那么哪个会生效呢？下面我们来测试一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># cat security-context-2.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">security-context-demo-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">securityContext:</span><br>    <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sec-ctx-demo-2</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">empiregeneral/node-hello:1.0</span><br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">2000</span><br>      <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-16-securityContext-of-k8s/4.png" alt="upload-image"> </p><p>从上图的结果发现，进程的用户都是2000，这里说明container的级别要高于pod的级别，也就是container会覆盖pod中的securityContext配置。</p><h1 id="pod的特权模式运行"><a href="#pod的特权模式运行" class="headerlink" title="pod的特权模式运行"></a>pod的特权模式运行</h1><p>Privileged-决定是否 Pod 中的某容器可以启用特权模式。 默认情况下，容器是不可以访问宿主上的任何设备的，不过一个“privileged（特权的）” 容器则被授权访问宿主上所有设备。 这种容器几乎享有宿主上运行的进程的所有访问权限。 对于需要使用 Linux 权能字（如操控网络堆栈和访问设备）的容器而言是有用的</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">image:</span> busybox:latest<br><span class="hljs-symbol">imagePullPolicy:</span> Always<br><span class="hljs-symbol">name:</span> security-context<br><span class="hljs-symbol">resources:</span><br><span class="hljs-symbol">  limits:</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-number">500</span>m<br><span class="hljs-symbol">    memory:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">  requests:</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-number">250</span>m<br><span class="hljs-symbol">    memory:</span> <span class="hljs-number">256</span>Mi<br><span class="hljs-symbol">securityContext:</span><br><span class="hljs-symbol">  privileged:</span> true<br><span class="hljs-symbol">terminationMessagePath:</span> <span class="hljs-keyword">/dev/</span>termination-log<br><span class="hljs-symbol">terminationMessagePolicy:</span> File<br></code></pre></td></tr></table></figure><p>在上下文配置上这个字段，后续pod就可以获取宿主机的访问权限了。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/">https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>securityContext</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何加载编译k8s源码</title>
    <link href="/2020/11/11/2020-11-11-How-to-read-k8s-source-code/"/>
    <url>/2020/11/11/2020-11-11-How-to-read-k8s-source-code/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了如何在windows下通过goland阅读k8s源码。</p><h1 id="下载及idea加载GO代码"><a href="#下载及idea加载GO代码" class="headerlink" title="下载及idea加载GO代码"></a>下载及idea加载GO代码</h1><p>这边大家可以百度一下，搜一下go的下载及破解版goland的下载，网上教程很多，按照顺序按照下载即可。我这里的版本如下</p><p>go: 1.15<br>goland: 2020.1</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">C:\Users\nieweixing&gt;<span class="hljs-keyword">go</span> <span class="hljs-keyword">version</span><br><span class="hljs-keyword">go</span> <span class="hljs-keyword">version</span> go1.<span class="hljs-number">15</span> windows/amd64<br><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-11-How-to-read-k8s-source-code/1.png" alt="upload-image"> </p><h2 id="从github上克隆源码到本地"><a href="#从github上克隆源码到本地" class="headerlink" title="从github上克隆源码到本地"></a>从github上克隆源码到本地</h2><p>首先创建一个gopath目录,我们这里用的是</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">D:\go-<span class="hljs-meta">code</span><br></code></pre></td></tr></table></figure><p>然后在go-code目录下创建一个src&#x2F;k8s.io,最后我们存放代码的目录为</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">D</span>:\go-code\src\k8s.<span class="hljs-built_in">io</span><br></code></pre></td></tr></table></figure><p>我们切换到k8s.io目录，执行如下命令clone代码，注意需要加上core.symlinks&#x3D;true这个参数，源码中有很多软连接，不加这个参数会找不到依赖。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 克隆最新代码</span><br>git clone -c core.symlinks=true https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes/</span>kubernetes<br><br><span class="hljs-comment"># 克隆某个分支代码</span><br>git clone -c core.symlinks=true -b xxxx  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes/</span>kubernetes<br></code></pre></td></tr></table></figure><h2 id="goland查看源码并分析目录结构"><a href="#goland查看源码并分析目录结构" class="headerlink" title="goland查看源码并分析目录结构"></a>goland查看源码并分析目录结构</h2><p>我们打开goland后配置好$GOPATH,然后查看下对应源码即可。</p><p><img src="/img/2020-11-11-How-to-read-k8s-source-code/2.png" alt="upload-image"> </p><p>下面我们简单介绍下k8s源码目录的作用</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">|<span class="hljs-params">--api</span>  <span class="hljs-string">//</span> 存放api规范相关的文档<br>|<span class="hljs-params">------api-rules</span>  <span class="hljs-string">//</span>已经存在的违反Api规范的api<br>|<span class="hljs-params">------openapi-spec</span>  <span class="hljs-string">//OpenApi</span>规范<br>|<span class="hljs-params">--build</span> <span class="hljs-string">//</span> 构建和测试脚本<br>|<span class="hljs-params">------run</span>.sh  <span class="hljs-string">//</span>在容器中运行该脚本，后面可接多个命令：make, make cross 等<br>|<span class="hljs-params">------copy-output</span>.sh  <span class="hljs-string">//</span>把容器中_output/dockerized/bin目录下的文件拷贝到本地目录<br>|<span class="hljs-params">------make-clean</span>.sh  <span class="hljs-string">//</span>清理容器中和本地的_output目录<br>|<span class="hljs-params">------shell</span>.sh  <span class="hljs-string">//</span> 容器中启动一个shell终端<br>|<span class="hljs-params">------</span><span class="hljs-string">......</span><br>|<span class="hljs-params">--cluster</span>  <span class="hljs-string">//</span> 自动创建和配置kubernetes集群的脚本，包括networking, DNS, nodes等<br>|<span class="hljs-params">--cmd</span>  <span class="hljs-string">//</span> 内部包含各个组件的入口，具体核心的实现部分在pkg目录下<br>|<span class="hljs-params">--hack</span>  <span class="hljs-string">//</span> 编译、构建及校验的工具类<br>|<span class="hljs-params">--logo</span> <span class="hljs-string">//</span> kubernetes的logo<br>|<span class="hljs-params">--pkg</span> <span class="hljs-string">//</span> 主要代码存放类，后面会详细补充该目录下内容<br>|<span class="hljs-params">------kubeapiserver</span><br>|<span class="hljs-params">------kubectl</span><br>|<span class="hljs-params">------kubelet</span><br>|<span class="hljs-params">------proxy</span><br>|<span class="hljs-params">------registry</span><br>|<span class="hljs-params">------scheduler</span><br>|<span class="hljs-params">------security</span><br>|<span class="hljs-params">------watch</span><br>|<span class="hljs-params">------</span><span class="hljs-string">......</span><br>|<span class="hljs-params">--plugin</span><br>|<span class="hljs-params">------pkg/admission</span>  <span class="hljs-string">//</span>认证<br>|<span class="hljs-params">------pkg/auth</span>  <span class="hljs-string">//</span>鉴权<br>|<span class="hljs-params">--staging</span>  <span class="hljs-string">//</span> 这里的代码都存放在独立的repo中，以引用包的方式添加到项目中<br>|<span class="hljs-params">------k8s</span>.io/api<br>|<span class="hljs-params">------k8s</span>.io/apiextensions-apiserver<br>|<span class="hljs-params">------k8s</span>.io/apimachinery<br>|<span class="hljs-params">------k8s</span>.io/apiserver<br>|<span class="hljs-params">------k8s</span>.io/client-go<br>|<span class="hljs-params">------</span><span class="hljs-string">......</span><br>|<span class="hljs-params">--test</span>  <span class="hljs-string">//</span>测试代码<br>|<span class="hljs-params">--third_party</span>  <span class="hljs-string">//</span>第三方代码，protobuf、golang-reflect等<br>|<span class="hljs-params">--translations</span>  <span class="hljs-string">//</span>不同国家的语言包，使用poedit查看及编辑<br></code></pre></td></tr></table></figure><h1 id="Kubernetes源码编译"><a href="#Kubernetes源码编译" class="headerlink" title="Kubernetes源码编译"></a>Kubernetes源码编译</h1><p>我们知道k8s的运行访问有2种方式，一种是二进制，还有一种就是docker镜像的方式，下面我们来讲一下如何将源码编译成二进制和镜像的方式。</p><h2 id="二进制编译kubernetes"><a href="#二进制编译kubernetes" class="headerlink" title="二进制编译kubernetes"></a>二进制编译kubernetes</h2><h3 id="编译全部组件"><a href="#编译全部组件" class="headerlink" title="编译全部组件"></a>编译全部组件</h3><p>这里我们以在centos7上作为示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">yum install go -y</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /root/go/src/k8s.io</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/kubernetes/kubernetes</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root/go/src/k8s.io/kubernetes</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">KUBE_BUILD_PLATFORMS=linux/amd64 make</span><br></code></pre></td></tr></table></figure><p>在这里我们编译apiserver的时候会出现一个错误，提示我们app\server.go:477:70: undefined: “k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;generated&#x2F;openapi”.GetOpenAPIDefinitions。</p><p>在pkg&#x2F;generated&#x2F;openapi确实没有这个函数。这个函数是在zz_generated.openapi.go，我们需要在&#x2F;root&#x2F;go&#x2F;src&#x2F;k8s.io&#x2F;kubernetes下执行</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># cd /root/go/src/k8s.io/kubernetes</span><br><span class="hljs-comment"># make generated_files</span><br><span class="hljs-comment"># ls -l pkg/generated/openapi</span><br>total 2384<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 1216 </span>Nov<span class="hljs-number"> 23 </span>11:23 BUILD<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 621 </span>Nov<span class="hljs-number"> 23 </span>11:23 doc.go<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 1533 </span>Nov<span class="hljs-number"> 23 </span>11:23 openapi_test.go<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 131 </span>Nov<span class="hljs-number"> 23 </span>11:23 OWNERS<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 2423572 </span>Nov<span class="hljs-number"> 23 </span>12:41 zz_generated.openapi.go<br></code></pre></td></tr></table></figure><p>这里我们发现已经zz_generated.openapi.go生成在pkg&#x2F;generated&#x2F;openapi目录下，如果你在windows也有代码，那么你可以把这个文件拷贝到对应目录下。</p><p>现在我们再执行编译命令，然后编译好的二进制文件在&#x2F;root&#x2F;go&#x2F;src&#x2F;k8s.io&#x2F;kubernetes&#x2F;_output&#x2F;bin这个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-13-centos kubernetes]<span class="hljs-comment"># KUBE_BUILD_PLATFORMS=linux/amd64 make</span><br>+++ [1123 13:45:25] Building go targets <span class="hljs-keyword">for</span> linux/amd64:<br>    cmd/kube-proxy<br>    cmd/kube-apiserver<br>    cmd/kube-controller-manager<br>    cmd/kubelet<br>    cmd/kubeadm<br>    cmd/kube-scheduler<br>    vendor/k8s.io/kube-aggregator<br>    vendor/k8s.io/apiextensions-apiserver<br>    cluster/gce/gci/mounter<br>    cmd/kubectl<br>    cmd/gendocs<br>    cmd/genkubedocs<br>    cmd/genman<br>    cmd/genyaml<br>    cmd/genswaggertypedocs<br>    cmd/linkcheck<br>    vendor/github.com/onsi/ginkgo/ginkgo<br>    <span class="hljs-built_in">test</span>/e2e/e2e.<span class="hljs-built_in">test</span><br>    cluster/images/conformance/go-runner<br>    cmd/kubemark<br>    vendor/github.com/onsi/ginkgo/ginkgo<br>    <span class="hljs-built_in">test</span>/e2e_node/e2e_node.<span class="hljs-built_in">test</span><br>[root@VM-0-13-centos kubernetes]<span class="hljs-comment"># ls _output/bin</span><br>apiextensions-apiserver  e2e_node.test  genman              go2make     kube-aggregator          kubelet         linkcheck<br>conversion-gen           e2e.test       genswaggertypedocs  go-bindata  kube-apiserver           kubemark        mounter<br>deepcopy-gen             gendocs        genyaml             go-runner   kube-controller-manager  kube-proxy      openapi-gen<br>defaulter-gen            genkubedocs    ginkgo              kubeadm     kubectl                  kube-scheduler  prerelease-lifecycle-gen<br></code></pre></td></tr></table></figure><h3 id="编译单个组件"><a href="#编译单个组件" class="headerlink" title="编译单个组件"></a>编译单个组件</h3><p>我们可以只编译某一个组件，下面我们来演示如何只编译kubelet的二进制文件</p><p>在linux和window下都是同样的方式，只是编译的平台不一样，生成的二进制文件不一样，window下生产kubelet.exe,linux下生产kubelet这个二进制执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/k8s.io/kubernetes/cmd/kubelet</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">go build -v</span><br></code></pre></td></tr></table></figure><p>执行编译完成后，在kubelet目录下会存在可执行的kubelet二进制文件</p><p><img src="/img/2020-11-11-How-to-read-k8s-source-code/3.png" alt="upload-image"> </p><p><img src="/img/2020-11-11-How-to-read-k8s-source-code/4.png" alt="upload-image"> </p><h2 id="docker镜像编译kubernetes"><a href="#docker镜像编译kubernetes" class="headerlink" title="docker镜像编译kubernetes"></a>docker镜像编译kubernetes</h2><p>我们这里下载的是最新的源码，如果拉取不到国外镜像，可以执行下面命令拉取镜像然后上传到本地机器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mirrorgooglecontainers/pause-amd64:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> pull zhuyuhua/kube-cross:v1.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>-<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> pull mirrorgooglecontainers/debian-base-amd64:<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull mirrorgooglecontainers/debian-iptables-amd64:v11.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull mirrorgooglecontainers/debian-hyperkube-base-amd64:<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull litmuschaos/go-runner:latest<br><br><span class="hljs-attribute">docker</span> tag mirrorgooglecontainers/pause-amd64:<span class="hljs-number">3</span>.<span class="hljs-number">1</span> k8s.gcr.io/build-image/pause-amd64:<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> tag zhuyuhua/kube-cross:v1.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>-<span class="hljs-number">1</span> k8s.gcr.io/build-image/kube-cross:v1.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>-<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> tag mirrorgooglecontainers/debian-base-amd64:<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span> k8s.gcr.io/build-image/debian-base-amd64:<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag mirrorgooglecontainers/debian-iptables-amd64:v11.<span class="hljs-number">0</span> k8s.gcr.io/build-image/debian-iptables:buster-v1.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> <br><span class="hljs-attribute">docker</span> tag mirrorgooglecontainers/debian-hyperkube-base-amd64:<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span> k8s.gcr.io/build-image/debian-hyperkube-base-amd64:<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> tag litmuschaos/go-runner:latest k8s.gcr.io/build-image/go-runner:buster-v2.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>为了防止从远程拉取镜像，我们可以修改下$GOPATH\src\k8s.io\kubernetes\build\lib\release.sh的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DOCKER[@]&#125;</span>&quot;</span> build <span class="hljs-variable">$&#123;docker_build_opts:+&quot;<span class="hljs-variable">$&#123;docker_build_opts&#125;</span>&quot;&#125;</span> -q -t <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_image_tag&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_build_path&#125;</span>&quot;</span> &gt;/dev/null<br><br>改成如下<br><br><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DOCKER[@]&#125;</span>&quot;</span> build -q -t <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_image_tag&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_build_path&#125;</span>&quot;</span> &gt;/dev/null<br></code></pre></td></tr></table></figure><p>然后执行如下命令进行打包</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-0-3-centos</span> <span class="hljs-string">kubernetes</span>]<span class="hljs-comment"># KUBE_GIT_VERSION=v1.19.0-alpha.0 KUBE_FASTBUILD=true KUBE_BUILD_PULL_LATEST_IMAGES=n make release-images</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:20:07</span>] <span class="hljs-string">Verifying</span> <span class="hljs-string">Prerequisites....</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:20:07</span>] <span class="hljs-string">Building</span> <span class="hljs-string">Docker</span> <span class="hljs-string">image</span> <span class="hljs-string">kube-build:build-a3ee5ddec9-5-v1.15.2-1</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:20:10</span>] <span class="hljs-string">Syncing</span> <span class="hljs-string">sources</span> <span class="hljs-string">to</span> <span class="hljs-string">container</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:20:13</span>] <span class="hljs-string">Running</span> <span class="hljs-string">build</span> <span class="hljs-string">command...</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:01</span>] <span class="hljs-attr">Building go targets for linux/amd64:</span><br>    <span class="hljs-string">cmd/kube-apiserver</span><br>    <span class="hljs-string">cmd/kube-controller-manager</span><br>    <span class="hljs-string">cmd/kube-scheduler</span><br>    <span class="hljs-string">cmd/kube-proxy</span><br>    <span class="hljs-string">vendor/github.com/onsi/ginkgo/ginkgo</span><br>    <span class="hljs-string">test/e2e/e2e.test</span><br>    <span class="hljs-string">cluster/images/conformance/go-runner</span><br>    <span class="hljs-string">cmd/kubectl</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:42</span>] <span class="hljs-string">Syncing</span> <span class="hljs-string">out</span> <span class="hljs-string">of</span> <span class="hljs-string">container</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:51</span>] <span class="hljs-attr">Building images:</span> <span class="hljs-string">linux-amd64</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:51</span>] <span class="hljs-attr">Starting docker build for image:</span> <span class="hljs-string">kube-apiserver-amd64</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:51</span>] <span class="hljs-attr">Starting docker build for image:</span> <span class="hljs-string">kube-controller-manager-amd64</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:51</span>] <span class="hljs-attr">Starting docker build for image:</span> <span class="hljs-string">kube-scheduler-amd64</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:51</span>] <span class="hljs-attr">Starting docker build for image:</span> <span class="hljs-string">kube-proxy-amd64</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:21:51</span>] <span class="hljs-attr">Building conformance image for arch:</span> <span class="hljs-string">amd64</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:22:26</span>] <span class="hljs-string">Deleting</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">k8s.gcr.io/kube-proxy-amd64:v1.19.0-alpha.0</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:22:30</span>] <span class="hljs-string">Deleting</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">k8s.gcr.io/kube-scheduler-amd64:v1.19.0-alpha.0</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:22:37</span>] <span class="hljs-string">Deleting</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">k8s.gcr.io/kube-apiserver-amd64:v1.19.0-alpha.0</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:22:37</span>] <span class="hljs-string">Deleting</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">k8s.gcr.io/kube-controller-manager-amd64:v1.19.0-alpha.0</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:22:51</span>] <span class="hljs-string">Deleting</span> <span class="hljs-string">conformance</span> <span class="hljs-string">image</span> <span class="hljs-string">k8s.gcr.io/conformance-amd64:v1.19.0-alpha.0</span><br><span class="hljs-string">+++</span> [<span class="hljs-number">1123 17:22:51</span>] <span class="hljs-string">Docker</span> <span class="hljs-string">builds</span> <span class="hljs-string">done</span><br></code></pre></td></tr></table></figure><p>编译完成后,可以到对应的目录下查找镜像，并通过docker load &lt; *** 来加载镜像,然后通过修改组件的yaml的镜像名称即可。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-0-3-centos amd64]<span class="hljs-comment"># ll</span><br>total 2101008<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 298798080 </span>Nov<span class="hljs-number"> 23 </span>17:22 conformance-amd64.tar<br>-rw-------<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 619204608 </span>Nov<span class="hljs-number"> 23 </span>17:22 kube-apiserver.tar<br>-rw-------<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 612844544 </span>Nov<span class="hljs-number"> 23 </span>17:22 kube-controller-manager.tar<br>-rw-------<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 103392256 </span>Nov<span class="hljs-number"> 23 </span>17:22 kube-proxy.tar<br>-rw-------<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 517171712 </span>Nov<span class="hljs-number"> 23 </span>17:22 kube-scheduler.tar<br>[root@VM-0-3-centos amd64]<span class="hljs-comment"># pwd</span><br>/root/go/src/k8s.io/kubernetes/_output/release-images/amd64<br>[root@VM-0-3-centos amd64]<span class="hljs-comment"># docker load &lt; kube-apiserver.tar</span><br>5eebc1b5676b: Loading layer [==================================================&gt;]  163.4MB/163.4MB<br>Loaded image: k8s.gcr.io/kube-apiserver-amd64:v1.19.0-alpha.0<br>[root@VM-0-3-centos amd64]<span class="hljs-comment"># docker images|grep apis</span><br>k8s.gcr.io/kube-apiserver-amd64                            v1.19.0-alpha.0                c1ac6c895896       <span class="hljs-number"> 20 </span>minutes ago      613MB<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Kubernetes证书的那点事</title>
    <link href="/2020/11/07/2020-11-07-About-the-kubernetes-certificate/"/>
    <url>/2020/11/07/2020-11-07-About-the-kubernetes-certificate/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了k8s中用的证书和组件之间是如何进行认证访问的。</p><h1 id="k8s证书介绍"><a href="#k8s证书介绍" class="headerlink" title="k8s证书介绍"></a>k8s证书介绍</h1><p>众所周知。Kubernetes 需要 PKI 证书才能进行基于 TLS 的身份验证。如果你是使用kubeadm安装的 Kubernetes， 则会自动生成集群所需的证书。但是如果是通过二进制搭建，所有的证书是需要自己生成的，这里我们说说集群必需的证书。</p><ul><li>服务器单向认证：只需要服务器端提供证书，客户端通过服务器端证书验证服务的身份，但服务器并不验证客户端的身份。这种情况一般适用于对 Internet 开放的服务，例如搜索引擎网站，任何客户端都可以连接到服务器上进行访问，但客户端需要验证服务器的身份，以避免连接到伪造的恶意服务器。</li><li>双向 TLS 认证：除了客户端需要验证服务器的证书，服务器也要通过客户端证书验证客户端的身份。这种情况下服务器提供的是敏感信息，只允许特定身份的客户端访问</li></ul><p>Kubernetes为了安全性，都是采用双向认证。通常我们在部署k8s时候，kubeadm会自动生成集群所需要的证书，下面我们就这些证书一一给大家进行讲解。<br>这是我们用kubeadm搭建完一个集群后再&#x2F;etc&#x2F;kubernetes目录下所生成的文件</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@VM-4-3-centos</span> etc]<span class="hljs-comment"># tree kubernetes/</span><br>kubernetes/<br>|<span class="hljs-string">-- admin.conf</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- controller-manager.conf</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- kubelet.conf</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- scheduler.conf</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- manifests</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- etcd.yaml</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- kube-apiserver.yaml</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- kube-controller-manager.yaml</span><br><span class="hljs-string"></span>|<span class="hljs-string">   `-- kube-scheduler.yaml</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- pki</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apiserver.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apiserver-etcd-client.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apiserver-etcd-client.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apiserver.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apiserver-kubelet-client.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apiserver-kubelet-client.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ca.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ca.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- etcd</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ca.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ca.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- healthcheck-client.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- healthcheck-client.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- peer.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- peer.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- server.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   `-- server.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- front-proxy-ca.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- front-proxy-ca.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- front-proxy-client.crt</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- front-proxy-client.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- sa.key</span><br><span class="hljs-string"></span>|<span class="hljs-string">   `-- sa.pub</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-07-About-the-kubernetes-certificate/1.png" alt="upload-image"> </p><p>下面我们根据这个k8s的组件之间通讯图来一一讲解每个证书的作用。</p><h1 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h1><p>kubeadm安装的集群中我们都是用3套CA证书来管理和签发其他证书，一套CA给ETCD使用，一套是给kubernetes内部组件使用，还有一套是给配置聚合层使用的，当然如果你觉得管理3套CA比较麻烦，您也可以用一套来管理。</p><h1 id="etcd证书"><a href="#etcd证书" class="headerlink" title="etcd证书"></a>etcd证书</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ca<span class="hljs-selector-class">.crt</span>  ca<span class="hljs-selector-class">.key</span>  healthcheck-client<span class="hljs-selector-class">.crt</span>  healthcheck-client<span class="hljs-selector-class">.key</span>  peer<span class="hljs-selector-class">.crt</span>  peer<span class="hljs-selector-class">.key</span>  server<span class="hljs-selector-class">.crt</span>  server.key<br></code></pre></td></tr></table></figure><p>etcd证书位于&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd目录下，我们根据etcd的yaml配置解释下证书的作用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk">spec:<br>  containers:<br>  - command:<br>    - etcd<br>    - --advertise-client-urls=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">4.3</span>:<span class="hljs-number">2379</span><br>    - --cert-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.crt<br>    - --client-cert-auth=true<br>    - --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd<br>    - --initial-advertise-peer-urls=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">4.3</span>:<span class="hljs-number">2380</span><br>    - --initial-cluster=vm-<span class="hljs-number">4</span>-<span class="hljs-number">3</span>-centos=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">4.3</span>:<span class="hljs-number">2380</span><br>    - --key-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.key<br>    - --listen-client-urls=https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span>,https:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">4.3</span>:<span class="hljs-number">2379</span><br>    - --listen-peer-urls=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">4.3</span>:<span class="hljs-number">2380</span><br>    - --name=vm-<span class="hljs-number">4</span>-<span class="hljs-number">3</span>-centos<br>    - --peer-cert-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.crt<br>    - --peer-client-cert-auth=true<br>    - --peer-key-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.key<br>    - --peer-trusted-ca-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>    - --snapshot-count=<span class="hljs-number">10000</span><br>    - --trusted-ca-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>    image: k8s.gcr.io/etcd:<span class="hljs-number">3.3</span>.<span class="hljs-number">10</span><br>    imagePullPolicy: IfNotPresent<br>    livenessProbe:<br>      exec:<br>        command:<br>        - <span class="hljs-regexp">/bin/</span>sh<br>        - -ec<br>        - ETCDCTL_API=<span class="hljs-number">3</span> etcdctl --endpoints=https:<span class="hljs-regexp">//</span>[<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>]:<span class="hljs-number">2379</span> --cacert=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>          --cert=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/healthcheck-client.crt --key=/</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>healthcheck-client.key<br>          get foo<br>      failureThreshold: <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><ul><li>etcd 对外提供服务的服务器证书及私钥<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">server</span>.crt  <span class="hljs-keyword">server</span>.key<br></code></pre></td></tr></table></figure></li><li>etcd 节点之间相互进行认证的 peer 证书、私钥以及验证 peer 的 CA<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ca<span class="hljs-selector-class">.crt</span>  ca<span class="hljs-selector-class">.key</span> peer<span class="hljs-selector-class">.crt</span>  peer.key<br></code></pre></td></tr></table></figure></li><li>etcd 验证访问其服务的客户端的 CA<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">healthcheck-<span class="hljs-keyword">client</span>.crt  healthcheck-<span class="hljs-keyword">client</span>.key <br></code></pre></td></tr></table></figure></li></ul><h1 id="kube-apiserver证书"><a href="#kube-apiserver证书" class="headerlink" title="kube-apiserver证书"></a>kube-apiserver证书</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gradle"> name: kube-apiserver<br>  namespace: kube-system<br>spec:<br>  containers:<br>  - command:<br>    - kube-apiserver<br>    - --advertise-address=<span class="hljs-number">10.0</span>.<span class="hljs-number">4.3</span><br>    - --allow-privileged=<span class="hljs-keyword">true</span><br>    - --authorization-mode=Node,RBAC<br>    - --client-ca-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>ca.crt<br>    - --enable-admission-plugins=NodeRestriction<br>    - --enable-bootstrap-token-auth=<span class="hljs-keyword">true</span><br>    - --etcd-cafile=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>    - --etcd-certfile=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver-etcd-client.crt<br>    - --etcd-keyfile=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver-etcd-client.key<br>    - --etcd-servers=https:<span class="hljs-comment">//127.0.0.1:2379</span><br>    - --insecure-port=<span class="hljs-number">0</span><br>    - --kubelet-client-certificate=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver-kubelet-client.crt<br>    - --kubelet-client-key=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver-kubelet-client.key<br>    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname<br>    - --proxy-client-cert-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>front-proxy-client.crt<br>    - --proxy-client-key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>front-proxy-client.key<br>    - --requestheader-allowed-names=front-proxy-client<br>    - --requestheader-client-ca-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>front-proxy-ca.crt<br>    - --requestheader-extra-headers-prefix=X-Remote-Extra-<br>    - --requestheader-<span class="hljs-keyword">group</span>-headers=X-Remote-<span class="hljs-keyword">Group</span><br>    - --requestheader-username-headers=X-Remote-User<br>    - --secure-port=<span class="hljs-number">6443</span><br>    - --service-account-key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>sa.pub<br>    - --service-cluster-ip-range=<span class="hljs-number">10.96</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">12</span><br>    - --tls-cert-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver.crt<br>    - --tls-<span class="hljs-keyword">private</span>-key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>apiserver.key<br>    image: k8s.gcr.io/kube-apiserver:v1.<span class="hljs-number">15.2</span><br></code></pre></td></tr></table></figure><p>apiserver证书位于&#x2F;etc&#x2F;kubernetes&#x2F;pki，同样我们通过apiserver的yaml文件来一一解释下每个证书的作用。</p><ul><li>访问etcd的客户端证书及私钥，这个证书是由etcd的CA证书签发，因此也需要在apiserver中配置etcd的CA证书<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">apiserver-etcd-<span class="hljs-keyword">client</span>.key   apiserver-etcd-<span class="hljs-keyword">client</span>.crt   <br></code></pre></td></tr></table></figure></li><li>用来签发k8s中其他证书的CA证书及私钥<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">ca</span>.crt  <span class="hljs-keyword">ca</span>.key<br></code></pre></td></tr></table></figure></li><li>apiServer的对外提供服务的服务端证书及私钥<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">apiserver<span class="hljs-selector-class">.crt</span>   apiserver<span class="hljs-selector-class">.key</span>  <br></code></pre></td></tr></table></figure></li><li>apiserver 访问 kubelet 所需的客户端证书及私钥<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">apiserver-kubelet-<span class="hljs-keyword">client</span>.crt  apiserver-kubelet-<span class="hljs-keyword">client</span>.key<br></code></pre></td></tr></table></figure>配置聚合层（apiserver扩展）的CA和客户端证书及私钥<br>说明：要使聚合层在您的环境中正常工作以支持代理服务器和扩展 apiserver 之间的相互 TLS 身份验证， 需要满足一些设置要求。Kubernetes 和 kube-apiserver 具有多个 CA， 因此请确保代理是由聚合层 CA 签名的，而不是由主 CA 签名的。扩展apiserver为了能够和apiserver通讯，所以需要在apiserver中配置，假如你不需要这个功能可以不配置该证书。<figure class="highlight plaintext"><figcaption><span>front-proxy-client.crt  front-proxy-ca.key      front-proxy-client.key</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs front-proxy-ca.crt">```<br>* 验证 service account token 的公钥<br></code></pre></td></tr></table></figure>sa.pub  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">到这里，集群生成的所有证书介绍完了，那么像kube-controller-mananger、kube-<span class="hljs-keyword">scheduler、kube-proxy、kubele这些组件也是需要访问apiserver的，那么他们是怎么通讯的呢？下面我们可以看看这些组件是如何和apiserver进行通讯的。</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># kube-controller-mananger</span><br>还是和之前一样，我们通过kube-controller-mananger的yaml文件配置来看看是如何访问apiserver。<br></code></pre></td></tr></table></figure>spec:<br>containers:<ul><li>command:<ul><li>kube-controller-manager</li><li>–allocate-node-cidrs&#x3D;true</li><li>–authentication-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;controller-manager.conf</li><li>–authorization-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;controller-manager.conf</li><li>–bind-address&#x3D;127.0.0.1</li><li>–client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt</li><li>–cluster-cidr&#x3D;10.244.0.0&#x2F;16</li><li>–cluster-signing-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt</li><li>–cluster-signing-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.key</li><li>–controllers&#x3D;*,bootstrapsigner,tokencleaner</li><li>–kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;controller-manager.conf</li><li>–leader-elect&#x3D;true</li><li>–node-cidr-mask-size&#x3D;24</li><li>–requestheader-client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt</li><li>–root-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt</li><li>–service-account-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.key</li><li>–use-service-account-credentials&#x3D;true<br>image: k8s.gcr.io&#x2F;kube-controller-manager:v1.15.2<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">你会发现在yaml中配置了/etc/kubernetes/controller-manager.<span class="hljs-keyword">conf</span>这个配置文件，而不是配置controller-manager的客户端证书之类的。Kubernetes 这里的设计是这样的，kube-controller-mananger、kube-scheduler、kube-proxy、kubelet等组件，采用一个kubeconfig 文件中配置的信息来访问 kube-apiserver。该文件中包含了 kube-apiserver 的地址，验证 kube-apiserver 服务器证书的 <span class="hljs-keyword">CA</span> 证书，自己的客户端证书和私钥等访问信息，这样组件只需要配置这个kubeconfig就行。<br><br>由于创建工作负载的时候，我们有时候会用到service accout，那么这里需要和apiserver认证，所以我们需要在controller-manager<br><br>配置上<span class="hljs-keyword">sa</span>私钥，当然需要和apiserver通讯，自然需要配置上kubernates的<span class="hljs-keyword">CA</span>证书<br><br>下面我们看看controller-manager.<span class="hljs-keyword">conf</span>这个文件配置的证书和秘钥是什么。<br></code></pre></td></tr></table></figure>[root@VM-4-3-centos kubernetes]# cat controller-manager.conf<br>apiVersion: v1<br>clusters:</li></ul></li></ul></li></ul><ul><li>cluster:<br>  certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;<br>  server: <a href="https://10.0.4.3:6443/">https://10.0.4.3:6443</a><br>name: kubernetes<br>contexts:</li><li>context:<br>  cluster: kubernetes<br>  user: system:kube-controller-manager<br>name: system:kube-controller-manager@kubernetes<br>current-context: system:kube-controller-manager@kubernetes<br>kind: Config<br>preferences: {}<br>users:</li><li>name: system:kube-controller-manager<br>user:<br>  client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lJSWN4Ynk4VWEvV1F3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TURBNE1qQXdNak13TURWYUZ3MHlNVEE0TWpBd01qTXdNRGRhTUNreApKekFsQmdOVkJBTVRIbk41YzNSbGJUcHJkV0psTFdOdmJuUnliMnhzWlhJdGJXRnVZV2RsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5YK0Vqa3c0NDNTNzh5d05LL0dIQTV2eFZCS0Rhbi8KZ21yaUlFTW1hYWhlbDllREJXR0s0dVVtY1VXMXU1TCszeUR0amJlKy83MHZ2M3hvSWY1VkNZQXZqYUorN2twUQpyYW5RUE93cFJnbUlqNTEzV1FsZzMxWDlqREpuNlAybVpYTmZ6YWVOalBwOXdrZGkzZGVqSUZaSm1zYjQ0R3VwCkNrdlpodE5iYUlrVVU1U3dCT3h1dE92Um1uemdHQ3BQa0c4ME9pNWdYcDVzTHJ2dmVYSWxpem5wbHNsa3pxbjQKdWNJMHZMekhQY0JsSWhncEVJOXdCVTFOK3VWLzIxTmRaT3p1UlpFVFRMQ0xmNjhVR0FlM0ZCVXJHblJCUTJJZgpKLzhpNnJVQ2l1T25PQWUvOFNLbzlVM0ExOHN3RDJYandTZVo1NzRRclRGdkFjUjBYQ1BibW4wQ0F3RUFBYU1uCk1DVXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUNNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBcTY0cVBnVllzRzFGb05QQTRTNlJ0bGwrbUdTVUE2QlVNakQrWkt0eVM1NExCVFZnWQp5K1IrL0Zpd3o2RW1xWUpnZ0EyNWZGdkszSWlGNCt5d3JxeDZETlVZa3BBQkZFWXQ5VjU4a2gxV0pha3BvMEZQCnRZRkFaNmlEMlg4UlBZeUUwSXBMYlFqTGRncS9LYTRiSlhZRFhsS3RTV2UwbmJoY2FUWjRpRm5BcldndmpRQ0sKU05kV0tmSUpGNjJiWGE5a1BGc3ROYWVrWjdoQVZEZzhBbEd1c0tlYVFLdFNLZ2dMREFreElRWjlnNTZSVUprYwp6UUhRVHlibmVTcXJEN3cxT0xIR2RpYmZEYXhzMWdtbi9oL20xNk5ib3NMUlgxNkkxK3VKOWV1d29TWlp3Z29zCmpVRExuWVg1Zm1ZcEdhK2ZDbjdiMTJ4Mzg3SFpmbkE4eTFDTQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg&#x3D;&#x3D;<br>  client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMWY0U09URGpqZEx2ekxBMHI4WWNEbS9GVUVvTnFmK0NhdUlnUXlacHFGNlgxNE1GCllZcmk1U1p4UmJXN2t2N2ZJTzJOdDc3L3ZTKy9mR2doL2xVSmdDK05vbjd1U2xDdHFkQTg3Q2xHQ1lpUG5YZFoKQ1dEZlZmMk1NbWZvL2FabGMxL05wNDJNK24zQ1IyTGQxNk1nVmttYXh2amdhNmtLUzltRzAxdG9pUlJUbExBRQo3RzYwNjlHYWZPQVlLaytRYnpRNkxtQmVubXd1dSs5NWNpV0xPZW1XeVdUT3FmaTV3alM4dk1jOXdHVWlHQ2tRCmozQUZUVTM2NVgvYlUxMWs3TzVGa1JOTXNJdC9yeFFZQjdjVUZTc2FkRUZEWWg4bi95THF0UUtLNDZjNEI3L3gKSXFqMVRjRFh5ekFQWmVQQko1bm52aEN0TVc4QnhIUmNJOXVhZlFJREFRQUJBb0lCQURCTHVrTXNGSDlpdHZwRQpYbSs1VDRXMmxocXJ5Kyt0R2ZzVGMrS1QzYzdCSXBYaUhTbkpsYkhQL2txVVhIUXRqNkEzM1A4MlhUT09maklPCnNuVmJMZHkvWHNEbzB0RDA2bXpqOFl2L09LNVlJc21RTVFrYjB1dnVZR0RUOE5LbVpra211eHh3cHZ1MXZFNHUKTXhGQzRMNTR1RFRsNElpTHl5WVpQd09lb3JZazlYVi9LSkN4a2g1RnVmZzBublI5MjNXQ1lDZVNyaUVWRm9LbQovbzBKYmlVNE1MU3FxallRWnljRnFSbGM0Vy9sMVJuMldLbU1KZ29EVUE4eEZiOEtJYjk4bGpOR0F0Z2QyNFQwCmcxS1VnbDRNazlPOTEvUzdrbHc3L3dsaHBkY3g0eFJ2dEtBTWZiM0RBa1V4MmpFZDB2ckZvU3NseHM0NXJOc2QKM296ZDhFRUNnWUVBM1p2OGJZTDE0ZlU3c0ZnVXlXekl4ejA3WlJ5czFzZitESmVXRmNCOEZoa2Jpb3Q1T0dqZwp0RHZmQlcvOXliMmtPM3RRNlJxNkFMOFpKcGE1QjcyOVF2YUJ1bDlpRHladVZndC8xUnY1d290Smo1SGZQS25vCnFVNzh6NVdtQUR2VitmQTVXaW9ad0hBVzQ3RHFLUU5OdzYyNWZaZFV3NTFXblZOWHpBZWR2VkVDZ1lFQTl6TjgKU3JrOXlsUlBaZnQ4emgrK05OZndoOFgzRWlZR2JwUHNpWG4zTitxYnQ4eXJORFhNYXRId1NrS2dxWDdxU0twQQpDc3ZGeXRreDhBc2VMaDZhQzBMbXh1aVVtQW8yMnBBU21veDY3VFo1ditqeXdtNGt3TFFXdjh6R0ptMjhyUlRVClZkejMvZC9pTkJHZDlKaHB0dzY3REUvcENPTm9vVWhOOHFwbVQyMENnWUJSYm9vNWE1QVNzZHgzRmthOUpWNDUKNkVRMUNXNXhsaGZDWk1sZndOVllBVzNmWVJUd0o0bTZjTzJvdjloUUU0R1A0ZVovWWJUTHBXMEdnd2dHMGpBRAp0VFZDV041ZGxzK2dpcVUwbUEwVThiM2NKY3dVTEpNejg3UnVTeDB1cE00aUE2WHZmZHpzbThPdGMwcjRPeUNPCk1QNGlLa09aaGUxWDdsSXF4UG12b1FLQmdFdk45UUp4RmJxeTZmb3JDWlduOUVyK0lSdHhvSmRuSTdmTEV0RUIKbnNiOTRheVdUYlhmL1lTUVJuQnZTQmRSL1FRMWVSZ1didHdLaUo3RXVnZUlpTktGUElHb2x0Q2M2VDlTeVBHdAp2SkI3a1JCQm5oZnpjTC9MT2VLdEorSm02bUhsTGt2NlMrNEZOcmVpNDE0N1VzZTQ4N0VOM0RkR2pUSlFHdDhjClUrMXRBb0dCQU1JVzFrcHhGZ1NOUjJORGczdHlJWGNhVDJiQStPTWZrc25nNVdrQUdqb0xveS9laE5waWtJTHAKbHFVVG5oZENaMHBvV3d2MUkxdkZ5VVRJTTREUHd1WVNicnZQNjV2UkJua1M5RGlldVE5Q0FEbXRkT0h1WWR2VgpzSy90cmQ5RTNTdUNVNWNSdXJqVkFacGJoOVNIQzU3bk9rVTRJY2EzT0EvbGZsSmRvbUl0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg&#x3D;&#x3D;<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">我们解析下certificate-authority-<span class="hljs-class"><span class="hljs-keyword">data</span>这个内容看看是不是<span class="hljs-type">CA</span>的证书</span><br></code></pre></td></tr></table></figure>[root@VM-4-3-centos kubernetes]# echo “LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;”|base64 -d</li></ul><p>—–BEGIN CERTIFICATE—–<br>MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl<br>cm5ldGVzMB4XDTIwMDgyMDAyMzAwNVoXDTMwMDgxODAyMzAwNVowFTETMBEGA1UE<br>AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJwh<br>l8eWyJPlIjpj9S7OUIdRMeqWC0og+7xPzbPd8sKcSzfjZ7GsKmQyoB8hBseiUCuL<br>j&#x2F;myYyNM62LHkFJl271sEYWf8KbY&#x2F;5cmtRacFyL8Jri3KB&#x2F;uxvgfQ&#x2F;1xL+g7RdAq<br>FBYVG3mi+5OZ+LLrfULQNjzkhMYehHCtsCFfI0ayjbibMTPbKOyhn5wpuLg8&#x2F;9We<br>SSJr5Nkg+dtXrRgNXzSisRLAQy2gDs7Ni3tJIZ64nDgHjJrKmGGgjlIc7TEtaTug<br>rym+&#x2F;vjEYgcqNXGjF6zBeOQW5nMuHt+ZeazagT2A3dP8FcyDYVkHRUwDDH0Y9Ves<br>NPP2fxTG5UfXV9EtYRMCAwEAAaMjMCEwDgYDVR0PAQH&#x2F;BAQDAgKkMA8GA1UdEwEB<br>&#x2F;wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBADj6KauPGgoVyFBgMS1YbUEEqGBj<br>7r0hnorSn9ZxvU1fC5RFtPGt8B4aN4OtLkTDRz9fgEsVbtWh1tWYDHYAz7aCbEYk<br>LE0+G6P2JqGN7HykwNAdZuA&#x2F;zzhNuQJfxcdnjTyHEfWg+y8GuKbjIMPtRU9N9lZh<br>FSyLlb3ozKXmDC+dnHxG1xMnzB3NSA+Xxi7d5GjA1ze3aqqes6meN53XZqdx167H<br>&#x2F;3A6Wz66xPOg8ylPSUktymMG51d91lu1bebXPLmvg4+pAxWadbFgmLGFtPMTEw+Z<br>HDvs+q640H9biz+OWdewHcQq4MohCWnl8aW5IaeRamfY&#x2F;sg&#x2F;1wSW2FmxebA&#x3D;<br>—–END CERTIFICATE—–<br>[root@VM-4-3-centos kubernetes]# cat pki&#x2F;ca.crt<br>—–BEGIN CERTIFICATE—–<br>MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl<br>cm5ldGVzMB4XDTIwMDgyMDAyMzAwNVoXDTMwMDgxODAyMzAwNVowFTETMBEGA1UE<br>AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJwh<br>l8eWyJPlIjpj9S7OUIdRMeqWC0og+7xPzbPd8sKcSzfjZ7GsKmQyoB8hBseiUCuL<br>j&#x2F;myYyNM62LHkFJl271sEYWf8KbY&#x2F;5cmtRacFyL8Jri3KB&#x2F;uxvgfQ&#x2F;1xL+g7RdAq<br>FBYVG3mi+5OZ+LLrfULQNjzkhMYehHCtsCFfI0ayjbibMTPbKOyhn5wpuLg8&#x2F;9We<br>SSJr5Nkg+dtXrRgNXzSisRLAQy2gDs7Ni3tJIZ64nDgHjJrKmGGgjlIc7TEtaTug<br>rym+&#x2F;vjEYgcqNXGjF6zBeOQW5nMuHt+ZeazagT2A3dP8FcyDYVkHRUwDDH0Y9Ves<br>NPP2fxTG5UfXV9EtYRMCAwEAAaMjMCEwDgYDVR0PAQH&#x2F;BAQDAgKkMA8GA1UdEwEB<br>&#x2F;wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBADj6KauPGgoVyFBgMS1YbUEEqGBj<br>7r0hnorSn9ZxvU1fC5RFtPGt8B4aN4OtLkTDRz9fgEsVbtWh1tWYDHYAz7aCbEYk<br>LE0+G6P2JqGN7HykwNAdZuA&#x2F;zzhNuQJfxcdnjTyHEfWg+y8GuKbjIMPtRU9N9lZh<br>FSyLlb3ozKXmDC+dnHxG1xMnzB3NSA+Xxi7d5GjA1ze3aqqes6meN53XZqdx167H<br>&#x2F;3A6Wz66xPOg8ylPSUktymMG51d91lu1bebXPLmvg4+pAxWadbFgmLGFtPMTEw+Z<br>HDvs+q640H9biz+OWdewHcQq4MohCWnl8aW5IaeRamfY&#x2F;sg&#x2F;1wSW2FmxebA&#x3D;<br>—–END CERTIFICATE—–</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><br>从解码可以发现，kubeconfig配置的就是kubernates的<span class="hljs-type">CA</span>证书，client-certificate-<span class="hljs-class"><span class="hljs-keyword">data</span>和client-key-<span class="hljs-keyword">data</span>就是controller-manager用来访问apiserver的客户端证书和秘钥，只不过kubeconfig对内容进行了base64编码。这个就是整个controller-manager和apiserver证书认证的方式。</span><br><br><span class="hljs-meta"># kube-scheduler</span><br><span class="hljs-title">kube</span>-scheduler也是同样的原理，也是在yaml中配置一个kubeconfig来进行访问apiserver<br></code></pre></td></tr></table></figure><p>[root@VM-4-3-centos kubernetes]# cat scheduler.conf<br>apiVersion: v1<br>clusters:</p><ul><li>cluster:<br>  certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;<br>  server: <a href="https://10.0.4.3:6443/">https://10.0.4.3:6443</a><br>name: kubernetes<br>contexts:</li><li>context:<br>  cluster: kubernetes<br>  user: system:kube-scheduler<br>name: system:kube-scheduler@kubernetes<br>current-context: system:kube-scheduler@kubernetes<br>kind: Config<br>preferences: {}<br>users:</li><li>name: system:kube-scheduler<br>user:<br>  client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzakNDQWNhZ0F3SUJBZ0lJVlUybER1V2Y1OHd3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TURBNE1qQXdNak13TURWYUZ3MHlNVEE0TWpBd01qTXdNRGhhTUNBeApIakFjQmdOVkJBTVRGWE41YzNSbGJUcHJkV0psTFhOamFHVmtkV3hsY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU14SzJrNmZnWG50cHVNM2JPZ2ZUS0V4aVhsdzdMQVc2VHpUK2thcndVS2UKK2hKSExWSjF4OUphazlDajZ2VWRZdEdkRzMyd0V1R0VFa3ltN0dFZXlyeHJneGRsU3NyVmRqQkFTYnhwNndpZApvZ3dmL2xVa2kza2FPVUozVXd6bmFnWCt6ZUh1d2hVN0R3NkNuaUpkMy9SZW9hU0FjZitvbDl0TTRiazRldVRrCnRXaUE5SDk0VnlQam42SUpkUDdNb1h4TWpZN1c1UysxNy9aczBwbXJabHhuWFdqZjZESXdyNnplbStSNlF1YnAKeE5adEk1WWdsNDk2a09BaTZMVW5xemhCNHIzaDdDOUd0SjFnVDk1YmxiQ0VZNzRtNmVLREZpNXFwZ3JRZnA0YwoxMlhRYzNtcGQzY2IrZXlGUFNsYUVDUmRwS1BKazRpZXgxNnN4TmwzRmk4Q0F3RUFBYU1uTUNVd0RnWURWUjBQCkFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUIKQVFBWFovVTcxSnRqQXQ3MjJLeVl6Q1RDZlF1bHdMM2EySGN6NGw5NXVaMFNWVG5ncTNhWUJxeVdwQ2puM3VNaApTaGN5OUZ4ZC92am52YXVTWUdXY05abm84dEVNUFhTaitNNzI5bW1vTUNUa0xCUGJSVGZwRGt3aDNnRS9IRWtuCnN0emRoZTZ3dWp4OWduMXl5WTJSOTFTZ3U3cjdwZjlLM1hOeFh2SFo3Z0tDQnJIVisyMVlQTkNCaC8rYlVuZkcKY2pvNlNNZHphT0Y5SlJod2pUS0l5VTlkeXJkbFBLUlR0Q3NGVEttdy9HM1d4Z1gvbGRCZnNsZmNaVXR4TlpsYQpablBVNlYvK3gwelBTVG56RzRmYTQ3UkhlZmc3YzczQkZjL0ZiYW9obmhrZHNPMVBNWGdhSjQ1bGo1NVNPL1phCmlIbUphZUF3bnh5d0hMazFtclE1b0ttVAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg&#x3D;&#x3D;<br>  client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBekVyYVRwK0JlZTJtNHpkczZCOU1vVEdKZVhEc3NCYnBQTlA2UnF2QlFwNzZFa2N0ClVuWEgwbHFUMEtQcTlSMWkwWjBiZmJBUzRZUVNUS2JzWVI3S3ZHdURGMlZLeXRWMk1FQkp2R25yQ0oyaURCLysKVlNTTGVSbzVRbmRURE9kcUJmN040ZTdDRlRzUERvS2VJbDNmOUY2aHBJQngvNmlYMjB6aHVUaDY1T1MxYUlEMApmM2hYSStPZm9nbDAvc3loZkV5Tmp0YmxMN1h2OW16U21hdG1YR2RkYU4vb01qQ3ZyTjZiNUhwQzV1bkUxbTBqCmxpQ1hqM3FRNENMb3RTZXJPRUhpdmVIc0wwYTBuV0JQM2x1VnNJUmp2aWJwNG9NV0xtcW1DdEIrbmh6WFpkQnoKZWFsM2R4djU3SVU5S1ZvUUpGMmtvOG1UaUo3SFhxekUyWGNXTHdJREFRQUJBb0lCQVFDbmJhVlRFSGlkdy82bApjMVJIUFBlaG1DYXlKN0ZqYzdOOWpjRXRVREJZZUZBODBLYTlVUmdPTnZ1ejM5TjlSYk1xVlpjbFFEdUpKYU9WCnZLdzN3SE9wVG5lbW9mWlZHL0w4QW9RcjdhYVpiZzlUM3BpamtRclptbnRaRk5BMDRDZk5lQkdsMi9hbVRidSsKU2FCdVMvOXltR2ZqbVAxVTZRaGp5N09uQ0RuNEFsMmw1SXJpUCtlSTgxS3ZjVjRWUWNhcmtQL0F5SityQm56SgpSZjNRSFBRL2pFaUVRMm9kKzQ4N1FzSWNZVlcwZ0FmQ3pKN05NMUJMeTE0Yy8zUFJRS3JLZTdXT3AwM2Z3QmkxCk5TRlc1dmxSUkpnTDduSHQ4TkdsSUhHRE5VT29KR0UvVnppekJUVFpQRS9nOEkxZ1FLYko5b3ZSdXJQa0J6VGsKRHNGQ281bEJBb0dCQU5qalNTVXIybFo0Z1B6MEZ6bnBMTEFBaVhBSDkwZFlBb1BQSUhoWDR2WmtRUjE4Ykx2NgoraXVSR2dMTkQyckV4dHk3dE1tcTQrZkt2S1VXRWorOVR0KzNqWTVmTFdCeWhNTk1uaXN2eDFsdkxlZnFybkRvCnlkODdPb0p3TnZZdit2YitQR3NGaU51SHdXUTR4Wit3WTFaYitCUnB5UVJNUEs1TnVEbDRFMXZQQW9HQkFQRWkKRitwS1VJSmE0NGZuWDk3L1lHalh6Z1lWTEQ4RkRRMTh4dmY3TG43UEhUNzJoK1VCaXJFV29uK2RmcDFBZS95UwpTMER6Q2ZLUDdiM0R3YkxPbmRKcHdLWnUrUjdBaEs5RGFlVEJ3Y2FkRDFpTzNoME5RSVFoVFJPaVJRclN4RWpmCllXVnRmUXFuSUJhS3pMSnRCakVtakRDcXJ2QjJ3QTRza1Z5d09WZWhBb0dBTWZWb3k5OG1FL1QrQVVaWWMwWjYKdksvaStLTmRHbG56ZWxranFaVFUrdHh0QTFXOTFpOGhvUmR6WG1ITncxSkFYR2dBWk5Pd1c1d2ZpQWRsZkxrbQppZkhGOFoySzNrU0N3Rm5OdFRUMFBtMlZyVzRwY0dpdTEzVFZMV2Fid21tYTdYbnlnTlJ0aWVQamNDcURteDBPClJMNDZqcmt2VElZakZDTmk1Qm44bTVFQ2dZQmNHdUs1cW1Nd041bGJpd1J5d0dkS0JNeDhSRkFmVGtXYkZrTkYKNjVycDh5Qy9zUmxkWHdaaitEcGZ0bi9yZnZzZEVhQlBFY2FGOFhZbEd3WDh6N0UyOHhBVVFxVkRtdFBUd2xOTApmcnNPcTJWMk5UUWdNclNuQTdWV1A1QlJ2d29jcjc2YktJUXZzb0N1TzV4T3R4ZzdZL2IraStQQWxBdHVIcFh6CnFwaHNvUUtCZ1FERkxITzFwTTNPNlRWN3cybThKWVI0WGxBUWtLZkRPMlFGaDB0bGM1bk1rZUdZbHZFUUlZdVMKS2liV3NJNHVwMHFRcFZjdHF2VU9wc2V1Rk5ZdGVRQzF6YncxNWp4a0xEMm9Gb2c1Yk9WRXk3ekZERU1kVmdpRwpEbjhkbHN3SWp0bUF1SDFGOWdBbGR1V1M0cXkyV0I0SlRPZjBlTDVOM1dTWkRzcm91anA5NlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo&#x3D;<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><br>同理，解析certificate-authority-<span class="hljs-class"><span class="hljs-keyword">data</span>也是kubernates的<span class="hljs-type">CA</span>证书，client-certificate-<span class="hljs-keyword">data</span>和client-key-<span class="hljs-keyword">data</span>就是kube-scheduler用来访问apiserver的客户端证书和秘钥</span><br><br><span class="hljs-meta"># kube-proxy</span><br>在这里我们并未发现kube-proxy的kubeconfig，kube-proxy也是需要访问apiserver的，那么是如何进行认证的。还是从yaml文件进行分析一下，如果需要认证，肯定会在yaml中配置对应的证书或者包含证书的文件或token<br></code></pre></td></tr></table></figure>[root@VM-4-3-centos run]# kubectl get  pod kube-proxy-6bf2t -n kube-system -o yaml<br>…..<br>containers:<ul><li>command:<ul><li>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kube-proxy</li><li>–config&#x3D;&#x2F;var&#x2F;lib&#x2F;kube-proxy&#x2F;config.conf</li><li>–hostname-override&#x3D;$(NODE_NAME)<br>env:</li><li>name: NODE_NAME<br>valueFrom:<br>  fieldRef:<br>apiVersion: v1<br>fieldPath: spec.nodeName<br>image: k8s.gcr.io&#x2F;kube-proxy:v1.15.2<br>imagePullPolicy: IfNotPresent<br>name: kube-proxy<br>resources: {}<br>securityContext:<br>privileged: true<br>terminationMessagePath: &#x2F;dev&#x2F;termination-log<br>terminationMessagePolicy: File<br>volumeMounts:</li><li>mountPath: &#x2F;var&#x2F;lib&#x2F;kube-proxy<br>name: kube-proxy</li><li>mountPath: &#x2F;run&#x2F;xtables.lock<br>name: xtables-lock</li><li>mountPath: &#x2F;lib&#x2F;modules<br>name: lib-modules<br>readOnly: true</li><li>mountPath: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount<br>name: kube-proxy-token-rd92l<br>readOnly: true<br>dnsPolicy: ClusterFirst<br>…..<br>volumes:</li></ul></li><li>configMap:<br>  defaultMode: 420<br>  name: kube-proxy<br>name: kube-proxy</li><li>hostPath:<br>  path: &#x2F;run&#x2F;xtables.lock<br>  type: FileOrCreate<br>name: xtables-lock</li><li>hostPath:<br>  path: &#x2F;lib&#x2F;modules<br>  type: “”<br>name: lib-modules</li><li>name: kube-proxy-token-rd92l<br>secret:<br>  defaultMode: 420<br>  secretName: kube-proxy-token-rd92l<br>kube-proxy挂载一个secret，这边猜测这个就是用来进行认证的。我们查看下这个token<br>[root@VM-4-3-centos run]# kubectl get secret -n kube-system kube-proxy-token-rd92l -o yaml<br>apiVersion: v1<br>data:<br>ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;<br>namespace: a3ViZS1zeXN0ZW0&#x3D;<br>token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSnJkV0psTFhONWMzUmxiU0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVmpjbVYwTG01aGJXVWlPaUpyZFdKbExYQnliM2g1TFhSdmEyVnVMWEprT1RKc0lpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltdDFZbVV0Y0hKdmVIa2lMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzUxYVdRaU9pSmhOemRrTjJKaE1TMW1Zek5pTFRRM1lUTXRZV00wWkMweVpXRmtPVEV6WkRVd09ESWlMQ0p6ZFdJaU9pSnplWE4wWlcwNmMyVnlkbWxqWldGalkyOTFiblE2YTNWaVpTMXplWE4wWlcwNmEzVmlaUzF3Y205NGVTSjkuSTRuR0UxOVhJakFPU0lKcWZyb3A2azhHcXBickxBeVFzQ3NoeFhxMEc3RklTZmJudS1TTW9xV1pHUjU0S2hwREdlaGd6WkQwMGVGZG14bEM1ZzBIc2ZzZE40V0tmVFI1ZjY1b3kzTnVvWUxxcUIzUzgySUxLelJHREVBNHpwWmFXeG1lRmtzdU1mdl9UWDRjSGdtYUI3V0ZQZzJ5RWtxV0VPa3kwT0hOWnIxNmd4Mzl3S1owWDRhQ29FOVd0cGlZU1BKYU5SdmtVbENfNTlPZHJTYnBCYnlkd2JOaWVaRjdhcWRBbFdWQ3JXQkRfWmlCaHNnZklVYUpEcVg5TWtRbUpjVS1Yb2pzWUpXNFpNejZ3OEZFTHY4THpCazRLTUc5V185aG5Jc3FfVlFUM2xDek5iSHlNSktWeXZ1VlVrblo5X3AwaTJGQlpDeGVVdlpVazdrd01R<br>kind: Secret<br>metadata:<br>annotations:<br>kubernetes.io&#x2F;service-account.name: kube-proxy<br>kubernetes.io&#x2F;service-account.uid: a77d7ba1-fc3b-47a3-ac4d-2ead913d5082<br>creationTimestamp: “2020-08-20T02:30:48Z”<br>name: kube-proxy-token-rd92l<br>namespace: kube-system<br>resourceVersion: “196”<br>selfLink: &#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;secrets&#x2F;kube-proxy-token-rd92l<br>uid: c9ff07a0-4176-4053-a93c-11c7d0aff285<br>type: kubernetes.io&#x2F;service-account-token<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">从上面<span class="hljs-keyword">token</span>的内容，这个里面包含一个<span class="hljs-keyword">CA</span>证书是kubernates查到<span class="hljs-keyword">ca</span>证书，<span class="hljs-keyword">token</span>就是用来和apiserver通讯的客户端证书和秘钥<br><br># kubelet<br>kubelet和其他组件类似，用的kubeconfig来进行认证的，都是用kubernates的<span class="hljs-keyword">CA</span>生成。<br></code></pre></td></tr></table></figure>[root@VM-4-3-centos kubernetes]# cat kubelet.conf<br>apiVersion: v1<br>clusters:</li></ul></li><li>cluster:<br>  certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;<br>  server: <a href="https://10.0.4.3:6443/">https://10.0.4.3:6443</a><br>name: kubernetes<br>contexts:</li><li>context:<br>  cluster: kubernetes<br>  user: system:node:vm-4-3-centos<br>name: system:node:vm-4-3-centos@kubernetes<br>current-context: system:node:vm-4-3-centos@kubernetes<br>kind: Config<br>preferences: {}<br>users:</li><li>name: system:node:vm-4-3-centos<br>user:<br>  client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrVENDQWVHZ0F3SUJBZ0lJUW92eFg0d2RyTmd3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TURBNE1qQXdNak13TURWYUZ3MHlNVEE0TWpBd01qTXdNRGRhTURzeApGVEFUQmdOVkJBb1RESE41YzNSbGJUcHViMlJsY3pFaU1DQUdBMVVFQXhNWmMzbHpkR1Z0T201dlpHVTZkbTB0Ck5DMHpMV05sYm5SdmN6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1scld4Y3kKOEhyT0FPeXNGcjJxUXhOdGZ4QllBMWJYZ1BkRy95eW9rWjVLdm1nc0NjbGh2MWkyaWF2bzF6T1d4QkNZSHlJZQpyK0hSdDQ5TFFzcjZIU2k3QlZveEtuWm8rekpjSFBIVHk0VUtESVYrOUxUU29INDA3akhXeGFOWXc0RWw2QVB0Ck92UzcvcXVBb3BBOFNPVVU2YTdWcFc2OHRvNVJtRGNwcGVMZnlmL3dXdXRpZFZ0dTRmTE5RK3gwRnBGRWZXMisKY3ZHNWd2ZlZnaldaUnhzbXoyWlFESEo0NStSWldmVnF6bHdjYVlkMytROTFiK1BmUHhlVU81bmdRMGtpbTVTbAp6K1c4Q1p6Q01UOUF6QVU2USt1L1oyKzlsaU9xbzdxWnEySHZMMms5R05GNjVHcVVnWWpDT3hVRFpoanZ5RkxQCjNvdHR0ZTJQeHZkMXJRa0NBd0VBQWFNbk1DVXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBcHpFNkxJU25jZFE1di9yZ2ZJbHRQV2l3Lwp4WjFQdHk2WWZTYmw2UXlNY2g1Qk1RNDhyL3o1ZXV5V21kVXhVUmFHaUlldUVaODAxQ2xteitoRjQ2RFRyZGlaCmZmTUNLcXE5Z3lKbkRBT1VYMkpkY3RZb2IvNWp0T0t0ejVYYmRrMzI5ZG01cUVEQ1gzRm44M3NWcWJPZnRXUnQKM2NvdFdUYjM4cmljQm5sRTRwZjBUdXk5RVZIZFBFazgyOUh0UVdDc3JDVFNQZXZ0S29oM01mdUZ0ek9leXJsMQpDSXFjNXVDM0k1dU1xS0tBeFNvSk1Pd1pVUklrRkpTQ09lRlRRVnd1ZE9vVi92STcrR0NBcVBObS9IUVRlNUROCkdPUXVWNTRMYWFkRzVRSHdDOEJhWDZTc0JQb09KOG5vWlM4cllSSERjMnFBcUYzMkhReHlXVHc1aE53dgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg&#x3D;&#x3D;<br>  client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeVd0YkZ6THdlczRBN0t3V3ZhcERFMjEvRUZnRFZ0ZUE5MGIvTEtpUm5rcSthQ3dKCnlXRy9XTGFKcStqWE01YkVFSmdmSWg2djRkRzNqMHRDeXZvZEtMc0ZXakVxZG1qN01sd2M4ZFBMaFFvTWhYNzAKdE5LZ2ZqVHVNZGJGbzFqRGdTWG9BKzA2OUx2K3E0Q2lrRHhJNVJUcHJ0V2xicnkyamxHWU55bWw0dC9KLy9CYQo2MkoxVzI3aDhzMUQ3SFFXa1VSOWJiNXk4Ym1DOTlXQ05abEhHeWJQWmxBTWNuam41RmxaOVdyT1hCeHBoM2Y1CkQzVnY0OTgvRjVRN21lQkRTU0tibEtYUDVid0puTUl4UDBETUJUcEQ2NzluYjcyV0k2cWp1cG1yWWU4dmFUMFkKMFhya2FwU0JpTUk3RlFObUdPL0lVcy9laTIyMTdZL0c5M1d0Q1FJREFRQUJBb0lCQUIwTXFycVIwalVqK09ZcAplNjRuSEQxMUVWcGVGejB6SDVxS1Zzc3VGTEpydlVKdzk0aGYzS1VDenFCSW1LRU1JWUx6TGFwU0dyUEs5MXBuClZGN0o2K0t2OW5tbmxhUTJSK1JmZkowMEdxbzVaTXpzSG9ibHlkZnA4bUNseFNObDdleDJkeHY1M3dMbENqbloKOTVndDJhV1FlcE9JcEs5djhEUmVlRUdjZEJ4Z1FMRm5nTU5SR3NzQ0lOSUt6Wkc5aDlwd2htZTRGUW9sRUlNMwp1ZkxkbzVZM0UyeFk3bkV4TTYvTnEvNUVQL1k2S1NGQlJwaXBxeWF2MERIaEVoaU9HNGtCS1l2ajZwdWdXcDgrCkNvcFZ0NWtNWjlwSWx3UElnT1UwQzB3L3Y5K0M2S0hIbzZUZExlTE9GeDlKMER4bXluMWJRMENvTGFTUXRiUUkKOG12UHFuRUNnWUVBOG92a0l1YjBUSHZlQVlSUG1hT1RMVFg4QkZiWWMwUEdhNDljMlNsaU95QmV1M0dxSEwzQgpWT3JKRXUwbVdQQU5pMDIrR0lpZG9MejFUTC82dlRmTkR6ajZRTWFRNUJsZVVKdUZlOGxuMEliUG5jbjZzN0MzCkp5eGZRMzA1emFONFJjWXQyQWZrZkg1bnZpK3d1YUpXbzAySUQzOXczdU1BMkNFZFdGbVdBMzhDZ1lFQTFKZDMKOUk0dktLZFFhNytKZkFLWG9mYWd2cUtWNnRHSkVPWjE2NXJNS1FTUmJvcDM3UXhmQ2dLRXpKMEI0U1p5eGFZYgpLdWJTZ1hjQXVrbER6TVpqc2ZsL0VEMmhDcFFQSGhnVUNNTGVQUkl3SDJWM2gvZk9nMlU3SEtFdHMvSXNsdlVRCk1JWDJpTnQ5MnUyU3AvUzBsMWowTitndjZ3M0R6S2xHS2dUWWMzY0NnWUVBcTJ3aGxtVmkvbmVCUmRNc3F5ckkKQjJrak1ESHRFekl3bDY2Z2NiOWs5T01BOFR2NWZnekRDbkJTSXJWSHFBNHBsRzRpejVZbXlnY2kyOWJIc1ZveAo3UE5aTTlUamJNTmRQRjFlcjBsK3ZRdTZ5d3VJeTkwMjVWSGdGb1A0Q1pYaW1IWGp5czV4TjJmampMQ0tGL2xiCmdGbDRzM05mNDdmT3pmSkJta0xlMnFNQ2dZRUFsdEtMRU41YXlLM0RHVjQrek5NTi9xTDVNYVlwVS9tcUUycGQKR0hTdkNSNnJpdEFEK3hIK3p4d3dXUFcrNHB3amF1UElmR3hieGV2R2dXTC9EZVZsejFzaGNVVTMza2hpWFVoWgoxa2xoMzlQcWZpdS9YS0JMUzk3aXpCSHhXYXVqUk1uQjNacjg1K1ZJYWF5SWtrM0NYV21IZ2E1aGFKSlFhZjloCnZ1ZkhKRXNDZ1lFQW9wSnQzSGdzS3R6VSs2YkMzdEJwQkEweXFZQ09yTkFQRjV5SWJzZnZXRmM1WENpc25xZE4KUG9hNzBJTVJwWFhCREo1V01lVWhiVVQzbHRtNWppV3dkVGp1WTJSYWorNVhZeHplN1NpWW9Dak9xckdua0NoLwppUG1pb21wNGViUU9DS3A3WTN5cG0rdy9RcENSN2ZBUEI1NkZVWnRZbktEbEs3RHlsWjFIQ0s0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo&#x3D;<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">这边我们会给每个节点生成一份客户端的证书和私钥，master上用的是kubelet.<span class="hljs-keyword">conf</span> ，节点上的kubelet.<span class="hljs-keyword">conf</span>如下，直接指向一个kubelet-client-current.pem文件，这里包含了证书和私钥，每一个节点都不一样。因此每个节点都会有一个自己的客户端证书和私钥。<br></code></pre></td></tr></table></figure>[root@VM-4-9-centos ~]# cat &#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf<br>apiVersion: v1<br>clusters:</li><li>cluster:<br>  certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;<br>  server: <a href="https://10.0.4.3:6443/">https://10.0.4.3:6443</a><br>name: default-cluster<br>contexts:</li><li>context:<br>  cluster: default-cluster<br>  namespace: default<br>  user: default-auth<br>name: default-context<br>current-context: default-context<br>kind: Config<br>preferences: {}<br>users:</li><li>name: default-auth<br>user:<br>  client-certificate: &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pki&#x2F;kubelet-client-current.pem<br>  client-key: &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pki&#x2F;kubelet-client-current.pem<br>[root@VM-4-9-centos pki]# cat &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pki&#x2F;kubelet-client-current.pem</li></ul><p>—–BEGIN CERTIFICATE—–<br>MIICZzCCAU+gAwIBAgIUPrHB6WlowbhzImI5+NnT0Y4ZzlAwDQYJKoZIhvcNAQEL<br>BQAwFTETMBEGA1UEAxMKa3ViZXJuZXRlczAeFw0yMDA4MjAwMjI4MDBaFw0yMTA4<br>MjAwMjI4MDBaMDsxFTATBgNVBAoTDHN5c3RlbTpub2RlczEiMCAGA1UEAxMZc3lz<br>dGVtOm5vZGU6dm0tNC05LWNlbnRvczBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA<br>BJ1Qb3DwFRUjIYaaBxNGTieXObGKdGLG8&#x2F;HVdwXNkVSIWLGBkz9QsFaOh1IsiQ6g<br>5FfxRBneWhyQTOgMmD0yvymjVDBSMA4GA1UdDwEB&#x2F;wQEAwIFoDATBgNVHSUEDDAK<br>BggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBR2QsIZ&#x2F;qWdhOExDObO<br>wiBjcpbUMTANBgkqhkiG9w0BAQsFAAOCAQEATF&#x2F;xpZD9kcCMFqFDlbo1Zn4DwXh6<br>X3s5T6r3QNtZQ1SeUHUhnL2Q1DrpICAEFxoqMdB75hxlYCs5UOP6YwBUX77qAVs9<br>QAXW7&#x2F;sEhS5firGGP8pEQXgaUWwv6tu2V574JL7M9p+koHL&#x2F;Fbev9fad8I71XIDQ<br>qkmnf892VCYnkvw1s7wNJENlxNQUQ1rw0wEccyKlYpxbqXCYStSloSaz6JCFnT06<br>+EXV5cr&#x2F;G8UZnYRoMNu6jiajIxhFmYQqBNCqOlJo24TVjeLlNTL5AD8aSXcQ+O16<br>PWhBYNdEOulokdjg84gAg6jSqN2g+hi4+gHMG1Rw2h+9iu5E5txFjKGiMQ&#x3D;&#x3D;<br>—–END CERTIFICATE—–<br>—–BEGIN EC PRIVATE KEY—–<br>MHcCAQEEIN75eP2QG76VLv&#x2F;nRWiLzW9Fg9hCzeb33BrZ5n9PhwhToAoGCCqGSM49<br>AwEHoUQDQgAEnVBvcPAVFSMhhpoHE0ZOJ5c5sYp0Ysbz8dV3Bc2RVIhYsYGTP1Cw<br>Vo6HUiyJDqDkV&#x2F;FEGd5aHJBM6AyYPTK&#x2F;KQ&#x3D;&#x3D;<br>—–END EC PRIVATE KEY—–</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">现在有一个问题就是，k8s中节点可能有几万个，那么是如何快速给节点自动生成客户端证书和秘钥然后配置给kubelet呢？<br></code></pre></td></tr></table></figure><p>[root@VM-4-11-centos pki]# ps -ef | grep kubelet<br>root     14746     1  0 Aug20 ?        17:50:19 &#x2F;usr&#x2F;bin&#x2F;kubelet –bootstrap-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.conf –kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf –config&#x3D;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml –cgroup-driver&#x3D;cgroupfs –network-plugin&#x3D;cni –pod-infra-container-image&#x3D;k8s.gcr.io&#x2F;pause:3.1</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">查看kubelet进程可以发现还有一个kubeconfig是<span class="hljs-keyword">bootstrap</span>-kubelet.<span class="hljs-keyword">conf</span>，我们来看看这个文件配置的是什么？<br></code></pre></td></tr></table></figure><p>[root@VM-4-11-centos pki]# cat &#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.conf<br>apiVersion: v1<br>clusters:</p><ul><li>cluster:<br>  certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3lNREF5TXpBd05Wb1hEVE13TURneE9EQXlNekF3TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSndoCmw4ZVd5SlBsSWpwajlTN09VSWRSTWVxV0Mwb2crN3hQemJQZDhzS2NTemZqWjdHc0ttUXlvQjhoQnNlaVVDdUwKai9teVl5Tk02MkxIa0ZKbDI3MXNFWVdmOEtiWS81Y210UmFjRnlMOEpyaTNLQi91eHZnZlEvMXhMK2c3UmRBcQpGQllWRzNtaSs1T1orTExyZlVMUU5qemtoTVllaEhDdHNDRmZJMGF5amJpYk1UUGJLT3lobjV3cHVMZzgvOVdlClNTSnI1TmtnK2R0WHJSZ05YelNpc1JMQVF5MmdEczdOaTN0SklaNjRuRGdIakpyS21HR2dqbEljN1RFdGFUdWcKcnltKy92akVZZ2NxTlhHakY2ekJlT1FXNW5NdUh0K1plYXphZ1QyQTNkUDhGY3lEWVZrSFJVd0RESDBZOVZlcwpOUFAyZnhURzVVZlhWOUV0WVJNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEajZLYXVQR2dvVnlGQmdNUzFZYlVFRXFHQmoKN3IwaG5vclNuOVp4dlUxZkM1UkZ0UEd0OEI0YU40T3RMa1REUno5ZmdFc1ZidFdoMXRXWURIWUF6N2FDYkVZawpMRTArRzZQMkpxR043SHlrd05BZFp1QS96emhOdVFKZnhjZG5qVHlIRWZXZyt5OEd1S2JqSU1QdFJVOU45bFpoCkZTeUxsYjNvektYbURDK2RuSHhHMXhNbnpCM05TQStYeGk3ZDVHakExemUzYXFxZXM2bWVONTNYWnFkeDE2N0gKLzNBNld6NjZ4UE9nOHlsUFNVa3R5bU1HNTFkOTFsdTFiZWJYUExtdmc0K3BBeFdhZGJGZ21MR0Z0UE1URXcrWgpIRHZzK3E2NDBIOWJpeitPV2Rld0hjUXE0TW9oQ1dubDhhVzVJYWVSYW1mWS9zZy8xd1NXMkZteGViQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;<br>  server: <a href="https://10.0.4.3:6443/">https://10.0.4.3:6443</a><br>name: kubernetes<br>contexts:</li><li>context:<br>  cluster: kubernetes<br>  user: tls-bootstrap-token-user<br>name: tls-bootstrap-token-user@kubernetes<br>current-context: tls-bootstrap-token-user@kubernetes<br>kind: Config<br>preferences: {}<br>users:</li><li>name: tls-bootstrap-token-user<br>user:<br>  token: qsciu5.l8b4382ue1m8e61x<br>&#96;&#96;&#96;<br>Kubernetes 提供了 TLS bootstrapping 的方式来简化 Kubelet 证书的生成过程。其原理是预先提供一个 bootstrapping token，kubelet 通过该 kubelet 调用 kube-apiserver 的证书签发 API 来生成 自己需要的证书。要启用该功能，需要在 kube-apiserver 中启用 –enable-bootstrap-token-auth ，并创建一个 kubelet 访问 kube-apiserver 使用的 bootstrap token secret。如果使用 kubeadmin 安装，可以使用 kubeadm token create命令来创建 token。</li></ul><p>采用TLS bootstrapping 生成证书的流程如下：</p><ol><li>调用 kube-apiserver 生成一个 bootstrap token。<br>将该 bootstrap token 写入到一个 kubeconfig 文件中，作为 kubelet 调用 kube-apiserver 的客户端验证方式。</li><li>通过 –bootstrap-kubeconfig 启动参数将 bootstrap token 传递给 kubelet 进程。</li><li>Kubelet 采用 bootstrap token 调用 kube-apiserver API，生成自己所需的服务器和客户端证书。</li><li>证书生成后，Kubelet 采用生成的证书和 kube-apiserver 进行通信，并删除本地的 kubeconfig 文件，以避免 bootstrap token 泄漏风险。</li></ol><h1 id="Service-Account-认证"><a href="#Service-Account-认证" class="headerlink" title="Service Account 认证"></a>Service Account 认证</h1><p>前面我们有说在kube-apiserver 和 kube-controller-manager分配配置的sa的公钥和私钥，这里就是用来对service account来进行认证的，我们一般在RBAC中来限制service account的访问限制。kubernetes 会为该 service account 生成一个 JWT token，并使用 secret 将该 service account token 加载到 pod 上。pod 中的应用可以使用 service account token 来访问 api server。service account 证书被用于生成和验证 service account token。该证书的用法和前面介绍的其他证书不同，因为实际上使用的是其公钥和私钥，而并不需要对证书进行验证。下面是service account的认证方式</p><p><img src="/img/2020-11-07-About-the-kubernetes-certificate/2.png" alt="upload-image"> </p><p>这里参考大佬的文章根据集群的实际部署对k8s的证书进行了梳理，加深对这方面的知识了解，有什么问题请大家多多指正。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mp.weixin.qq.com/s/IbxRTQBOeKtL8AlC3R65Rw">https://mp.weixin.qq.com/s/IbxRTQBOeKtL8AlC3R65Rw</a></p><p><a href="https://kubernetes.io/zh/docs/setup/best-practices/certificates/">https://kubernetes.io/zh/docs/setup/best-practices/certificates/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE集群部署日志聚合工具Loki</title>
    <link href="/2020/11/05/2020-11-05-Log-aggregation-tool-Loki/"/>
    <url>/2020/11/05/2020-11-05-Log-aggregation-tool-Loki/</url>
    
    <content type="html"><![CDATA[<p>本文章简要介绍了如何在腾讯云的TKE集群中搭建Loki日志采集工具。</p><h1 id="Loki日志系统介绍"><a href="#Loki日志系统介绍" class="headerlink" title="Loki日志系统介绍"></a>Loki日志系统介绍</h1><p>Loki是受Prometheus启发的水平可扩展，高度可用的多租户日志聚合系统。它的设计具有很高的成本效益，并且易于操作。它不索引日志的内容，而是为每个日志流设置一组标签。</p><p>与其他日志聚合系统相比，Loki的特点</p><ul><li>不对日志进行全文本索引。通过存储压缩的，非结构化的日志以及仅索引元数据，Loki更加易于操作且运行成本更低。</li><li>使用与Prometheus相同的标签对日志流进行索引和分组，从而使您能够使用与Prometheus相同的标签在指标和日志之间无缝切换。</li><li>特别适合存储Kubernetes Pod日志。诸如Pod标签之类的元数据会自动被抓取并建立索引。</li><li>在Grafana中具有本机支持（需要Grafana v6.0）。</li></ul><p>基于Loki的日志记录堆栈包含3个组件：</p><ul><li>promtail是代理，负责收集日志并将其发送给Loki。</li><li>loki是主服务器，负责存储日志和处理查询。</li><li>Grafana用于查询和显示日志。</li></ul><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/1.png" alt="upload-image"> </p><p>Loki其实类似于elk和prometheus的架构，部署在k8s中，通过DaemonSet的方式部署promtail用来采集节点的日志，将采集的日志数据投递到loki，最后通过grafana来进行前端的界面查询和展示。</p><p>Loki像Prometheus一样，但是对于日志：我们更喜欢基于多维标签的索引方法，并且想要一个没有依赖性的，易于操作的单二进制系统。 Loki与Prometheus的不同之处在于，它侧重于日志而不是指标，并通过推送而不是拉动交付日志。</p><h1 id="部署Loki和grafana到k8s集群"><a href="#部署Loki和grafana到k8s集群" class="headerlink" title="部署Loki和grafana到k8s集群"></a>部署Loki和grafana到k8s集群</h1><h2 id="部署loki和promtail"><a href="#部署loki和promtail" class="headerlink" title="部署loki和promtail"></a>部署loki和promtail</h2><p>这里我们通过helm来部署loki和promtail到集群中，这里使用的环境是腾讯云上的托管TKE集群，在腾讯云上的容器服务有直接提供loki应用让我们直接部署到集群中，下面我们说一下部署方式</p><h3 id="控制台部署loki应用到集群"><a href="#控制台部署loki应用到集群" class="headerlink" title="控制台部署loki应用到集群"></a>控制台部署loki应用到集群</h3><p>点击腾讯云容器服务，点击应用，选择你的集群，点击新建。</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/2.png" alt="upload-image"> </p><p>输入你的应用名和应用部署的命名空间，在日志分析中找到loki-stack，然后点击完成即可。</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/3.png" alt="upload-image"> </p><p>这边部署成功后可以去控制台进入loki查看应用，你会发现部署loki和对应的promtail，这些pod都正常启动，说明loki和promtail都部署成功了。</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/4.png" alt="upload-image"> </p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/5.png" alt="upload-image"> </p><h3 id="helm命令部署loki应用到集群"><a href="#helm命令部署loki应用到集群" class="headerlink" title="helm命令部署loki应用到集群"></a>helm命令部署loki应用到集群</h3><p>当然如果你习惯用helm命令操作部署也是可以的，下面讲一下helm命名的部署方式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>添加loki仓库<br>$ helm repo add loki https:<span class="hljs-string">//grafana.github.io/charts</span><br>$ helm repo update<br><span class="hljs-string">//</span>采用默认配置部署<br>$ helm upgrade <span class="hljs-params">--install</span> loki <span class="hljs-params">--namespace=loki</span> <span class="hljs-params">--name=nwx-loki</span> loki-stack <br><span class="hljs-string">//</span>部署Loki和Fluent Bit到您的集群<br>$ helm upgrade <span class="hljs-params">--install</span> loki <span class="hljs-params">--namespace=loki</span> <span class="hljs-params">--name=nwx-loki</span> \<br>    <span class="hljs-params">--set</span> fluent-bit.enabled=<span class="hljs-literal">true</span>,promtail.enabled=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h2><h3 id="部署grafana及对应的service"><a href="#部署grafana及对应的service" class="headerlink" title="部署grafana及对应的service"></a>部署grafana及对应的service</h3><p>下面我们部署grafana作为前端界面来查询loki所采集的日志，这里在选择grafana版本需要注意，版本需要6.0以上的版本。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">gafana</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">gafana</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gafana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">loki</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">gafana</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">gafana</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">gafana</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">gafana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana:master</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">gafana</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">qcloudregistrykey</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gafana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">loki</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">3000</span><span class="hljs-number">-3000</span><span class="hljs-string">-tcp</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32074</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3000</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">gafana</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">gafana</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p>直接kubectl apply上面2个yaml文件创建grafana应用和对应的service，也可以控制台创建</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/6.png" alt="upload-image"> </p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/7.png" alt="upload-image"> </p><h3 id="通过treafik给grafana配置域名访问"><a href="#通过treafik给grafana配置域名访问" class="headerlink" title="通过treafik给grafana配置域名访问"></a>通过treafik给grafana配置域名访问</h3><p>这里集群部署的treafik是2.0版本，关于treafik2.0部署可以参考 <a href="https://cloud.tencent.com/developer/article/1642306">https://cloud.tencent.com/developer/article/1642306</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">loki</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">loki</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`loki.tx.niewx.cn`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gafana</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>直接添加一个IngressRoute就可以了，下面我们通过配置的域名看看是否可以成功。</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/8.png" alt="upload-image"> </p><p>可以进入登陆界面表示部署成功。</p><h1 id="通过grafana界面查询日志"><a href="#通过grafana界面查询日志" class="headerlink" title="通过grafana界面查询日志"></a>通过grafana界面查询日志</h1><h2 id="grafana配置loki数据源"><a href="#grafana配置loki数据源" class="headerlink" title="grafana配置loki数据源"></a>grafana配置loki数据源</h2><p>下面我们需要在grafana配置一下loki的数据源，这样我们才可以在grafana上查询loki的日志，首先我们登录grafana，初始化账号密码是admin&#x2F;admin，第一次登录会要求你修改密码，登录成功后有一个grafana介绍。</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/9.png" alt="upload-image"> </p><p>找到配置选项的Data Sources，点击添加数据源，选择loki，在loki数据源的url配置上你的service名称地址，我的service名称是nwx-loki，因此我们这里配置的是这个地址 <a href="http://nwx-loki:3100，配置好后点击测试，如果能连接成功说明添加成功。">http://nwx-loki:3100，配置好后点击测试，如果能连接成功说明添加成功。</a></p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/10.png" alt="upload-image"> </p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/11.png" alt="upload-image"> </p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/12.png" alt="upload-image"></p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/13.png" alt="upload-image"> </p><h2 id="界面上查询日志"><a href="#界面上查询日志" class="headerlink" title="界面上查询日志"></a>界面上查询日志</h2><p>添加数据源后，点击explore可以直接进到loki的查询界面</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/14.png" alt="upload-image"> </p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/15.png" alt="upload-image"> </p><p>我们这边查询一下loki的日志看看，点击log label选择app中的loki就可以看到loki的业务日志</p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/16.png" alt="upload-image"> </p><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/17.png" alt="upload-image"> </p><h2 id="loki查询语法"><a href="#loki查询语法" class="headerlink" title="loki查询语法"></a>loki查询语法</h2><p>下面我们简单的测试一下loki的查询语法</p><h3 id="job日志流"><a href="#job日志流" class="headerlink" title="job日志流"></a>job日志流</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&#123;job<span class="hljs-operator">=</span><span class="hljs-string">&quot;efk/elasticsearch-master&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/18.png" alt="upload-image"> </p><h3 id="合并流选择器"><a href="#合并流选择器" class="headerlink" title="合并流选择器"></a>合并流选择器</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&#123;app =<span class="hljs-string">&quot;elasticsearch-master&quot;</span>,<span class="hljs-keyword">namespace</span> =<span class="hljs-string">&quot;efk&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/19.png" alt="upload-image"> </p><h3 id="标签匹配的运算符"><a href="#标签匹配的运算符" class="headerlink" title="标签匹配的运算符"></a>标签匹配的运算符</h3><ul><li>&#x3D;： 完全相等。</li><li>!&#x3D;： 不相等。</li><li>&#x3D;~： 正则表达式匹配。</li><li>!~： 正则表达式不匹配。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&#123;app != <span class="hljs-string">&quot;kibana&quot;</span>,<span class="hljs-keyword">namespace</span> =<span class="hljs-string">&quot;efk&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/20.png" alt="upload-image"> </p><h3 id="行筛选器表达式"><a href="#行筛选器表达式" class="headerlink" title="行筛选器表达式"></a>行筛选器表达式</h3><ul><li>|&#x3D;：日志行包含字符串。</li><li>!&#x3D;：日志行不包含字符串。</li><li>|~：日志行与正则表达式匹配。</li><li>!~：日志行与正则表达式不匹配。</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;app = <span class="hljs-string">&quot;kibana&quot;</span>,namespace =<span class="hljs-string">&quot;efk&quot;</span>&#125; <span class="hljs-string">|= &quot;</span><span class="hljs-number">172.16</span>.<span class="hljs-number">2.108</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/21.png" alt="upload-image"> </p><p>筛选器运算符可以多个并将按顺序筛选表达式 - 生成的日志行必须同时满足所有条件。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;app = <span class="hljs-string">&quot;kibana&quot;</span>,namespace =<span class="hljs-string">&quot;efk&quot;</span>&#125; <span class="hljs-string">|= &quot;</span><span class="hljs-number">172.16</span>.<span class="hljs-number">2.108</span><span class="hljs-string">&quot; != &quot;</span><span class="hljs-number">04</span>:<span class="hljs-number">58</span>:<span class="hljs-number">40</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/22.png" alt="upload-image"> </p><h3 id="统计某一时间段的日志数"><a href="#统计某一时间段的日志数" class="headerlink" title="统计某一时间段的日志数"></a>统计某一时间段的日志数</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">count<span class="hljs-constructor">_over_time(&#123;<span class="hljs-params">app</span> = <span class="hljs-string">&quot;kibana&quot;</span>,<span class="hljs-params">namespace</span> =<span class="hljs-string">&quot;efk&quot;</span> &#125;[1m])</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/23.png" alt="upload-image"> </p><p>获取过去1个小时的日志计数，按级别分组</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">sum(<span class="hljs-name">count_over_time</span>(&#123;job=<span class="hljs-string">&quot;default/nginx&quot;</span>&#125;[<span class="hljs-number">60</span>m])) by (<span class="hljs-name">level</span>) <br></code></pre></td></tr></table></figure><p><img src="/img/2020-11-05-Log-aggregation-tool-Loki/24.png" alt="upload-image"> </p><p>loki配备了自己的查询LogQL，详细的查询语法参考<a href="https://github.com/grafana/blob/master/docs/sources/logql/_index.md">https://github.com/grafana/blob/master/docs/sources/logql/_index.md</a></p><p>有两种类型的 LogQL 查询：</p><ul><li>日志查询返回日志行的内容。</li><li>指标查询扩展日志查询，并基于日志查询中的日志内容计算示例值。</li></ul><p>logQL基本上能满足我们的日常查询需求。大家可以多多学习实际操作下。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/grafana/loki">https://github.com/grafana/loki</a></p><p><a href="https://github.com/grafana/blob/master/docs/sources/logql/_index.md">https://github.com/grafana/blob/master/docs/sources/logql/_index.md</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>TKE</category>
      
      <category>Log</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>Loki</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubewatch监控k8s集群资源变更</title>
    <link href="/2020/11/01/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/"/>
    <url>/2020/11/01/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/</url>
    
    <content type="html"><![CDATA[<p>这次要介绍一个 Kubernetes 资源观测工具，实时监控 Kubernetes 集群中各种资源的新建、更新和删除，并实时通知到各种协作软件&#x2F;聊天软件，目前支持的通知渠道有：</p><ul><li>slack</li><li>hipchat</li><li>mattermost</li><li>flock</li><li>webhook</li></ul><p>本次实验环境采用的是腾讯云上TKE托管集群，通知发生采用的是发送到slack上。</p><h1 id="申请slack账号"><a href="#申请slack账号" class="headerlink" title="申请slack账号"></a>申请slack账号</h1><p>这边首先申请一个个人slack账号，申请后创建一个app，并且创建一个告警channel将app关联上去</p><h2 id="创建slack账号"><a href="#创建slack账号" class="headerlink" title="创建slack账号"></a>创建slack账号</h2><p>通过企业邮箱去页面 <a href="https://slack.com/get-started#/create">https://slack.com/get-started#/create</a> 创建你的slack命名空间，这里根据提示填写邮箱信息即可。</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/0.png" alt="upload-image"> </p><h2 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h2><p>通过页面 <a href="https://api.slack.com/apps">https://api.slack.com/apps</a> 点击创建New App</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/1.png" alt="upload-image"> </p><p>填写你的APP Name和你的workspace，我这里之前创建一个kubewatch的app</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/2.png" alt="upload-image"> </p><p>给APP申请权限，这边点击0Auth</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/3.png" alt="upload-image"> </p><p>点击添加权限按钮给APP添加权限，这边注意最后给admin的token权限</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/4.png" alt="upload-image"> </p><h2 id="安装APP"><a href="#安装APP" class="headerlink" title="安装APP"></a>安装APP</h2><p>添加完权限后，点击安装APP按钮安装到你的workspaces</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/5.png" alt="upload-image"> </p><p>安装完成后，复制保存APP的token。这里后续需要用到，配置到kubewatch的配置文件中。</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/6.png" alt="upload-image"> </p><h2 id="创建channel关联APP接收信息"><a href="#创建channel关联APP接收信息" class="headerlink" title="创建channel关联APP接收信息"></a>创建channel关联APP接收信息</h2><p>这里我们创建一个test的channel来接受kubewatch发送的信息</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/7.png" alt="upload-image"> </p><p>点击Connect an app将kubewatch app关联到test channel</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/8.png" alt="upload-image"> </p><p>关联成功后，后续消息将会发生到test channel中</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/9.png" alt="upload-image"> </p><h1 id="部署kubewatch到k8s集群中"><a href="#部署kubewatch到k8s集群中" class="headerlink" title="部署kubewatch到k8s集群中"></a>部署kubewatch到k8s集群中</h1><h2 id="腾讯云控制台部署到TKE集群"><a href="#腾讯云控制台部署到TKE集群" class="headerlink" title="腾讯云控制台部署到TKE集群"></a>腾讯云控制台部署到TKE集群</h2><p>点击容器服务的应用页面，选择你的集群，点击新建</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/9--10.png" alt="upload-image"> </p><p>填写你的应用名，所部属的命名空间，选择kubewatch应用，修改value.yaml</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/10.png" alt="upload-image"> </p><p>修改enabled为ture，channel为之前接收消息的channel，我这里是test，将之前APP的token填写到token配置项</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/11.png" alt="upload-image"> </p><h2 id="helm命令部署到集群中"><a href="#helm命令部署到集群中" class="headerlink" title="helm命令部署到集群中"></a>helm命令部署到集群中</h2><p>通过helm客户端执行命令部署kubewatch，如何安装使用helm可以参考<a href="https://cloud.tencent.com/developer/article/1696689">https://cloud.tencent.com/developer/article/1696689</a></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-comment"># helm repo add bitnami https://charts.bitnami.com/bitnami</span><br>[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-comment"># helm fetch bitnami/kubewatch</span><br>[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-comment"># tar -xvf kubewatch-1.2.6.tgz</span><br>[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-comment"># cd </span><br>[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-comment"># vi values.yaml</span><br>[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-comment"># helm install ./kubewatch --namespace kubewatch --name nwx-kubewatch</span><br></code></pre></td></tr></table></figure><p>这里vi修改一下values.yam文件如下,修改enabled为ture，channel为之前接收消息的channel，我这里是test，将之前APP的token填写到token配置项</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/11--12.png" alt="upload-image"> </p><p>查看pod日志，检查服务是否允许，这边pod出现如下日志，则表示接入slack成功</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/12.png" alt="upload-image"> </p><h1 id="k8s集群资源变更测试"><a href="#k8s集群资源变更测试" class="headerlink" title="k8s集群资源变更测试"></a>k8s集群资源变更测试</h1><p>下面我们尝试重建一个pod，看下slack是否会接收到变更信息，我们在test下部署一个busybox的pod</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/13.png" alt="upload-image"> </p><p>从下图可以发现，slack有接收到变更的信息，说明我们已经成功部署kubewatch监控k8s集群并接入到slack</p><p><img src="/img/2020-11-01-kubewatch-monitors-k8s-cluster-resource-changes/14.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Monitor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes之StatefulSet控制器</title>
    <link href="/2020/10/23/2020-10-23-StatefulSet-controller-of-kubernetes/"/>
    <url>/2020/10/23/2020-10-23-StatefulSet-controller-of-kubernetes/</url>
    
    <content type="html"><![CDATA[<p>本文将带你了解k8s中的StatefulSet控制器，将通过实验的方式来说明StatefulSet的用法和配置，让你快速能够将StatefulSet类型的服务用到你的k8s集群中。</p><h1 id="什么是StatefulSet"><a href="#什么是StatefulSet" class="headerlink" title="什么是StatefulSet"></a>什么是StatefulSet</h1><p>StatefulSet 是用来管理有状态应用的工作负载 API 对象。</p><p>StatefulSet 用来管理 Deployment 和扩展一组 Pod，并且能为这些 Pod 提供序号和唯一性保证。</p><p>和 Deployment 相同的是，StatefulSet 管理了基于相同容器定义的一组 Pod。但和 Deployment 不同的是，StatefulSet 为它们的每个 Pod 维护了一个固定的 ID。这些 Pod 是基于相同的声明来创建的，但是不能相互替换：无论怎么调度，每个 Pod 都有一个永久不变的 ID。</p><p>StatefulSet 和其他控制器使用相同的工作模式。你在 StatefulSet 对象 中定义你期望的状态，然后 StatefulSet 的 控制器 就会通过各种更新来达到那种你想要的状态。</p><p>StatefulSets 对于需要满足以下一个或多个需求的应用程序很有价值：</p><ul><li>稳定的、唯一的网络标识符。</li><li>稳定的、持久的存储。</li><li>有序的、优雅的部署和缩放。</li><li>有序的、自动的滚动更新。</li></ul><p>在上面，稳定意味着 Pod 调度或重调度的整个过程是有持久性的。如果应用程序不需要任何稳定的标识符或有序的部署、删除或伸缩，则应该使用由一组无状态的副本控制器提供的工作负载来部署应用程序，比如 Deployment 或者 ReplicaSet 可能更适用于您的无状态应用部署需要。</p><p><strong>使用限制</strong></p><ul><li>给定 Pod 的存储必须由 PersistentVolume 驱动 基于所请求的 storage class 来提供，或者由管理员预先提供。</li><li>删除或者收缩 StatefulSet 并不会删除它关联的存储卷。这样做是为了保证数据安全，它通常比自动清除 StatefulSet 所有相关的资源更有价值。</li><li>StatefulSet 当前需要无头服务 来负责 Pod 的网络标识。您需要负责创建此服务。</li><li>当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。为了实现 StatefulSet 中的 Pod 可以有序和优雅的终止，可以在删除之前将 StatefulSet 缩放为 0。</li><li>在默认 Pod 管理策略(OrderedReady) 时使用 滚动更新，可能进入需要 人工干预 才能修复的损坏状态。</li></ul><h1 id="pod的标识符"><a href="#pod的标识符" class="headerlink" title="pod的标识符"></a>pod的标识符</h1><p>StatefulSet Pod 具有唯一的标识，该标识包括顺序标识、稳定的网络标识和稳定的存储。该标识和 Pod 是绑定的，不管它被调度在哪个节点上。注意的是StatefulSet 需要通过无头服务才能解析到pod ip</p><p>有序索引<br>对于具有 N 个副本的 StatefulSet，StatefulSet 中的每个 Pod 将被分配一个整数序号，从 0 到 N-1，该序号在 StatefulSet 上是唯一的。</p><p>稳定的网络 ID<br>StatefulSet 中的每个 Pod 根据 StatefulSet 的名称和 Pod 的序号派生出它的主机名。 组合主机名的格式为$(StatefulSet 名称)-$(序号)。上例将会创建三个名称分别为 web-0、web-1、web-2 的 Pod。 StatefulSet 可以使用 headless 服务 控制它的 Pod 的网络域。管理域的这个服务的格式为： $(服务名称).$(命名空间).svc.cluster.local，其中 cluster.local 是集群域。 一旦每个 Pod 创建成功，就会得到一个匹配的 DNS 子域，格式为： $(pod 名称).$(所属服务的 DNS 域名)，其中所属服务由 StatefulSet 的 serviceName 域来设定。</p><p>下面给出一些选择集群域、服务名、StatefulSet 名、及其怎样影响 StatefulSet 的 Pod 上的 DNS 名称的示例  </p><table><thead><tr><th>集群域名</th><th>服务(名字空间&#x2F;名字)</th><th>StatefulSet(名字空间&#x2F;名字)</th><th>StatefulSet 域名</th><th>Pod DNS</th><th>Pod 主机名</th></tr></thead><tbody><tr><td>cluster.local</td><td>default&#x2F;nginx</td><td>default&#x2F;web</td><td>nginx.default.svc.cluster.local</td><td>web-{0..N-1}.nginx.default.svc.cluster.local</td><td>web-{0..N-1}</td></tr><tr><td>cluster.local</td><td>foo&#x2F;nginx</td><td>foo&#x2F;web</td><td>nginx.foo.svc.cluster.local</td><td>web-{0..N-1}.nginx.foo.svc.cluster.local</td><td>web-{0..N-1}</td></tr><tr><td>kube.local</td><td>foo&#x2F;nginx</td><td>foo&#x2F;web</td><td>nginx.foo.svc.kube.local</td><td>web-{0..N-1}.nginx.foo.svc.kube.local</td><td>web-{0..N-1}</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">webs</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># has to match .spec.template.metadata.labels</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">&quot;nginx&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># by default is 1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># has to match .spec.selector.matchLabels</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/nginx-slim:0.8</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br></code></pre></td></tr></table></figure><p>下面我们在其他容器中解析一下pod名称看一下是否能解析到pod ip</p><p><img src="/img/2020-10-23-StatefulSet-controller-of-kubernetes/1.png" alt="upload-image"> </p><p>我们在centos容器中解析对应的pod名称看看,可以发现解析每个pod名称都能成功到pod ip，pod标识符也正是StatefulSet 独有的特性。</p><p><img src="/img/2020-10-23-StatefulSet-controller-of-kubernetes/2.png" alt="upload-image"> </p><h1 id="稳定的存储"><a href="#稳定的存储" class="headerlink" title="稳定的存储"></a>稳定的存储</h1><p>Kubernetes 为每个 VolumeClaimTemplate 创建一个 PersistentVolumes。 在上面的 nginx 示例中，每个 Pod 将会得到基于 StorageClass  cbs  提供的 10 Gib 的 PersistentVolume。如果没有声明 StorageClass，就会使用默认的 StorageClass。 当一个 Pod 被调度（重新调度）到节点上时，它的 volumeMounts 会挂载与其 PersistentVolumeClaims 相关联的 PersistentVolume。 请注意，当 Pod 或者 StatefulSet 被删除时，与 PersistentVolumeClaims 相关联的 PersistentVolume 并不会被删除。要删除它必须通过手动方式来完成。</p><p>下面我们来测试一下将pod都删除看看，对应的pvc是否会删除</p><p><img src="/img/2020-10-23-StatefulSet-controller-of-kubernetes/3.png" alt="upload-image"> </p><p><img src="/img/2020-10-23-StatefulSet-controller-of-kubernetes/4.png" alt="upload-image"> </p><p>删除了所有pod，对用挂载的pvc卷是不会删除的。</p><h1 id="Pod-名称标签"><a href="#Pod-名称标签" class="headerlink" title="Pod 名称标签"></a>Pod 名称标签</h1><p>当 StatefulSet 控制器 创建 Pod 时，它会添加一个标签 statefulset.kubernetes.io&#x2F;pod-name，该标签设置为 Pod 名称。这个标签允许您给 StatefulSet 中的特定 Pod 绑定一个 Service。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM_1_4_centos ~]<span class="hljs-comment"># kubectl get pod --show-labels | grep webss</span><br>webss-<span class="hljs-number">0</span>                                   <span class="hljs-number">2</span><span class="hljs-regexp">/2     Running   0          76m   app=nginx,controller-revision-hash=webss-6d657db877,k8s-app=webss,qcloud-app=webss,security.istio.io/</span>tlsMode=istio,service.istio.io<span class="hljs-regexp">/canonical-name=nginx,service.istio.io/</span>canonical-revision=latest,statefulset.kubernetes.io/pod-name=webss-<span class="hljs-number">0</span><br>webss-<span class="hljs-number">1</span>                                   <span class="hljs-number">2</span><span class="hljs-regexp">/2     Running   0          75m   app=nginx,controller-revision-hash=webss-6d657db877,k8s-app=webss,qcloud-app=webss,security.istio.io/</span>tlsMode=istio,service.istio.io<span class="hljs-regexp">/canonical-name=nginx,service.istio.io/</span>canonical-revision=latest,statefulset.kubernetes.io/pod-name=webss-<span class="hljs-number">1</span><br>webss-<span class="hljs-number">2</span>                                   <span class="hljs-number">2</span><span class="hljs-regexp">/2     Running   0          74m   app=nginx,controller-revision-hash=webss-6d657db877,k8s-app=webss,qcloud-app=webss,security.istio.io/</span>tlsMode=istio,service.istio.io<span class="hljs-regexp">/canonical-name=nginx,service.istio.io/</span>canonical-revision=latest,statefulset.kubernetes.io/pod-name=webss-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@VM_1_4_centos ~]<span class="hljs-meta"># kubectl get svc  webss-0 -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Service<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-10-25T03:06:35Z&quot;</span><br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> nginx<br><span class="hljs-symbol">  name:</span> webss<span class="hljs-number">-0</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;14187854412&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>default<span class="hljs-keyword">/services/</span>webss<span class="hljs-number">-0</span><br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">16f</span>50d64<span class="hljs-number">-533</span>c<span class="hljs-number">-4</span>c55-acb6-d7512d86cc58<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  clusterIP:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.255</span><span class="hljs-number">.138</span><br><span class="hljs-symbol">  ports:</span><br>  - name: web<br><span class="hljs-symbol">    port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">    protocol:</span> TCP<br><span class="hljs-symbol">    targetPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">  selector:</span><br>    statefulset.kubernetes.io/pod-name: webss<span class="hljs-number">-0</span><br><span class="hljs-symbol">  sessionAffinity:</span> None<br><span class="hljs-symbol">  type:</span> ClusterIP<br><span class="hljs-symbol">status:</span><br><span class="hljs-symbol">  loadBalancer:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这边可以通过这个svc单独访问到webss-0</p><h1 id="StatefulSet的创建和扩缩容"><a href="#StatefulSet的创建和扩缩容" class="headerlink" title="StatefulSet的创建和扩缩容"></a>StatefulSet的创建和扩缩容</h1><ul><li>对于包含 N 个 副本的 StatefulSet，当部署 Pod 时，它们是依次创建的，顺序为 0..N-1。</li><li>当删除 Pod 时，它们是逆序终止的，顺序为 N-1..0。</li><li>在将缩放操作应用到 Pod 之前，它前面的所有 Pod 必须是 Running 和 Ready 状态。</li><li>在 Pod 终止之前，所有的继任者必须完全关闭。</li></ul><p>StatefulSet 不应将 pod.Spec.TerminationGracePeriodSeconds 设置为 0。 这种做法是不安全的，要强烈阻止。更多的解释请参考 强制删除 StatefulSet Pod。</p><p><img src="/img/2020-10-23-StatefulSet-controller-of-kubernetes/5.png" alt="upload-image"> </p><p>在上面的 nginx 示例被创建后，会按照 webss-0、webss-1、webss-2 的顺序部署三个 Pod。 在 web-0 进入 Running 和 Ready 状态前不会部署 webss-1。在 webss-1 进入 Running 和 Ready 状态前不会部署 webss-2。 如果 web-1 已经处于 Running 和 Ready 状态，而 webss-2 尚未部署，在此期间发生了 web-0 运行失败，那么 webss-2 将不会被部署，要等到 webss-0 部署完成并进入 Running 和 Ready 状态后，才会部署 web-2。</p><p>如果用户想将示例中的 StatefulSet 收缩为 replicas&#x3D;0，首先被终止的是 webss-2。在 webss-2 没有被完全停止和删除前，webss-1 不会被终止。当 webss-2 已被终止和删除、webss-1 尚未被终止，如果在此期间发生 webss-0 运行失败，那么就不会终止 webss-1，必须等到 webss-0 进入 Running 和 Ready 状态后才会终止 webss-1。</p><p>我们可以先删除pod，然后创建pod，看下对应的event日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span>_1_4_centos <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">describe</span> sts webss<br>Name:               webss<br>Namespace:          <span class="hljs-keyword">default</span><br>CreationTimestamp:  Sun, <span class="hljs-number">25</span> Oct <span class="hljs-number">2020</span> <span class="hljs-number">09</span>:<span class="hljs-number">39</span>:<span class="hljs-number">47</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span><br>Selector:           app<span class="hljs-operator">=</span>nginx,k8s<span class="hljs-operator">-</span>app<span class="hljs-operator">=</span>webss,qcloud<span class="hljs-operator">-</span>app<span class="hljs-operator">=</span>webss<br>Labels:             app<span class="hljs-operator">=</span>nginx<br>                    k8s<span class="hljs-operator">-</span>app<span class="hljs-operator">=</span>webss<br>                    qcloud<span class="hljs-operator">-</span>app<span class="hljs-operator">=</span>webss<br>Annotations:        <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>Replicas:           <span class="hljs-number">3</span> desired <span class="hljs-operator">|</span> <span class="hljs-number">3</span> total<br><span class="hljs-keyword">Update</span> Strategy:    RollingUpdate<br>...............<br>Events:<br>  Type    Reason            Age                  <span class="hljs-keyword">From</span>                    Message<br>  <span class="hljs-comment">----    ------            ----                 ----                    -------</span><br>  Normal  SuccessfulDelete  <span class="hljs-number">118</span>s (x2 <span class="hljs-keyword">over</span> <span class="hljs-number">151</span>m)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">delete</span> Pod webss<span class="hljs-number">-2</span> <span class="hljs-keyword">in</span> StatefulSet webss successful<br>  Normal  SuccessfulDelete  <span class="hljs-number">111</span>s (x2 <span class="hljs-keyword">over</span> <span class="hljs-number">151</span>m)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">delete</span> Pod webss<span class="hljs-number">-1</span> <span class="hljs-keyword">in</span> StatefulSet webss successful<br>  Normal  SuccessfulDelete  <span class="hljs-number">97</span>s (x2 <span class="hljs-keyword">over</span> <span class="hljs-number">151</span>m)   statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">delete</span> Pod webss<span class="hljs-number">-0</span> <span class="hljs-keyword">in</span> StatefulSet webss successful<br>  Normal  SuccessfulCreate  <span class="hljs-number">70</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">3</span>h49m)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">create</span> Pod webss<span class="hljs-number">-0</span> <span class="hljs-keyword">in</span> StatefulSet webss successful<br>  Normal  SuccessfulCreate  <span class="hljs-number">47</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">3</span>h49m)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">create</span> Pod webss<span class="hljs-number">-1</span> <span class="hljs-keyword">in</span> StatefulSet webss successful<br>  Normal  SuccessfulCreate  <span class="hljs-number">24</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">3</span>h48m)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">create</span> Pod webss<span class="hljs-number">-2</span> <span class="hljs-keyword">in</span> StatefulSet webss successful<br></code></pre></td></tr></table></figure><p>可以发现pod的启动是按照顺序创建和删除的</p><p><strong>podManagementPolicy管理pod</strong></p><p>那么StatefulSet 是如何保证对应的pod按照顺序启动的呢，必须需要等前面一个pod启动才能启动后面的pod，那么我们可以去除这个依赖来启动pod吗？让pod并行启动，这边当然是可以的。StatefulSet可以通过podManagementPolicy这个参数来配置pod的启动顺序。</p><p>podManagementPolicy: OrderedReady这个是默认的配置，就是按照一定的顺序先后启动。</p><p>podManagementPolicy可以将值设置为Parallel，这个值就是StatefulSet 控制器并行的启动或终止所有的 Pod， 启动或者终止其他 Pod 前，无需等待 Pod 进入 Running 和 ready 或者完全停止状态。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1<br><span class="hljs-symbol">kind:</span> StatefulSet<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    kubectl.kubernetes.io/last-applied-configuration: |<br>      <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;apps/v1&quot;</span>,<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;StatefulSet&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;annotations&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;web&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;spec&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;podManagementPolicy&quot;</span>:<span class="hljs-string">&quot;Parallel&quot;</span>,<span class="hljs-string">&quot;replicas&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;selector&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;matchLabels&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;app&quot;</span>:<span class="hljs-string">&quot;nginx&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;serviceName&quot;</span>:<span class="hljs-string">&quot;nginx&quot;</span>,<span class="hljs-string">&quot;template&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;metadata&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;labels&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;app&quot;</span>:<span class="hljs-string">&quot;nginx&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;spec&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;containers&quot;</span>:[<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;k8s.gcr.io/nginx-slim:0.8&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;nginx&quot;</span>,<span class="hljs-string">&quot;ports&quot;</span>:[<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;containerPort&quot;</span>:<span class="hljs-number">80</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;web&quot;</span><span class="hljs-punctuation">&#125;</span>]<span class="hljs-punctuation">&#125;</span>],<span class="hljs-string">&quot;terminationGracePeriodSeconds&quot;</span>:<span class="hljs-number">10</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-10-25T05:42:38Z&quot;</span><br><span class="hljs-symbol">  generation:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">  name:</span> web<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;8286286&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/apis/</span>apps<span class="hljs-keyword">/v1/</span>namespaces<span class="hljs-keyword">/default/</span>statefulsets/web<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">4e50</span>f5b0-d23d<span class="hljs-number">-4</span>fca<span class="hljs-number">-978</span>e-f3547c047dd3<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  podManagementPolicy:</span> Parallel<br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  revisionHistoryLimit:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> nginx<br><span class="hljs-symbol">  serviceName:</span> nginx<br>....................<br></code></pre></td></tr></table></figure><p><img src="/img/2020-10-23-StatefulSet-controller-of-kubernetes/6.png" alt="upload-image"> </p><p>可以从上面event事件看出，我们将podManagementPolicy设置为Parallel，pod是并行同时启动的</p><h1 id="StatefulSet的更新"><a href="#StatefulSet的更新" class="headerlink" title="StatefulSet的更新"></a>StatefulSet的更新</h1><p>在 Kubernetes 1.7 及以后的版本中，StatefulSet 的.spec.updateStrategy字段让您可以配置和禁用掉自动滚动更新 Pod 的容器、标签、资源请求或限制、以及注解。默认的配置是滚动更新</p><h2 id="RollingUpdate更新"><a href="#RollingUpdate更新" class="headerlink" title="RollingUpdate更新"></a>RollingUpdate更新</h2><p>RollingUpdate更新策略对 StatefulSet 中的 Pod 执行自动的滚动更新。在没有声明.spec.updateStrategy时，RollingUpdate是默认配置。 当 StatefulSet 的.spec.updateStrategy.type被设置为RollingUpdate时，StatefulSet 控制器会删除和重建 StatefulSet 中的每个 Pod。 它将按照与 Pod 终止相同的顺序（从最大序号到最小序号）进行，每次更新一个 Pod。它会等到被更新的 Pod 进入 Running 和 Ready 状态，然后再更新其前身。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">    terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br><span class="hljs-symbol">updateStrategy:</span><br><span class="hljs-symbol">  rollingUpdate:</span><br><span class="hljs-symbol">    partition:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">  type:</span> RollingUpdate<br></code></pre></td></tr></table></figure><p>下面我们修改下镜像，看看滚动更新是否和上面描述一致，我们修改镜像版本为1.17版本，从事件看，更新顺序是先更新最大号序号，再更新最小序号的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">   nginx:<br>    Image:        nginx:<span class="hljs-number">1.17</span><br>    Port:         <span class="hljs-number">80</span><span class="hljs-operator">/</span>TCP<br>    Host Port:    <span class="hljs-number">0</span><span class="hljs-operator">/</span>TCP<br>    Environment:  <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>    Mounts:       <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>  Volumes:        <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>Volume Claims:    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>Events:<br>  Type    Reason            Age                  <span class="hljs-keyword">From</span>                    Message<br>  <span class="hljs-comment">----    ------            ----                 ----                    -------</span><br>  Normal  SuccessfulDelete  <span class="hljs-number">93</span>s                  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">delete</span> Pod web<span class="hljs-number">-2</span> <span class="hljs-keyword">in</span> StatefulSet web successful<br>  Normal  SuccessfulCreate  <span class="hljs-number">85</span>s (x2 <span class="hljs-keyword">over</span> <span class="hljs-number">3</span>m28s)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">create</span> Pod web<span class="hljs-number">-2</span> <span class="hljs-keyword">in</span> StatefulSet web successful<br>  Normal  SuccessfulDelete  <span class="hljs-number">46</span>s                  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">delete</span> Pod web<span class="hljs-number">-1</span> <span class="hljs-keyword">in</span> StatefulSet web successful<br>  Normal  SuccessfulCreate  <span class="hljs-number">36</span>s (x2 <span class="hljs-keyword">over</span> <span class="hljs-number">4</span>m20s)  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">create</span> Pod web<span class="hljs-number">-1</span> <span class="hljs-keyword">in</span> StatefulSet web successful<br>  Normal  SuccessfulDelete  <span class="hljs-number">12</span>s                  statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">delete</span> Pod web<span class="hljs-number">-0</span> <span class="hljs-keyword">in</span> StatefulSet web successful<br>  Normal  SuccessfulCreate  <span class="hljs-number">5</span>s (x2 <span class="hljs-keyword">over</span> <span class="hljs-number">4</span>m59s)   statefulset<span class="hljs-operator">-</span>controller  <span class="hljs-keyword">create</span> Pod web<span class="hljs-number">-0</span> <span class="hljs-keyword">in</span> StatefulSet web successful<br></code></pre></td></tr></table></figure><h2 id="OnDelete-更新"><a href="#OnDelete-更新" class="headerlink" title="OnDelete 更新"></a>OnDelete 更新</h2><p>OnDelete 更新策略实现了 1.6 及以前版本的历史遗留行为。当 StatefulSet 的 .spec.updateStrategy.type 设置为 OnDelete 时，它的控制器将不会自动更新 StatefulSet 中的 Pod。用户必须手动删除 Pod 以便让控制器创建新的 Pod，以此来对 StatefulSet 的 .spec.template 的变动作出反应。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">    <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">image: nginx:1.17</span><br>      <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>      <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>      <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>    <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>    <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>    <span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br>    <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>    <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br><span class="hljs-attribute">updateStrategy</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">OnDelete</span><br></code></pre></td></tr></table></figure><p>下面我们把修改镜像成latest，看下对应的pod会不会更新</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">OrderedReady</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><br>[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl delete pod web-1</span><br><span class="hljs-string">pod</span> <span class="hljs-string">&quot;web-1&quot;</span> <span class="hljs-string">deleted</span><br>[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl get pod </span><br><span class="hljs-string">NAME</span>    <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>              <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">web-0</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>             <span class="hljs-number">0</span>          <span class="hljs-string">6m</span><br><span class="hljs-string">web-1</span>   <span class="hljs-number">0</span><span class="hljs-string">/1</span>     <span class="hljs-string">ContainerCreating</span>   <span class="hljs-number">0</span>          <span class="hljs-string">2s</span><br><span class="hljs-string">web-2</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>             <span class="hljs-number">0</span>          <span class="hljs-string">7m20s</span><br>[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl describe pod web-1</span><br><span class="hljs-attr">Name:</span>           <span class="hljs-string">web-1</span><br><span class="hljs-attr">Namespace:</span>      <span class="hljs-string">default</span><br><span class="hljs-string">.....................</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>    <span class="hljs-string">Reason</span>     <span class="hljs-string">Age</span>   <span class="hljs-string">From</span>                     <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>    <span class="hljs-string">------</span>     <span class="hljs-string">----</span>  <span class="hljs-string">----</span>                     <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Scheduled</span>  <span class="hljs-string">11s</span>   <span class="hljs-string">default-scheduler</span>        <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">default/web-1</span> <span class="hljs-string">to</span> <span class="hljs-string">vm-4-11-centos</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulling</span>    <span class="hljs-string">10s</span>   <span class="hljs-string">kubelet,</span> <span class="hljs-string">vm-4-11-centos</span>  <span class="hljs-string">Pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;nginx:latest&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulled</span>     <span class="hljs-string">0s</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">vm-4-11-centos</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;nginx:latest&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Created</span>    <span class="hljs-string">0s</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">vm-4-11-centos</span>  <span class="hljs-string">Created</span> <span class="hljs-string">container</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Started</span>    <span class="hljs-string">0s</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">vm-4-11-centos</span>  <span class="hljs-string">Started</span> <span class="hljs-string">container</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><p>可以发现我们修改yaml后，pod并没有更新，只有手动删除某个pod后，pod才会进行更新</p><h2 id="分区更新"><a href="#分区更新" class="headerlink" title="分区更新"></a>分区更新</h2><p>通过声明.spec.updateStrategy.rollingUpdate.partition的方式，RollingUpdate更新策略可以实现分区。如果声明了一个分区，当 StatefulSet 的.spec.template被更新时，所有序号大于等于该分区序号的 Pod 都会被更新。所有序号小于该分区序号的 Pod 都不会被更新，并且，即使他们被删除也会依据之前的版本进行重建。如果 StatefulSet 的.spec.updateStrategy.rollingUpdate.partition大于它的.spec.replicas，对它的.spec.template的更新将不会传递到它的 Pod。 在大多数情况下，您不需要使用分区，但如果您希望进行阶段更新、执行金丝雀或执行分阶段展开，则这些分区会非常有用</p><p>这边通常spec.updateStrategy.rollingUpdate.partition一般需要小于replicas的数值，这样才会生效，下面我们来测试一下分区更新</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">podManagementPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">OrderedReady</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">revisionHistoryLimit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">creationTimestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">null</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">image: nginx</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">web</span><br>          <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>        <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>      <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">updateStrategy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">rollingUpdate</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">partition</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RollingUpdate</span><br><span class="hljs-attribute">[root@VM-4-3-centos ~]# kubectl describe sts web</span><br><span class="hljs-attribute">Name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">              web</span><br><span class="hljs-attribute">Namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">         default</span><br><span class="hljs-attribute">CreationTimestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> Sun, 25 Oct 2020 14:09:02 +0800</span><br><span class="hljs-attribute">Selector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">          app=nginx</span><br><span class="hljs-attribute">Labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">            &lt;none&gt;</span><br><span class="hljs-attribute">Annotations</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       kubectl.kubernetes.io/last-applied-configuration:</span><br>                      &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;StatefulSet&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;web&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,&quot;spec&quot;:&#123;&quot;podManagementPolicy...<br><span class="hljs-attribute">Replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">          3 desired | 3 total</span><br><span class="hljs-attribute">Update Strategy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">   RollingUpdate</span><br>  <span class="hljs-attribute">Partition</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       824636860812</span><br><span class="hljs-attribute">Pods Status</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       3 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="hljs-attribute">........</span><br><span class="hljs-attribute">Events</span><span class="hljs-punctuation">:</span><br>  Type    Reason            Age                  From                    Message<br>  ----    ------            ----                 ----                    -------<br>  Normal  SuccessfulCreate  5m8s                 statefulset-controller  create Pod web-0 in StatefulSet web successful<br>  Normal  SuccessfulCreate  4m32s                statefulset-controller  create Pod web-1 in StatefulSet web successful<br>  Normal  SuccessfulDelete  26s                  statefulset-controller  delete Pod web-2 in StatefulSet web successful<br>  Normal  SuccessfulCreate  19s (x2 over 4m12s)  statefulset-controller  create Pod web-2 in StatefulSet web successful<br>[root@VM-4-3-centos ~]# kubectl get pod <br>NAME    READY   STATUS    RESTARTS   AGE<br>web-0   1/1     Running   0          5m12s<br>web-1   1/1     Running   0          4m36s<br>web-2   1/1     Running   0          23s<br></code></pre></td></tr></table></figure><p>可以发现，只有大于等于分区需要才会被更新，这里也只有web-2被更新</p><h2 id="强制回滚"><a href="#强制回滚" class="headerlink" title="强制回滚"></a>强制回滚</h2><p>在默认 Pod 管理策略(OrderedReady) 时使用 滚动更新 ，可能进入需要人工干预才能修复的损坏状态。</p><p>如果更新后 Pod 模板配置进入无法运行或就绪的状态（例如，由于错误的二进制文件或应用程序级配置错误），StatefulSet 将停止回滚并等待。</p><p>在这种状态下，仅将 Pod 模板还原为正确的配置是不够的。由于 已知问题，StatefulSet 将继续等待损坏状态的 Pod 准备就绪（永远不会发生），然后再尝试将其恢复为正常工作配置。</p><p>恢复模板后，还必须删除 StatefulSet 尝试使用错误的配置来运行的 Pod。这样， StatefulSet 才会开始使用被还原的模板来重新创建 Pod</p><p>我们日常在更新镜像的时候，发现服务启动失败了，然后将镜像回滚成之前的版本，这样仅仅是不够的，因为StatefulSet 还会一直等待新更新的pod状态ready，但是这个永远不会发生，所以为了恢复正常，我们需要删除更新启动失败的pod。</p><p>下面我们来测试下，我们将pod修改成k8s.gcr.io&#x2F;nginx-slim:0.8，节点上无法拉取这个镜像的，所以web-2这个pod会一直启动失败。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl get pod </span><br><span class="hljs-string">NAME</span>    <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>             <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">web-0</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>            <span class="hljs-number">0</span>          <span class="hljs-string">13m</span><br><span class="hljs-string">web-1</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>            <span class="hljs-number">0</span>          <span class="hljs-string">12m</span><br><span class="hljs-string">web-2</span>   <span class="hljs-number">0</span><span class="hljs-string">/1</span>     <span class="hljs-string">ImagePullBackOff</span>   <span class="hljs-number">0</span>          <span class="hljs-string">44s</span><br><span class="hljs-string">下面我们将镜像改成之前的nginx:1.17，看看会不会恢复</span><br><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">OrderedReady</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.17</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl get pod </span><br><span class="hljs-string">NAME</span>    <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>         <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">web-0</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>        <span class="hljs-number">0</span>          <span class="hljs-string">15m</span><br><span class="hljs-string">web-1</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>        <span class="hljs-number">0</span>          <span class="hljs-string">14m</span><br><span class="hljs-string">web-2</span>   <span class="hljs-number">0</span><span class="hljs-string">/1</span>     <span class="hljs-string">ErrImagePull</span>   <span class="hljs-number">0</span>          <span class="hljs-string">2m52s</span><br>[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl delete pod web-2 </span><br><span class="hljs-string">pod</span> <span class="hljs-string">&quot;web-2&quot;</span> <span class="hljs-string">deleted</span><br>[<span class="hljs-string">root@VM-4-3-centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl get pod </span><br><span class="hljs-string">NAME</span>    <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">web-0</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">14s</span><br><span class="hljs-string">web-1</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">33s</span><br><span class="hljs-string">web-2</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">45s</span><br></code></pre></td></tr></table></figure><p>从上面的结果可以看出，我们不删除web-2这个更新异常的pod，所以的pod都不会更新的，只有删除了web-2这个更新失败的pod，sts才会进行正常更新。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/#deployment-and-scaling-guarantees">https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/#deployment-and-scaling-guarantees</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes强制删除Terminating的ns</title>
    <link href="/2020/10/14/2020-10-15-Force-delete-Terminating-ns/"/>
    <url>/2020/10/14/2020-10-15-Force-delete-Terminating-ns/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了在使用k8s的过程中Terminating的ns无法删除，如何强制删除Terminating的ns。</p><h2 id="kubectl-get-ns-查看处于Terminating的ns"><a href="#kubectl-get-ns-查看处于Terminating的ns" class="headerlink" title="kubectl get ns 查看处于Terminating的ns"></a>kubectl get ns 查看处于Terminating的ns</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_1_4_centos</span> ~]<span class="hljs-meta"># kubectl get ns | grep testns</span><br>testns                   Terminating   <span class="hljs-number">21</span>d<br></code></pre></td></tr></table></figure><h2 id="将处于Terminating的ns的描述文件保存下来"><a href="#将处于Terminating的ns的描述文件保存下来" class="headerlink" title="将处于Terminating的ns的描述文件保存下来"></a>将处于Terminating的ns的描述文件保存下来</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_1_4_centos</span> ~]<span class="hljs-meta"># kubectl get ns testns -o json &gt; tmp.json</span><br>[root<span class="hljs-symbol">@VM_1_4_centos</span> ~]<span class="hljs-meta"># cat tmp.json </span><br>&#123;<br>    <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Namespace&quot;</span>,<br>    <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;creationTimestamp&quot;</span>: <span class="hljs-string">&quot;2020-10-13T14:28:07Z&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;testns&quot;</span>,<br>        <span class="hljs-string">&quot;resourceVersion&quot;</span>: <span class="hljs-string">&quot;13782744400&quot;</span>,<br>        <span class="hljs-string">&quot;selfLink&quot;</span>: <span class="hljs-string">&quot;/api/v1/namespaces/testns&quot;</span>,<br>        <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;9ff63d71-a4a1-43bc-89e3-78bf29788844&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;spec&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;finalizers&quot;</span>: [<br>            <span class="hljs-string">&quot;kubernetes&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;phase&quot;</span>: <span class="hljs-string">&quot;Terminating&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="本地启动kube-proxy"><a href="#本地启动kube-proxy" class="headerlink" title="本地启动kube proxy"></a>本地启动kube proxy</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl<span class="hljs-built_in"> proxy </span><span class="hljs-attribute">--port</span>=8081<br></code></pre></td></tr></table></figure><h2 id="新开窗口执行删除操作"><a href="#新开窗口执行删除操作" class="headerlink" title="新开窗口执行删除操作"></a>新开窗口执行删除操作</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -k -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -X PUT --data-binary @tmp.json http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>testns/finalize<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crictl调试Kubernetes节点</title>
    <link href="/2020/10/13/2020-10-13-crictl-debug-Kubernetes-node/"/>
    <url>/2020/10/13/2020-10-13-crictl-debug-Kubernetes-node/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了TKE中使用containerd模式的集群常用的crictl命令</p><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>crictl需要一个具有CRI运行时的Linux操作系统，直接在TKE中创建containerd模式的集群既可。</p><h1 id="安装crictl"><a href="#安装crictl" class="headerlink" title="安装crictl"></a>安装crictl</h1><p>你可以从critools发布页面下载一个压缩的存档crictl，用于几种不同的体系构架。下载与Kubernetes版本对应的版本。解压并将其移动到系统路径上的一个位置，例如&#x2F;usr&#x2F;local&#x2F;bin&#x2F;。</p><h1 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h1><p>crictl命令有几个子命令和运行时选项。有关详细信息，请使用crictl help或crictl <subcommand> help。</p><p>crictl默认连接到 unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;dockershim.sock。对于其它运行时，你可以通过多种方式设置端点:</p><ul><li>设置 –runtime-endpoint 和–image-endpoint选项。</li><li>设置 CONTAINER_RUNTIME_ENDPOINT 和IMAGE_SERVICE_ENDPOINT环境变量。</li><li>在配置文件 –config&#x3D;&#x2F;etc&#x2F;crictl.yaml设置端点。</li></ul><p>还可以在连接到服务器时指定超时值，并启用或禁用调试，方法是在配置文件中指定 timeout 和debug 值，或者使用–timeout和–debug命令行选项。<br>要查看或编辑当前配置，请查看或编辑&#x2F;etc&#x2F;crictl.yaml的内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>crictl.yamlruntime-endpoint: unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/dockershim.sockimage-endpoint: unix:/</span><span class="hljs-regexp">//</span>var<span class="hljs-regexp">/run/</span>dockershim.socktimeout: <span class="hljs-number">10</span>debug: true<br></code></pre></td></tr></table></figure><h1 id="crictl命令示例"><a href="#crictl命令示例" class="headerlink" title="crictl命令示例"></a>crictl命令示例</h1><p>下面的示例显示了crictl命令和示例输出。</p><p><strong>警告</strong>：如果你使用crictl在运行的Kubernetes集群上创建pod沙箱或容器，Kubelet最终将删除它们。crictl不是一个通用的工作流工具，而是一个对调试有用的工具。</p><h1 id="获取pod列表"><a href="#获取pod列表" class="headerlink" title="获取pod列表"></a>获取pod列表</h1><p>获取所有pod列表：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># crictl pods</span><br><span class="hljs-attribute">POD</span> ID              CREATED              STATE               NAME                         NAMESPACE           ATTEMPT<br><span class="hljs-attribute">926f1b5a1d33a</span>       About a minute ago   Ready               sh-<span class="hljs-number">84</span>d7dcf559-<span class="hljs-number">4</span>r2gq          default             <span class="hljs-number">0</span><br><span class="hljs-attribute">4dccb216c4adb</span>       About a minute ago   Ready               nginx-<span class="hljs-number">65899</span>c769f-wv2gp       default             <span class="hljs-number">0</span><br><span class="hljs-attribute">a86316e96fa89</span>       <span class="hljs-number">17</span> hours ago         Ready               kube-proxy-gblk4             kube-system         <span class="hljs-number">0</span><br><span class="hljs-attribute">919630b8f81f1</span>       <span class="hljs-number">17</span> hours ago         Ready               nvidia-device-plugin-zgbbv   kube-system         <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>根据名称获取pod列表：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl pods --name nginx<span class="hljs-number">-65899</span><span class="hljs-keyword">c</span><span class="hljs-number">769</span>f-wv<span class="hljs-number">2</span>gp<br><br>POD ID              CREATED             STATE               NAME                     NAMESPACE           ATTEMPT<br><span class="hljs-number">4</span>dccb<span class="hljs-number">216</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>adb       <span class="hljs-number">2</span> minutes ago       Ready               nginx<span class="hljs-number">-65899</span><span class="hljs-keyword">c</span><span class="hljs-number">769</span>f-wv<span class="hljs-number">2</span>gp   <span class="hljs-keyword">default</span>             <span class="hljs-number">0</span><br><br>根据标签获取pod列表：<br>crictl pods --label run<span class="hljs-operator">=</span>nginx<br><br>POD ID              CREATED             STATE               NAME                     NAMESPACE           ATTEMPT<br><span class="hljs-number">4</span>dccb<span class="hljs-number">216</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>adb       <span class="hljs-number">2</span> minutes ago       Ready               nginx<span class="hljs-number">-65899</span><span class="hljs-keyword">c</span><span class="hljs-number">769</span>f-wv<span class="hljs-number">2</span>gp   <span class="hljs-keyword">default</span>             <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="获取镜像列表"><a href="#获取镜像列表" class="headerlink" title="获取镜像列表"></a>获取镜像列表</h1><p>获取所有镜像列表：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">crictl images<br><br>IMAGE                                     <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            SIZE<br>busybox                                   latest              <span class="hljs-number">8</span>c811b4aec35f       <span class="hljs-number">1.15M</span>B<br>k8s-gcrio.azureedge.net/hyperkube-amd64   v1.<span class="hljs-number">10.3</span>             e179bbfe5d238       <span class="hljs-number">665M</span>B<br>k8s-gcrio.azureedge.net/pause-amd64       <span class="hljs-number">3.1</span>                 da86e6ba6ca19       <span class="hljs-number">742</span>kB<br>nginx                                     latest              cd5239a0906a6       <span class="hljs-number">109M</span>B<br>输出类似如下：<br>IMAGE                                     <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            SIZEbusybox                                   latest              <span class="hljs-number">8</span>c811b4aec35f       <span class="hljs-number">1.15M</span>Bk8s-gcrio.azureedge.net/hyperkube-amd64   v1.<span class="hljs-number">10.3</span>             e179bbfe5d238       <span class="hljs-number">665M</span>Bk8s-gcrio.azureedge.net/pause-amd64       <span class="hljs-number">3.1</span>                 da86e6ba6ca19       <span class="hljs-number">742</span>kBnginx                                     latest              cd5239a0906a6       <span class="hljs-number">109M</span>B<br></code></pre></td></tr></table></figure><p>根据仓库获取镜像列表：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">crictl images nginx<br><br>IMAGE               <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            SIZE<br>nginx               latest              cd5239a0906a6       <span class="hljs-number">109M</span>B<br>输出类似如下：<br>IMAGE               <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            SIZEnginx               latest              cd5239a0906a6       <span class="hljs-number">109M</span>B<br></code></pre></td></tr></table></figure><p>只列出镜像ID：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl images -q<br><br>sha<span class="hljs-number">256</span>:<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">811</span>b<span class="hljs-number">4</span>aec<span class="hljs-number">35</span>f<span class="hljs-number">259572</span>d<span class="hljs-number">0</span>f<span class="hljs-number">79207</span>bc<span class="hljs-number">0678</span>df<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">736</span>eeec<span class="hljs-number">50</span>bc<span class="hljs-number">9</span>fec<span class="hljs-number">37</span>ed<span class="hljs-number">936</span>a<span class="hljs-number">472</span>a<br>sha<span class="hljs-number">256</span>:e<span class="hljs-number">179</span>bbfe<span class="hljs-number">5</span>d<span class="hljs-number">238</span>de<span class="hljs-number">6069</span>f<span class="hljs-number">3</span>b<span class="hljs-number">03</span>fccbecc<span class="hljs-number">3</span>fb<span class="hljs-number">4</span>f<span class="hljs-number">2019</span>af<span class="hljs-number">741</span>bfff<span class="hljs-number">1233</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>d<span class="hljs-number">7</span>b<span class="hljs-number">2970</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span><br>sha<span class="hljs-number">256</span>:da<span class="hljs-number">86e6</span>ba<span class="hljs-number">6</span>ca<span class="hljs-number">197</span>bf<span class="hljs-number">6</span>bc<span class="hljs-number">5e9</span>d<span class="hljs-number">900</span>febd<span class="hljs-number">906</span>b<span class="hljs-number">133</span>eaa<span class="hljs-number">4750e6</span>bed<span class="hljs-number">647</span>b<span class="hljs-number">0</span>fbe<span class="hljs-number">50</span>ed<span class="hljs-number">43</span>e<br>sha<span class="hljs-number">256</span>:cd<span class="hljs-number">5239</span>a<span class="hljs-number">0906</span>a<span class="hljs-number">6</span>ccf<span class="hljs-number">0562354852</span>fae<span class="hljs-number">04</span>bc<span class="hljs-number">5</span>b<span class="hljs-number">52</span>d<span class="hljs-number">72</span>a<span class="hljs-number">2</span>aff<span class="hljs-number">9</span>a<span class="hljs-number">871</span>ddb<span class="hljs-number">6</span>bd<span class="hljs-number">57553569</span><br>输出类似如下：<br>sha<span class="hljs-number">256</span>:<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">811</span>b<span class="hljs-number">4</span>aec<span class="hljs-number">35</span>f<span class="hljs-number">259572</span>d<span class="hljs-number">0</span>f<span class="hljs-number">79207</span>bc<span class="hljs-number">0678</span>df<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">736</span>eeec<span class="hljs-number">50</span>bc<span class="hljs-number">9</span>fec<span class="hljs-number">37</span>ed<span class="hljs-number">936</span>a<span class="hljs-number">472</span>asha<span class="hljs-number">256</span>:e<span class="hljs-number">179</span>bbfe<span class="hljs-number">5</span>d<span class="hljs-number">238</span>de<span class="hljs-number">6069</span>f<span class="hljs-number">3</span>b<span class="hljs-number">03</span>fccbecc<span class="hljs-number">3</span>fb<span class="hljs-number">4</span>f<span class="hljs-number">2019</span>af<span class="hljs-number">741</span>bfff<span class="hljs-number">1233</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>d<span class="hljs-number">7</span>b<span class="hljs-number">2970</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>sha<span class="hljs-number">256</span>:da<span class="hljs-number">86e6</span>ba<span class="hljs-number">6</span>ca<span class="hljs-number">197</span>bf<span class="hljs-number">6</span>bc<span class="hljs-number">5e9</span>d<span class="hljs-number">900</span>febd<span class="hljs-number">906</span>b<span class="hljs-number">133</span>eaa<span class="hljs-number">4750e6</span>bed<span class="hljs-number">647</span>b<span class="hljs-number">0</span>fbe<span class="hljs-number">50</span>ed<span class="hljs-number">43</span>esha<span class="hljs-number">256</span>:cd<span class="hljs-number">5239</span>a<span class="hljs-number">0906</span>a<span class="hljs-number">6</span>ccf<span class="hljs-number">0562354852</span>fae<span class="hljs-number">04</span>bc<span class="hljs-number">5</span>b<span class="hljs-number">52</span>d<span class="hljs-number">72</span>a<span class="hljs-number">2</span>aff<span class="hljs-number">9</span>a<span class="hljs-number">871</span>ddb<span class="hljs-number">6</span>bd<span class="hljs-number">57553569</span><br></code></pre></td></tr></table></figure><h1 id="获取容器列表"><a href="#获取容器列表" class="headerlink" title="获取容器列表"></a>获取容器列表</h1><p>获取所有容器列表：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl ps -a<br><br>CONTAINER ID        IMAGE                                                                                                             CREATED             STATE               NAME                       ATTEMPT<br><span class="hljs-number">1</span>f<span class="hljs-number">73</span>f<span class="hljs-number">2</span>d<span class="hljs-number">81</span>bf<span class="hljs-number">98</span>       busybox<span class="hljs-title">@sha256</span>:<span class="hljs-number">141</span><span class="hljs-keyword">c</span><span class="hljs-number">253</span>bc<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>fd<span class="hljs-number">0</span>a<span class="hljs-number">201</span>d<span class="hljs-number">32</span>dc<span class="hljs-number">1</span>f<span class="hljs-number">493</span>bcf<span class="hljs-number">3</span>fff<span class="hljs-number">003</span>b<span class="hljs-number">6</span>df<span class="hljs-number">416</span>dea<span class="hljs-number">4</span>f<span class="hljs-number">41046e0</span>f<span class="hljs-number">37</span>d<span class="hljs-number">47</span>                                   <span class="hljs-number">7</span> minutes ago       Running             sh                         <span class="hljs-number">1</span><br><span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">5951</span>df<span class="hljs-number">22</span><span class="hljs-keyword">c</span><span class="hljs-number">78</span>       busybox<span class="hljs-title">@sha256</span>:<span class="hljs-number">141</span><span class="hljs-keyword">c</span><span class="hljs-number">253</span>bc<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>fd<span class="hljs-number">0</span>a<span class="hljs-number">201</span>d<span class="hljs-number">32</span>dc<span class="hljs-number">1</span>f<span class="hljs-number">493</span>bcf<span class="hljs-number">3</span>fff<span class="hljs-number">003</span>b<span class="hljs-number">6</span>df<span class="hljs-number">416</span>dea<span class="hljs-number">4</span>f<span class="hljs-number">41046e0</span>f<span class="hljs-number">37</span>d<span class="hljs-number">47</span>                                   <span class="hljs-number">8</span> minutes ago       Exited              sh                         <span class="hljs-number">0</span><br><span class="hljs-number">87</span>d<span class="hljs-number">3992</span>f<span class="hljs-number">84</span>f<span class="hljs-number">74</span>       nginx<span class="hljs-title">@sha256</span>:d<span class="hljs-number">0</span>a<span class="hljs-number">8828</span>cccb<span class="hljs-number">73397</span>acb<span class="hljs-number">0073</span>bf<span class="hljs-number">34</span>f<span class="hljs-number">4</span>d<span class="hljs-number">7</span>d<span class="hljs-number">8</span>aa<span class="hljs-number">315263</span>f<span class="hljs-number">1e7806</span>bf<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">55</span>d<span class="hljs-number">8</span>ac<span class="hljs-number">139</span>d<span class="hljs-number">5</span>f                                     <span class="hljs-number">8</span> minutes ago       Running             nginx                      <span class="hljs-number">0</span><br><span class="hljs-number">1941</span>fb<span class="hljs-number">4</span>da<span class="hljs-number">154</span>f       k<span class="hljs-number">8</span>s-gcrio.azureedge.net/hyperkube-amd<span class="hljs-number">64</span><span class="hljs-title">@sha256</span>:<span class="hljs-number">00</span>d<span class="hljs-number">814</span>b<span class="hljs-number">1</span>f<span class="hljs-number">7763</span>f<span class="hljs-number">4</span>ab<span class="hljs-number">5</span>be<span class="hljs-number">80</span><span class="hljs-keyword">c</span><span class="hljs-number">58e98140</span>dfc<span class="hljs-number">69</span>df<span class="hljs-number">107</span>f<span class="hljs-number">253</span>d<span class="hljs-number">7</span>fdd<span class="hljs-number">714</span>b<span class="hljs-number">30</span>a<span class="hljs-number">714260</span>a   <span class="hljs-number">18</span> hours ago        Running   <br></code></pre></td></tr></table></figure><p>在运行的容器中执行命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">crictl <span class="hljs-keyword">exec</span> -i -t <span class="hljs-number">1</span>f73f2d81bf98 ls<br><br>bin   dev   etc   home  <span class="hljs-keyword">proc</span><span class="hljs-title">  root</span> <span class="hljs-title"> sys</span> <span class="hljs-title">  tmp</span> <span class="hljs-title">  usr</span> <span class="hljs-title">  var</span><br>输出类似如下：<span class="hljs-title"></span><br><span class="hljs-title">bin</span> <span class="hljs-title">  dev</span> <span class="hljs-title">  etc</span> <span class="hljs-title">  home</span> <span class="hljs-title"> proc</span> <span class="hljs-title"> root</span> <span class="hljs-title"> sys</span> <span class="hljs-title">  tmp</span> <span class="hljs-title">  usr</span> <span class="hljs-title">  var</span><br></code></pre></td></tr></table></figure><h1 id="输出容器日志"><a href="#输出容器日志" class="headerlink" title="输出容器日志"></a>输出容器日志</h1><p>获取所有容器日志：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">crictl logs 87d3992f84f74<br>输出类似如下：<br><span class="hljs-number">10.240.0.96</span> - - <span class="hljs-string">[06/Jun/2018:02:45:49 +0000]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">612</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.47.0&quot;</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-number">10</span>.<span class="hljs-number">240</span>.<span class="hljs-number">0</span>.<span class="hljs-number">96</span> - - <span class="hljs-string">[06/Jun/2018:02:45:50 +0000]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">612</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.47.0&quot;</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-number">10</span>.<span class="hljs-number">240</span>.<span class="hljs-number">0</span>.<span class="hljs-number">96</span> - - <span class="hljs-string">[06/Jun/2018:02:45:51 +0000]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">612</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.47.0&quot;</span> <span class="hljs-string">&quot;-&quot;</span><br></code></pre></td></tr></table></figure><p>只获取最近的N行日志：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">crictl logs --tail=<span class="hljs-number">1</span> 87d3992f84f74<br>输出类似如下：<br><span class="hljs-number">10.240.0.96</span> - - <span class="hljs-string">[06/Jun/2018:02:45:51 +0000]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">612</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.47.0&quot;</span> <span class="hljs-string">&quot;-&quot;</span><br></code></pre></td></tr></table></figure><h1 id="运行pod沙箱"><a href="#运行pod沙箱" class="headerlink" title="运行pod沙箱"></a>运行pod沙箱</h1><p>使用crictl运行pod沙箱对于调试容器运行时非常有用。在运行的Kubernetes集群上，沙箱最终将被Kubelet停止和删除。</p><p>创建一个如下内容的JSON文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>      <span class="hljs-attr">&quot;metadata&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nginx-sandbox&quot;</span><span class="hljs-punctuation">,</span>          <span class="hljs-attr">&quot;namespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span>          <span class="hljs-attr">&quot;attempt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>          <span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hdishd83djaidwnduwk28bcsb&quot;</span>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>      <span class="hljs-attr">&quot;logDirectory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/tmp&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-attr">&quot;linux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>      <span class="hljs-punctuation">&#125;</span>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用crictl runp命令应用JSON并运行沙箱。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">crictl runp pod-config.json<br></code></pre></td></tr></table></figure><p>返回了沙箱ID。</p><h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><p>使用crictl创建容器对于调试容器运行时非常有用。在运行的Kubernetes集群上，沙箱最终将被Kubelet停止和删除。</p><p>拉取沙箱镜像：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl pull busybox  Image is up <span class="hljs-keyword">to</span> date for busybox<span class="hljs-title">@sha256</span>:<span class="hljs-number">141</span><span class="hljs-keyword">c</span><span class="hljs-number">253</span>bc<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>fd<span class="hljs-number">0</span>a<span class="hljs-number">201</span>d<span class="hljs-number">32</span>dc<span class="hljs-number">1</span>f<span class="hljs-number">493</span>bcf<span class="hljs-number">3</span>fff<span class="hljs-number">003</span>b<span class="hljs-number">6</span>df<span class="hljs-number">416</span>dea<span class="hljs-number">4</span>f<span class="hljs-number">41046e0</span>f<span class="hljs-number">37</span>d<span class="hljs-number">47</span><br></code></pre></td></tr></table></figure><p>为pod和容器创建配置:</p><p>pod配置:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">  &#123;      <span class="hljs-string">&quot;metadata&quot;</span>: &#123;          <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;nginx-sandbox&quot;</span>,          <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,          <span class="hljs-string">&quot;attempt&quot;</span>: <span class="hljs-number">1</span>,          <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;hdishd83djaidwnduwk28bcsb&quot;</span>      &#125;,      <span class="hljs-string">&quot;log_directory&quot;</span>: <span class="hljs-string">&quot;/tmp&quot;</span>,      <span class="hljs-string">&quot;linux&quot;</span>: &#123;      &#125;  &#125;<br>容器配置：<br>  &#123;    <span class="hljs-string">&quot;metadata&quot;</span>: &#123;        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;busybox&quot;</span>    &#125;,    <span class="hljs-string">&quot;image&quot;</span>:&#123;        <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;busybox&quot;</span>    &#125;,    <span class="hljs-string">&quot;command&quot;</span>: [        <span class="hljs-string">&quot;top&quot;</span>    ],    <span class="hljs-string">&quot;log_path&quot;</span>:<span class="hljs-string">&quot;busybox/0.log&quot;</span>,    <span class="hljs-string">&quot;linux&quot;</span>: &#123;    &#125;  &#125;<br></code></pre></td></tr></table></figure><p>传递前面创建的pod、容器配置文件和pod配置文件的ID来创建容器。随即返回了容器的ID。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl create f<span class="hljs-number">84</span>dd<span class="hljs-number">361</span>f<span class="hljs-number">8</span>dc<span class="hljs-number">51518</span>ed<span class="hljs-number">291</span>fbadd<span class="hljs-number">6</span>db<span class="hljs-number">537</span>b<span class="hljs-number">0496536</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<span class="hljs-number">2</span>d<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">05</span>ff<span class="hljs-number">943</span>ce<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>a<span class="hljs-number">54</span>f container-config.json pod-config.json<br></code></pre></td></tr></table></figure><p>列出所有容器，并验证新创建的容器是否将其状态设置为Created。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"> crictl ps -<span class="hljs-keyword">a</span><br>输出类似如下：<br>  CONTAINER ID        IMAGE               CREATED             STATE               NAME                ATTEMPT  <span class="hljs-number">3e025</span>dd50a72d       busybox             <span class="hljs-number">32</span> <span class="hljs-built_in">seconds</span> ago      Created             busybox             <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>启动容器</p><p>要启动容器，请将其ID传递给 crictl start：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl start <span class="hljs-number">3e025</span>dd<span class="hljs-number">50</span>a<span class="hljs-number">72</span>d<span class="hljs-number">956</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>f<span class="hljs-number">14881</span>fbb<span class="hljs-number">5</span>b<span class="hljs-number">1080</span><span class="hljs-keyword">c</span><span class="hljs-number">9275674e95</span>fb<span class="hljs-number">67</span>f<span class="hljs-number">965</span>f<span class="hljs-number">6478</span>a<span class="hljs-number">957</span>d<span class="hljs-number">60</span><br>输出类似如下：<br><span class="hljs-number">3e025</span>dd<span class="hljs-number">50</span>a<span class="hljs-number">72</span>d<span class="hljs-number">956</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>f<span class="hljs-number">14881</span>fbb<span class="hljs-number">5</span>b<span class="hljs-number">1080</span><span class="hljs-keyword">c</span><span class="hljs-number">9275674e95</span>fb<span class="hljs-number">67</span>f<span class="hljs-number">965</span>f<span class="hljs-number">6478</span>a<span class="hljs-number">957</span>d<span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>检查容器是否将其状态设置为Running。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">crictl ps<br><br>CONTAINER ID        IMAGE               CREATED              STATE               NAME                ATTEMPT<br><span class="hljs-number">3</span>e025dd50a72d       <span class="hljs-keyword">busybox </span>            About a minute ago   Running             <span class="hljs-keyword">busybox </span>            <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>crictl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建docker私有镜像仓库</title>
    <link href="/2020/10/12/2020-10-12-Build-a-Docker-private-repository/"/>
    <url>/2020/10/12/2020-10-12-Build-a-Docker-private-repository/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何搭建docker私有镜像仓库。</p><h2 id="服务端下载镜像registry"><a href="#服务端下载镜像registry" class="headerlink" title="服务端下载镜像registry"></a>服务端下载镜像registry</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull registry</span><br></code></pre></td></tr></table></figure><h2 id="生成登录的用户名和密码"><a href="#生成登录的用户名和密码" class="headerlink" title="生成登录的用户名和密码"></a>生成登录的用户名和密码</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/</span>docker-registry/auth<br>docker run --entrypoint htpasswd docker.io<span class="hljs-regexp">/registry:latest -Bbn nwx 000000  &gt;&gt; /</span>data<span class="hljs-regexp">/docker-registry/</span>auth/htpasswd  <br></code></pre></td></tr></table></figure><h2 id="节设置配置文件，启用删除镜像功能"><a href="#节设置配置文件，启用删除镜像功能" class="headerlink" title="节设置配置文件，启用删除镜像功能"></a>节设置配置文件，启用删除镜像功能</h2><p>也可以不启用，看业务需要，修改 storage - delete - enable 为 false 即可</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts">mkdir -p <span class="hljs-keyword">/data/</span>docker-registry/config<br>vim  <span class="hljs-keyword">/data/</span>docker-registry<span class="hljs-keyword">/config/</span>config.yml<br><span class="hljs-symbol">version:</span> <span class="hljs-number">0.1</span><br><span class="hljs-symbol">log:</span><br><span class="hljs-symbol">  fields:</span><br><span class="hljs-symbol">    service:</span> registry<br><span class="hljs-symbol">storage:</span><br><span class="hljs-symbol">  delete:</span><br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">  cache:</span><br><span class="hljs-symbol">    blobdescriptor:</span> inmemory<br><span class="hljs-symbol">  filesystem:</span><br><span class="hljs-symbol">    rootdirectory:</span> <span class="hljs-keyword">/var/</span>lib/registry<br><span class="hljs-symbol">http:</span><br><span class="hljs-symbol">  addr:</span> :<span class="hljs-number">5000</span><br><span class="hljs-symbol">  headers:</span><br>    X-Content-Type-Options: [nosniff]<br><span class="hljs-symbol">health:</span><br><span class="hljs-symbol">  storagedriver:</span><br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">    interval:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">threshold:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="启动registry镜像服务"><a href="#启动registry镜像服务" class="headerlink" title="启动registry镜像服务"></a>启动registry镜像服务</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> --restart=always  --name=registry\<br>  -v <span class="hljs-regexp">/data/</span>docker-registry<span class="hljs-regexp">/auth/</span>:<span class="hljs-regexp">/auth/</span> \<br>  -e <span class="hljs-string">&quot;REGISTRY_AUTH=htpasswd&quot;</span> \<br>  -e <span class="hljs-string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> \<br>  -e REGISTRY_AUTH_HTPASSWD_PATH=<span class="hljs-regexp">/auth/</span>htpasswd \<br>  -v <span class="hljs-regexp">/data/</span>docker-registry<span class="hljs-regexp">/:/</span>var<span class="hljs-regexp">/lib/</span>registry/ \<br>docker.io/registry:latest<br></code></pre></td></tr></table></figure><h2 id="开启节点的http形式访问私有仓库"><a href="#开启节点的http形式访问私有仓库" class="headerlink" title="开启节点的http形式访问私有仓库"></a>开启节点的http形式访问私有仓库</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>&#123;<br>    <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>    <span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;55.18.67.171:5000&quot;</span>]<br>&#125;<br><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="上传和下载镜像到私有仓库"><a href="#上传和下载镜像到私有仓库" class="headerlink" title="上传和下载镜像到私有仓库"></a>上传和下载镜像到私有仓库</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker pull docker.io/hello-world<br>docker tag docker.io<span class="hljs-regexp">/hello-world:latest 106.54.126.251:5000/</span>hello-word:latest<br>docker login <span class="hljs-number">106.54</span>.<span class="hljs-number">126.251</span>:<span class="hljs-number">5000</span> -u nwx -p <span class="hljs-number">000000</span><br>docker push <span class="hljs-number">106.54</span>.<span class="hljs-number">126.251</span>:<span class="hljs-number">5000</span>/hello-word:latest<br>curl -u nwx:<span class="hljs-number">000000</span>  http:<span class="hljs-regexp">//</span><span class="hljs-number">106.54</span>.<span class="hljs-number">126.251</span>:<span class="hljs-number">5000</span><span class="hljs-regexp">/v2/</span>_catalog<br>curl -u nwx:<span class="hljs-number">000000</span>  http:<span class="hljs-regexp">//</span><span class="hljs-number">106.54</span>.<span class="hljs-number">126.251</span>:<span class="hljs-number">5000</span><span class="hljs-regexp">/v2/</span>sprintboot<span class="hljs-regexp">/tags/</span>list<br></code></pre></td></tr></table></figure><h2 id="k8s创建拉取镜像秘钥"><a href="#k8s创建拉取镜像秘钥" class="headerlink" title="k8s创建拉取镜像秘钥"></a>k8s创建拉取镜像秘钥</h2><p>默认default命名空间使用的secret</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create<span class="hljs-built_in"> secret </span>docker-registry 10.10.10.149  <span class="hljs-attribute">--docker-server</span>=55.18.67.171:5000 <span class="hljs-attribute">--docker-username</span>=hy <span class="hljs-attribute">--docker-password</span>=000000 <span class="hljs-attribute">--docker-email</span>=niewx@ruyi.ai<br></code></pre></td></tr></table></figure><p>hy-uat命名空间使用的secret</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create<span class="hljs-built_in"> secret </span>docker-registry 10.10.10.149  <span class="hljs-attribute">--docker-server</span>=55.18.67.171:5000 –<span class="hljs-attribute">namespace</span>=hy-uat <span class="hljs-attribute">--docker-username</span>=hy <span class="hljs-attribute">--docker-password</span>=000000 <span class="hljs-attribute">--docker-email</span>=niewx@ruyi.ai<br></code></pre></td></tr></table></figure><h2 id="列出所有镜像"><a href="#列出所有镜像" class="headerlink" title="列出所有镜像"></a>列出所有镜像</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -u hy:<span class="hljs-number">000000</span>  http:<span class="hljs-regexp">//</span><span class="hljs-number">55.18</span>.<span class="hljs-number">67.171</span>:<span class="hljs-number">5000</span><span class="hljs-regexp">/v2/</span>_catalog<br></code></pre></td></tr></table></figure><h2 id="列出busybox镜像有哪些tag"><a href="#列出busybox镜像有哪些tag" class="headerlink" title="列出busybox镜像有哪些tag"></a>列出busybox镜像有哪些tag</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -u hy:<span class="hljs-number">000000</span>  http:<span class="hljs-regexp">//</span><span class="hljs-number">55.18</span>.<span class="hljs-number">67.171</span>:<span class="hljs-number">5000</span><span class="hljs-regexp">/v2/</span>company-ner<span class="hljs-regexp">/tags/</span>list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s中通过ExternalName访问外部服务</title>
    <link href="/2020/10/10/2020-10-10-Access-to-external-service-copies-through-ExternalName-in-k8s/"/>
    <url>/2020/10/10/2020-10-10-Access-to-external-service-copies-through-ExternalName-in-k8s/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了ExternalName类型的service在k8s中的使用。·</p><h2 id="ExternalName访问外部服务"><a href="#ExternalName访问外部服务" class="headerlink" title="ExternalName访问外部服务"></a>ExternalName访问外部服务</h2><p>其实我们很多服务都是在在aws上，比如mysql和redis等数据库服务，如果我们代码中想要访问这些服务，那应该怎么访问，我们的代码服务是运行在pod中的，也就是相当于我们的k8s集群中的pod需要访问aws上的mysql或者redis等服务。<br>其实我们只需要提供一个ExternalName的servcie对外部服务进行映射就可以了，我们创建好这样service，然后通过service name就能直接访问到aws上提供的mysql服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-5-7-01-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ExternalName</span><br>  <span class="hljs-attr">externalName:</span> <span class="hljs-string">ai-production-mysql-bot.cfyipcsxzevb.rds.cn-northwest-1.amazonaws.com.cn</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>我们可以通过mysql-5-7-01-service这样一个servcie来访问aws的mysql数据库</p><h2 id="Endpoint访问外部服务"><a href="#Endpoint访问外部服务" class="headerlink" title="Endpoint访问外部服务"></a>Endpoint访问外部服务</h2><p>ExternalName只在kubedns中能够解析，在coredns中无法解析，如果集群中采用的coredns，则需要修改成endpoint的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-2-4-0-01-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-2-4-0-01-service</span><br><span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">10.42</span><span class="hljs-number">.94</span><span class="hljs-number">.157</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/Juwenzhe_HEBUT/article/details/89577459">https://blog.csdn.net/Juwenzhe_HEBUT/article/details/89577459</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DockerFile学习</title>
    <link href="/2020/09/23/2020-09-23-DockerFile-learning/"/>
    <url>/2020/09/23/2020-09-23-DockerFile-learning/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了Dockerfile常用的指令使用。</p><h1 id="DockerFile的例子"><a href="#DockerFile的例子" class="headerlink" title="DockerFile的例子"></a>DockerFile的例子</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">MAINTAINER</span> nobody <span class="hljs-string">&quot;xx@qq.com&quot;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /opt/jdk/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /opt/tomcat/</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> jdk1.7.0_79 /opt/jdk/</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> tomcat  /opt/tomcat/</span><br><span class="hljs-keyword">ENV</span> CATALINA_HOME /opt/tomcat<br><span class="hljs-keyword">ENV</span> JAVA_HOME /opt/jdk<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /opt/tomcat/data</span><br><span class="hljs-keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin<br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/opt/tomcat/bin/catalina.sh&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><h1 id="DockerFile的语法解析"><a href="#DockerFile的语法解析" class="headerlink" title="DockerFile的语法解析"></a>DockerFile的语法解析</h1><p>Dockerfile的基本指令有十三个，分别是：FROM、MAINTAINER、RUN、CMD、EXPOSE、ENV、ADD、COPY、ENTRYPOINT、VOLUME、USER、WORKDIR、ONBUILD。下面对这些指令的用法一一说明。</p><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>用法：FROM &lt;image&gt;<br>说明：第一个指令必须是FROM了，其指定一个构建镜像的基础源镜像，如果本地没有就会从公共库中拉取，没有指定镜像的标签会使用默认的latest标签，可以出现多次，如果需要在一个Dockerfile中构建多个镜像。</p><h2 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h2><p>　　用法：MAINTAINER &lt;name&gt; &lt;email&gt;<br>说明：描述镜像的创建者，名称和邮箱</p><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>　　用法：RUN “command” “param1” “param2”<br>说明：RUN命令是一个常用的命令，RUN命令可以执行多次，执行完成之后会成为一个新的镜像，这里也是指镜像的分层构建。一句RUN就是一层，也相当于一个版本。这就是之前说的缓存的原理。我们知道docker是镜像层是只读的，所以你如果第一句安装了软件，用完在后面一句删除是不可能的。所以这种情况要在一句RUN命令中完成，可以通过&amp;符号连接多个RUN语句。RUN后面的必须是双引号不能是单引号（没引号貌似也不要紧），command是不会调用shell的，所以也不会继承相应变量，要查看输入RUN “sh” “-c” “echo” “$HOME”，而不是RUN “echo” “$HOME”。</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>　　用法：CMD command param1 param2<br>说明：CMD在Dockerfile中只能出现一次，有多个，只有最后一个会有效。其作用是在启动容器的时候提供一个默认的命令项。如果用户执行docker run的时候提供了命令项，就会覆盖掉这个命令。没提供就会使用构建时的命令。</p><h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p>　　用法：EXPOSE &lt;port&gt; [&lt;port&gt;…]<br>说明：告诉Docker服务器容器对外映射的容器端口号，在docker run -p的时候生效。</p><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>用法：EVN &lt;key&gt; &lt;value&gt; 只能设置一个<br>　　　　  EVN &lt;key&gt;&#x3D;&lt;value&gt;允许一次设置多个<br>说明：设置容器的环境变量，可以让其后面的RUN命令使用，容器运行的时候这个变量也会保留。</p><h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>　　用法：ADD &lt;src&gt;   &lt;dest&gt;<br>说明：复制本机文件或目录或远程文件，添加到指定的容器目录，支持GO的正则模糊匹配。路径是绝对路径，不存在会自动创建。如果源是一个目录，只会复制目录下的内容，目录本身不会复制。ADD命令会将复制的压缩文件夹自动解压，这也是与COPY命令最大的不同。</p><h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><p>　　用法：COPY &lt;src&gt; &lt;dest&gt;<br>说明：COPY除了不能自动解压，也不能复制网络文件。其它功能和ADD相同。</p><h2 id="ENTRYPOINT-推荐使用这个作为启动命令"><a href="#ENTRYPOINT-推荐使用这个作为启动命令" class="headerlink" title="ENTRYPOINT(推荐使用这个作为启动命令)"></a>ENTRYPOINT(推荐使用这个作为启动命令)</h2><p>　　用法：ENTRYPOINT “command” “param1” “param2”<br>说明：这个命令和CMD命令一样，唯一的区别是不能被docker run命令的执行命令覆盖，如果要覆盖需要带上选项–entrypoint，如果有多个选项，只有最后一个会生效。</p><h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h2><p>　　用法：VOLUME [“path”]<br>说明：在主机上创建一个挂载，挂载到容器的指定路径。docker run -v命令也能完成这个操作，而且更强大。这个命令不能指定宿主机的需要挂载到容器的文件夹路径。但docker run -v可以，而且其还可以挂载数据容器。</p><h2 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h2><p>　　用法：USER daemon<br>说明：指定运行容器时的用户名或UID，后续的RUN、CMD、ENTRYPOINT也会使用指定的用户运行命令。</p><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>　　用法:WORKDIR path<br>说明：为RUN、CMD、ENTRYPOINT指令配置工作目录。可以使用多个WORKDIR指令，后续参数如果是相对路径，则会基于之前的命令指定的路径。如：WORKDIR  &#x2F;home　　WORKDIR test 。最终的路径就是&#x2F;home&#x2F;test。path路径也可以是环境变量，比如有环境变量HOME&#x3D;&#x2F;home，WORKDIR $HOME&#x2F;test也就是&#x2F;home&#x2F;test。</p><h2 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h2><p>　　用法：ONBUILD [INSTRUCTION]<br>说明：配置当前所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。意思就是，这个镜像创建后，如果其它镜像以这个镜像为基础，会先执行这个镜像的ONBUILD命令。</p><h2 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h2><p>语法：ARG &lt;name&gt;[&#x3D;&lt;default value&gt;]<br>设置变量命令，ARG命令定义了一个变量，在docker build创建镜像的时候，使用 –build-arg &lt;varname&gt;&#x3D;&lt;value&gt;来指定参数<br>如果用户在build镜像时指定了一个参数没有定义在Dockerfile种，那么将有一个Warning</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上关于postStart和preStop使用</title>
    <link href="/2020/09/22/2020-09-22-About-the-use-of-postStart-and-preStop-on-TKE/"/>
    <url>/2020/09/22/2020-09-22-About-the-use-of-postStart-and-preStop-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>Kubernetes 支持 postStart 和 preStop 事件。 当一个容器启动后，Kubernetes 将立即发送 postStart 事件；在容器被终结之前， Kubernetes 将发送一个 preStop 事件。</p><h2 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h2><p>Kubernetes 在容器创建后立即发送 postStart 事件。 然而，postStart 处理函数的调用不保证早于容器的入口点（entrypoint） 的执行。postStart 处理函数与容器的代码是异步执行的，但 Kubernetes 的容器管理逻辑会一直阻塞等待 postStart 处理函数执行完毕。 只有 postStart 处理函数执行完毕，容器的状态才会变成 RUNNING。</p><p>Kubernetes 在容器结束前立即发送 preStop 事件。除非 Pod 宽限期限超时，Kubernetes 的容器管理逻辑 会一直阻塞等待 preStop 处理函数执行完毕。更多的相关细节，可以参阅 Pods 的结束。</p><blockquote><p><strong>Note</strong>: Kubernetes 只有在 Pod 结束（Terminated） 的时候才会发送 preStop 事件， 这意味着在 Pod 完成（Completed） 时 preStop 的事件处理逻辑不会被触发。这个限制在 issue #55087 中被追踪</p></blockquote><p>总结一下就是三条：</p><ul><li>postStart无法保证函数执行才运行pod</li><li>postStop会保证执行完函数后才销毁pod</li><li>preStop只会在pod被Terminated才会被触发</li></ul><h2 id="yaml文件中的字段配置"><a href="#yaml文件中的字段配置" class="headerlink" title="yaml文件中的字段配置"></a>yaml文件中的字段配置</h2><p>lifecycle字段是.spec.containers.lifecycle</p><p>创建资源对象时，可以使用lifecycle来管理容器在运行前和关闭前的一些动作。</p><p>lifecycle有两种回调函数：</p><ul><li>PostStart：容器创建成功后，运行前的任务，用于资源部署、环境准备等。</li><li>PreStop：在容器被终止前的任务，用于优雅关闭应用程序、通知其他系统等等</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lifecycle-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lifecycle-demo-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">lifecycle:</span><br>      <span class="hljs-attr">postStart:</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo Hello from the postStart handler &gt; /usr/share/message&quot;</span>]<br>      <span class="hljs-attr">preStop:</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;nginx -s quit; while killall -0 nginx; do sleep 1; done&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="TKE中使用postStart-和preStop"><a href="#TKE中使用postStart-和preStop" class="headerlink" title="TKE中使用postStart 和preStop"></a>TKE中使用postStart 和preStop</h2><p>TKE这边暂时不支持控制台配置postStart 和preStop，这边只能修改yaml来进行配置，如果您现在都是通过yaml部署，则只需要通过在yaml中添加字段lifecycle既可，如果是通过控制台部署，可以选择先部署工作负载，然后修改yaml重新部署既可。</p><p><img src="/img/About-the-use-of-postStart-and-preStop-on-TKE/c0qxedolei.png" alt="upload-image"></p><p>先创建一个负载，然后再修改yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">.......</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>    <span class="hljs-attr">lifecycle:</span><br>      <span class="hljs-attr">postStart:</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hello from the postStart handler&#x27;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">/var/log/nginx/message</span><br>      <span class="hljs-attr">preStop:</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hello from the preStop handler&#x27;</span>   <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">/var/log/nginx/message</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-lifecycle</span><br>    <span class="hljs-string">......</span><br></code></pre></td></tr></table></figure><p>这边创建再删除pod，可以从日志中查看到对应输出</p><p><img src="/img/About-the-use-of-postStart-and-preStop-on-TKE/ko4oxe9tma.png" alt="upload-image"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/woshizhangliang999/article/details/108088075?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight">https://blog.csdn.net/woshizhangliang999/article/details/108088075?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight</a></p><p><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/">https://kubernetes.io/zh/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker常用命令及知识</title>
    <link href="/2020/09/22/2020-10-11-Docker-commonly-used-commands/"/>
    <url>/2020/09/22/2020-10-11-Docker-commonly-used-commands/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了日常运维中用的一些docker命令和知识。</p><h2 id="docker容器访问其他容器服务"><a href="#docker容器访问其他容器服务" class="headerlink" title="docker容器访问其他容器服务"></a>docker容器访问其他容器服务</h2><p>docker run -d –network host -p 8081:8081 xxxxxxxx:v3</p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>基于docker-compose.yml,通常启动的时候是一个服务，这个服务通常由多个container共同组成，并且端口，配置等由docker-compose定义好。</p><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><p>systemctl start docker    </p><h2 id="设置docker开机启动"><a href="#设置docker开机启动" class="headerlink" title="设置docker开机启动"></a>设置docker开机启动</h2><p>systemctl enable docker </p><h2 id="启动一个mysql的docker镜像"><a href="#启动一个mysql的docker镜像" class="headerlink" title="启动一个mysql的docker镜像"></a>启动一个mysql的docker镜像</h2><p>sudo docker run –name mysqltest -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -v &#x2F;data&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql -d docker.io&#x2F;mysql    </p><h2 id="启动一个mongo的docker镜像"><a href="#启动一个mongo的docker镜像" class="headerlink" title="启动一个mongo的docker镜像"></a>启动一个mongo的docker镜像</h2><p>sudo docker run -d -p 27017:27017 -v &#x2F;data&#x2F;mongodb-2-6-01-service&#x2F;db:&#x2F;data&#x2F;db -v &#x2F;data&#x2F;dbback_up:&#x2F;data&#x2F;mongodbBack –restart&#x3D;always 10.0.64.13:5000&#x2F;mongo:2.6</p><h2 id="从容器中拷贝文件到宿主机"><a href="#从容器中拷贝文件到宿主机" class="headerlink" title="从容器中拷贝文件到宿主机"></a>从容器中拷贝文件到宿主机</h2><p>docker cp 【CONTAINER ID】:【路径】文件名 【宿主机的绝对路径+文件名】    </p><h2 id="docker服务重启后容器也自动重启"><a href="#docker服务重启后容器也自动重启" class="headerlink" title="docker服务重启后容器也自动重启"></a>docker服务重启后容器也自动重启</h2><p>docker run –restart&#x3D;always &#x2F; docker update –restart&#x3D;always <CONTAINER ID></p><h2 id="Docker保存多个镜像到tar中"><a href="#Docker保存多个镜像到tar中" class="headerlink" title="Docker保存多个镜像到tar中"></a>Docker保存多个镜像到tar中</h2><p>docker save [images] [images] &gt; [name.tar]</p><h2 id="Docker导出镜像到环境"><a href="#Docker导出镜像到环境" class="headerlink" title="Docker导出镜像到环境"></a>Docker导出镜像到环境</h2><p>docker load&lt;[name.tar]</p><h2 id="Dockerfile-创建镜像打标签"><a href="#Dockerfile-创建镜像打标签" class="headerlink" title="Dockerfile 创建镜像打标签"></a>Dockerfile 创建镜像打标签</h2><p>docker build -t runoob&#x2F;ubuntu:v1 .</p><h2 id="查看docker磁盘使用"><a href="#查看docker磁盘使用" class="headerlink" title="查看docker磁盘使用"></a>查看docker磁盘使用</h2><p>docker system df</p><h2 id="删除所有未使用的本地卷"><a href="#删除所有未使用的本地卷" class="headerlink" title="删除所有未使用的本地卷"></a>删除所有未使用的本地卷</h2><p>docker volume prune</p><h2 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h2><p>docker container prune &#x2F; docker rm `docker ps -a | grep Exited | awk ‘{print $1}’&#96;</p><h2 id="清理所有未使用的镜像"><a href="#清理所有未使用的镜像" class="headerlink" title="清理所有未使用的镜像"></a>清理所有未使用的镜像</h2><p>docker rmi -f `docker images | grep ‘<none>‘ | awk ‘{print $3}’&#96;  </p><h2 id="进入docker容器内部"><a href="#进入docker容器内部" class="headerlink" title="进入docker容器内部"></a>进入docker容器内部</h2><p>sudo docker attach 44fc0f0582d9</p><h2 id="查看docker容器的cpu及内存的使用情况"><a href="#查看docker容器的cpu及内存的使用情况" class="headerlink" title="查看docker容器的cpu及内存的使用情况"></a>查看docker容器的cpu及内存的使用情况</h2><p>docker stats<br>具体使用方法参考链接：<br><a href="https://blog.csdn.net/hu_jinghui/article/details/80198492">https://blog.csdn.net/hu_jinghui/article/details/80198492</a></p><h2 id="更新已经启动容器的参数"><a href="#更新已经启动容器的参数" class="headerlink" title="更新已经启动容器的参数"></a>更新已经启动容器的参数</h2><p>如果已经启动了则可以使用如下命令：<br>docker update –restart&#x3D;always <CONTAINER ID></p><h2 id="dockerfile中参数-Djava-security-egd-x3D-file-x2F-dev-x2F-x2F-urandom"><a href="#dockerfile中参数-Djava-security-egd-x3D-file-x2F-dev-x2F-x2F-urandom" class="headerlink" title="dockerfile中参数-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom"></a>dockerfile中参数-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom</h2><p>docker+tomcat 启动时非常慢，一般正常启动几十秒的，发现docker+tomcat启动竟需要几分钟，不可思议Tomcat7&#x2F;8都使用org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom 类产生安全随SecureRandom 的实例作为会话 ID，SecureRandom generateSeed 使用 &#x2F;dev&#x2F;random 生成种子。但是 &#x2F;dev&#x2F;random 是一个阻塞数字生成器，如果它没有足够的随机数据提供，它就一直等，这迫使 JVM 等待。键盘和鼠标输入以及磁盘活动可以产生所需的随机性或熵。但在一个服务器缺乏这样的活动，可能会出现问题。<br>有2种解决方案：  </p><ul><li>在Tomcat环境中解决：<br>可以通过配置 JRE 使用非阻塞的 Entropy Source：<br>在 catalina.sh 中加入这么一行：-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom 即可。  </li><li>在 JVM 环境中解决（本人使用此方法）：<br>打开jdk安装路径 $JAVA_PATH&#x2F;jre&#x2F;lib&#x2F;security&#x2F;java.security 这个文件，找到下面的内容：<br>securerandom.source&#x3D;file:&#x2F;dev&#x2F;random替换成：securerandom.source&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom</li></ul><p>如果是采用docker的方式启动，则在启动命令中加入-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom 这样一行</p><h2 id="动态修改容器的内存大小"><a href="#动态修改容器的内存大小" class="headerlink" title="动态修改容器的内存大小"></a>动态修改容器的内存大小</h2><p>docker update –memory 2048m –memory-swap -1 container_id&#x2F;container_name</p><h2 id="退出容器而不停止容器"><a href="#退出容器而不停止容器" class="headerlink" title="退出容器而不停止容器"></a>退出容器而不停止容器</h2><p>如果要正常退出不关闭容器，请按Ctrl+P+Q进行退出容器</p><h2 id="容器之间访问方式"><a href="#容器之间访问方式" class="headerlink" title="容器之间访问方式"></a>容器之间访问方式</h2><p>Docker容器互访三种方式<br>我们都知道docker容器之间是互相隔离的，不能互相访问，但如果有些依赖关系的服务要怎么办呢。下面介绍三种方法解决容器互访问题。</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs routeros">方式一、虚拟ip访问<br><br>安装docker时，docker会默认创建一个内部的桥接网络docker0，每创建一个容器分配一个虚拟网卡，容器之间可以根据ip互相访问。<br><br>[root@33fcf82ab4dd /]# <br>[root@CentOS ~]# ifconfig<br>docker0: <span class="hljs-attribute">flags</span>=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0<br>        inet6 fe80::42:35ff:feac:66d8  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 02:42:35:ac:66:d8  txqueuelen 0  (Ethernet)<br>        RX packets 4018  bytes 266467 (260.2 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 4226  bytes 33935667 (32.3 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> <br> 运行一个centos镜像， 查看ip地址得到：172.17.0.7<br><br>[root@CentOS ~]# docker <span class="hljs-built_in">run</span> -it --name centos-1 docker.io/centos:latest<br>[root@6d214ff8d70a /]# ifconfig<br>eth0: <span class="hljs-attribute">flags</span>=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.17.0.7  netmask 255.255.0.0  broadcast 0.0.0.0<br>        inet6 fe80::42:acff:fe11:7  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 02:42:ac:11:00:07  txqueuelen 0  (Ethernet)<br>        RX packets 16  bytes 1296 (1.2 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 8  bytes 648 (648.0 B) <br><br>以同样的命令再起一个容器，查看ip地址得到：172.17.0.8<br><br>[root@CentOS ~]# docker <span class="hljs-built_in">run</span> -it --name centos-2 docker.io/centos:latest<br>[root@33fcf82ab4dd /]# ifconfig<br>eth0: <span class="hljs-attribute">flags</span>=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.17.0.8  netmask 255.255.0.0  broadcast 0.0.0.0<br>        inet6 fe80::42:acff:fe11:8  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 02:42:ac:11:00:08  txqueuelen 0  (Ethernet)<br>        RX packets 8  bytes 648 (648.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 8  bytes 648 (648.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0 <br>容器内部ping测试结果如下：<br><br>[root@33fcf82ab4dd /]#<span class="hljs-built_in"> ping </span>172.17.0.7<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>172.17.0.7 (172.17.0.7) 56(84) bytes of data.64 bytes <span class="hljs-keyword">from</span> 172.17.0.7: <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.205 ms64 bytes <span class="hljs-keyword">from</span> 172.17.0.7: <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.119 ms64 bytes <span class="hljs-keyword">from</span> 172.17.0.7: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.118 ms64 bytes <span class="hljs-keyword">from</span> 172.17.0.7: <span class="hljs-attribute">icmp_seq</span>=4 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.101 ms<br><br>这种方式必须知道每个容器的ip，在实际使用中并不实用。<br><br>方式二、link<br>运行容器的时候加上参数link<br>运行第一个容器<br>docker <span class="hljs-built_in">run</span> -it --name centos-1 docker.io/centos:latest<br>运行第二个容器<br>[root@CentOS ~]# docker <span class="hljs-built_in">run</span> -it --name centos-2 --link centos-1:centos-1 docker.io/centos:latest<br>--link：参数中第一个centos-1是容器名，第二个centos-1是定义的容器别名（使用别名访问容器），为了方便使用，一般别名默认容器名。<br>测试结果如下：<br>[root@e0841aa13c5b /]#<span class="hljs-built_in"> ping </span>centos-1<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>centos-1 (172.17.0.7) 56(84) bytes of data.64 bytes <span class="hljs-keyword">from</span> centos-1 (172.17.0.7): <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.210 ms64 bytes <span class="hljs-keyword">from</span> centos-1 (172.17.0.7): <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.116 ms64 bytes <span class="hljs-keyword">from</span> centos-1 (172.17.0.7): <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.112 ms64 bytes <span class="hljs-keyword">from</span> centos-1 (172.17.0.7): <span class="hljs-attribute">icmp_seq</span>=4 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.114 ms<br> 此方法对容器创建的顺序有要求，如果集群内部多个容器要互访，使用就不太方便。<br><br>方式三、创建bridge网络<br>1.安装好docker后，运行如下命令创建bridge网络：docker<span class="hljs-built_in"> network </span>create testnet<br>查询到新创建的bridge testnet。<br> ![upload-image](/img/2020-10-11-Docker-commonly-used-commands/docker/1.png) <br><br>2.运行容器连接到testnet网络。<br>使用方法：docker <span class="hljs-built_in">run</span> -it --name &lt;容器名&gt; ---network &lt;bridge&gt; --network-alias &lt;网络别名&gt; &lt;镜像名&gt;<br>[root@CentOS ~]# docker <span class="hljs-built_in">run</span> -it --name centos-1 --network testnet --network-alias centos-1 docker.io/centos:latest<br>[root@CentOS ~]# docker <span class="hljs-built_in">run</span> -it --name centos-2 --network testnet --network-alias centos-2 docker.io/centos:latest<br><br>3.从一个容器ping另外一个容器，测试结果如下：<br>[root@fafe2622f2af /]#<span class="hljs-built_in"> ping </span>centos-1<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>centos-1 (172.20.0.2) 56(84) bytes of data.64 bytes <span class="hljs-keyword">from</span> centos-1.testnet (172.20.0.2):   <br><span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.158 ms64 bytes <span class="hljs-keyword">from</span> centos-1.testnet (172.20.0.2):   <br><span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.108 ms64 bytes <span class="hljs-keyword">from</span> centos-1.testnet (172.20.0.2):   <br><span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.112 ms64 bytes <span class="hljs-keyword">from</span> centos-1.testnet (172.20.0.2):   <br><span class="hljs-attribute">icmp_seq</span>=4 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.113 ms   <br><br>4.若访问容器中服务，可以使用这用方式访问 &lt;网络别名&gt;：&lt;服务端口号&gt; <br>推荐使用这种方法，自定义网络，因为使用的是网络别名，可以不用顾虑ip是否变动，只要连接到docker内部bright网络即可互访。bridge也可以建立多个，隔离在不同的网段。<br></code></pre></td></tr></table></figure><h2 id="Docker容器日志的处理"><a href="#Docker容器日志的处理" class="headerlink" title="Docker容器日志的处理"></a>Docker容器日志的处理</h2><p>新建&#x2F;etc&#x2F;docker&#x2F;daemon.json，若有就不用新建了。添加log-dirver和log-opts参数，样例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://f613ce8f.m.daocloud.io&quot;</span>],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>:<span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<span class="hljs-string">&quot;max-size&quot;</span>:<span class="hljs-string">&quot;500m&quot;</span>, <span class="hljs-string">&quot;max-file&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>max-size&#x3D;500m，意味着一个容器日志大小上限是500M，<br>max-file&#x3D;3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。<br>&#x2F;&#x2F; 重启docker守护进程<br>systemctl daemon-reload<br>systemctl restart docker<br>注意：设置的日志大小，只对新建的容器有效。 </p><h2 id="赋予其他普通用户docker执行权限"><a href="#赋予其他普通用户docker执行权限" class="headerlink" title="赋予其他普通用户docker执行权限"></a>赋予其他普通用户docker执行权限</h2><p>usermod -aG docker ${USER}</p><h2 id="docker的网络类型"><a href="#docker的网络类型" class="headerlink" title="docker的网络类型"></a>docker的网络类型</h2><ul><li>默认网络模式 - bridge</li><li>无网络模式 - none</li><li>宿主网络模式 - host</li><li>自定义网络</li></ul><p>默认网络模式 - bridge<br>多由于独立container之间的通信 首先来侃一侃docker0. 之所以说它是默认的网络，是由于当我们运行container的时候没有“显示”的指定网络时，我们的运行起来的container都会加入到这个“默认” docker0 网络。他的模式是bridge。</p><p>无网络模式 - none<br>顾名思义，所有加入到这个网络模式中的container，都”不能”进行网络通信。貌似有点鸡肋。</p><p>宿主网络模式 - host<br>直接使用宿主机的网络，端口也使用宿主机的 这种网络模式将container与宿主机的网络相连通，虽然很直接，但是却破获了container的隔离性，因此也比较鸡肋</p><p>自定义网络<br>由于之前介绍的3种自带的网络模式有各自的局限性，因此，docker推荐大家自定义网络。通过自定义网络，我们可以实现“服务发现”与“DNS解析”。 docker 允许我们创建3种类型的自定义网络，bridge，overlay，MACVLAN（目前我还没有用到）。</p><p>bridge<br>Bridge模式是Docker默认的网络模式，当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，用来连接宿主机和容器，此主机上的Docker容器都会连接到这个虚拟网桥上<br>overlay：当有多个docker主机时，跨主机的container通信<br>macvlan：每个container都有一个虚拟的MAC地址</p><h2 id="docker的存储驱动"><a href="#docker的存储驱动" class="headerlink" title="docker的存储驱动"></a>docker的存储驱动</h2><p>镜像是只读的</p><p>读写层：每一个容器在运行时，都会基于当前镜像在其最上层挂载一个读写层。而用户针对容器的所有操作都在读写层中完成。一旦容器销毁，这个读写层也随之销毁。</p><p>知识点： 容器&#x3D;镜像+读写层</p><p>所有驱动都用到的技术——写时复制（CoW）。CoW就是copy-on-write，表示只在需要写时才去复制，这个是针对已有文件的修改场景。比如基于一个image启动多个Container，如果为每个Container都去分配一个image一样的文件系统，那么将会占用大量的磁盘空间。而CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享同一个image，所做的写操作都是对从image中复制到自己的文件系统中的复本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离，相互不影响。使用CoW可以有效的提高磁盘的利用率</p><p>docker提供了多种存储驱动来实现不同的方式存储镜像，下面是常用的几种存储驱动：</p><ul><li>AUFS</li><li>OverlayFS</li><li>Devicemapper</li><li>Btrfs</li><li>ZFS</li></ul><p>AUFS（AnotherUnionFS）是一种Union FS，是文件级的存储驱动。AUFS是一个能透明覆盖一个或多个现有文件系统的层状文件系统，把多层合并成文件系统的单层表示。简单来说就是支持将不同目录挂载到同一个虚拟文件系统下的文件系统。这种文件系统可以一层一层地叠加修改文件。无论底下有多少层都是只读的，只有最上层的文件系统是可写的。当需要修改一个文件时，AUFS创建该文件的一个副本，使用CoW将文件从只读层复制到可写层进行修改，结果也保存在可写层。在Docker中，底下的只读层就是image，可写层就是Container</p><p>Overlay是Linux内核3.18后支持的，也是一种Union FS，和AUFS的多层不同的是Overlay只有两层：一个upper文件系统和一个lower文件系统，分别代表Docker的镜像层和容器层。当需要修改一个文件时，使用CoW将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。在Docker中，底下的只读层就是image，可写层就是Container。目前最新的OverlayFS为Overlay2</p><p>Device mapper是Linux内核2.6.9后支持的，提供的一种从逻辑设备到物理设备的映射框架机制，在该机制下，用户可以很方便的根据自己的需要制定实现存储资源的管理策略。前面讲的AUFS和OverlayFS都是文件级存储，而Device mapper是块级存储，所有的操作都是直接对块进行操作，而不是文件。Device mapper驱动会先在块设备上创建一个资源池，然后在资源池上创建一个带有文件系统的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像的快照。所以在容器里看到文件系统是资源池上基本设备的文件系统的快照，并没有为容器分配空间。当要写入一个新文件时，在容器的镜像内为其分配新的块并写入数据，这个叫用时分配。当要修改已有文件时，再使用CoW为容器快照分配块空间，将要修改的数据复制到在容器快照中新的块里再进行修改。Device mapper 驱动默认会创建一个100G的文件包含镜像和容器。每一个容器被限制在10G大小的卷内，可以自己配置调整。</p><p>存储驱动—特点—优点—缺点—适用场景<br>AUFS    联合文件系统、未并入内核主线、文件级存储    作为docker的第一个存储驱动，已经有很长的历史，比较稳定，且在大量的生产中实践过，有较强的社区支持    有多层，在做写时复制操作时，如果文件比较大且存在比较低的层，可能会慢一些    大并发但少IO的场景</p><p>overlayFS    联合文件系统、并入内核主线、文件级存储    只有两层    不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件消耗更多的时间    大并发但少IO的场景</p><p>Devicemapper    并入内核主线、块级存储    块级无论是大文件还是小文件都只复制需要修改的块，并不是整个文件    不支持共享存储，当有多个容器读同一个文件时，需要生成多个复本，在很多容器启停的情况下可能会导致磁盘溢出    适合io密集的场景</p><p>Btrfs    并入linux内核、文件级存储    可以像devicemapper一样直接操作底层设备，支持动态添加设备    不支持共享存储，当有多个容器读同一个文件时，需要生成多个复本    不适合在高密度容器的paas平台上使用<br>ZFS    把所有设备集中到一个存储池中来进行管理    支持多个容器共享一个缓存块，适合内存大的环境    COW使用碎片化问题更加严重，文件在硬盘上的物理地址会变的不再连续，顺序读会变的性能比较差    适合paas和高密度的场景</p><p>AUFS VS OverlayFS<br>AUFS和Overlay都是联合文件系统，但AUFS有多层，而Overlay只有两层，所以在做写时复制操作时，如果文件比较大且存在比较低的层，则AUSF可能会慢一些。而且Overlay并入了linux kernel mainline，AUFS没有。目前AUFS已基本被淘汰</p><p>OverlayFS VS Device mapper<br>OverlayFS是文件级存储，Device mapper是块级存储，当文件特别大而修改的内容很小，Overlay不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件要消耗更多的时间，而块级无论是大文件还是小文件都只复制需要修改的块，并不是整个文件，在这种场景下，显然device mapper要快一些。因为块级的是直接访问逻辑盘，适合IO密集的场景。而对于程序内部复杂，大并发但少IO的场景，Overlay的性能相对要强一些。</p><h2 id="docker的默认存储位置的修改"><a href="#docker的默认存储位置的修改" class="headerlink" title="docker的默认存储位置的修改"></a>docker的默认存储位置的修改</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>&#123;<br><span class="hljs-string">&quot;graph&quot;</span>: <span class="hljs-string">&quot;/home/server/docker&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过添加如上字段可以指定docker的存储位置</p><p>重启docker生效<br>sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</p><h2 id="dockerfile的构建知识"><a href="#dockerfile的构建知识" class="headerlink" title="dockerfile的构建知识"></a>dockerfile的构建知识</h2><ul><li><p>构建缓存<br>在镜像的构建过程中，Docker 根据 Dockerfile 指定的顺序执行每个指令。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。当然如果你不想在构建过程中使用缓存，你可以在 docker build 命令中使用 –no-cache&#x3D;true选项。Docker 中构建缓存遵循的基本规则如下：<br>从一个基础镜像开始（FROM 指令指定），下 一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。<br>对于 ADD 和 COPY 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验值。在缓存的查找过程中，会将这些校验和已存在镜像中的文件校验值进行对比。如果文件有任何改变，则缓存失效。<br>除了 ADD 和 COPY 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 RUN apt-get -y update 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。<br>一旦缓存失效，所有后续的 Dockerfile 指令都将产生新的镜像，缓存不会被使用</p></li><li><p>使用多阶段构建<br>多阶段构建可以让我们大幅度减小最终的镜像大小，而不需要去想办法减少中间层和文件的数量。因为镜像是在生成过程的最后阶段生成的，所以可以利用生成缓存来最小化镜像层</p></li><li><p>避免安装不必要的包<br>为了降低复杂性、减少依赖、减小文件大小和构建时间，应该避免安装额外的或者不必要的软件包。例如，不要在数据库镜像中包含一个文本编辑器。</p></li><li><p>应用解耦<br>每个容器应用只关心一个方面的事情。将多个应用解耦到不同容器中，可以更轻松地保证容器的横向扩展和复用</p></li><li><p>最小化镜像层数<br>只有 RUN、COPY 和 ADD 指令会创建层，其他指令会创建临时的中间镜像，但是不会直接增加构建的镜像大小了</p></li><li><p>对多行参数进行排序<br>只要有可能，就将多行参数按字母顺序排序。这可以帮助你避免重复包含同一个包，更新包列表时也更容易，也更容易阅读和审查。建议在反斜杠符号 \ 之前添加一个空格，可以增加可读性。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制部署k8s</title>
    <link href="/2020/09/20/2020-09-20-Binary-deployment-k8s/"/>
    <url>/2020/09/20/2020-09-20-Binary-deployment-k8s/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何在centos上采用二进制搭建k8s集群。</p><h1 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h1><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>CentOS7.6_x64</td></tr><tr><td>Docker</td><td>19-ce</td></tr><tr><td>Kubernetes</td><td>1.15.12</td></tr></tbody></table><h1 id="服务器角色"><a href="#服务器角色" class="headerlink" title="服务器角色"></a>服务器角色</h1><table><thead><tr><th>角色</th><th>IP</th><th>组件</th></tr></thead><tbody><tr><td>k8s-master</td><td>192.168.21.31</td><td>kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td></tr><tr><td>k8s-node1</td><td>192.168.21.32</td><td>kubelet，kube-proxy，docker，flannel，etcd</td></tr><tr><td>k8s-node2</td><td>192.168.21.33</td><td>kubelet，kube-proxy，docker，flannel，etcd</td></tr></tbody></table><h1 id="部署前环境配置"><a href="#部署前环境配置" class="headerlink" title="部署前环境配置"></a>部署前环境配置</h1><p>以下操作每台机器都需要执行</p><h2 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">swapoff -a<br>sed -i <span class="hljs-string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure><h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">setenforce <span class="hljs-number">0</span><br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> <span class="hljs-regexp">/etc/</span>selinux/config<br></code></pre></td></tr></table></figure><h2 id="关闭防护墙"><a href="#关闭防护墙" class="headerlink" title="关闭防护墙"></a>关闭防护墙</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld<br></code></pre></td></tr></table></figure><h2 id="设置hosts"><a href="#设置hosts" class="headerlink" title="设置hosts"></a>设置hosts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.21.31 master</span><br><span class="hljs-string">192.168.21.32 node1</span><br><span class="hljs-string">192.168.21.33 node2&quot;</span> &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h1 id="部署Etcd集群"><a href="#部署Etcd集群" class="headerlink" title="部署Etcd集群"></a>部署Etcd集群</h1><h2 id="下载证书生成工具"><a href="#下载证书生成工具" class="headerlink" title="下载证书生成工具"></a>下载证书生成工具</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/R1.2/</span>cfssl_linux-amd64<br>wget https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/R1.2/</span>cfssljson_linux-amd64<br>wget https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/R1.2/</span>cfssl-certinfo_linux-amd64<br>chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64<br>mv cfssl_linux-amd64 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cfssl<br>mv cfssljson_linux-amd64 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cfssljson<br>mv cfssl-certinfo_linux-amd64 <span class="hljs-regexp">/usr/</span>bin/cfssl-certinfo<br></code></pre></td></tr></table></figure><h2 id="生成etcd证书"><a href="#生成etcd证书" class="headerlink" title="生成etcd证书"></a>生成etcd证书</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">mkdir</span> /root/k8s/etcd<br><span class="hljs-keyword">cd</span> /root/k8s/etcd<br><br><span class="hljs-keyword">cat</span> &lt;&lt;EOF &gt; <span class="hljs-keyword">ca</span>-config.json<br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;www&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span>,<br>         <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br><br><span class="hljs-keyword">cat</span> &lt;&lt;EOF &gt; <span class="hljs-keyword">ca</span>-csr.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd CA&quot;</span>,<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 2048<br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span><br>        &#125;<br>    ]<br>&#125;<br>EOF<br><br><span class="hljs-keyword">cat</span> &lt;&lt;EOF &gt; server-csr.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;192.168.31.63&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.31.65&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.31.66&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 2048<br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span><br>        &#125;<br>    ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>执行命令生成证书</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -<br>cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=www server-csr.json | cfssljson -bare<span class="hljs-built_in"> server</span><br><span class="hljs-built_in"></span><br>ls *pem<br>ca-key.pem  ca.pem  server-key.pem  server.pem<br></code></pre></td></tr></table></figure><h2 id="master部署etcd"><a href="#master部署etcd" class="headerlink" title="master部署etcd"></a>master部署etcd</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs awk">二进制包下载地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/etcd-io/</span>etcd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.3.10/</span>etcd-v3.<span class="hljs-number">3.10</span>-linux-amd64.tar.gz  <br><br>创建目录存放包<br>mkdir -p <span class="hljs-regexp">/root/</span>k8s/software<br><br>获取包解压<br><span class="hljs-comment"># wget https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz</span><br><span class="hljs-comment"># tar zxvf etcd-v3.2.12-linux-amd64.tar.gz</span><br><br>创建etcd存放配置文件，bin文件和证书的目录，并拷贝对应的文件过去<br>mkdir <span class="hljs-regexp">/opt/</span>etcd/&#123;bin,cfg,ssl&#125; -p<br>mv etcd-v3.<span class="hljs-number">3.10</span>-linux-amd64<span class="hljs-regexp">/&#123;etcd,etcdctl&#125; /</span>opt<span class="hljs-regexp">/etcd/</span>bin/<br><br>创建etcd的配置文件<br>cat &lt;&lt;EOF &gt; <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/cfg/</span>etcd   <br><span class="hljs-comment">#[Member]</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd01&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.21.31:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.21.31:2379&quot;</span><br><br><span class="hljs-comment">#[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.21.31:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.21.31:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd01=https://192.168.21.31:2380,etcd02=https://192.168.21.32:2380,etcd03=https://192.168.21.33:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>EOF<br><br>设置systemd管理etcd<br>cat &lt;&lt;EOF &gt; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/etcd.service <br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>EnvironmentFile=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/cfg/</span>etcd<br>ExecStart=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/bin/</span>etcd \\<br>--name=\<span class="hljs-variable">$&#123;ETCD_NAME&#125;</span> \\<br>--data-dir=\<span class="hljs-variable">$&#123;ETCD_DATA_DIR&#125;</span> \\<br>--listen-peer-urls=\<span class="hljs-variable">$&#123;ETCD_LISTEN_PEER_URLS&#125;</span> \\<br>--listen-client-urls=\<span class="hljs-variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>,http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span> \\<br>--advertise-client-urls=\<span class="hljs-variable">$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125;</span> \\<br>--initial-advertise-peer-urls=\<span class="hljs-variable">$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;</span> \\<br>--initial-cluster=\<span class="hljs-variable">$&#123;ETCD_INITIAL_CLUSTER&#125;</span> \\<br>--initial-cluster-token=\<span class="hljs-variable">$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125;</span> \\<br>--initial-cluster-state=new \\<br>--cert-file=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span>server.pem \\<br>--key-file=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span>server-key.pem \\<br>--peer-cert-file=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span>server.pem \\<br>--peer-key-file=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span>server-key.pem \\<br>--trusted-ca-file=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span>ca.pem \\<br>--peer-trusted-ca-file=<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span>ca.pem<br>Restart=on-failure<br>LimitNOFILE=<span class="hljs-number">65536</span><br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>拷贝之前生成的etcd证书<br><span class="hljs-comment"># cp ca*pem server*pem /opt/etcd/ssl</span><br><br>master启动etcd<br><span class="hljs-comment"># systemctl start etcd</span><br><span class="hljs-comment"># systemctl enable etcd</span><br></code></pre></td></tr></table></figure><h2 id="node节点部署etcd"><a href="#node节点部署etcd" class="headerlink" title="node节点部署etcd"></a>node节点部署etcd</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs gradle">node节点上部署etcd只需要把master的文件拷贝过来，然后修改下etcd的配置文件就行<br><br>scp -r <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ root@192.168.21.32:/</span>opt<br>scp -r <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ root@192.168.21.33:/</span>opt<br>scp <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system<span class="hljs-regexp">/etcd.service root@192.168.21.32:/u</span>sr<span class="hljs-regexp">/lib/</span>systemd/system<br>scp <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system<span class="hljs-regexp">/etcd.service root@192.168.21.33:/u</span>sr<span class="hljs-regexp">/lib/</span>systemd/system<br><br>node1和node2上修改<span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/cfg/</span>etcd<br>修改后如下<br>node1<br>[root@node1 cfg]# cat <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/cfg/</span>etcd<br>#[Member]<br>ETCD_NAME=<span class="hljs-string">&quot;etcd02&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.21.32:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.21.32:2379&quot;</span><br><br>#[Clustering]<br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.21.32:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.21.32:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd01=https://192.168.21.31:2380,etcd02=https://192.168.21.32:2380,etcd03=https://192.168.21.33:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br><br>node2<br>[root@node2 kubernetes]# cat <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/cfg/</span>etcd<br>#[Member]<br>ETCD_NAME=<span class="hljs-string">&quot;etcd03&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.21.33:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.21.33:2379&quot;</span><br><br>#[Clustering]<br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.21.33:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.21.33:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd01=https://192.168.21.31:2380,etcd02=https://192.168.21.32:2380,etcd03=https://192.168.21.33:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br><br>然后再node1和node2上启动etcd<br># systemctl start etcd<br># systemctl enable etcd<br><br>验证etcd集群<br># cd <span class="hljs-regexp">/opt/</span>etcd/ssl<br># <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/bin/</span>etcdctl --ca-<span class="hljs-keyword">file</span>=ca.pem --cert-<span class="hljs-keyword">file</span>=server.pem --key-<span class="hljs-keyword">file</span>=server-key.pem --endpoints=<span class="hljs-string">&quot;https://192.168.21.31:2379,https://192.168.21.32:2379,https://192.168.21.33:2379&quot;</span> cluster-health<br></code></pre></td></tr></table></figure><p><img src="/img/Binary-deployment-k8s/1.png" alt="upload-image"> </p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>所有机器节点都执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo yum -y install docker-ce</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://bc437cce.m.daocloud.io</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> docker</span><br></code></pre></td></tr></table></figure><h1 id="部署Flannel网络"><a href="#部署Flannel网络" class="headerlink" title="部署Flannel网络"></a>部署Flannel网络</h1><p>部署flannel网络需要用etcd存储一个子网信息，所以要保证能成功连接etcd</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs routeros">master上执行命令写入<br><span class="hljs-comment"># cd /opt/etcd/ssl</span><br><span class="hljs-comment"># /opt/etcd/bin/etcdctl --ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem --endpoints=&quot;https://192.168.21.31:2379,https://192.168.21.32:2379,https://192.168.21.33:2379&quot; set /coreos.com/network/config  &#x27;&#123; &quot;Network&quot;: &quot;172.17.0.0/16&quot;, &quot;Backend&quot;: &#123;&quot;Type&quot;: &quot;vxlan&quot;&#125;&#125;&#x27;</span><br><br>在node1节点上执行操作,其他节点后续拷贝文件就行<br>下载二进制包<br>cd /root/k8s/software<br><span class="hljs-comment"># wget https://github.com/coreos/flannel/releases/download/v0.10.0/flannel-v0.10.0-linux-amd64.tar.gz</span><br><span class="hljs-comment"># tar zxvf flannel-v0.9.1-linux-amd64.tar.gz</span><br><span class="hljs-comment"># mv flanneld mk-docker-opts.sh /opt/kubernetes/bin</span><br><br>配置Flannel.<br><span class="hljs-comment"># mkdir -p /opt/kubernetes/&#123;cfg,bin,ssl&#125;</span><br><span class="hljs-comment"># cat &lt;&lt; EOF &gt; /opt/kubernetes/cfg/flanneld</span><br><span class="hljs-attribute">FLANNEL_OPTIONS</span>=<span class="hljs-string">&quot;--etcd-endpoints=https://192.168.21.31:2379,https://192.168.21.32:2379,https://192.168.21.33:2379 -etcd-cafile=/opt/etcd/ssl/ca.pem -etcd-certfile=/opt/etcd/ssl/server.pem -etcd-keyfile=/opt/etcd/ssl/server-key.pem&quot;</span><br>EOF<br><br>systemd管理Flannel<br><span class="hljs-comment"># cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/flanneld.service</span><br>[Unit]<br><span class="hljs-attribute">Description</span>=Flanneld overlay<span class="hljs-built_in"> address </span>etcd agent<br><span class="hljs-attribute">After</span>=network-online.target network.target<br><span class="hljs-attribute">Before</span>=docker.service<br><br>[Service]<br><span class="hljs-attribute">Type</span>=notify<br><span class="hljs-attribute">EnvironmentFile</span>=/opt/kubernetes/cfg/flanneld<br><span class="hljs-attribute">ExecStart</span>=/opt/kubernetes/bin/flanneld --ip-masq \<span class="hljs-variable">$FLANNEL_OPTIONS</span><br><span class="hljs-attribute">ExecStartPost</span>=/opt/kubernetes/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/subnet.env<br><span class="hljs-attribute">Restart</span>=on-failure<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>配置docker启动指定子网段<br>cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/docker.service <br><br>[Unit]<br><span class="hljs-attribute">Description</span>=Docker Application Container Engine<br><span class="hljs-attribute">Documentation</span>=https://docs.docker.com<br><span class="hljs-attribute">After</span>=network-online.target firewalld.service<br><span class="hljs-attribute">Wants</span>=network-online.target<br><br>[Service]<br><span class="hljs-attribute">Type</span>=notify<br><span class="hljs-attribute">EnvironmentFile</span>=/run/flannel/subnet.env<br><span class="hljs-attribute">ExecStart</span>=/usr/bin/dockerd <span class="hljs-variable">$DOCKER_NETWORK_OPTIONS</span><br><span class="hljs-attribute">ExecReload</span>=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attribute">LimitNOFILE</span>=infinity<br><span class="hljs-attribute">LimitNPROC</span>=infinity<br><span class="hljs-attribute">LimitCORE</span>=infinity<br><span class="hljs-attribute">TimeoutStartSec</span>=0<br><span class="hljs-attribute">Delegate</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">KillMode</span>=process<br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">StartLimitBurst</span>=3<br><span class="hljs-attribute">StartLimitInterval</span>=60s<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>重启flannel和docker<br><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment"># systemctl start flanneld</span><br><span class="hljs-comment"># systemctl enable flanneld</span><br><span class="hljs-comment"># systemctl restart docker</span><br><br>其他节点部署（master上可部署也可不部署）<br><span class="hljs-comment"># scp -r /opt/kubernetes/ root@192.168.21.33:/opt</span><br><span class="hljs-comment"># scp -r /opt/kubernetes/ root@192.168.21.31:/opt</span><br><span class="hljs-comment"># scp -r /usr/lib/systemd/system/&#123;flanneld,docker&#125;.service root@192.168.21.31:/usr/lib/systemd/system</span><br><span class="hljs-comment"># scp -r /usr/lib/systemd/system/&#123;flanneld,docker&#125;.service root@192.168.21.33:/usr/lib/systemd/system</span><br><br>其他节点重启flannel和docker<br><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment"># systemctl start flanneld</span><br><span class="hljs-comment"># systemctl enable flanneld</span><br><span class="hljs-comment"># systemctl restart docker</span><br><br>测试<br>确保docker0与flannel.1在同一网段。<br>测试不同节点互通，在当前节点访问另一个Node节点docker0 IP：<br></code></pre></td></tr></table></figure><p><img src="/img/Binary-deployment-k8s/2.png" alt="upload-image"> </p><h1 id="Master节点上部署组件"><a href="#Master节点上部署组件" class="headerlink" title="Master节点上部署组件"></a>Master节点上部署组件</h1><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs vim"># <span class="hljs-built_in">mkdir</span> /root/k8s/master<br># <span class="hljs-keyword">cd</span> /root/k8s/master<br>创建<span class="hljs-keyword">ca</span>证书<br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; <span class="hljs-keyword">ca</span>-config.json<br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span>,<br>         <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br><br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; <span class="hljs-keyword">ca</span>-csr.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>            <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>            <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>        &#125;<br>    ]<br>&#125;<br>EOF<br><br># cfssl gencert -initca <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span> -<br><br>生成apiserver证书<br>下面配置文件中的ip包含<span class="hljs-keyword">lb</span>的ip，masterip和网络ip还有本地ip<br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; server-csr.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>      <span class="hljs-string">&quot;10.0.0.1&quot;</span>,<br>      <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.21.31&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.21.32&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.21.33&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>            <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>            <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>        &#125;<br>    ]<br>&#125;<br>EOF<br><br># cfssl gencert -<span class="hljs-keyword">ca</span>=<span class="hljs-keyword">ca</span>.pem -<span class="hljs-keyword">ca</span>-key=<span class="hljs-keyword">ca</span>-key.pem -config=<span class="hljs-keyword">ca</span>-config.json -<span class="hljs-keyword">profile</span>=kubernetes server-csr.json | cfssljson -bare server<br><br>生成kube-proxy的证书<br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; kube-proxy-csr.json<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br># cfssl gencert -<span class="hljs-keyword">ca</span>=<span class="hljs-keyword">ca</span>.pem -<span class="hljs-keyword">ca</span>-key=<span class="hljs-keyword">ca</span>-key.pem -config=<span class="hljs-keyword">ca</span>-config.json -<span class="hljs-keyword">profile</span>=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy<br><br>最终生成证书如下<br># <span class="hljs-keyword">ls</span> *pem<br><span class="hljs-keyword">ca</span>-key.pem  <span class="hljs-keyword">ca</span>.pem  kube-proxy-key.pem  kube-proxy.pem  server-key.pem  server.pem<br></code></pre></td></tr></table></figure><h2 id="部署apiserver组件"><a href="#部署apiserver组件" class="headerlink" title="部署apiserver组件"></a>部署apiserver组件</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs vim">下载二进制包<br>wget https://<span class="hljs-keyword">dl</span>.k8s.io/v1.<span class="hljs-number">15.12</span>/kubernetes-server-linux-amd64.tar.gz /root/k8s/software<br><br>拷贝所需要的文件<br># <span class="hljs-built_in">mkdir</span> /<span class="hljs-keyword">opt</span>/kubernetes/&#123;bin,cfg,ssl&#125; -<span class="hljs-keyword">p</span><br># tar zxvf kubernetes-server-linux-amd64.tar.gz<br># <span class="hljs-keyword">cd</span> kubernetes/server/bin<br># <span class="hljs-keyword">cp</span> kube-apiserver kube-scheduler kube-controller-manager kubectl /<span class="hljs-keyword">opt</span>/kubernetes/bin<br><br>创建token文件<br># head -<span class="hljs-keyword">c</span> <span class="hljs-number">16</span> /dev/urandom | od -An -t <span class="hljs-keyword">x</span> | <span class="hljs-keyword">tr</span> -d <span class="hljs-string">&#x27; &#x27;</span><br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; /<span class="hljs-keyword">opt</span>/kubernetes/cfg/token.csv<br><span class="hljs-number">231</span>f18a1d882a5037e4374e51c6ec7e0,kubelet-bootstrap,<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;system:kubelet-bootstrap&quot;</span><br>EOF<br>第一列：随机字符串，自己执行第一条命令生成<br>第二列：用户名<br>第三列：UID<br>第四列：用户组<br><br>创建apiserver配置文件<br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; /<span class="hljs-keyword">opt</span>/kubernetes/cfg/kube-apiserver <br>KUBE_APISERVER_OPTS=<span class="hljs-comment">&quot;--logtostderr=true \\</span><br>--v=<span class="hljs-number">4</span> \\<br>--etcd-servers=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">21.31</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">21.32</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">21.33</span>:<span class="hljs-number">2379</span> \\<br>--bind-address=<span class="hljs-number">192.168</span>.<span class="hljs-number">21.31</span> \\<br>--secure-port=<span class="hljs-number">6443</span> \\<br>--advertise-address=<span class="hljs-number">192.168</span>.<span class="hljs-number">21.31</span> \\<br>--allow-privileged=true \\<br>--service-cluster-ip-<span class="hljs-built_in">range</span>=<span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span> \\<br>--enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \\<br>--authorization-<span class="hljs-keyword">mode</span>=RBAC,Node \\<br>--enable-bootstrap-token-auth \\<br>--token-auth-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/cfg/token.csv \\<br>--service-node-port-<span class="hljs-built_in">range</span>=<span class="hljs-number">30000</span>-<span class="hljs-number">50000</span> \\<br>--tls-cert-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/server.pem  \\<br>--tls-private-key-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/server-key.pem \\<br>--client-<span class="hljs-keyword">ca</span>-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>.pem \<br>--service-account-key-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>-key.pem \\<br>--etcd-cafile=/<span class="hljs-keyword">opt</span>/etcd/ssl/<span class="hljs-keyword">ca</span>.pem \\<br>--etcd-certfile=/<span class="hljs-keyword">opt</span>/etcd/ssl/server.pem \\<br>--etcd-keyfile=/<span class="hljs-keyword">opt</span>/etcd/ssl/server-key.pem<span class="hljs-comment">&quot;</span><br>EOF<br><br>systemd管理apiserver<br># <span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt;  /usr/lib/systemd/<span class="hljs-built_in">system</span>/kube-apiserver.service <br>[Unit]<br>Description=Kubernetes API Server<br>Documentation=https://github.<span class="hljs-keyword">com</span>/kubernetes/kubernetes<br><br>[Service]<br>EnvironmentFile=-/<span class="hljs-keyword">opt</span>/kubernetes/cfg/kube-apiserver<br>ExecStart=/<span class="hljs-keyword">opt</span>/kubernetes/bin/kube-apiserver \$KUBE_APISERVER_OPTS<br>Restart=<span class="hljs-keyword">on</span>-failure<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>启动apiserver<br># systemctl daemon-reload<br># systemctl enable kube-apiserver<br># systemctl restart kube-apiserver<br></code></pre></td></tr></table></figure><h2 id="部署scheduler组件"><a href="#部署scheduler组件" class="headerlink" title="部署scheduler组件"></a>部署scheduler组件</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">创建scheduler配置文件<br>cat &lt;&lt; EOF &gt; /opt/kubernetes/cfg/kube-scheduler <br><span class="hljs-attribute">KUBE_SCHEDULER_OPTS</span>=<span class="hljs-string">&quot;--logtostderr=true \\</span><br><span class="hljs-string">--v=4 \\</span><br><span class="hljs-string">--master=127.0.0.1:8080 \\</span><br><span class="hljs-string">--leader-elect&quot;</span><br>EOF<br><br>systemd管理scheduler组件<br>cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kube-scheduler.service <br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes<span class="hljs-built_in"> Scheduler</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><br>[Service]<br><span class="hljs-attribute">EnvironmentFile</span>=-/opt/kubernetes/cfg/kube-scheduler<br><span class="hljs-attribute">ExecStart</span>=/opt/kubernetes/bin/kube-scheduler \<span class="hljs-variable">$KUBE_SCHEDULER_OPTS</span><br><span class="hljs-attribute">Restart</span>=on-failure<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>启动scheduler<br><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment"># systemctl enable kube-scheduler</span><br><span class="hljs-comment"># systemctl restart kube-scheduler</span><br></code></pre></td></tr></table></figure><h2 id="部署controller-manager组件"><a href="#部署controller-manager组件" class="headerlink" title="部署controller-manager组件"></a>部署controller-manager组件</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vim">创建controller-manager配置文件<br><span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; /<span class="hljs-keyword">opt</span>/kubernetes/cfg/kube-controller-manager <br>KUBE_CONTROLLER_MANAGER_OPTS=<span class="hljs-comment">&quot;--logtostderr=true \\</span><br>--v=<span class="hljs-number">4</span> \\<br>--master=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span> \\<br>--leader-elect=true \\<br>--address=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> \\<br>--service-cluster-ip-<span class="hljs-built_in">range</span>=<span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span> \\<br>--cluster-name=kubernetes \\<br>--cluster-signing-cert-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>.pem \\<br>--cluster-signing-key-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>-key.pem  \\<br>--root-<span class="hljs-keyword">ca</span>-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>.pem \\<br>--service-account-private-key-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>-key.pem<span class="hljs-comment">&quot;</span><br>EOF<br><br>systemd管理controller-manager组件<br><span class="hljs-keyword">cat</span> &lt;&lt; EOF &gt; /usr/lib/systemd/<span class="hljs-built_in">system</span>/kube-controller-manager.service <br>[Unit]<br>Description=Kubernetes Controller Manager<br>Documentation=https://github.<span class="hljs-keyword">com</span>/kubernetes/kubernetes<br><br>[Service]<br>EnvironmentFile=-/<span class="hljs-keyword">opt</span>/kubernetes/cfg/kube-controller-manager<br>ExecStart=/<span class="hljs-keyword">opt</span>/kubernetes/bin/kube-controller-manager \$KUBE_CONTROLLER_MANAGER_OPTS<br>Restart=<span class="hljs-keyword">on</span>-failure<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>启动controller-manager<br># systemctl daemon-reload<br># systemctl enable kube-controller-manager<br># systemctl restart kube-controller-manager<br><br>检查组件状态<br>[root@master cfg]# /<span class="hljs-keyword">opt</span>/kubernetes/bin/kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">cs</span><br>NAME                 STATUS    MESSAGE             ERROR<br>controller-manager   Healthy   ok<br>scheduler            Healthy   ok<br>etcd-<span class="hljs-number">1</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd-<span class="hljs-number">2</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd-<span class="hljs-number">0</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="node节点上部署组件"><a href="#node节点上部署组件" class="headerlink" title="node节点上部署组件"></a>node节点上部署组件</h1><p>Master apiserver启用TLS认证后，Node节点kubelet组件想要加入集群，必须使用CA签发的有效证书才能与apiserver通信，当Node节点很多时，签署证书是一件很繁琐的事情，因此有了TLS Bootstrapping机制，kubelet会以一个低权限用户自动向apiserver申请证书，kubelet的证书由apiserver动态签署。<br><img src="/img/Binary-deployment-k8s/3.png" alt="upload-image"> </p><h2 id="将kubelet-bootstrap用户绑定到系统集群角色"><a href="#将kubelet-bootstrap用户绑定到系统集群角色" class="headerlink" title="将kubelet-bootstrap用户绑定到系统集群角色"></a>将kubelet-bootstrap用户绑定到系统集群角色</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># kubectl create clusterrolebinding kubelet-bootstrap \</span><br>  <span class="hljs-attr">--clusterrole</span>=system:node-bootstrapper \<br>  <span class="hljs-attr">--user</span>=kubelet-bootstrap<br></code></pre></td></tr></table></figure><h2 id="创建kubeconfig文件"><a href="#创建kubeconfig文件" class="headerlink" title="创建kubeconfig文件"></a>创建kubeconfig文件</h2><p>在生成kubernetes证书的目录下执行以下命令生成kubeconfig文件</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">[<span class="hljs-string">root</span>@<span class="hljs-string">node1</span> <span class="hljs-string">cfg</span>]<span class="hljs-comment"># cd /opt/kubernetes/ssl/</span><br>[<span class="hljs-string">root</span>@<span class="hljs-string">master</span> <span class="hljs-string">ssl</span>]<span class="hljs-comment"># cat kubeconfig.sh</span><br><span class="hljs-string">BOOTSTRAP_TOKEN</span>=<span class="hljs-string">231f18a1d882a5037e4374e51c6ec7e0</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://192.168.21.31:6443&quot;</span><br><br><br><span class="hljs-comment"># 设置集群参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=./ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=bootstrap.kubeconfig</span><br><br><span class="hljs-comment"># 设置客户端认证参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kubelet-bootstrap</span> \<br>  <span class="hljs-built_in">--token=$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=bootstrap.kubeconfig</span><br><br><span class="hljs-comment"># 设置上下文参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=kubelet-bootstrap</span> \<br>  <span class="hljs-built_in">--kubeconfig=bootstrap.kubeconfig</span><br><br><span class="hljs-comment"># 设置默认上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">default</span> <span class="hljs-built_in">--kubeconfig=bootstrap.kubeconfig</span><br><br><span class="hljs-comment">#----------------------</span><br><br><span class="hljs-comment"># 创建kube-proxy kubeconfig文件</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=./ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=kube-proxy.kubeconfig</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kube-proxy</span> \<br>  <span class="hljs-built_in">--client-certificate=./kube-proxy.pem</span> \<br>  <span class="hljs-built_in">--client-key=./kube-proxy-key.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=kube-proxy.kubeconfig</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=kube-proxy</span> \<br>  <span class="hljs-built_in">--kubeconfig=kube-proxy.kubeconfig</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">default</span> <span class="hljs-built_in">--kubeconfig=kube-proxy.kubeconfig</span><br><br>将文件拷贝到节点的配置文件目录<br><span class="hljs-string">scp</span> *.<span class="hljs-string">kubeconfig</span> <span class="hljs-string">root</span>@<span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">21</span>.<span class="hljs-string">32</span>: /<span class="hljs-string">opt</span>/<span class="hljs-string">kubernetes</span>/<span class="hljs-string">cfg</span><br><span class="hljs-string">scp</span> *.<span class="hljs-string">kubeconfig</span> <span class="hljs-string">root</span>@<span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">21</span>.<span class="hljs-string">33</span>: /<span class="hljs-string">opt</span>/<span class="hljs-string">kubernetes</span>/<span class="hljs-string">cfg</span><br></code></pre></td></tr></table></figure><h2 id="部署kubelet组件"><a href="#部署kubelet组件" class="headerlink" title="部署kubelet组件"></a>部署kubelet组件</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs routeros">从master上拷贝执行文件<br><span class="hljs-comment"># cd /root/k8s/software/kubernetes/server/bin</span><br><span class="hljs-comment"># scp kubelet kube-proxy root2192.168.21.32: /opt/kubernetes/bin</span><br><span class="hljs-comment"># scp kubelet kube-proxy root2192.168.21.33: /opt/kubernetes/bin</span><br><br>创建kubelet配置文件（node上都要执行，注意修改ip）<br>cat &lt;&lt; EOF &gt; /opt/kubernetes/cfg/kubelet<br><span class="hljs-attribute">KUBELET_OPTS</span>=<span class="hljs-string">&quot;--logtostderr=true \\</span><br><span class="hljs-string">--v=4 \\</span><br><span class="hljs-string">--hostname-override=192.168.21.32 \\</span><br><span class="hljs-string">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\</span><br><span class="hljs-string">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\</span><br><span class="hljs-string">--config=/opt/kubernetes/cfg/kubelet.config \\</span><br><span class="hljs-string">--cert-dir=/opt/kubernetes/ssl \\</span><br><span class="hljs-string">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0&quot;</span><br>EOF<br><br>配置kubelet.config配置文件（node上都要执行，注意修改ip）<br>cat &lt;&lt; EOF &gt; /opt/kubernetes/cfg/kubelet.config<br>kind: KubeletConfiguration<br>apiVersion: kubelet.config.k8s.io/v1beta1<br>address: 192.168.21.32<br>port: 10250<br>readOnlyPort: 10255<br>cgroupDriver: cgroupfs<br>clusterDNS: [<span class="hljs-string">&quot;10.0.0.2&quot;</span>]<br>clusterDomain: cluster.local.<br>failSwapOn: <span class="hljs-literal">false</span><br>authentication:<br>  anonymous:<br>enabled: <span class="hljs-literal">true</span><br>EOF<br><br>systemd管理kubelet组件（node上都要执行）<br>cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kubelet.service<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes Kubelet<br><span class="hljs-attribute">After</span>=docker.service<br><span class="hljs-attribute">Requires</span>=docker.service<br><br>[Service]<br><span class="hljs-attribute">EnvironmentFile</span>=/opt/kubernetes/cfg/kubelet<br><span class="hljs-attribute">ExecStart</span>=/opt/kubernetes/bin/kubelet \<span class="hljs-variable">$KUBELET_OPTS</span><br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">KillMode</span>=process<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>启动kubelet（node上都要执行）<br><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment"># systemctl enable kubelet</span><br><span class="hljs-comment"># systemctl restart kubelet</span><br><br>master上审批node加入集群<br>启动后还没加入到集群中，需要手动允许该节点才可以。<br>在Master节点查看请求签名的Node：<br><span class="hljs-comment"># kubectl get csr</span><br><span class="hljs-comment"># kubectl certificate approve XXXXID</span><br><span class="hljs-comment"># kubectl get node</span><br></code></pre></td></tr></table></figure><h2 id="部署kube-proxy组件"><a href="#部署kube-proxy组件" class="headerlink" title="部署kube-proxy组件"></a>部署kube-proxy组件</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros">创建kube-proxy配置文件（node上都要执行，注意修改ip）<br>cat  &lt;&lt; EOF &gt; /opt/kubernetes/cfg/kube-proxy<br><span class="hljs-attribute">KUBE_PROXY_OPTS</span>=<span class="hljs-string">&quot;--logtostderr=true \\</span><br><span class="hljs-string">--v=4 \\</span><br><span class="hljs-string">--hostname-override=192.168.21.32 \\</span><br><span class="hljs-string">--cluster-cidr=10.0.0.0/24 \\</span><br><span class="hljs-string">--kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span><br>EOF<br><br>systemd管理kube-proxy组件（node上都要执行）<br>cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kube-proxy.service<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes<span class="hljs-built_in"> Proxy</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">EnvironmentFile</span>=-/opt/kubernetes/cfg/kube-proxy<br><span class="hljs-attribute">ExecStart</span>=/opt/kubernetes/bin/kube-proxy <span class="hljs-variable">$KUBE_PROXY_OPTS</span><br><span class="hljs-attribute">Restart</span>=on-failure<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>启动kube-proxy<br><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment"># systemctl enable kube-proxy</span><br><span class="hljs-comment"># systemctl restart kube-proxy</span><br></code></pre></td></tr></table></figure><h1 id="部署coredns"><a href="#部署coredns" class="headerlink" title="部署coredns"></a>部署coredns</h1><p>执行下面操作部署</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># cp <span class="hljs-regexp">/root/</span>k8s<span class="hljs-regexp">/software/</span>kubernetes<span class="hljs-regexp">/cluster/</span>addons<span class="hljs-regexp">/dns/</span>coredns<span class="hljs-regexp">/ coredns.yaml.base  /</span>root/cordns.yam<br><br># sed -i -e <span class="hljs-string">&quot;s/__PILLAR__DNS__DOMAIN__/cluster.local./&quot;</span> -e <span class="hljs-string">&quot;s/__PILLAR__DNS__SERVER__/10.0.0.2/&quot;</span> coredns.yaml<br><br># sed -i -e <span class="hljs-string">&quot;s/__PILLAR__DNS__MEMORY__LIMIT__/150Mi/&quot;</span> <br><br># sed -i -e <span class="hljs-string">&quot;s/ k8s.gcr.io\/coredns:1.3.1/&quot;</span>coredns\/coredns:<span class="hljs-number">1.3</span>.<span class="hljs-number">1</span><br><br># kubectl apply -f <span class="hljs-regexp">/root/</span> coredns.yaml<br></code></pre></td></tr></table></figure><h1 id="运行测例测试"><a href="#运行测例测试" class="headerlink" title="运行测例测试"></a>运行测例测试</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># kubectl run nginx --image=nginx --replicas=3</span><br><span class="hljs-comment"># kubectl expose deployment nginx --port=88 --target-port=80 --type=NodePort</span><br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">coredns</span>]<span class="hljs-comment"># kubectl get pods</span><br>NAME                     READY   STATUS    RESTARTS   AGE<br>busybox                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">12</span>         <span class="hljs-number">15h</span><br>nginx-<span class="hljs-number">7</span>bb7cd8db5-g7pxs   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15h</span><br>nginx-<span class="hljs-number">7</span>bb7cd8db5-p22cb   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15h</span><br>nginx-<span class="hljs-number">7</span>bb7cd8db5-z6dwn   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15h</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">coredns</span>]<span class="hljs-comment"># kubectl get svc</span><br>NAME         <span class="hljs-keyword">TYPE</span>        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE<br>kubernetes   ClusterIP   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span>     <span class="hljs-tag">&lt;none&gt;</span>        <span class="hljs-number">443</span>/TCP        <span class="hljs-number">16h</span><br>nginx        NodePort    <span class="hljs-number">10.0</span>.<span class="hljs-number">0.63</span>    <span class="hljs-tag">&lt;none&gt;</span>        <span class="hljs-number">88</span>:<span class="hljs-number">43614</span>/TCP   <span class="hljs-number">15h</span><br></code></pre></td></tr></table></figure><p>访问集群中部署的Nginx，打开浏览器输入：<a href="http://192.168.31.32:43614/">http://192.168.31.32:43614</a></p><p><img src="/img/Binary-deployment-k8s/4.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE使用自建NFS持久化存储</title>
    <link href="/2020/09/17/2020-09-17-TKE-uses-self-built-NFS-persistent-storage/"/>
    <url>/2020/09/17/2020-09-17-TKE-uses-self-built-NFS-persistent-storage/</url>
    
    <content type="html"><![CDATA[<p>使用TKE的过程中，我们需要把pod一些文件持久化存储到外部，这边我们会用到nfs存储，其实在腾讯云上有CFS服务，可以用CFS作为文件存储服务器，TKE也支持将文件挂载到CFS上存储。但是如果你想自己管理nfs服务器，这边也可以通过自建nfs服务器来作为tke集群中pod存储。下面我们来说一下如何将pod的文件挂载到自建的nfs服务器来进行存储。</p><h1 id="创建nfs服务器"><a href="#创建nfs服务器" class="headerlink" title="创建nfs服务器"></a>创建nfs服务器</h1><p>首先我们先在腾讯云上申请一台cvm服务器，这边建议将对应的磁盘空间配置大点，并且cvm服务器的网络需要和tke集群处于一个vpc内，这样TKE集群可以通过内网直接访问nfs服务器进行挂载</p><h2 id="centos部署nfs服务端"><a href="#centos部署nfs服务端" class="headerlink" title="centos部署nfs服务端"></a>centos部署nfs服务端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">yum -y install nfs-utils rpcbind</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start rpcbind</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> rpcbind</span><br></code></pre></td></tr></table></figure><h2 id="ubuntu部署nfs服务端"><a href="#ubuntu部署nfs服务端" class="headerlink" title="ubuntu部署nfs服务端"></a>ubuntu部署nfs服务端</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># sudo apt-<span class="hljs-keyword">get</span> install nfs-kernel-<span class="hljs-keyword">server</span><br># sudo service nfs-kernel-<span class="hljs-keyword">server</span> <span class="hljs-keyword">restart</span><br># sudo systemctl <span class="hljs-keyword">enable</span> nfs-kernel-<span class="hljs-keyword">server</span>.service<br></code></pre></td></tr></table></figure><h1 id="配置nfs的挂载目录"><a href="#配置nfs的挂载目录" class="headerlink" title="配置nfs的挂载目录"></a>配置nfs的挂载目录</h1><p>下面我们以centos系统为例进行操作实例，我们在nfs服务器上创建好pod需要挂载的目录，并给对应的目录编辑共享配置文件设置好权限，然后重启nfs服务器。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># mkdir -p <span class="hljs-regexp">/data/</span>volums<br># vi <span class="hljs-regexp">/etc/</span>exports<br><span class="hljs-regexp">/data/</span>volums *(async,insecure,no_root_squash,no_subtree_check,rw)<br># systemctl restart rpcbind<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;exports配置文件参数及作用说明</p><ul><li>ro：只读</li><li>rw：读写</li><li>root_squash：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户</li><li>no_root_squash：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员</li><li>all_squash：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户</li><li>sync：同时将数据写入到内存与硬盘中，保证不丢失数据</li><li>async：优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据</li><li>insecure：允许客户端从大于1024的tcp&#x2F;ip端口连接服务器</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">1</span>-<span class="hljs-number">2</span>-centos volums]<span class="hljs-comment"># showmount -e 10.168.1.2</span><br>Export list <span class="hljs-keyword">for</span> <span class="hljs-number">10.168</span>.<span class="hljs-number">1.2</span>:<br><span class="hljs-regexp">/data/</span>volums *<br></code></pre></td></tr></table></figure><p>查看nfs服务器上的共享状态，出现上述的内容输出，这边说明&#x2F;data&#x2F;volums可以进行挂载了</p><h1 id="节点安装nfs客户端工具"><a href="#节点安装nfs客户端工具" class="headerlink" title="节点安装nfs客户端工具"></a>节点安装nfs客户端工具</h1><p>因为k8s的调度机制，这边如果不指定调度，会随机指定节点调度，所以这边建议所有节点都按照nfs的客户端，保证pod调度到节点上可以执行挂载操作。</p><h2 id="centos部署nfs客户端工具"><a href="#centos部署nfs客户端工具" class="headerlink" title="centos部署nfs客户端工具"></a>centos部署nfs客户端工具</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nfs-utils<br></code></pre></td></tr></table></figure><h2 id="ubuntu部署nfs客户端工具"><a href="#ubuntu部署nfs客户端工具" class="headerlink" title="ubuntu部署nfs客户端工具"></a>ubuntu部署nfs客户端工具</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> apt install nfs-<span class="hljs-meta">common</span><br></code></pre></td></tr></table></figure><h1 id="集群中部署nfs客户端nfs-client-provisioner"><a href="#集群中部署nfs客户端nfs-client-provisioner" class="headerlink" title="集群中部署nfs客户端nfs-client-provisioner"></a>集群中部署nfs客户端nfs-client-provisioner</h1><p>这边我们在TKE集群中通过部署nfs-client-provisioner客户端工具。</p><h2 id="通过rbac给nfs-client-provisioner分配权限"><a href="#通过rbac给nfs-client-provisioner分配权限" class="headerlink" title="通过rbac给nfs-client-provisioner分配权限"></a>通过rbac给nfs-client-provisioner分配权限</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner-runner</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;persistentvolumes&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;persistentvolumeclaims&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;storage.k8s.io&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;storageclasses&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;events&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;endpoints&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">run-nfs-client-provisioner</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner-runner</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">leader-locking-nfs-client-provisioner</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;endpoints&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">leader-locking-nfs-client-provisioner</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-comment"># replace with namespace where provisioner is deployed</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">leader-locking-nfs-client-provisioner</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h2 id="创建nfs-client-provisioner"><a href="#创建nfs-client-provisioner" class="headerlink" title="创建nfs-client-provisioner"></a>创建nfs-client-provisioner</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">nfs-client-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/external_storage/nfs-client-provisioner:latest</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">fuseim.pri/ifs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/data/volums</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volums</span><br></code></pre></td></tr></table></figure><h2 id="创建nfs对应的StorageClass"><a href="#创建nfs对应的StorageClass" class="headerlink" title="创建nfs对应的StorageClass"></a>创建nfs对应的StorageClass</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">managed-nfs-storage</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">fuseim.pri/ifs</span> <span class="hljs-comment"># or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">archiveOnDelete:</span> <span class="hljs-string">&quot;false&quot;</span><br><span class="hljs-number">4.4</span> <span class="hljs-string">创建nfs类型的pvc</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-claim</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">volume.beta.kubernetes.io/storage-class:</span> <span class="hljs-string">&quot;managed-nfs-storage&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><h1 id="创建pod挂载到自建nfs服务器"><a href="#创建pod挂载到自建nfs服务器" class="headerlink" title="创建pod挂载到自建nfs服务器"></a>创建pod挂载到自建nfs服务器</h1><h2 id="直接挂载到nfs盘的目录下"><a href="#直接挂载到nfs盘的目录下" class="headerlink" title="直接挂载到nfs盘的目录下"></a>直接挂载到nfs盘的目录下</h2><p><img src="/img/TKE-uses-self-built-NFS-persistent-storage/1.png" alt="upload-image"> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2020-09-17T12:01:00Z&quot;</span><br>  <span class="hljs-attr">generation:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-cfs-server</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-cfs-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-cfs-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-cfs-server</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-cfs-server</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-cfs-server</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-cfs-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-cfs-server</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/nginx/conf.d</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">qcloudregistrykey</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>        <span class="hljs-attr">nfs:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volums/nginx</span><br>          <span class="hljs-attr">server:</span> <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><br></code></pre></td></tr></table></figure><p>下面我们在容器内创建几个文件，看下在nfs服务器下&#x2F;data&#x2F;volums&#x2F;nginx的目录是否也有，我们在容器内创建test1和test2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">root@nginx-cfs-server-<span class="hljs-number">69</span>fb8cb9f6-<span class="hljs-number">2</span>hzc6:<span class="hljs-regexp">/etc/</span>nginx/conf.d<span class="hljs-comment"># ls</span><br>root@nginx-cfs-server-<span class="hljs-number">69</span>fb8cb9f6-<span class="hljs-number">2</span>hzc6:<span class="hljs-regexp">/etc/</span>nginx/conf.d<span class="hljs-comment"># echo &quot;test1&quot; &gt; test1</span><br>root@nginx-cfs-server-<span class="hljs-number">69</span>fb8cb9f6-<span class="hljs-number">2</span>hzc6:<span class="hljs-regexp">/etc/</span>nginx/conf.d<span class="hljs-comment"># echo &quot;test2&quot; &gt; test2</span><br>root@nginx-cfs-server-<span class="hljs-number">69</span>fb8cb9f6-<span class="hljs-number">2</span>hzc6:<span class="hljs-regexp">/etc/</span>nginx/conf.d<span class="hljs-comment"># ls</span><br>test1  test2<br>root@nginx-cfs-server-<span class="hljs-number">69</span>fb8cb9f6-<span class="hljs-number">2</span>hzc6:<span class="hljs-regexp">/etc/</span>nginx/conf.d<span class="hljs-comment"># cat test1</span><br>test1<br>root@nginx-cfs-server-<span class="hljs-number">69</span>fb8cb9f6-<span class="hljs-number">2</span>hzc6:<span class="hljs-regexp">/etc/</span>nginx/conf.d<span class="hljs-comment"># cat test2</span><br>test2<br></code></pre></td></tr></table></figure><p>去nfs的&#x2F;data&#x2F;volums&#x2F;nginx目录验证下</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM-1-2-centos nginx]<span class="hljs-comment"># ll</span><br>total 8<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 6 </span>Sep<span class="hljs-number"> 17 </span>20:04 test1<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 6 </span>Sep<span class="hljs-number"> 17 </span>20:04 test2<br>[root@VM-1-2-centos nginx]<span class="hljs-comment"># pwd</span><br>/data/volums/nginx<br>[root@VM-1-2-centos nginx]<span class="hljs-comment"># cat test1</span><br>test1<br>[root@VM-1-2-centos nginx]<span class="hljs-comment"># cat test2</span><br>test2<br>[root@VM-1-2-centos nginx]<span class="hljs-comment"># pwd</span><br>/data/volums/nginx<br></code></pre></td></tr></table></figure><p>对应的文件已成功挂载到nfs服务中</p><h2 id="通过pvc挂载某个目录到nfs服务器"><a href="#通过pvc挂载某个目录到nfs服务器" class="headerlink" title="通过pvc挂载某个目录到nfs服务器"></a>通过pvc挂载某个目录到nfs服务器</h2><p>这边我们将上面创建的test-claim这个pvc挂载到容器内</p><p><img src="/img/TKE-uses-self-built-NFS-persistent-storage/2.png" alt="upload-image"> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2020-09-17T11:53:11Z&quot;</span><br>  <span class="hljs-attr">generation:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-nfs</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-nfs</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-nfs</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-nfs</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-nfs</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">nginx-nfs</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">nginx-nfs</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-nfs</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/nginx/conf.d</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">qcloudregistrykey</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">test-claim</span><br></code></pre></td></tr></table></figure><p>下面我们做个简单的验证，在容器内创建文件，看下对应的pvc下会不会有文件生成</p><p><img src="/img/TKE-uses-self-built-NFS-persistent-storage/3.png" alt="upload-image"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos volums]# ll<br>total 8<br>-rw-r--r-- 1 root root    0 Sep  6 17:58 aa<br>-rw-r--r-- 1 root root    0 Sep  6 17:58 aab<br>drwxrwxrwx 2 root root 4096 Sep 17 20:47 default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92<br>drwxr-xr-x 2 root root 4096 Sep 17 20:04 nginx<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos volums]# cd default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92/<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92]# ll<br>total 4<br>-rw-r--r-- 1 root root 11 Sep 17 20:47 hello<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92]# cat hello <br>hello word<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92]# ls<br>hello<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92]# cat hello <br>hello word<br></code></pre></td></tr></table></figure><p>容器内的test文件成功挂载到pvc卷的目录。</p><h2 id="动态创建pvc挂载到nfs上"><a href="#动态创建pvc挂载到nfs上" class="headerlink" title="动态创建pvc挂载到nfs上"></a>动态创建pvc挂载到nfs上</h2><p>k8s中只有StatefulSet需要动态创建pvc来挂载每一个pod内生成的文件，下面我们创建一个StatefulSet来动态创建pvc挂载到容器上。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">web</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br>  <span class="hljs-attribute">volumeClaimTemplates</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">metadata:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">volume.beta.kubernetes.io/storage-class</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;managed-nfs-storage&quot;</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">accessModes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[ &quot;ReadWriteMany&quot; ]</span><br>      <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">storage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx1</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">serviceAccount</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nfs-provisioner</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx1</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: &quot;/etc/nginx/conf.d&quot;</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><p>执行上面的yaml创建2个pod，然后登录pod创建文件，这边我们验证下是否挂载成功</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@web</span><span class="hljs-number">-0</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># cd /etc/nginx/conf.d/</span><br>root<span class="hljs-variable">@web</span><span class="hljs-number">-0</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># echo &quot;web0&quot; &gt; a.txt</span><br>root<span class="hljs-variable">@web</span><span class="hljs-number">-0</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># ls</span><br>a.txt<br>root<span class="hljs-variable">@web</span><span class="hljs-number">-0</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># cat a.txt </span><br>web0<br><br><br>root<span class="hljs-variable">@web</span><span class="hljs-number">-1</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># cd /etc/nginx/conf.d/</span><br>root<span class="hljs-variable">@web</span><span class="hljs-number">-1</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># ls </span><br>root<span class="hljs-variable">@web</span><span class="hljs-number">-1</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># echo &quot;web1&quot; &gt; 2.txt</span><br>root<span class="hljs-variable">@web</span><span class="hljs-number">-1</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># ls</span><br><span class="hljs-number">2</span>.txt<br>root<span class="hljs-variable">@web</span><span class="hljs-number">-1</span><span class="hljs-symbol">:/etc/nginx/conf</span>.d<span class="hljs-comment"># cat 2.txt </span><br>web1<br>root<br></code></pre></td></tr></table></figure><p>我们登录到nfs服务器上查看下pod对应的pvc所在目录是否有文件生成</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos volums]# ll<br>total 16<br>-rw-r--r-- 1 root root    0 Sep  6 17:58 aa<br>-rw-r--r-- 1 root root    0 Sep  6 17:58 aab<br>drwxrwxrwx 2 root root 4096 Sep 17 20:47 default-test-claim-pvc<span class="hljs-string">-6927</span>bda4<span class="hljs-string">-1</span>e81<span class="hljs-string">-4187</span>-af6f<span class="hljs-string">-611</span>e07e45a92<br>drwxrwxrwx 2 root root 4096 Sep 17 20:59 default-test-web<span class="hljs-string">-0</span>-pvc-e8e6637c<span class="hljs-string">-76</span>a5<span class="hljs-string">-4256</span>-b589-c29d31f19afe<br>drwxrwxrwx 2 root root 4096 Sep 17 21:01 default-test-web<span class="hljs-string">-1</span>-pvc<span class="hljs-string">-3298</span>add1<span class="hljs-string">-0626</span><span class="hljs-string">-4973</span>-ae47<span class="hljs-string">-4</span>cae5885f024<br>drwxr-xr-x 2 root root 4096 Sep 17 20:04 nginx<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos volums]# cd default-test-web<span class="hljs-string">-0</span>-pvc-e8e6637c<span class="hljs-string">-76</span>a5<span class="hljs-string">-4256</span>-b589-c29d31f19afe<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-web<span class="hljs-string">-0</span>-pvc-e8e6637c<span class="hljs-string">-76</span>a5<span class="hljs-string">-4256</span>-b589-c29d31f19afe]# ls<br>a.txt<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-web<span class="hljs-string">-0</span>-pvc-e8e6637c<span class="hljs-string">-76</span>a5<span class="hljs-string">-4256</span>-b589-c29d31f19afe]# cat a.txt <br>web0<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-web<span class="hljs-string">-0</span>-pvc-e8e6637c<span class="hljs-string">-76</span>a5<span class="hljs-string">-4256</span>-b589-c29d31f19afe]# cd ..<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos volums]# cd default-test-web<span class="hljs-string">-1</span>-pvc<span class="hljs-string">-3298</span>add1<span class="hljs-string">-0626</span><span class="hljs-string">-4973</span>-ae47<span class="hljs-string">-4</span>cae5885f024<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-web<span class="hljs-string">-1</span>-pvc<span class="hljs-string">-3298</span>add1<span class="hljs-string">-0626</span><span class="hljs-string">-4973</span>-ae47<span class="hljs-string">-4</span>cae5885f024]# ls<br>2.txt<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-2</span>-centos default-test-web<span class="hljs-string">-1</span>-pvc<span class="hljs-string">-3298</span>add1<span class="hljs-string">-0626</span><span class="hljs-string">-4973</span>-ae47<span class="hljs-string">-4</span>cae5885f024]# cat 2.txt <br>web1<br></code></pre></td></tr></table></figure><p>从上面查看，对应的文件已在服务器上挂载成功。</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>NFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeadm部署k8s</title>
    <link href="/2020/09/15/2020-09-15-kubeadm-deploy-k8s/"/>
    <url>/2020/09/15/2020-09-15-kubeadm-deploy-k8s/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何在centos上采用kubeadm搭建k8s集群。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>master01:192.168.1.110 （最少2核CPU）<br>node01:192.168.1.100  </p><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>services网络：10.96.0.0&#x2F;12<br>pod网络：10.244.0.0&#x2F;16  </p><h2 id="配置hosts解析各主机"><a href="#配置hosts解析各主机" class="headerlink" title="配置hosts解析各主机"></a>配置hosts解析各主机</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">vim /etc/hosts<br><span class="hljs-number">127.0.0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<br><span class="hljs-number">192.168.1.110</span> master01<br><span class="hljs-number">192.168.1.100</span> node01<br></code></pre></td></tr></table></figure><h2 id="同步各主机时间"><a href="#同步各主机时间" class="headerlink" title="同步各主机时间"></a>同步各主机时间</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y ntpdate<br><span class="hljs-attribute">ntpdate</span> time.windows.com<br><span class="hljs-attribute">14</span> Mar <span class="hljs-number">16</span>:<span class="hljs-number">51</span>:<span class="hljs-number">32</span> ntpdate[<span class="hljs-number">46363</span>]: adjust time server <span class="hljs-number">13.65.88.161</span> offset -<span class="hljs-number">0</span>.<span class="hljs-number">001108</span> sec<br></code></pre></td></tr></table></figure><h2 id="关闭SWAP，关闭selinux"><a href="#关闭SWAP，关闭selinux" class="headerlink" title="关闭SWAP，关闭selinux"></a>关闭SWAP，关闭selinux</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">swapoff -a<br>vim /etc/selinux<span class="hljs-built_in">/config</span><br><span class="hljs-built_in"></span><br><span class="hljs-comment"># This file controls the state of SELinux on the system.</span><br><span class="hljs-comment"># SELINUX= can take one of these three values:</span><br><span class="hljs-comment">#     enforcing - SELinux security policy is enforced.</span><br><span class="hljs-comment">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="hljs-comment">#     disabled - No SELinux policy is loaded.</span><br><span class="hljs-attribute">SELINUX</span>=disabled<br></code></pre></td></tr></table></figure><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle">yum install -y yum-utils device-mapper-persistent-data lvm2<br>yum-config-manager --add-repo http:<span class="hljs-comment">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br>yum makecache fast<br>yum -y install docker-ce<br><br>Docker 安装后出现：WARNING: bridge-nf-<span class="hljs-keyword">call</span>-iptables is disabled 的解决办法<br>vim <span class="hljs-regexp">/etc/</span>sysctl.conf<br><br># sysctl settings are defined through files in<br># <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/sysctl.d/</span>, <span class="hljs-regexp">/run/</span>sysctl.d<span class="hljs-regexp">/, and /</span>etc<span class="hljs-regexp">/sysctl.d/</span>.<br>#<br># Vendors settings live in <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/sysctl.d/</span>.<br># To override a whole <span class="hljs-keyword">file</span>, create a <span class="hljs-keyword">new</span> <span class="hljs-keyword">file</span> with the same in<br># <span class="hljs-regexp">/etc/</span>sysctl.d/ and put <span class="hljs-keyword">new</span> settings there. To override<br># only specific settings, add a <span class="hljs-keyword">file</span> with a lexically later<br># name in <span class="hljs-regexp">/etc/</span>sysctl.d/ and put <span class="hljs-keyword">new</span> settings there.<br>#<br># <span class="hljs-keyword">For</span> more information, see sysctl.conf(<span class="hljs-number">5</span>) and sysctl.d(<span class="hljs-number">5</span>).<br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-ip6tables=<span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-iptables=<span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-arptables=<span class="hljs-number">1</span><br><br>systemctl enable docker &amp;&amp; systemctl start docker<br></code></pre></td></tr></table></figure><h2 id="安装kubernetes"><a href="#安装kubernetes" class="headerlink" title="安装kubernetes"></a>安装kubernetes</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat &lt;&lt;EOF &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64/<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>repo_gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br><br>setenforce <span class="hljs-number">0</span><br>yum install -y kubelet kubeadm kubectl<br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br></code></pre></td></tr></table></figure><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubeadm init <span class="hljs-comment">--image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.13.1 --pod-network-cidr=10.244.0.0/16</span><br>Your Kubernetes master has initialized successfully!<br><br>To <span class="hljs-built_in">start</span> <span class="hljs-keyword">using</span> your cluster, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>You should now deploy <span class="hljs-keyword">a</span> pod network <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> options listed <span class="hljs-keyword">at</span>:<br>  <span class="hljs-keyword">https</span>://kubernetes.io/docs/concepts/cluster-administration/addons/<br>You can now join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> machines <span class="hljs-keyword">by</span> running <span class="hljs-keyword">the</span> following <span class="hljs-keyword">on</span> <span class="hljs-title">each</span> <span class="hljs-title">node</span><br><span class="hljs-keyword">as</span> root:<br><br>  kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.110</span>:<span class="hljs-number">6443</span> <span class="hljs-comment">--token wgrs62.vy0trlpuwtm5jd75 --discovery-token-ca-cert-hash sha256:6e947e63b176acf976899483d41148609a6e109067ed6970b9fbca8d9261c8d0</span><br></code></pre></td></tr></table></figure><h2 id="手动部署flannel"><a href="#手动部署flannel" class="headerlink" title="手动部署flannel"></a>手动部署flannel</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">flannel网址：https://github.com/coreos/flannel <span class="hljs-keyword">for</span> Kubernetes v1.7+<br><br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br>podsecuritypolicy.extensions/psp.flannel.unprivileged created<br>clusterrole.rbac.authorization.k8s.io/flannel created<br>clusterrolebinding.rbac.authorization.k8s.io/flannel created<br>serviceaccount/flannel created<br>configmap/kube-flannel-cfg created<br>daemonset.extensions/kube-flannel-ds-amd64 created<br>daemonset.extensions/kube-flannel-ds-arm64 created<br>daemonset.extensions/kube-flannel-ds-arm created<br>daemonset.extensions/kube-flannel-ds-ppc64le created<br>daemonset.extensions/kube-flannel-ds-s390x created<br></code></pre></td></tr></table></figure><h2 id="node配置"><a href="#node配置" class="headerlink" title="node配置"></a>node配置</h2><p>安装docker kubelet kubeadm docker安装同步骤4。<br>kubelet kubeadm安装同步骤5</p><h2 id="node加入到master"><a href="#node加入到master" class="headerlink" title="node加入到master"></a>node加入到master</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> join <span class="hljs-number">192.168.1.110:6443</span> --token wgrs62.vy0trlpuwtm5jd75 --discovery-token-ca-cert-hash sha256:<span class="hljs-number">6</span>e947e63b176acf976899483d41148609a6e109067ed6970b9fbca8d9261c8d0<br><span class="hljs-attribute">kubectl</span> get nodes  #查看node状态<br><span class="hljs-attribute">NAME</span>                    STATUS     ROLES    AGE     VERSION<br><span class="hljs-attribute">localhost</span>.localdomain   NotReady   &lt;none&gt;   <span class="hljs-number">130</span>m    v1.<span class="hljs-number">13</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">master01</span>                Ready      master   <span class="hljs-number">4</span>h47m   v1.<span class="hljs-number">13</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">node01</span>                  Ready      &lt;none&gt;   <span class="hljs-number">94</span>m     v1.<span class="hljs-number">13</span>.<span class="hljs-number">4</span><br><br><span class="hljs-attribute">kubectl</span> get cs  #查看组件状态<br><span class="hljs-attribute">NAME</span>                 STATUS    MESSAGE              ERROR<br><span class="hljs-attribute">scheduler</span>            Healthy   ok                   <br><span class="hljs-attribute">controller</span>-manager   Healthy   ok                   <br><span class="hljs-attribute">etcd</span>-<span class="hljs-number">0</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>&#125;  <br><br><span class="hljs-attribute">kubectl</span> get ns  #查看名称空间<br><span class="hljs-attribute">NAME</span>          STATUS   AGE<br><span class="hljs-attribute">default</span>       Active   <span class="hljs-number">4</span>h41m<br><span class="hljs-attribute">kube</span>-public   Active   <span class="hljs-number">4</span>h41m<br><span class="hljs-attribute">kube</span>-system   Active   <span class="hljs-number">4</span>h41m<br><br><span class="hljs-attribute">kubectl</span> get pods -n kube-system  #查看pod状态<br><span class="hljs-attribute">NAME</span>                               READY   STATUS    RESTARTS   AGE<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">78</span>d4cf999f-bszbk           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>h44m<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">78</span>d4cf999f-j68hb           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>h44m<br><span class="hljs-attribute">etcd</span>-master01                      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>h43m<br><span class="hljs-attribute">kube</span>-apiserver-master01            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">4</span>h43m<br><span class="hljs-attribute">kube</span>-controller-manager-master01   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">4</span>h43m<br><span class="hljs-attribute">kube</span>-flannel-ds-amd64-<span class="hljs-number">27</span>x59        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">126</span>m<br><span class="hljs-attribute">kube</span>-flannel-ds-amd64-<span class="hljs-number">5</span>sxgk        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">140</span>m<br><span class="hljs-attribute">kube</span>-flannel-ds-amd64-xvrbw        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">91</span>m<br><span class="hljs-attribute">kube</span>-proxy-<span class="hljs-number">4</span>pbdf                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">91</span>m<br><span class="hljs-attribute">kube</span>-proxy-<span class="hljs-number">9</span>fmrl                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>h44m<br><span class="hljs-attribute">kube</span>-proxy-nwkl9                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">126</span>m<br><span class="hljs-attribute">kube</span>-scheduler-master01            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">4</span>h43m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes在pod中配置hosts解析域名</title>
    <link href="/2020/09/11/2020-09-11-Kubernetes-configures-hosts-to-resolve-domain-names-in-pod/"/>
    <url>/2020/09/11/2020-09-11-Kubernetes-configures-hosts-to-resolve-domain-names-in-pod/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了如何给pod配置host域名解析</p><p>当 DNS 配置以及其它选项不合理的时候，通过向 Pod 的 &#x2F;etc&#x2F;hosts 文件中添加条目，可以在 Pod 级别覆盖对主机名的解析。在 1.7 版本后，用户可以通过 PodSpec 的 HostAliases 字段来添加这些自定义的条目。</p><p>建议通过使用 HostAliases 来进行修改，因为该文件由 Kubelet 管理，并且可以在 Pod 创建&#x2F;重启过程中被重写</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">deployment.kubernetes.io/revision</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br>  <span class="hljs-attribute">creationTimestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-09-11T08:35:00Z&quot;</span><br>  <span class="hljs-attribute">generation</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>    <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">resourceVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12673987137&quot;</span><br>  <span class="hljs-attribute">selfLink</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/apis/apps/v1beta2/namespaces/test/deployments/nginx-hosts-alis</span><br>  <span class="hljs-attribute">uid</span><span class="hljs-punctuation">:</span> <span class="hljs-string">61493e8e-b0c9-4b5d-a031-6ea2799e9de8</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">progressDeadlineSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">600</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">revisionHistoryLimit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>      <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>  <span class="hljs-attribute">strategy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">rollingUpdate</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">maxSurge</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>      <span class="hljs-attribute">maxUnavailable</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">creationTimestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">null</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>        <span class="hljs-attribute">qcloud-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">image: nginx</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-hosts-alis</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br>        <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attribute">hostAliases</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hostnames:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">foo.local</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">bar.local</span><br>        <span class="hljs-attribute">ip</span><span class="hljs-punctuation">:</span> <span class="hljs-string">127.0.0.1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hostnames:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">foo.remote</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">bar.remote</span><br>        <span class="hljs-attribute">ip</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10.1.2.3</span><br>      <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br>      <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>yaml修改好之后，我们可以进入pod内进行验证，查看下pod的&#x2F;etc&#x2F;hosts文件是否有加上配置的域名解析</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">root@nginx-hosts-alis-5db8d7c54c-gf6km:/# cat /etc/hosts<br># Kubernetes-managed hosts file.<br><span class="hljs-number">127.0.0.1</span>       localhost<br>::<span class="hljs-number">1</span>     localhost ip6-localhost ip6-loopback<br>fe00::<span class="hljs-number">0</span> ip6-localnet<br>fe00::<span class="hljs-number">0</span> ip6-mcastprefix<br>fe00::<span class="hljs-number">1</span> ip6-allnodes<br>fe00::<span class="hljs-number">2</span> ip6-allrouters<br><span class="hljs-number">172.16.2.188</span>    nginx-hosts-alis-5db8d7c54c-gf6km<br><br># Entries added by HostAliases.<br><span class="hljs-number">127.0.0.1</span>       foo.local       bar.local<br><span class="hljs-number">10.1.2.3</span>        foo.remote      bar.remote<br></code></pre></td></tr></table></figure><p>从上面的结果看，这里域名解析已经加入到对应的pod中。</p><p>注意事项：这里修改yaml需要注意字段的缩进，HostAliases是在.spec.hostAliases这个层级，和containers是同级的。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之helm部署使用</title>
    <link href="/2020/09/11/2020-09-11-Kubernetes&#39;-helm-deployment-and-use/"/>
    <url>/2020/09/11/2020-09-11-Kubernetes&#39;-helm-deployment-and-use/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了如何通过helm部署应用到k8s集群中</p><h1 id="Helm的介绍"><a href="#Helm的介绍" class="headerlink" title="Helm的介绍"></a>Helm的介绍</h1><p>Helm就相当于kubernetes环境下的yum包管理工具。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>做为 Kubernetes 的一个包管理工具，Helm具有如下功能：</p><ul><li>创建新的 chart</li><li>chart 打包成 tgz 格式</li><li>上传 chart 到 chart 仓库或从仓库中下载 chart</li><li>在Kubernetes集群中安装或卸载 chart</li><li>管理用Helm安装的 chart 的发布周期</li></ul><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p>Helm 有三个重要概念：</p><ul><li>chart：包含了创建Kubernetes的一个应用实例的必要信息</li><li>config：包含了应用发布配置信息</li><li>release：是一个 chart 及其配置的一个运行实例</li></ul><h2 id="Helm组件"><a href="#Helm组件" class="headerlink" title="Helm组件"></a>Helm组件</h2><p>Helm 有以下两个组成部分：</p><h3 id="Helm-Client-是用户命令行工具，其主要负责如下："><a href="#Helm-Client-是用户命令行工具，其主要负责如下：" class="headerlink" title="Helm Client 是用户命令行工具，其主要负责如下："></a>Helm Client 是用户命令行工具，其主要负责如下：</h3><ul><li>本地 chart 开发</li><li>仓库管理</li><li>与 Tiller sever 交互</li><li>发送预安装的 chart</li><li>查询 release 信息</li><li>要求升级或卸载已存在的 release</li></ul><h3 id="Tiller-Server主要负责如"><a href="#Tiller-Server主要负责如" class="headerlink" title="Tiller Server主要负责如"></a>Tiller Server主要负责如</h3><p>是一个部署在Kubernetes集群内部的 server，其与 Helm client、Kubernetes API server 进行交互</p><ul><li>监听来自 Helm client 的请求</li><li>通过 chart 及其配置构建一次发布</li><li>安装 chart 到Kubernetes集群，并跟踪随后的发布</li><li>通过与Kubernetes交互升级或卸载 chart</li><li>简单的说，client 管理 charts，而 server 管理发布 release</li></ul><h1 id="Helm的安装部署"><a href="#Helm的安装部署" class="headerlink" title="Helm的安装部署"></a>Helm的安装部署</h1><p>下载客户端安装包安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://get.helm.sh/helm-v2.<span class="hljs-number">14</span>.<span class="hljs-number">3</span>-linux-amd64.tar.gz<br><span class="hljs-attribute">tar</span> -xf helm-v2.<span class="hljs-number">14</span>.<span class="hljs-number">3</span>-linux-amd64.tar.gz<br><span class="hljs-attribute">cd</span> helm-v2.<span class="hljs-number">14</span>.<span class="hljs-number">3</span>-linux-amd64/<br><span class="hljs-attribute">cp</span> helm /usr/local/bin/<br></code></pre></td></tr></table></figure><p>通过脚本下载安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/helm/</span>helm<span class="hljs-regexp">/master/</span>scripts/get &gt; get_helm.sh<br>$ chmod <span class="hljs-number">700</span> get_helm.sh<br>$ ./get_helm.sh<br></code></pre></td></tr></table></figure><p>helm 服务端安装Tiller。默认会部署swift和tiller这2个pod在kube-system命名空间下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">root@</span>VM-<span class="hljs-number">6</span>-<span class="hljs-number">17</span>-centos helm-<span class="hljs-keyword">data</span>]# helm <span class="hljs-keyword">init</span><br>[<span class="hljs-symbol">root@</span>VM-<span class="hljs-number">6</span>-<span class="hljs-number">17</span>-centos helm-<span class="hljs-keyword">data</span>]# kubectl <span class="hljs-keyword">get</span> pod -n kube-system <br>NAME                                    READY   STATUS    RESTARTS   AGE<br>swift-566d576-jtv9q                     <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          22h<br>tiller-deploy-698956c985-brzps          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          33h<br></code></pre></td></tr></table></figure><p>安装正常后可以通过查看helm版本来检查客户端和服务端是否安装正常</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos helm-data]# helm <span class="hljs-keyword">version</span><br>Client: &amp;<span class="hljs-keyword">version</span>.<span class="hljs-keyword">Version</span>&#123;SemVer:&quot;v2.10.0&quot;, GitCommit:&quot;9ad53aac42165a5fadc6c87be0dea6b115f93090&quot;, GitTreeState:&quot;clean&quot;&#125;<br><span class="hljs-keyword">Server</span>: &amp;<span class="hljs-keyword">version</span>.<span class="hljs-keyword">Version</span>&#123;SemVer:&quot;v2.10.0&quot;, GitCommit:&quot;9ad53aac42165a5fadc6c87be0dea6b115f93090&quot;, GitTreeState:&quot;clean&quot;&#125;<br></code></pre></td></tr></table></figure><p>另外一个值得注意的问题是RBAC，我们的 kubernetes 集群是1.8.x版本的，默认开启了RBAC访问控制，所以我们需要为Tiller创建一个ServiceAccount，让他拥有执行的权限，详细内容可以查看 Helm 文档中的Role-based Access Control创建rbac.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br> <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tiller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>然后使用kubectl创建：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ kubectl <span class="hljs-built_in">create</span> -f rbac-<span class="hljs-built_in">config</span>.yaml<br>serviceaccount <span class="hljs-string">&quot;tiller&quot;</span> created<br>clusterrolebinding <span class="hljs-string">&quot;tiller&quot;</span> created<br></code></pre></td></tr></table></figure><p>创建了tiller的 ServceAccount 后还没完，因为我们的 Tiller 之前已经就部署成功了，而且是没有指定 ServiceAccount 的，所以我们需要给 Tiller 打上一个 ServiceAccount 的补丁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ：">$ kubectl patch deploy --namespace kube-system tiller-deploy -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>至此, Helm客户端和服务端都配置完成了，接下来我们看看如何使用吧。</p><p><strong>安装遇到的问题</strong></p><ol><li>由于 Helm 默认会去gcr.io拉取镜像，所以如果你当前执行的机器没有配置科学上网的话可以实现下面的命令代替：</li></ol><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">helm</span> <span class="hljs-string">init</span> -<span class="hljs-string">i</span> <span class="hljs-string">registry</span>.<span class="hljs-string">cn-hangzhou</span>.<span class="hljs-string">aliyuncs</span>.<span class="hljs-string">com</span>/<span class="hljs-string">google_containers</span>/<span class="hljs-string">tiller:v2.</span><span class="hljs-string">14</span>.<span class="hljs-string">3</span> <span class="hljs-built_in">--stable-repo-url</span> <span class="hljs-string">http</span>://<span class="hljs-string">mirror</span>.<span class="hljs-string">azure</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">kubernetes</span>/<span class="hljs-string">charts</span>/ <span class="hljs-built_in">--service-account</span> <span class="hljs-string">tiller</span> <span class="hljs-built_in">--override</span> <span class="hljs-string">spec</span>.<span class="hljs-string">selector</span>.<span class="hljs-string">matchLabels</span>.<span class="hljs-string">&#x27;name&#x27;</span>=<span class="hljs-string">&#x27;tiller&#x27;</span>,<span class="hljs-string">spec</span>.<span class="hljs-string">selector</span>.<span class="hljs-string">matchLabels</span>.<span class="hljs-string">&#x27;app&#x27;</span>=<span class="hljs-string">&#x27;helm&#x27;</span> <span class="hljs-built_in">--output</span> <span class="hljs-string">yaml</span> | <span class="hljs-string">sed</span> <span class="hljs-string">&#x27;s@apiVersion: extensions/v1beta1@apiVersion: apps/v1@&#x27;</span> | <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> -<span class="hljs-string">f</span> -<br></code></pre></td></tr></table></figure><ol start="2"><li>我在安装过程中遇到了一些其他问题，比如初始化的时候出现了如下错误：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E0125</span> <span class="hljs-number">14</span>:<span class="hljs-number">03</span>:<span class="hljs-number">19</span>.<span class="hljs-number">093131</span>   <span class="hljs-number">56246</span> portforward.go:<span class="hljs-number">331</span>] an error occurred forwarding <span class="hljs-number">55943</span> -&gt; <span class="hljs-number">44134</span>: error forwarding port <span class="hljs-number">44134</span> to pod d01941068c9dfea1c9e46127578994d1cf8bc34c971ff109dc6faa4c05043a6e, uid : unable to do port forwarding: socat not found.<br><span class="hljs-attribute">2018</span>/<span class="hljs-number">01</span>/<span class="hljs-number">25</span> <span class="hljs-number">14</span>:<span class="hljs-number">03</span>:<span class="hljs-number">19</span> (<span class="hljs-number">0</span>xc420476210) (<span class="hljs-number">0</span>xc4203ae1e0) Stream removed, broadcasting: <span class="hljs-number">3</span><br><span class="hljs-attribute">2018</span>/<span class="hljs-number">01</span>/<span class="hljs-number">25</span> <span class="hljs-number">14</span>:<span class="hljs-number">03</span>:<span class="hljs-number">19</span> (<span class="hljs-number">0</span>xc4203ae1e0) (<span class="hljs-number">3</span>) Writing data frame<br><span class="hljs-attribute">2018</span>/<span class="hljs-number">01</span>/<span class="hljs-number">25</span> <span class="hljs-number">14</span>:<span class="hljs-number">03</span>:<span class="hljs-number">19</span> (<span class="hljs-number">0</span>xc420476210) (<span class="hljs-number">0</span>xc4200c3900) Create stream<br><span class="hljs-attribute">2018</span>/<span class="hljs-number">01</span>/<span class="hljs-number">25</span> <span class="hljs-number">14</span>:<span class="hljs-number">03</span>:<span class="hljs-number">19</span> (<span class="hljs-number">0</span>xc420476210) (<span class="hljs-number">0</span>xc4200c3900) Stream added, broadcasting: <span class="hljs-number">5</span><br><span class="hljs-attribute">Error</span>: cannot connect to Tiller<br></code></pre></td></tr></table></figure><p>解决方案：在节点上安装socat可以解决</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo yum <span class="hljs-keyword">install</span> -y socat<br></code></pre></td></tr></table></figure><h1 id="helm的使用"><a href="#helm的使用" class="headerlink" title="helm的使用"></a>helm的使用</h1><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root@master hello-helm]<span class="hljs-comment"># helm repo list</span><br>NAME URL<br>stable https:<span class="hljs-regexp">//</span>kubernetes-charts.storage.googleapis.com<br><span class="hljs-keyword">local</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8879</span>/charts<br>替换 repo 为阿里镜像<br>root@rancherk8sm1:~<span class="hljs-comment"># helm repo list</span><br>NAME URL<br>stable https:<span class="hljs-regexp">//</span>kubernetes-charts.storage.googleapis.com<br><span class="hljs-keyword">local</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8879</span>/charts<br><br>root@rancherk8sm1:~<span class="hljs-comment"># helm repo remove stable</span><br><span class="hljs-string">&quot;stable&quot;</span> has been removed from your repositories<br><br>root@rancherk8sm1:~<span class="hljs-comment"># helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="hljs-string">&quot;stable&quot;</span> has been added to your repositories<br><br>root@rancherk8sm1:~<span class="hljs-comment"># helm repo update</span><br>Hang tight <span class="hljs-keyword">while</span> we grab the latest from your chart repositories...<br>...Skip <span class="hljs-keyword">local</span> chart repository<br>...Successfully got an update from the <span class="hljs-string">&quot;stable&quot;</span> chart repository<br>Update Complete. ⎈ Happy Helming!⎈<br><br>root@rancherk8sm1:~<span class="hljs-comment"># helm repo list</span><br>NAME URL<br><span class="hljs-keyword">local</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8879</span>/charts<br>stable https:<span class="hljs-regexp">//</span>kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure><p>我们可以在本地启动一个 Repository Server，并将其加入到 Helm Repo 列表中。Helm Repository 必须以 Web 服务的方式提供，这里我们就使用 helm serve 命令启动一个 Repository Server，该 Server 缺省使用 $HOME&#x2F;.helm&#x2F;repository&#x2F;local 目录作为 Chart 存储，并在 8879 端口上提供服务。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">$ helm serve <span class="hljs-meta">&amp;</span><br>Now serving you on <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8879</span><br></code></pre></td></tr></table></figure><p>默认情况下该服务只监听 127.0.0.1，如果你要绑定到其它网络接口，可使用以下命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">$ helm serve --address <span class="hljs-number">192.168</span>.<span class="hljs-number">100.211</span>:<span class="hljs-number">8879</span> <span class="hljs-meta">&amp;</span><br></code></pre></td></tr></table></figure><p>如果你想使用指定目录来做为 Helm Repository 的存储目录，可以加上 –repo-path 参数：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ helm serve --address <span class="hljs-number">192.168</span>.<span class="hljs-number">100.211</span>:<span class="hljs-number">8879</span> --repo-path <span class="hljs-regexp">/data/</span>helm<span class="hljs-regexp">/repository/</span> --url http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">100.211</span>:<span class="hljs-number">8879</span><span class="hljs-regexp">/charts/</span><br></code></pre></td></tr></table></figure><p>通过 helm repo index 命令将 Chart 的 Metadata 记录更新在 index.yaml 文件中:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 更新 Helm Repository 的索引文件</span><br>$ cd <span class="hljs-regexp">/home/</span>k8s<span class="hljs-regexp">/.helm/</span>repository/local<br>$ helm repo index --url=http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">100.211</span>:<span class="hljs-number">8879</span> .<br></code></pre></td></tr></table></figure><p>完成启动本地 Helm Repository Server 后，就可以将本地 Repository 加入 Helm 的 Repo 列表。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ helm repo <span class="hljs-built_in">add</span> <span class="hljs-built_in">local</span> <span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8879</span><br><span class="hljs-string">&quot;local&quot;</span> has been added <span class="hljs-built_in">to</span> your repositories<br></code></pre></td></tr></table></figure><h2 id="查找chart"><a href="#查找chart" class="headerlink" title="查找chart"></a>查找chart</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helm search</span> <br></code></pre></td></tr></table></figure><p>如果没有使用过滤条件，helm search 显示所有可用的 charts</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">helm <span class="hljs-keyword">search</span> mysql<br>helm inspect <span class="hljs-keyword">stable</span>/mysql<br></code></pre></td></tr></table></figure><p>使用 inspect 命令可以查看到该 chart 里面所有描述信息，包括运行方式、配置信息等等。</p><h2 id="安装chart"><a href="#安装chart" class="headerlink" title="安装chart"></a>安装chart</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm install stable/mysql<br></code></pre></td></tr></table></figure><p>安装 chart 会创建一个新 release 对象。上面的 release 被命名为 torrid-gnat</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">helm install <span class="hljs-keyword">stable</span>/mysql <span class="hljs-comment">--name mydb</span><br></code></pre></td></tr></table></figure><p>如果你想使用你自己的 release 名称，只需使用–name参数指定即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helm status mydb</span><br></code></pre></td></tr></table></figure><p>要跟踪 release 状态或重新读取配置信息，可以使用 helm status 查看</p><h2 id="自定义chart"><a href="#自定义chart" class="headerlink" title="自定义chart"></a>自定义chart</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">helm inspect <span class="hljs-keyword">values</span> <span class="hljs-keyword">stable</span>/mysql<br></code></pre></td></tr></table></figure><p>要查看 chart 上可配置的选项，使用helm inspect values命令即可，比如我们这里查看上面的 mysql 的配置选项：</p><p>然后，我们可以直接在 YAML 格式的文件中来覆盖上面的任何配置，在安装的时候直接使用该配置文件即可：(config.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">mysqlUser:</span> haimaxyUser<br><span class="hljs-symbol">mysqlDatabase:</span> haimaxyDB<br><span class="hljs-symbol">service:</span><br><span class="hljs-symbol"> type:</span> NodePort<br></code></pre></td></tr></table></figure><p>我们这里通过 config.yaml 文件定义了 mysqlUser 和 mysqlDatabase，并且把 service 的类型更改为了 NodePort，然后现在我们来安装的时候直接指定该 yaml 文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ helm install -f <span class="hljs-built_in">config</span>.yaml stable/mysql <span class="hljs-comment">--name mydb</span><br></code></pre></td></tr></table></figure><p>可以看到当前 release 的名字已经变成 mydb 了。然后可以查看下 mydb 关联的 Service 是否变成 NodePort 类型的了：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span> <span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">CLUSTER</span>-IP <span class="hljs-keyword">EXTERNAL</span>-IP PORT(S) AGE<br>kubernetes ClusterIP <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  &lt;<span class="hljs-keyword">none</span>&gt; <span class="hljs-number">443</span>/TCP <span class="hljs-number">110</span>d<br>mewing-squid-mysql ClusterIP <span class="hljs-number">10.108</span><span class="hljs-number">.197</span><span class="hljs-number">.48</span> &lt;<span class="hljs-keyword">none</span>&gt; <span class="hljs-number">3306</span>/TCP <span class="hljs-number">46</span>m<br>mydb-mysql NodePort <span class="hljs-number">10.96</span><span class="hljs-number">.150</span><span class="hljs-number">.198</span> &lt;<span class="hljs-keyword">none</span>&gt; <span class="hljs-number">3306</span>:<span class="hljs-number">32604</span>/TCP <span class="hljs-number">8</span>m<br></code></pre></td></tr></table></figure><p>看到服务 mydb-mysql 变成了 NodePort 类型的，二之前默认创建的 mewing-squid-mysql 是 ClusterIP 类型的，证明上面我们通过 YAML 文件来覆盖 values 是成功的。</p><p>接下来我们查看下 Pod 的状况：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ kubectl get pods<br><span class="hljs-keyword">NAME</span> READY <span class="hljs-keyword">STATUS</span> RESTARTS AGE<br>mewing-squid-mysql-<span class="hljs-number">69</span>f587bdf9-z7glv <span class="hljs-number">0</span>/<span class="hljs-number">1</span> Pending <span class="hljs-number">0</span> <span class="hljs-number">49</span>m<br>mydb-mysql-dfc999888-hbw5d <span class="hljs-number">0</span>/<span class="hljs-number">1</span> Pending <span class="hljs-number">0</span> <span class="hljs-number">11</span>m<br></code></pre></td></tr></table></figure><p>比较奇怪的是之前默认创建的和现在的 mydb 的 release 创建的 Pod 都是 Pending 状态，直接使用 describe 命令查看下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl describe pod mydb-mysql-dfc999888-hbw5d<br>Name: mydb-mysql-dfc999888-hbw5d<br>Namespace: <span class="hljs-built_in"> default</span><br><span class="hljs-built_in"></span>Node: &lt;none&gt;<br>Labels: <span class="hljs-attribute">app</span>=mydb-mysql<br> <span class="hljs-attribute">pod-template-hash</span>=897555444<br><span class="hljs-built_in">..</span>.<br>Events:<br><span class="hljs-built_in"> Type </span>Reason Age <span class="hljs-keyword">From</span> Message<br> ---- ------ ---- ---- -------<br> <span class="hljs-built_in">Warning</span> FailedScheduling 2m (x37 over 12m) default-scheduler pod has unbound PersistentVolumeClaims (repeated 2 times)<br></code></pre></td></tr></table></figure><p>我们可以发现两个 Pod 处于 Pending 状态的原因都是 PVC 没有被绑定上，所以这里我们可以通过 storageclass 或者手动创建一个合适的 PV 对象来解决这个问题。</p><p>另外为了说明 helm 更新的用法，我们这里来直接禁用掉数据持久化，可以在上面的config.yaml 文件中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">persistence:</span><br> <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>另外一种方法就是在安装过程中使用–set来覆盖对应的 value 值，比如禁用数据持久化，我们这里可以这样来覆盖：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ helm install stable/mysql --<span class="hljs-built_in">set</span> persistence.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">false</span> --name mydb<br></code></pre></td></tr></table></figure><h2 id="升级chart"><a href="#升级chart" class="headerlink" title="升级chart"></a>升级chart</h2><p> 我们这里将数据持久化禁用掉来对上面的 mydb 进行升级：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">echo</span> <span class="hljs-string">config.yaml</span><br><span class="hljs-attr">mysqlUser:</span> <span class="hljs-string">haimaxyUser</span><br><span class="hljs-attr">mysqlDatabase:</span> <span class="hljs-string">haimaxyDB</span><br><span class="hljs-attr">service:</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br><span class="hljs-attr">persistence:</span><br> <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">$</span> <span class="hljs-string">helm</span> <span class="hljs-string">upgrade</span> <span class="hljs-string">-f</span> <span class="hljs-string">config.yaml</span> <span class="hljs-string">mydb</span> <span class="hljs-string">stable/mysql</span><br><span class="hljs-string">helm</span> <span class="hljs-string">upgrade</span> <span class="hljs-string">-f</span> <span class="hljs-string">config.yaml</span> <span class="hljs-string">mydb</span> <span class="hljs-string">stable/mysql</span><br><span class="hljs-string">Release</span> <span class="hljs-string">&quot;mydb&quot;</span> <span class="hljs-string">has</span> <span class="hljs-string">been</span> <span class="hljs-string">upgraded.</span> <span class="hljs-string">Happy</span> <span class="hljs-string">Helming!</span><br><span class="hljs-attr">LAST DEPLOYED:</span> <span class="hljs-string">Wed</span> <span class="hljs-string">Sep</span> <span class="hljs-number">5</span> <span class="hljs-number">00</span><span class="hljs-string">:38:33</span> <span class="hljs-number">2018</span><br><span class="hljs-attr">NAMESPACE:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">STATUS:</span> <span class="hljs-string">DEPLOYED</span><br><span class="hljs-attr">RESOURCES:</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>可以看到已经变成 DEPLOYED 状态了，现在我们再去看看 Pod 的状态呢：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ kubectl get pods<br><span class="hljs-keyword">NAME</span> READY <span class="hljs-keyword">STATUS</span> RESTARTS AGE<br>mewing-squid-mysql-<span class="hljs-number">69</span>f587bdf9-z7glv <span class="hljs-number">0</span>/<span class="hljs-number">1</span> Pending <span class="hljs-number">0</span> <span class="hljs-number">1</span>h<br>mydb-mysql-<span class="hljs-number">6</span>ffc84bbf6-lcn4d <span class="hljs-number">0</span>/<span class="hljs-number">1</span> PodInitializing <span class="hljs-number">0</span> <span class="hljs-number">49</span>s<br></code></pre></td></tr></table></figure><p>我们可以看到现在没有任何关于 PVC 的错误信息了，这是因为我们刚刚更新的版本中就是禁用掉了的数据持久化的，证明 helm upgrade 和 –values 是生效了的。现在我们使用 helm ls 命令查看先当前的 release：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ helm ls<br>NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE<br>mewing-squid<span class="hljs-number"> 1 </span>Tue Sep<span class="hljs-number"> 4 </span>23:31:23<span class="hljs-number"> 2018 </span>DEPLOYED mysql-0.10.1 5.7.14 default<br>mydb<span class="hljs-number"> 2 </span>Wed Sep<span class="hljs-number"> 5 </span>00:38:33<span class="hljs-number"> 2018 </span>DEPLOYED mysql-0.10.1 5.7.14 default<br></code></pre></td></tr></table></figure><p>可以看到 mydb 这个 release 的REVISION已经变成2了，这是因为 release 的版本是递增的，每次安装、升级或者回滚，版本号都会加1，第一个版本号始终为1，同样我们可以使用 helm history 命令查看 release 的历史版本：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ helm history mydb<br>REVISION UPDATED STATUS CHART DESCRIPTION<br>1 Wed Sep<span class="hljs-number"> 5 </span>00:09:44<span class="hljs-number"> 2018 </span>SUPERSEDED mysql-0.10.1 Install complete<br>2 Wed Sep<span class="hljs-number"> 5 </span>00:38:33<span class="hljs-number"> 2018 </span>DEPLOYED mysql-0.10.1 Upgrade complete<br></code></pre></td></tr></table></figure><p>当然如果我们要回滚到某一个版本的话，使用 helm rollback 命令即可，比如我们将 mydb 回滚到上一个版本：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>helm rollback mydb <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="删除chart"><a href="#删除chart" class="headerlink" title="删除chart"></a>删除chart</h2><p>我们就学习了要删除一个 release 直接使用 helm delete 命令就 OK：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ helm <span class="hljs-keyword">delete</span> mewing-squid<br>release <span class="hljs-string">&quot;mewing-squid&quot;</span> deleted<br></code></pre></td></tr></table></figure><p>这将从集群中删除该 release，但是这并不代表就完全删除了，我们还可以通过–deleted参数来显示被删除掉 release:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ helm list <span class="hljs-comment">--deleted</span><br><span class="hljs-type">NAME</span> REVISION UPDATED STATUS CHART APP <span class="hljs-keyword">VERSION</span> NAMESPACE<br>mewing-squid <span class="hljs-number">1</span> Tue Sep <span class="hljs-number">4</span> <span class="hljs-number">23</span>:<span class="hljs-number">31</span>:<span class="hljs-number">23</span> <span class="hljs-number">2018</span> DELETED mysql<span class="hljs-number">-0.10</span><span class="hljs-number">.1</span> <span class="hljs-number">5.7</span><span class="hljs-number">.14</span> <span class="hljs-keyword">default</span><br>$ helm list <span class="hljs-comment">--all</span><br><span class="hljs-type">NAME</span> REVISION UPDATED STATUS CHART APP <span class="hljs-keyword">VERSION</span> NAMESPACE<br>mewing-squid <span class="hljs-number">1</span> Tue Sep <span class="hljs-number">4</span> <span class="hljs-number">23</span>:<span class="hljs-number">31</span>:<span class="hljs-number">23</span> <span class="hljs-number">2018</span> DELETED mysql<span class="hljs-number">-0.10</span><span class="hljs-number">.1</span> <span class="hljs-number">5.7</span><span class="hljs-number">.14</span> <span class="hljs-keyword">default</span><br>mydb <span class="hljs-number">2</span> Wed Sep <span class="hljs-number">5</span> <span class="hljs-number">00</span>:<span class="hljs-number">38</span>:<span class="hljs-number">33</span> <span class="hljs-number">2018</span> DEPLOYED mysql<span class="hljs-number">-0.10</span><span class="hljs-number">.1</span> <span class="hljs-number">5.7</span><span class="hljs-number">.14</span> <span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><p>helm list –all则会显示所有的 release，包括已经被删除的</p><p>由于 Helm 保留已删除 release 的记录，因此不能重新使用 release 名称。（如果 确实 需要重新使用此 release 名称，则可以使用此 –replace 参数，但它只会重用现有 release 并替换其资源。）这点是不是和 docker container 的管理比较类似</p><p>请注意，因为 release 以这种方式保存，所以可以回滚已删除的资源并重新激活它。</p><p>如果要彻底删除 release，则需要加上–purge参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ helm <span class="hljs-keyword">delete</span> mewing<span class="hljs-operator">-</span>squid <span class="hljs-comment">--purge</span><br><span class="hljs-keyword">release</span> &quot;mewing-squid&quot; deleted<br></code></pre></td></tr></table></figure><h2 id="helm的打包和上传下载"><a href="#helm的打包和上传下载" class="headerlink" title="helm的打包和上传下载"></a>helm的打包和上传下载</h2><p>打包发布到本地repo</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM-<span class="hljs-number">6</span>-<span class="hljs-number">17</span>-centos ~]<span class="hljs-comment"># helm package jenkins --debug</span><br>Successfully packaged chart and saved it to: <span class="hljs-regexp">/root/</span>jenkins-<span class="hljs-number">0.13</span>.<span class="hljs-number">5</span>.tgz<br>[debug] Successfully saved <span class="hljs-regexp">/root/</span>jenkins-<span class="hljs-number">0.13</span>.<span class="hljs-number">5</span>.tgz to <span class="hljs-regexp">/root/</span>.helm<span class="hljs-regexp">/repository/</span>local<br></code></pre></td></tr></table></figure><p>打包发布到远程repo</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-6</span><span class="hljs-string">-17</span>-centos ~]# helm plugin install https://github.com/chartmuseum/helm-push<br>[root@VM<span class="hljs-string">-6</span><span class="hljs-string">-17</span>-centos ~]# helm push ./jenkins nwx-tcr-nwx-ns<br>Pushing jenkins<span class="hljs-string">-0</span>.13.5.tgz to nwx-tcr-nwx-ns...<br>Done.<br>[root@VM<span class="hljs-string">-6</span><span class="hljs-string">-17</span>-centos ~]# cd /root/.helm/repository/local<br>[root@VM<span class="hljs-string">-6</span><span class="hljs-string">-17</span>-centos local]# ll<br>total 24<br>-rw-r--r-- 1 root root  1241 Sep 11 20:28 index.yaml<br>-rw-r--r-- 1 root root 12866 Sep 11 20:28 jenkins<span class="hljs-string">-0</span>.13.5.tgz<br>-rw-r--r-- 1 root root  2595 Jun  5 10:05 mongodb<span class="hljs-string">-0</span>.1.0.tgz<br>[root@VM<span class="hljs-string">-6</span><span class="hljs-string">-17</span>-centos local]# helm push jenkins<span class="hljs-string">-0</span>.13.5.tgz nwx-tcr-nwx-ns<br>Pushing jenkins<span class="hljs-string">-0</span>.13.5.tgz to nwx-tcr-nwx-ns...<br>Done.<br><br></code></pre></td></tr></table></figure><p>下载chart包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> fetch nwx-tcr-nwx-ns/jenkins --version <span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>有的时候我们需要填写第三方的chart包，该如何填写呢？我们拿es的官方库来举例说明</p><p>登录这个网站<a href="https://helm.elastic.co/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E7%BD%91%E7%AB%99key%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%AF%B9%E7%94%A8%E7%9A%84chart%E5%8C%85">https://helm.elastic.co/，可以根据网站key去获取对用的chart包</a></p><h2 id="helm包托管到到腾讯云的TCR上"><a href="#helm包托管到到腾讯云的TCR上" class="headerlink" title="helm包托管到到腾讯云的TCR上"></a>helm包托管到到腾讯云的TCR上</h2><p>首先在TCR上开通实例，并将实例开通外网访问，配置helm客户端所在机器的ip到外网访问白名单</p><p><img src="/img/Kubernetes'-helm-deployment-and-use/1.png" alt="upload-image"> </p><p>可以手动将chart包上传到仓库上</p><p><img src="/img/Kubernetes'-helm-deployment-and-use/2.png" alt="upload-image"> </p><p>这边也可以用命令将包上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">helm repo add nwx-tcr-nwx-ns https://nwx-tcr.tencentcloudcr.com/chartrepo/nwx-ns --username XXXXXXX --password eyJhbGciOiJSUzI1NiIsImtpZCI6Ikg0SjM6WFJQVjo0QkRDOkNDWUI6SUJVUzpUNjdUOkxXSlc6WUNMRjo2WkNCOkNDVFY6UlE3RzpJT1pBIn0.eyJvd25lclVpbiI6IjIxNTk5NzM0MTciLCJvcGVyYXRvclVpbiI6IjEwMDAxMTAwNzQ5MSIsImV4cCI6MTU5OTgzMjMzNCwibmJmIjoxNTk5ODI4NzM0LCJpYXQiOjE1OTk4Mjg3MzR9.SYaux93fNpZMjltRbITA-AZr3b7RVEfZdK3cQ89qJByZvc733EBUoonSNGPmlU0YhgjVOJrrBcSoZGG12euQjT62FaWNbN_QhEOUEWZ84BekKHIYKXRFP9B78epXmzpJKrU-uoD4GLxduBMkmnK1S1kbRgoYdS3uRSqrGdO9rblk6Zut_s96TyibBicExheJOXfigjLThjkhnA4wR6TxY48qzpjNp12xnA394R7VTQQFCsV4X3En5aaeOZgjcjLB8-LmJr0qtenAkc_cqplMYncnbXhN8owAhFjYuYBF-</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm plugin install https://github.com/chartmuseum/helm-push</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm push ./jenkins nwx-tcr-nwx-ns</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">helm push jenkins-0.13.5.tgz nwx-tcr-nwx-ns</span><br></code></pre></td></tr></table></figure><p>从TCR上下载helm包，直接浏览器下载到本地</p><p><img src="/img/Kubernetes'-helm-deployment-and-use/3.png" alt="upload-image"> </p><p>用命令下载到liunx机器上</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> fetch nwx-tcr-nwx-ns/jenkins --version <span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>查看chart包的yaml文件信息</p><p><img src="/img/Kubernetes'-helm-deployment-and-use/4.png" alt="upload-image"></p><h1 id="Helm3更新和部署"><a href="#Helm3更新和部署" class="headerlink" title="Helm3更新和部署"></a>Helm3更新和部署</h1><h2 id="移除了Tiller"><a href="#移除了Tiller" class="headerlink" title="移除了Tiller"></a>移除了Tiller</h2><p>在Helm 2的开发周期中，我们引入了Tiller。Tiller在团队协作中共享集群时扮演了重要角色。 它使得不同的操作员与相同的版本进行交互称为了可能。</p><p>Kubernetes 1.6默认使用了基于角色的访问控制（RBAC），在生产环境对Tiller的锁定使用变得难于管理。 由于大量可能的安全策略，我们的立场是提供一个自由的默认配置。这样可以允许新手用户可以乐于尝试Helm 和Kubernetes而不需要深挖安全控制。 不幸的是这种自由的配置会授予用户他们不该有的权限。DevOps和SRE 在安装多用户集群时不得不去学习额外的操作步骤。</p><p>在听取了社区成员在特定场景使用Helm之后，我们发现Tiller的版本管理系统不需要依赖于集群内部用户去维护 状态或者作为一个Helm版本信息的中心hub。取而代之的是，我们可以简单地从Kubernetes API server获取信息， 在Chart客户端处理并在Kubernetes中存储安装记录。</p><p>Tiller的首要目标可以在没有Tiller的情况下实现，因此针对于 Helm 3 我们做的首要决定之一就是完全移除Tiller。</p><p>随着Tiller的消失，Helm的安全模块从根本上被简化。Helm 3 现在支持所有Kubernetes流行的安全、 身份和授权特性。Helm的权限通过你的 kubeconfig文件进行评估。 集群管理员可以限制用户权限，只要他们觉得合适， 无论什么粒度都可以做到。版本发布记录和Helm的剩余保留功能仍然会被记录在集群中。</p><p>这边命令行操作只需按照客户端，按照步骤如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//g</span>et.helm.sh/helm-v3.<span class="hljs-number">4.1</span>-linux-amd64.tar.gz<br><span class="hljs-comment"># 只需要下载二进制即安装完成</span><br>mv linux-amd64<span class="hljs-regexp">/helm /u</span>sr<span class="hljs-regexp">/local/</span>bin/helm<br></code></pre></td></tr></table></figure><h2 id="helm3回滚策略"><a href="#helm3回滚策略" class="headerlink" title="helm3回滚策略"></a>helm3回滚策略</h2><p>你的团队正好在Kubernetes上使用Helm部署了生产环境应用。chart包含了一个部署对象使用了三套副本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm install myapp ./myapp</span><br></code></pre></td></tr></table></figure><p>开发新人加入了团队。当他们第一点观察生产环境集群时，发生了一个像是咖啡洒在了键盘上一样的严重事故， 他们使用 kubectl scale 对生产环境部署进行缩容，将副本数从3降到了0 。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl scale <span class="hljs-attribute">--replicas</span>=0 deployment/myapp<br></code></pre></td></tr></table></figure><p>团队里面的另一个人看到线上环境已经挂了就决定回滚这个版本到之前的状态：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>helm rollback myapp<br></code></pre></td></tr></table></figure><h2 id="发布名称现在限制在namespace范围内"><a href="#发布名称现在限制在namespace范围内" class="headerlink" title="发布名称现在限制在namespace范围内"></a>发布名称现在限制在namespace范围内</h2><p>在Helm 3中，特定的版本信息作为发布本身存储在相同的命名空间中。 意味着用户现在可以在两个分开的命名空间中使用helm install wordpress stable&#x2F;wordpress， 并且每个都能使用 helm list 改变当前命名空间。 (例如 helm list –namespace foo)。</p><p> 与本地集群命名空间更好的一致性，使得 helm list 命令不再需要默认列出所有发布版本的列表。 取而代之的是，仅仅会在命名空间中列出当前kubernetes上下文的版本。 (也就是说运行kubectl config view –minify时会显示命名空间). 也就意味着您在执行helm list时必须提供 –all-namespaces 标识才能获得和Helm 2同样的结果。</p><h2 id="使用Json格式验证Chart-Values"><a href="#使用Json格式验证Chart-Values" class="headerlink" title="使用Json格式验证Chart Values"></a>使用Json格式验证Chart Values</h2><p>chart values现在可以使用JSON结构了。这保证用户提供value可以按照chart维护人员设置的结构排列， 并且当用户提供了错误的chart value时会有更好错误提示。</p><p>当调用以下命令时会进行JSON格式验证：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">helm install<br>helm upgrade<br>helm <span class="hljs-keyword">template</span><br>helm lint<br></code></pre></td></tr></table></figure><h2 id="安装时必须指定Name-或者–generate-name"><a href="#安装时必须指定Name-或者–generate-name" class="headerlink" title="安装时必须指定Name(或者–generate-name)"></a>安装时必须指定Name(或者–generate-name)</h2><p>Helm 2中，如果没有提供名称， 会自动生成一个名称。在生产环境，这被证明是一个麻烦事而不是一个有用的特性。 而在Helm 3中，如果 helm install 没有提供name，会抛异常。</p><p>如果仍然需要一个自动生成的名称，您可以使用 –generate-name 创建。</p><h2 id="命令行重命名"><a href="#命令行重命名" class="headerlink" title="命令行重命名"></a>命令行重命名</h2><p>为了更好地从包管理器中调整不当措辞，helm delete被重命名为helm uninstall。helm delete 依然作为 helm uninstall 的别名保留，因此其他格式也能使用。</p><p>Helm 2 中为了清除版本清单，必须提供–purge参数。这个功能现在是默认使用的。 为保留之前的操作行为，要使用 helm uninstall –keep-history。</p><p>另外，其他一些重命名的命令提供了以下约定：</p><p>helm inspect -&gt; helm show<br>helm fetch -&gt; helm pull</p><p>这些命令都保留了老的动词作为别名，因此您能够使用任意一种格式。</p><h2 id="命名空间不存在则报错"><a href="#命名空间不存在则报错" class="headerlink" title="命名空间不存在则报错"></a>命名空间不存在则报错</h2><p>当用命名空间创建版本时，命名空间不存在，Helm 2会创建一个命名空间。 Helm 3中沿用了其他Kubernetes 工具的形式，如果命名空间不存在，就返回错误。 如果您明确指定 –create-namespace 参数，Helm 3 会创建一个命名空间。</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Helm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于kubernetes垃圾回收那点事</title>
    <link href="/2020/09/10/2020-09-10-About-kubernetes-garbage-collection/"/>
    <url>/2020/09/10/2020-09-10-About-kubernetes-garbage-collection/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了在kubernetes中kubelet如何对镜像和容器进行垃圾回收。</p><h1 id="kubelet垃圾回收介绍及源码分析"><a href="#kubelet垃圾回收介绍及源码分析" class="headerlink" title="kubelet垃圾回收介绍及源码分析"></a>kubelet垃圾回收介绍及源码分析</h1><p>使用kubernetes的过程中，为了保持磁盘的空间在一个合理的使用率，kubele提供了垃圾回收机制，kubelet的垃圾回收机制分为镜像的回收和container的回收。</p><p>Kubelet 垃圾回收（Garbage Collection）是一个非常有用的功能，它负责自动清理节点上的无用镜像和容器。Kubelet 每隔 1 分钟进行一次容器清理，每隔 5 分钟进行一次镜像清理（截止到 v1.18版本，垃圾回收间隔时间还都是在源码中固化的，不可自定义配置）</p><p>我们可以在kubelet的源码src\k8s.io\kubernetes\pkg\kubelet\kubelet.go中看下这个时间的配置，其中定义了2个变量分别是ContainerGCPeriod 和ImageGCPeriod ，表示执行镜像和容器的垃圾回收间隔时间</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ContainerGCPeriod is the period for performing container garbage collection.</span><br>ContainerGCPeriod = time.<span class="hljs-built_in">Minute</span><br><span class="hljs-comment">// ImageGCPeriod is the period for performing image garbage collection.</span><br>ImageGCPeriod = <span class="hljs-number">5</span> * time.<span class="hljs-built_in">Minute</span><br></code></pre></td></tr></table></figure><p>执行垃圾回收的入口方式是StartGarbageCollection</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(kl *Kubelet)</span></span> StartGarbageCollection() &#123;<br>loggedContainerGCFailure := <span class="hljs-literal">false</span><br><span class="hljs-keyword">go</span> wait.Until(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := kl.containerGC.GarbageCollect(); err != <span class="hljs-literal">nil</span> &#123;<br>klog.Errorf(<span class="hljs-string">&quot;Container garbage collection failed: %v&quot;</span>, err)<br>kl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.ContainerGCFailed, err.Error())<br>loggedContainerGCFailure = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">var</span> vLevel klog.Level = <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> loggedContainerGCFailure &#123;<br>vLevel = <span class="hljs-number">1</span><br>loggedContainerGCFailure = <span class="hljs-literal">false</span><br>&#125;<br><br>klog.V(vLevel).Infof(<span class="hljs-string">&quot;Container garbage collection succeeded&quot;</span>)<br>&#125;<br>&#125;, ContainerGCPeriod, wait.NeverStop)<br><br><span class="hljs-comment">// when the high threshold is set to 100, stub the image GC manager</span><br><span class="hljs-keyword">if</span> kl.kubeletConfiguration.ImageGCHighThresholdPercent == <span class="hljs-number">100</span> &#123;<br>klog.V(<span class="hljs-number">2</span>).Infof(<span class="hljs-string">&quot;ImageGCHighThresholdPercent is set 100, Disable image GC&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>prevImageGCFailed := <span class="hljs-literal">false</span><br><span class="hljs-keyword">go</span> wait.Until(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := kl.imageManager.GarbageCollect(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> prevImageGCFailed &#123;<br>klog.Errorf(<span class="hljs-string">&quot;Image garbage collection failed multiple times in a row: %v&quot;</span>, err)<br><span class="hljs-comment">// Only create an event for repeated failures</span><br>kl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.ImageGCFailed, err.Error())<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>klog.Errorf(<span class="hljs-string">&quot;Image garbage collection failed once. Stats initialization may not have completed yet: %v&quot;</span>, err)<br>&#125;<br>prevImageGCFailed = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">var</span> vLevel klog.Level = <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> prevImageGCFailed &#123;<br>vLevel = <span class="hljs-number">1</span><br>prevImageGCFailed = <span class="hljs-literal">false</span><br>&#125;<br><br>klog.V(vLevel).Infof(<span class="hljs-string">&quot;Image garbage collection succeeded&quot;</span>)<br>&#125;<br>&#125;, ImageGCPeriod, wait.NeverStop)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="镜像收集"><a href="#镜像收集" class="headerlink" title="镜像收集"></a>镜像收集</h2><p>Kubernetes 通过 imageManager 与 cadvisor 协作的方式管理所有镜像的生命周期。</p><p>收集垃圾镜像的策略考虑两个因素： HighThresholdPercent 和 LowThresholdPercent。磁盘使用率超过高阈值将触发垃圾收集策略。该策略将删除最近最少使用的镜像直至满足低阈值。</p><p>kl.imageManager.GarbageCollect</p><p>上面已经分析了容器回收的主要流程，下面会继续分析镜像回收的流程，kl.imageManager.GarbageCollect 是镜像回收任务启动的方法，镜像回收流程是在 imageManager 中进行的，首先了解下 imageManager 的初始化，imageManager 也是在 NewMainKubelet 方法中进行初始化的。</p><p>k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;kubelet&#x2F;kubelet.go</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func NewMainKubelet()&#123;<br>    ......    <br>    // 初始化时需要指定三个参数，三个参数已经在上文中提到过<br>    <span class="hljs-attribute">imageGCPolicy</span> := images<span class="hljs-variable">.ImageGCPolicy</span>&#123;<br>        MinAge:               kubeCfg<span class="hljs-variable">.ImageMinimumGCAge</span><span class="hljs-variable">.Duration</span>,<br>        HighThresholdPercent: int(kubeCfg<span class="hljs-variable">.ImageGCHighThresholdPercent</span>),<br>        LowThresholdPercent:  int(kubeCfg<span class="hljs-variable">.ImageGCLowThresholdPercent</span>),<br>    &#125;<br>    ......<br>    imageManager, err := images<span class="hljs-variable">.NewImageGCManager</span>(klet<span class="hljs-variable">.containerRuntime</span>, klet<span class="hljs-variable">.StatsProvider</span>, kubeDeps<span class="hljs-variable">.Recorder</span>, nodeRef, imageGCPolicy, crOptions<span class="hljs-variable">.PodSandboxImage</span>)<br>    if err != nil &#123;<br>        return nil, fmt<span class="hljs-variable">.Errorf</span>(&quot;failed to initialize image manager: %v&quot;, err)<br>    &#125;<br>    klet<span class="hljs-variable">.imageManager</span> = imageManager<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>kl.imageManager.GarbageCollect 方法的主要逻辑为：</p><ol><li>首先调用 im.statsProvider.ImageFsStats 获取容器镜像存储目录挂载点文件系统的磁盘信息；</li><li>获取挂载点的 available 和 capacity 信息并计算其使用率；</li><li>若使用率大于 HighThresholdPercent，首先根据 LowThresholdPercent 值计算需要释放的磁盘量，然后调用 im.freeSpace 释放未使用的 image 直到满足磁盘空闲率；</li></ol><p>k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;kubelet&#x2F;images&#x2F;image_gc_manager.go:269</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func (im *realImageGCManager) <span class="hljs-built_in">GarbageCollect</span>() error &#123;<br>    <span class="hljs-comment">// 1、获取容器镜像存储目录挂载点文件系统的磁盘信息</span><br>    fsStats, err := im<span class="hljs-selector-class">.statsProvider</span><span class="hljs-selector-class">.ImageFsStats</span>()<br>    <span class="hljs-keyword">if</span> err != nil &#123;<br>        return err<br>    &#125;<br><br>    <span class="hljs-selector-tag">var</span> capacity, available int64<br>    <span class="hljs-keyword">if</span> fsStats<span class="hljs-selector-class">.CapacityBytes</span> != nil &#123;<br>        capacity = <span class="hljs-built_in">int64</span>(*fsStats.CapacityBytes)<br>    &#125;<br>    <span class="hljs-keyword">if</span> fsStats<span class="hljs-selector-class">.AvailableBytes</span> != nil &#123;<br>        available = <span class="hljs-built_in">int64</span>(*fsStats.AvailableBytes)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> available &gt; capacity &#123;<br>        available = capacity<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> capacity == <span class="hljs-number">0</span> &#123;<br>        err := goerrors<span class="hljs-selector-class">.New</span>(<span class="hljs-string">&quot;invalid capacity 0 on image filesystem&quot;</span>)<br>        im<span class="hljs-selector-class">.recorder</span><span class="hljs-selector-class">.Eventf</span>(im<span class="hljs-selector-class">.nodeRef</span>, v1<span class="hljs-selector-class">.EventTypeWarning</span>, events<span class="hljs-selector-class">.InvalidDiskCapacity</span>, err<span class="hljs-selector-class">.Error</span>())<br>        return err<br>    &#125;<br>    <span class="hljs-comment">// 2、若使用率大于 HighThresholdPercent，此时需要回收镜像</span><br>    usagePercent := <span class="hljs-number">100</span> - <span class="hljs-built_in">int</span>(available*<span class="hljs-number">100</span>/capacity)<br>    <span class="hljs-keyword">if</span> usagePercent &gt;= im<span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.HighThresholdPercent</span> &#123;<br>        <span class="hljs-comment">// 3、计算需要释放的磁盘量</span><br>        amountToFree := capacity*<span class="hljs-built_in">int64</span>(<span class="hljs-number">100</span>-im<span class="hljs-selector-class">.policy</span>.LowThresholdPercent)/<span class="hljs-number">100</span> - available<br>        <br>        <span class="hljs-comment">// 4、调用 im.freeSpace 回收未使用的镜像信息</span><br>        freed, err := im<span class="hljs-selector-class">.freeSpace</span>(amountToFree, <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>())<br>        <span class="hljs-keyword">if</span> err != nil &#123;<br>            return err<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> freed &lt; amountToFree &#123;<br>            err := fmt<span class="hljs-selector-class">.Errorf</span>(<span class="hljs-string">&quot;failed to garbage collect required amount of images. Wanted to free %d bytes, but freed %d bytes&quot;</span>, amountToFree, freed)<br>            im<span class="hljs-selector-class">.recorder</span><span class="hljs-selector-class">.Eventf</span>(im<span class="hljs-selector-class">.nodeRef</span>, v1<span class="hljs-selector-class">.EventTypeWarning</span>, events<span class="hljs-selector-class">.FreeDiskSpaceFailed</span>, err<span class="hljs-selector-class">.Error</span>())<br>            return err<br>        &#125;<br>    &#125;<br><br>    return nil<br>&#125;<br></code></pre></td></tr></table></figure><p>im.freeSpace</p><p>im.freeSpace 是回收未使用镜像的方法，其主要逻辑为：</p><ol><li>首先调用 im.detectImages 获取已经使用的 images 列表作为 imagesInUse；</li><li>遍历 im.imageRecords 根据 imagesInUse 获取所有未使用的 images 信息，im.imageRecords 记录 node 上所有 images 的信息；</li><li>根据使用时间对未使用的 images 列表进行排序；</li><li>遍历未使用的 images 列表然后调用 im.runtime.RemoveImage 删除镜像，直到回收完所有未使用 images 或者满足空闲率；</li></ol><p>k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;kubelet&#x2F;images&#x2F;image_gc_manager.go:328</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(im *realImageGCManager)</span></span> freeSpace(bytesToFree <span class="hljs-type">int64</span>, freeTime time.Time) (<span class="hljs-type">int64</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">// 1、获取已经使用的 images 列表</span><br>    imagesInUse, err := im.detectImages(freeTime)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err<br>    &#125;<br><br>    im.imageRecordsLock.Lock()<br>    <span class="hljs-keyword">defer</span> im.imageRecordsLock.Unlock()<br><br>    <span class="hljs-comment">// 2、获取所有未使用的 images 信息</span><br>    images := <span class="hljs-built_in">make</span>([]evictionInfo, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(im.imageRecords))<br>    <span class="hljs-keyword">for</span> image, record := <span class="hljs-keyword">range</span> im.imageRecords &#123;<br>        <span class="hljs-keyword">if</span> isImageUsed(image, imagesInUse) &#123;<br>            klog.V(<span class="hljs-number">5</span>).Infof(<span class="hljs-string">&quot;Image ID %s is being used&quot;</span>, image)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        images = <span class="hljs-built_in">append</span>(images, evictionInfo&#123;<br>            id:          image,<br>            imageRecord: *record,<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 3、按镜像使用时间进行排序</span><br>    sort.Sort(byLastUsedAndDetected(images))<br>    <span class="hljs-comment">// 4、回收未使用的镜像</span><br>    <span class="hljs-keyword">var</span> deletionErrors []<span class="hljs-type">error</span><br>    spaceFreed := <span class="hljs-type">int64</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> _, image := <span class="hljs-keyword">range</span> images &#123;<br>        <span class="hljs-keyword">if</span> image.lastUsed.Equal(freeTime) || image.lastUsed.After(freeTime) &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> freeTime.Sub(image.firstDetected) &lt; im.policy.MinAge &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br><br>        <span class="hljs-comment">// 5、调用 im.runtime.RemoveImage 删除镜像</span><br>        err := im.runtime.RemoveImage(container.ImageSpec&#123;Image: image.id&#125;)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            deletionErrors = <span class="hljs-built_in">append</span>(deletionErrors, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-built_in">delete</span>(im.imageRecords, image.id)<br>        spaceFreed += image.size<br>        <span class="hljs-keyword">if</span> spaceFreed &gt;= bytesToFree &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(deletionErrors) &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> spaceFreed, fmt.Errorf(<span class="hljs-string">&quot;wanted to free %d bytes, but freed %d bytes space with errors in image deletion: %v&quot;</span>, bytesToFree, spaceFreed,   errors.NewAggregate(deletionErrors))<br>    &#125;<br>    <span class="hljs-keyword">return</span> spaceFreed, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="容器收集"><a href="#容器收集" class="headerlink" title="容器收集"></a>容器收集</h2><p>容器收集策略考虑三个用户自定义变量。MinAge 是容器可以被收集的最小运行时间。MaxPerPodContainer 是每个pod (UID, container name) 中允许拥有死亡容器的最大数。MaxContainers全局死亡容器的最大数。通过将 MinAge 设置为零并将 MaxPerPodContainer 和 MaxContainers 分别设置为小于零，可以单独禁用这些变量。</p><p>Kubelet作用于未能被识别的，被删除的或超出上述变量边界的容器。最久远的容器首先被移除。当每个 pod(MaxPerPodContainer) 允许的最大容器数超出全局死亡容器的界限(MaxContainers) 时，MaxPerPodContainer 和 MaxContainer 可能会相互冲突。MaxPerPodContainer 可以在根据以下情形进行调整：最坏的情况是将 MaxPerPodContainer 降级至1并排除最旧的容器。此外，已被删除的 pod 所拥有的容器一旦比MinAge更旧，也会被移除。</p><p>kl.containerGC.GarbageCollect</p><p>kl.containerGC.GarbageCollect 调用的是 ContainerGC manager 中的方法，ContainerGC 是在 NewMainKubelet 中初始化的，ContainerGC 在初始化时需要指定一个 runtime，该 runtime 即 ContainerRuntime，在 kubelet 中即 kubeGenericRuntimeManager，也是在 NewMainKubelet 中初始化的。</p><p>k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;kubelet&#x2F;kubelet.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMainKubelet</span><span class="hljs-params">()</span></span>&#123;<br>    ......<br>    <span class="hljs-comment">// MinAge、MaxPerPodContainer、MaxContainers 分别上文章开头提到的与容器垃圾回收有关的</span><br>    <span class="hljs-comment">// 三个参数</span><br>    containerGCPolicy := kubecontainer.ContainerGCPolicy&#123;<br>        MinAge:             minimumGCAge.Duration,<br>        MaxPerPodContainer: <span class="hljs-type">int</span>(maxPerPodContainerCount),<br>        MaxContainers:      <span class="hljs-type">int</span>(maxContainerCount),<br>    &#125;<br>    <br>    <span class="hljs-comment">// 初始化 containerGC 模块</span><br>    containerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是 ContainerGC 的初始化以及 GarbageCollect 的启动：</p><p>k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;kubelet&#x2F;container&#x2F;container_gc.go:68</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">NewContainerGC(<span class="hljs-params">runtime</span> Runtime, <span class="hljs-params">policy</span> ContainerGCPolicy, <span class="hljs-params">sourcesReadyProvider</span> SourcesReadyProvider)</span> (ContainerGC, error) &#123;<br>    <span class="hljs-keyword">if</span> policy.MinAge &lt; <span class="hljs-number">0</span> &#123;<br>        return nil, fmt.<span class="hljs-constructor">Errorf(<span class="hljs-string">&quot;invalid minimum garbage collection age: %v&quot;</span>, <span class="hljs-params">policy</span>.MinAge)</span><br>    &#125;<br><br>    return &amp;realContainerGC&#123;<br>        runtime:              runtime,<br>        policy:               policy,<br>        sourcesReadyProvider: sourcesReadyProvider,<br>    &#125;, nil<br>&#125;<br><br>func (cgc *realContainerGC) <span class="hljs-constructor">GarbageCollect()</span> error &#123;<br>    return cgc.runtime.<span class="hljs-constructor">GarbageCollect(<span class="hljs-params">cgc</span>.<span class="hljs-params">policy</span>, <span class="hljs-params">cgc</span>.<span class="hljs-params">sourcesReadyProvider</span>.AllReady()</span>, <span class="hljs-literal">false</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，ContainerGC 中的 GarbageCollect 最终是调用 runtime 中的 GarbageCollect 方法，runtime 即 kubeGenericRuntimeManager。</p><p>cgc.runtime.GarbageCollect</p><p>cgc.runtime.GarbageCollect 的实现是在 kubeGenericRuntimeManager 中，其主要逻辑为：</p><ol><li>回收 pod 中的 container；</li><li>回收 pod 中的 sandboxes；</li><li>回收 pod 以及 container 的 log dir；</li></ol><p>k8s.io&#x2F;kubernetes&#x2F;pkg&#x2F;kubelet&#x2F;kuberuntime&#x2F;kuberuntime_gc.go:378</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cgc *containerGC)</span></span> GarbageCollect(gcPolicy kubecontainer.ContainerGCPolicy, allSourcesReady <span class="hljs-type">bool</span>, evictTerminatedPods <span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>    errors := []<span class="hljs-type">error</span>&#123;&#125;<br>    <span class="hljs-comment">// 1、回收 pod 中的 container</span><br>    <span class="hljs-keyword">if</span> err := cgc.evictContainers(gcPolicy, allSourcesReady, evictTerminatedPods); err != <span class="hljs-literal">nil</span> &#123;<br>        errors = <span class="hljs-built_in">append</span>(errors, err)<br>    &#125;<br><br>    <span class="hljs-comment">// 2、回收 pod 中的 sandboxes</span><br>    <span class="hljs-keyword">if</span> err := cgc.evictSandboxes(evictTerminatedPods); err != <span class="hljs-literal">nil</span> &#123;<br>        errors = <span class="hljs-built_in">append</span>(errors, err)<br>    &#125;<br><br>    <span class="hljs-comment">// 3、回收 pod 以及 container 的 log dir</span><br>    <span class="hljs-keyword">if</span> err := cgc.evictPodLogsDirectories(allSourcesReady); err != <span class="hljs-literal">nil</span> &#123;<br>        errors = <span class="hljs-built_in">append</span>(errors, err)<br>    &#125;<br>    <span class="hljs-keyword">return</span> utilerrors.NewAggregate(errors)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="kubelet垃圾回收的参数配置实践"><a href="#kubelet垃圾回收的参数配置实践" class="headerlink" title="kubelet垃圾回收的参数配置实践"></a>kubelet垃圾回收的参数配置实践</h1><p>src\k8s.io\kubernetes\pkg\kubelet\apis\config\fuzzer\fuzzer.go 配置了kubelet参数的默认配置</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">func</span> <span class="hljs-variable">Funcs</span><span class="hljs-punctuation">(</span><span class="hljs-variable">codecs</span> <span class="hljs-variable">runtimeserializer</span><span class="hljs-operator">.</span><span class="hljs-variable">CodecFactory</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-variable">interface</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-variable">return</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-variable">interface</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-operator">//</span> <span class="hljs-variable">provide</span> <span class="hljs-variable">non</span><span class="hljs-operator">-</span><span class="hljs-variable">empty</span> <span class="hljs-variable">values</span> <span class="hljs-variable">for</span> <span class="hljs-variable">fields</span> <span class="hljs-variable">with</span> <span class="hljs-variable">defaults</span><span class="hljs-operator">,</span> <span class="hljs-variable">so</span> <span class="hljs-variable">the</span> <span class="hljs-variable">defaulter</span> <span class="hljs-variable">doesn</span><span class="hljs-operator">&#x27;</span><span class="hljs-variable">t</span> <span class="hljs-variable">change</span> <span class="hljs-variable">values</span> <span class="hljs-variable">during</span> <span class="hljs-variable">round</span><span class="hljs-operator">-</span><span class="hljs-variable">trip</span><br><span class="hljs-variable">func</span><span class="hljs-punctuation">(</span><span class="hljs-variable">obj</span> <span class="hljs-operator">*</span><span class="hljs-variable">kubeletconfig</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeletConfiguration</span><span class="hljs-operator">,</span> <span class="hljs-variable">c</span> <span class="hljs-variable">fuzz</span><span class="hljs-operator">.</span><span class="hljs-built_in">Continue</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-variable">c</span><span class="hljs-operator">.</span><span class="hljs-variable">FuzzNoCustom</span><span class="hljs-punctuation">(</span><span class="hljs-variable">obj</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EnableServer</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-built_in">Authentication</span><span class="hljs-operator">.</span><span class="hljs-built_in">Anonymous</span><span class="hljs-operator">.</span><span class="hljs-built_in">Enabled</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-built_in">Authentication</span><span class="hljs-operator">.</span><span class="hljs-variable">Webhook</span><span class="hljs-operator">.</span><span class="hljs-built_in">Enabled</span> <span class="hljs-operator">=</span> <span class="hljs-variable">false</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-built_in">Authentication</span><span class="hljs-operator">.</span><span class="hljs-variable">Webhook</span><span class="hljs-operator">.</span><span class="hljs-variable">CacheTTL</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Authorization</span><span class="hljs-operator">.</span><span class="hljs-built_in">Mode</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfig</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeletAuthorizationModeAlwaysAllow</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Authorization</span><span class="hljs-operator">.</span><span class="hljs-variable">Webhook</span><span class="hljs-operator">.</span><span class="hljs-variable">CacheAuthorizedTTL</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">5</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Authorization</span><span class="hljs-operator">.</span><span class="hljs-variable">Webhook</span><span class="hljs-operator">.</span><span class="hljs-variable">CacheUnauthorizedTTL</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">30</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Second</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">VolumeStatsAggPeriod</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">RuntimeRequestTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">CPUCFSQuota</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EventBurst</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EventRecordQPS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EnableControllerAttachDetach</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EnableDebuggingHandlers</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">FileCheckFrequency</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">20</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Second</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">HealthzBindAddress</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">HealthzPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">10248</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">HTTPCheckFrequency</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">20</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Second</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ImageMinimumGCAge</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ImageGCHighThresholdPercent</span> <span class="hljs-operator">=</span> <span class="hljs-number">85</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ImageGCLowThresholdPercent</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">KernelMemcgNotification</span> <span class="hljs-operator">=</span> <span class="hljs-variable">false</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">MaxOpenFiles</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000000</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">MaxPods</span> <span class="hljs-operator">=</span> <span class="hljs-number">110</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">PodPidsLimit</span> <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">NodeStatusUpdateFrequency</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">10</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Second</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">NodeStatusReportFrequency</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">NodeLeaseDurationSeconds</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">CPUManagerPolicy</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;none&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">CPUManagerReconcilePeriod</span> <span class="hljs-operator">=</span> <span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">NodeStatusUpdateFrequency</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">NodeStatusMaxImages</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">TopologyManagerPolicy</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfig</span><span class="hljs-operator">.</span><span class="hljs-variable">NoneTopologyManagerPolicy</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">QOSReserved</span> <span class="hljs-operator">=</span> <span class="hljs-variable">map</span><span class="hljs-punctuation">[</span><span class="hljs-variable">string</span><span class="hljs-punctuation">]</span><span class="hljs-variable">string</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-string">&quot;memory&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;50%&quot;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">OOMScoreAdj</span> <span class="hljs-operator">=</span> <span class="hljs-variable">int32</span><span class="hljs-punctuation">(</span><span class="hljs-variable">qos</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeletOOMScoreAdj</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Port</span> <span class="hljs-operator">=</span> <span class="hljs-variable">ports</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeletPort</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ReadOnlyPort</span> <span class="hljs-operator">=</span> <span class="hljs-variable">ports</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeletReadOnlyPort</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">RegistryBurst</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">RegistryPullQPS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ResolverConfig</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubetypes</span><span class="hljs-operator">.</span><span class="hljs-variable">ResolvConfDefault</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">SerializeImagePulls</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">StreamingConnectionIdleTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">4</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Hour</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">SyncFrequency</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ContentType</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;application/vnd.kubernetes.protobuf&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeAPIQPS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">KubeAPIBurst</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">HairpinMode</span> <span class="hljs-operator">=</span> <span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">PromiscuousBridge</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EvictionHard</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfigv1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">DefaultEvictionHard</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EvictionPressureTransitionPeriod</span> <span class="hljs-operator">=</span> <span class="hljs-variable">metav1</span><span class="hljs-operator">.</span><span class="hljs-built_in">Duration</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Duration</span><span class="hljs-operator">:</span> <span class="hljs-number">5</span> <span class="hljs-operator">*</span> <span class="hljs-variable">time</span><span class="hljs-operator">.</span><span class="hljs-variable">Minute</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">MakeIPTablesUtilChains</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">IPTablesMasqueradeBit</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfigv1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">DefaultIPTablesMasqueradeBit</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">IPTablesDropBit</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfigv1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">DefaultIPTablesDropBit</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">CgroupsPerQOS</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">CgroupDriver</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cgroupfs&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EnforceNodeAllocatable</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfigv1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">DefaultNodeAllocatableEnforcement</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">StaticPodURLHeader</span> <span class="hljs-operator">=</span> <span class="hljs-variable">make</span><span class="hljs-punctuation">(</span><span class="hljs-variable">map</span><span class="hljs-punctuation">[</span><span class="hljs-variable">string</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-variable">string</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ContainerLogMaxFiles</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ContainerLogMaxSize</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10Mi&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">ConfigMapAndSecretChangeDetectionStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Watch&quot;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">AllowedUnsafeSysctls</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-variable">string</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">VolumePluginDir</span> <span class="hljs-operator">=</span> <span class="hljs-variable">kubeletconfigv1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">DefaultVolumePluginDir</span><br><span class="hljs-variable">if</span> <span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Logging</span><span class="hljs-operator">.</span><span class="hljs-built_in">Format</span> <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">Logging</span><span class="hljs-operator">.</span><span class="hljs-built_in">Format</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;text&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">obj</span><span class="hljs-operator">.</span><span class="hljs-variable">EnableSystemLogHandler</span> <span class="hljs-operator">=</span> <span class="hljs-variable">true</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="镜像垃圾回收参数配置"><a href="#镜像垃圾回收参数配置" class="headerlink" title="镜像垃圾回收参数配置"></a>镜像垃圾回收参数配置</h2><ul><li>–image-gc-high-threshold，默认 85，高于此阈值将进行回收</li><li>–image-gc-low-threshold，默认 80，低于此阈值不进行会</li><li>–minimum-image-ttl-duration，默认 2m0s，回收 image 最小年龄</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">obj.ImageGCHighThresholdPercent</span> = <span class="hljs-number">85</span><br><span class="hljs-attr">obj.ImageGCLowThresholdPercent</span> = <span class="hljs-number">80</span><br><span class="hljs-attr">obj.ImageMinimumGCAge</span> = metav1.Duration&#123;Duration: <span class="hljs-number">2</span> * time.Minute&#125;<br></code></pre></td></tr></table></figure><p>我们在节点上修改kubelet的镜像回收配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[Service]<br><span class="hljs-attribute">EnvironmentFile</span>=-/etc/kubernetes/kubelet<br><span class="hljs-attribute">ExecStart</span>=/usr/bin/kubelet <span class="hljs-variable">$&#123;SERIALIZE_IMAGE_PULLS&#125;</span> <span class="hljs-variable">$&#123;REGISTER_SCHEDULABLE&#125;</span> <span class="hljs-variable">$&#123;V&#125;</span> <span class="hljs-variable">$&#123;CLOUD_PROVIDER&#125;</span> <span class="hljs-variable">$&#123;FAIL_SWAP_ON&#125;</span> <span class="hljs-variable">$&#123;AUTHORIZATION_MODE&#125;</span> <span class="hljs-variable">$&#123;CLOUD_CONFIG&#125;</span> <span class="hljs-variable">$&#123;CLUSTER_DNS&#125;</span> <span class="hljs-variable">$&#123;IMAGE_PULL_PROGRESS_DEADLINE&#125;</span> <span class="hljs-variable">$&#123;HOSTNAME_OVERRIDE&#125;</span> <span class="hljs-variable">$&#123;EVICTION_HARD&#125;</span> <span class="hljs-variable">$&#123;CLIENT_CA_FILE&#125;</span> <span class="hljs-variable">$&#123;NON_MASQUERADE_CIDR&#125;</span> <span class="hljs-variable">$&#123;KUBE_RESERVED&#125;</span> <span class="hljs-variable">$&#123;MAX_PODS&#125;</span> <span class="hljs-variable">$&#123;AUTHENTICATION_TOKEN_WEBHOOK&#125;</span> <span class="hljs-variable">$&#123;POD_INFRA_CONTAINER_IMAGE&#125;</span> <span class="hljs-variable">$&#123;ANONYMOUS_AUTH&#125;</span> <span class="hljs-variable">$&#123;KUBECONFIG&#125;</span> <span class="hljs-variable">$&#123;NETWORK_PLUGIN&#125;</span> <span class="hljs-variable">$&#123;CLUSTER_DOMAIN&#125;</span> <span class="hljs-attribute">--image-gc-high-threshold</span>=70 <span class="hljs-attribute">--image-gc-low-threshold</span>=65<br></code></pre></td></tr></table></figure><p>开始磁盘的使用率如下</p><p><img src="/img/2020-09-10-About-kubernetes-garbage-collection/1.png" alt="upload-image"> </p><p>执行垃圾回收后，磁盘使用率降到了57%</p><p><img src="/img/2020-09-10-About-kubernetes-garbage-collection/2.png" alt="upload-image"> </p><p>查看kubelet日志可以发现执行垃圾回收成功</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Sep</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>:<span class="hljs-number">15</span>:<span class="hljs-number">17</span> VM_1_4_centos kubelet[<span class="hljs-number">1134461</span>]: I0910 <span class="hljs-number">11</span>:<span class="hljs-number">15</span>:<span class="hljs-number">17</span>.<span class="hljs-number">054567</span> <span class="hljs-number">1134461</span> kubelet.go:<span class="hljs-number">1323</span>] Image garbage collection succeeded<br></code></pre></td></tr></table></figure><h2 id="容器垃圾回收参数配置"><a href="#容器垃圾回收参数配置" class="headerlink" title="容器垃圾回收参数配置"></a>容器垃圾回收参数配置</h2><p><img src="/img/2020-09-10-About-kubernetes-garbage-collection/3.png" alt="upload-image"> </p><ul><li>minimum-container-ttl-duration：容器可被回收的最小生存年龄，默认是 0 分钟，这意味着每个死亡容器都会被立即执行垃圾回收</li><li>maximum-dead-containers-per-container：每个 Pod 要保留的死亡容器的最大数量，默认值为 1</li><li>maximum-dead-containers：节点可保留的死亡容器的最大数量，默认值是 -1，这意味着节点没有限制死亡容器数量</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--maximum-dead-containers</span>=<span class="hljs-string">&quot;-1&quot;</span><br><span class="hljs-attr">--maximum-dead-containers-per-container</span>=<span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-attr">--minimum-container-ttl-duration</span>=<span class="hljs-string">&quot;0s&quot;</span><br></code></pre></td></tr></table></figure><p>注意：当MaxPerPodContainer与MaxContainers发生冲突时，Kubelet 会自动调整MaxPerPodContainer的取值以满足MaxContainers要求。</p><p>还是以 nginx 为例，创建一个 nginx 服务：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@shida-machine:~# kubectl run nginx --image nginx<br><span class="hljs-attribute">deployment</span>.apps/nginx created<br><span class="hljs-attribute">root</span>@shida-machine:~# docker ps -a | grep nginx<br><span class="hljs-attribute">7bef0308d9ea</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">16</span> seconds ago      Up <span class="hljs-number">14</span> seconds                                 k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">7e65e0db52c2</span>        k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>      <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">2</span> minutes ago       Up <span class="hljs-number">2</span> minutes                                  k8s_POD_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">12345</span><br></code></pre></td></tr></table></figure><p>可以看到，Kubelet 启动了一个 sandbox 以及一个 nginx 实例。</p><p>手动杀死 nginx 实例，模拟容器异常退出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@shida-machine:~# docker kill <span class="hljs-number">7</span>bef0308d9ea<br><span class="hljs-attribute">7bef0308d9ea</span><br><span class="hljs-attribute">root</span>@shida-machine:~# docker ps -a | grep nginx<br><span class="hljs-attribute">408b23b2b72a</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">3</span> seconds ago       Up <span class="hljs-number">2</span> seconds                                      k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_1<br><span class="hljs-attribute">7bef0308d9ea</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">2</span> minutes ago       Exited (<span class="hljs-number">137</span>) <span class="hljs-number">15</span> seconds ago                       k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">7e65e0db52c2</span>        k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>      <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">5</span> minutes ago       Up <span class="hljs-number">5</span> minutes                                      k8s_POD_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">123456</span><br></code></pre></td></tr></table></figure><p>可以看到 Kubelet 重新拉起了一个新的 nginx 实例。</p><p>等待几分钟，发现 Kubelet 并未清理异常退出的 nginx 容器（因为此时仅有一个 dead container）。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@shida-machine:~# docker ps -a | grep nginx<br><span class="hljs-attribute">408b23b2b72a</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">3</span> minutes ago       Up <span class="hljs-number">3</span> minutes                                     k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_1<br><span class="hljs-attribute">7bef0308d9ea</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">5</span> minutes ago       Exited (<span class="hljs-number">137</span>) <span class="hljs-number">3</span> minutes ago                       k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">7e65e0db52c2</span>        k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>      <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">8</span> minutes ago       Up <span class="hljs-number">8</span> minutes                                     k8s_POD_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">1234</span><br></code></pre></td></tr></table></figure><p>继续杀死当前 nginx 实例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@shida-machine:~# docker kill <span class="hljs-number">408</span>b23b2b72a<br><span class="hljs-attribute">408b23b2b72a</span><br><span class="hljs-attribute">root</span>@shida-machine:~# docker ps -a | grep nginx<br><span class="hljs-attribute">e064e376819f</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">9</span> seconds ago       Up <span class="hljs-number">7</span> seconds                                      k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_2<br><span class="hljs-attribute">408b23b2b72a</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">5</span> minutes ago       Exited (<span class="hljs-number">137</span>) <span class="hljs-number">40</span> seconds ago                       k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_1<br><span class="hljs-attribute">7e65e0db52c2</span>        k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>      <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">10</span> minutes ago      Up <span class="hljs-number">10</span> minutes                                     k8s_POD_nginx-<span class="hljs-number">7</span>db9fccd9b-p2p2t_default_69c38c2b-a64e-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">123456</span><br></code></pre></td></tr></table></figure><p>这下看到效果了，仍然只有一个退出的容器被保留，而且被清理掉的是最老的死亡容器，这与之前的分析是一致的！</p><p>删除这个 nginx Deployment，会发现所有的 nginx 容器都会被清理：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">root@shida-machine:~<span class="hljs-comment"># kubectl delete deployment nginx</span><br>deployment.extensions <span class="hljs-string">&quot;nginx&quot;</span> deleted<br>root@shida-machine:~<span class="hljs-comment"># docker ps -a | grep nginx</span><br>root@shida-machine:~<span class="hljs-comment"># </span><br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>进一步，我们修改 Kubelet 参数，设置 maximum-dead-containers 为 0，这就告诉 Kubelet 清理所有死亡容器。</p><p>重复前边的实验步骤：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@shida-machine:~# kubectl run nginx --image nginx<br><span class="hljs-attribute">deployment</span>.apps/nginx created<br><span class="hljs-attribute">root</span>@shida-machine:~# docker ps -a | grep nginx<br><span class="hljs-attribute">8de9ae8e2c9b</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">33</span> seconds ago      Up <span class="hljs-number">32</span> seconds                                   k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-jl2xn_default_0cd67a29-a6a2-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">d2cdfafdbe50</span>        k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>      <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">41</span> seconds ago      Up <span class="hljs-number">38</span> seconds                                   k8s_POD_nginx-<span class="hljs-number">7</span>db9fccd9b-jl2xn_default_0cd67a29-a6a2-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">root</span>@shida-machine:~# docker kill <span class="hljs-number">8</span>de9ae8e2c9b<br><span class="hljs-attribute">8de9ae8e2c9b</span><br><span class="hljs-attribute">root</span>@shida-machine:~# docker ps -a | grep nginx<br><span class="hljs-attribute">95ee5bd2cab2</span>        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute                             k8s_nginx_nginx-<span class="hljs-number">7</span>db9fccd9b-jl2xn_default_0cd67a29-a6a2-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_1<br><span class="hljs-attribute">d2cdfafdbe50</span>        k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>      <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">2</span> minutes ago        Up About a minute                             k8s_POD_nginx-<span class="hljs-number">7</span>db9fccd9b-jl2xn_default_0cd67a29-a6a2-<span class="hljs-number">11</span>e9-<span class="hljs-number">94</span>bd-<span class="hljs-number">000</span>c29ce064a_0<br><span class="hljs-attribute">12345678910</span><br></code></pre></td></tr></table></figure><p>结果显示，nginx Pod 的所有死亡容器都会被清理，因为我们已经强制要求节点不保留任何死亡容器，与预期一致！</p><p>那对于手动运行的容器呢？我们通过 docker run 运行 nginx：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@shida</span>-machine:~<span class="hljs-meta"># docker run --name nginx -d nginx</span><br><span class="hljs-number">46</span>ebb365f6be060a6950f44728e4f11e4666bf2fb007cad557ffc65ecf8aded8<br>root<span class="hljs-symbol">@shida</span>-machine:~<span class="hljs-meta"># docker ps | grep nginx</span><br><span class="hljs-number">46</span>ebb365f6be        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">9</span> seconds ago       Up <span class="hljs-number">6</span> seconds        <span class="hljs-number">80</span>/tcp              nginx<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>杀死该容器：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@shida</span>-machine:~<span class="hljs-meta"># docker kill 46ebb365f6be</span><br><span class="hljs-number">46</span>ebb365f6be<br>root<span class="hljs-symbol">@shida</span>-machine:~<span class="hljs-meta"># docker ps -a | grep nginx</span><br><span class="hljs-number">46</span>ebb365f6be        nginx                     <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Exited (<span class="hljs-number">137</span>) <span class="hljs-number">18</span> seconds ago                       nginx<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>经过几分钟，我们发现该死亡容器还是会存在的，Kubelet 不会清理这类容器！</p><p>小结</p><p>Kubelet 每 5 分钟进行一次镜像清理。当磁盘使用率超过上限阈值，Kubelet 会按照 LRU 策略逐一清理没有被任何容器所使用的镜像，直到磁盘使用率降到下限阈值或没有空闲镜像可以清理。Kubelet 认为镜像可被清理的标准是未被任何 Pod 容器（包括那些死亡了的容器）所引用，那些非 Pod 容器（如用户通过 docker run 启动的容器）是不会被用来计算镜像引用关系的。也就是说，即便用户运行的容器使用了 A 镜像，只要没有任何 Pod 容器使用到 A，那 A 镜像对于 Kubelet 而言就是可被回收的。但是我们无需担心手动运行容器使用的镜像会被意外回收，因为 Kubelet 的镜像删除是非 force 类型的，底层容器运行时会使存在容器关联的镜像删除操作失败（因为 Docker 会认为仍有容器使用着 A 镜像）。</p><p>Kubelet 每 1 分钟执行一次容器清理。根据启动配置参数，Kubelet 会按照 LRU 策略依次清理每个 Pod 内的死亡容器，直到达到死亡容器限制数要求，对于 sandbox 容器，Kubelet 仅会保留最新的（这不受 GC 策略的控制）。对于日志目录，只要已经没有 Pod 继续占用，就将其清理。对于非 Pod 容器（如用户通过 docker run 启动的容器）不会被 Kubelet 垃圾回收。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://blog.csdn.net/shida_csdn/article/details/99734411">https://blog.csdn.net/shida_csdn/article/details/99734411</a></p><p><a href="https://zhuanlan.zhihu.com/p/110869559">https://zhuanlan.zhihu.com/p/110869559</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes插件之ip-masq-agent</title>
    <link href="/2020/08/28/2020-08-28-Ip-masq-agent-of-Kubernetes-plug-in/"/>
    <url>/2020/08/28/2020-08-28-Ip-masq-agent-of-Kubernetes-plug-in/</url>
    
    <content type="html"><![CDATA[<p>本章主要介绍了ip-masq-agent在k8s集群中的部署和使用</p><h1 id="ip-masq-agent简介"><a href="#ip-masq-agent简介" class="headerlink" title="ip-masq-agent简介"></a>ip-masq-agent简介</h1><p>ip-masq-agent 配置 iptables 规则以隐藏位于集群节点 IP 地址后面的 pod 的 IP 地址。 这通常在将流量发送到集群的 podCIDR范围之外的目的地时使用。<br>什么是snat</p><p>源地址转换是内网地址向外访问时，发起访问的内网ip地址转换为指定的ip地址（可指定具体的服务以及相应的端口或端口范围），这可以使内网中使用保留ip地址的主机访问外部网络，即内网的多部主机可以通过一个有效的公网ip地址访问外部网络。</p><p>A公司拥有多个公网IP（60.191.82.105-107），A公司希望内部用户（IP为192.168.1.50）使用某个特定的IP（60.191.82.107）访问互联网，则需在出口路由设备上需要配置源地址转换。</p><h1 id="部署ip-masq-agent"><a href="#部署ip-masq-agent" class="headerlink" title="部署ip-masq-agent"></a>部署ip-masq-agent</h1><p>通过运行以下 kubectl 指令创建 ip-masq-agent:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes-incubator/i</span>p-masq-agent<span class="hljs-regexp">/master/i</span>p-masq-agent.yaml<br></code></pre></td></tr></table></figure><p>您必须同时将适当的节点标签应用于集群中希望代理运行的任何节点。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl label nodes my-<span class="hljs-keyword">node</span> <span class="hljs-title">beta</span>.kubernetes.io/<span class="hljs-attr">masq-agent-ds-ready=</span><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h1 id="ip-masq-agent配置项"><a href="#ip-masq-agent配置项" class="headerlink" title="ip-masq-agent配置项"></a>ip-masq-agent配置项</h1><p>代理配置文件必须使用 YAML 或 JSON 语法编写，并且可能包含三个可选值：</p><ul><li>nonMasqueradeCIDRs: CIDR 表示法中的字符串列表，用于指定不需伪装的地址范围。</li><li>masqLinkLocal: 布尔值 (true &#x2F; false)，表示是否将流量伪装到本地链路169.254.0.0&#x2F;16 前缀，默认为 false。</li><li>resyncInterval: 代理尝试从磁盘重新加载配置的时间间隔。 例如 ‘30s’，其中 ‘s’ 是秒，’ms’ 是毫秒等…</li></ul><h1 id="TKE中的ip-masq-agent配置和使用"><a href="#TKE中的ip-masq-agent配置和使用" class="headerlink" title="TKE中的ip-masq-agent配置和使用"></a>TKE中的ip-masq-agent配置和使用</h1><p>VPC 网络：10.168.0.0&#x2F;16</p><p>集群网络：172.18.0.0&#x2F;16</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">apiVersion: v1</span><br><span class="hljs-section">data:</span><br>  config: &#x27;&#123;<span class="hljs-string">&quot;NonMasqueradeCIDRs&quot;</span>:[<span class="hljs-string">&quot;172.16.0.0/16&quot;</span>,<span class="hljs-string">&quot;10.168.0.0/16&quot;</span>],<span class="hljs-string">&quot;MasqLinkLocal&quot;</span>:true,<span class="hljs-string">&quot;ResyncInterval&quot;</span>:<span class="hljs-string">&quot;1m0s&quot;</span>&#125;&#x27;<br><span class="hljs-section">kind: ConfigMap</span><br><span class="hljs-section">metadata:</span><br>  creationTimestamp: <span class="hljs-string">&quot;2020-06-02T03:16:59Z&quot;</span><br>  name: ip-masq-agent-config<br>  namespace: kube-system<br></code></pre></td></tr></table></figure><p>上述配置的意思是：访问目的网络10.168.0.0&#x2F;16和 172.18.0.0&#x2F;16 不做 SNAT，其他网段都做 SNAT，不对网段 169.254.0.0&#x2F;16 做特殊处理，同步周期为1分钟。</p><p>节点的iptables规则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span>_1_4_centos <span class="hljs-operator">~</span>]# iptables <span class="hljs-operator">-</span>t nat <span class="hljs-operator">-</span>L IP<span class="hljs-operator">-</span>MASQ<span class="hljs-operator">-</span>AGENT<br>Chain IP<span class="hljs-operator">-</span>MASQ<span class="hljs-operator">-</span>AGENT (<span class="hljs-number">1</span> <span class="hljs-keyword">references</span>)<br>target     prot opt source               destination         <br><span class="hljs-keyword">RETURN</span>     <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  anywhere             172.16.0.0/16        /* ip-masq-agent: cluster-local traffic should not be subject to MASQUERADE */ ADDRTYPE match dst-type !LOCAL</span><br><span class="hljs-keyword">RETURN</span>     <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  anywhere             10.168.0.0/16        /* ip-masq-agent: cluster-local traffic should not be subject to MASQUERADE */ ADDRTYPE match dst-type !LOCAL</span><br>MASQUERADE  <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  anywhere             anywhere             /* ip-masq-agent: outbound traffic should be subject to MASQUERADE (this match must come after cluster-local CIDR matches) */ ADDRTYPE match dst-type !LOCAL</span><br></code></pre></td></tr></table></figure><p>容器访问外网的数据链路图</p><p><img src="/img/2020-08-28-Ip-masq-agent-of-Kubernetes-plug-in/1.png" alt="upload-image"> </p><p>添加描述</p><p>使用问题</p><p>问题:  客户在vpc内开启了nat网关，节点上可以访问外网，但是到容器内却无法访问外网，节点上的所有pod都无法访问。</p><p>排查：这边客户之前为了不让pod访问外网修改了ip-masq-agent-config中的NonMasqueradeCIDRs为0.0.0.0&#x2F;0从而导致集群内所有pod都无法上网。</p><p>解决方案：修改NonMasqueradeCIDRs，配置成pod网段和节点所在的网段。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cloud.tencent.com/developer/article/1598539">https://cloud.tencent.com/developer/article/1598539</a></p><p><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/ip-masq-agent/">https://kubernetes.io/zh/docs/tasks/administer-cluster/ip-masq-agent/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>ip-masq-agent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux定位问题常用命令</title>
    <link href="/2020/08/28/2020-08-28-Common-commands-for-linux-positioning-problems/"/>
    <url>/2020/08/28/2020-08-28-Common-commands-for-linux-positioning-problems/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了在使用linux过程中常见的一些定位问题的命令。</p><h1 id="ifconfig-查看网卡"><a href="#ifconfig-查看网卡" class="headerlink" title="ifconfig(查看网卡)"></a>ifconfig(查看网卡)</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ ifconfig<br><br>enp1s0    Link encap:Ethernet  HWaddr <span class="hljs-number">28</span>:d2:<span class="hljs-number">44</span>:<span class="hljs-keyword">e</span><span class="hljs-variable">b:bd</span>:<span class="hljs-number">98</span>  <br>          inet addr:<span class="hljs-number">192.168</span>.<span class="hljs-number">0.103</span>  Bcas<span class="hljs-variable">t:192</span>.<span class="hljs-number">168.0</span>.<span class="hljs-number">255</span>  Mask:<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>          inet6 addr: fe80::<span class="hljs-number">8</span>f0c:<span class="hljs-number">7825</span>:<span class="hljs-number">8057</span>:<span class="hljs-number">5</span>eec/<span class="hljs-number">64</span> Scope:Link<br>          UP BROADCAST RUNNING MULTICAST  MTU:<span class="hljs-number">1500</span>  Metric:<span class="hljs-number">1</span><br>          RX packet<span class="hljs-variable">s:169854</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> frame:<span class="hljs-number">0</span><br>          TX packet<span class="hljs-variable">s:125995</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> carrier:<span class="hljs-number">0</span><br>          collision<span class="hljs-variable">s:0</span> txqueuelen:<span class="hljs-number">1000</span> <br>          RX byte<span class="hljs-variable">s:174146270</span> (<span class="hljs-number">174.1</span> MB)  TX byte<span class="hljs-variable">s:21062129</span> (<span class="hljs-number">21.0</span> MB)<br><br><span class="hljs-keyword">lo</span>        Link encap:Local Loopback  <br>          inet addr:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>  Mask:<span class="hljs-number">255.0</span>.<span class="hljs-number">0.0</span><br>          inet6 addr: ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> Scope:Host<br>          UP LOOPBACK RUNNING  MTU:<span class="hljs-number">65536</span>  Metric:<span class="hljs-number">1</span><br>          RX packet<span class="hljs-variable">s:15793</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> frame:<span class="hljs-number">0</span><br>          TX packet<span class="hljs-variable">s:15793</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> carrier:<span class="hljs-number">0</span><br>          collision<span class="hljs-variable">s:0</span> txqueuelen:<span class="hljs-number">1</span> <br>          RX byte<span class="hljs-variable">s:2898946</span> (<span class="hljs-number">2.8</span> MB)  TX byte<span class="hljs-variable">s:2898946</span> (<span class="hljs-number">2.8</span> MB)<br></code></pre></td></tr></table></figure><p>如果要显示所有的网络接口，包含在线（up）的或下线（down）的，使用-a 选项。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ifconfig -a   <br></code></pre></td></tr></table></figure><p>如果要给一个网络接口分配一个IP地址，使用下面的命令</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ sudo ifconfig eth<span class="hljs-number">0 192.168.56</span>.<span class="hljs-number">5</span> netmask <span class="hljs-number">255.255.255.0</span><br></code></pre></td></tr></table></figure><p>如果要启用一个网络接口，使用下面命令</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo ifconfig up eth0<br></code></pre></td></tr></table></figure><p>如果要禁用一个网络接口，使用下面命令</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo ifconfig down eth0<br></code></pre></td></tr></table></figure><h1 id="ip-查看网卡"><a href="#ip-查看网卡" class="headerlink" title="ip(查看网卡)"></a>ip(查看网卡)</h1><p>显示所有网卡</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># ip addr show</span><br><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">2</span>: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc mq state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:eb:<span class="hljs-number">2</span>b:<span class="hljs-number">9</span>b brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.168.1.4</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.168.1.255</span> scope global eth0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">5054</span>:ff:feeb:<span class="hljs-number">2</span>b9b/<span class="hljs-number">64</span> scope link <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">3</span>: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc mq state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">20</span>:<span class="hljs-number">90</span>:<span class="hljs-number">6</span>f:<span class="hljs-number">6</span>a:<span class="hljs-number">7</span>f:ae brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">2290</span>:<span class="hljs-number">6</span>fff:fe6a:<span class="hljs-number">7</span>fae/<span class="hljs-number">64</span> scope link <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">4</span>: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class="hljs-number">1500</span> qdisc noqueue state DOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-number">76</span>:<span class="hljs-number">73</span>:f4:f6 brd ff:ff:ff:ff:ff:ff<br></code></pre></td></tr></table></figure><p>查看路由信息</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@VM_1_4_centos ~]</span># ip route show<br>default via <span class="hljs-number">10</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> dev eth0 <br><span class="hljs-number">10.168.1.0</span>/<span class="hljs-number">24</span> dev eth0 proto kernel scope link src <span class="hljs-number">10</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span> <br><span class="hljs-number">10.168.100.3</span> dev enic3c3d718fcd scope link <br><span class="hljs-number">10.168.100.11</span> dev enib229b17365d scope link <br><span class="hljs-number">169.254.0.0</span>/<span class="hljs-number">16</span> dev eth0 scope link metric <span class="hljs-number">1002</span> <br><span class="hljs-number">169.254.32.0</span>/<span class="hljs-number">28</span> dev docker0 proto kernel scope link src <span class="hljs-number">169</span>.<span class="hljs-number">254</span>.<span class="hljs-number">32</span>.<span class="hljs-number">1</span> linkdown <br><span class="hljs-number">172.16.3.64</span>/<span class="hljs-number">26</span> dev cbr0 proto kernel scope link src <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">3</span>.<span class="hljs-number">65</span> <br></code></pre></td></tr></table></figure><h1 id="ifup，ifdown-激活或者禁用网卡"><a href="#ifup，ifdown-激活或者禁用网卡" class="headerlink" title="ifup，ifdown(激活或者禁用网卡)"></a>ifup，ifdown(激活或者禁用网卡)</h1><p>ifup命令用于激活一个网络接口，使得可以接收或传输数据。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo ifup eth0<br></code></pre></td></tr></table></figure><p>ifdown命令可以禁用一个网络接口，禁掉后就不能传输和接收数据了。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo ifdown eth0<br></code></pre></td></tr></table></figure><h1 id="ping-探测网络连通性"><a href="#ping-探测网络连通性" class="headerlink" title="ping(探测网络连通性)"></a>ping(探测网络连通性)</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]#<span class="hljs-built_in"> ping </span>www.baidu.com<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>www.a.shifen.com (14.215.177.38) 56(84) bytes of data.<br>64 bytes <span class="hljs-keyword">from</span> 14.215.177.38 (14.215.177.38): <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=54 <span class="hljs-attribute">time</span>=3.30 ms<br>64 bytes <span class="hljs-keyword">from</span> 14.215.177.38 (14.215.177.38): <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=54 <span class="hljs-attribute">time</span>=3.15 ms<br></code></pre></td></tr></table></figure><p>发送指定数量的包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]#<span class="hljs-built_in"> ping </span>-c 4 www.baidu.com<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>www.a.shifen.com (14.215.177.38) 56(84) bytes of data.<br>64 bytes <span class="hljs-keyword">from</span> 14.215.177.38 (14.215.177.38): <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=54 <span class="hljs-attribute">time</span>=3.59 ms<br>64 bytes <span class="hljs-keyword">from</span> 14.215.177.38 (14.215.177.38): <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=54 <span class="hljs-attribute">time</span>=3.16 ms<br>64 bytes <span class="hljs-keyword">from</span> 14.215.177.38 (14.215.177.38): <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=54 <span class="hljs-attribute">time</span>=3.19 ms<br>64 bytes <span class="hljs-keyword">from</span> 14.215.177.38 (14.215.177.38): <span class="hljs-attribute">icmp_seq</span>=4 <span class="hljs-attribute">ttl</span>=54 <span class="hljs-attribute">time</span>=3.14 ms<br><br>--- www.a.shifen.com<span class="hljs-built_in"> ping </span>statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 3003ms<br>rtt min/avg/max/mdev = 3.148/3.275/3.591/0.191 ms<br></code></pre></td></tr></table></figure><h1 id="traceroute-查看数据包路由途径"><a href="#traceroute-查看数据包路由途径" class="headerlink" title="traceroute(查看数据包路由途径)"></a>traceroute(查看数据包路由途径)</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@VM_1_4_centos ~]<span class="hljs-comment"># traceroute 106.55.165.251</span><br>traceroute to <span class="hljs-number">106.55</span>.<span class="hljs-number">165.251</span> (<span class="hljs-number">106.55</span>.<span class="hljs-number">165.251</span>), <span class="hljs-number">30</span> hops max, <span class="hljs-number">60</span> byte packets<br> <span class="hljs-number">1</span>  <span class="hljs-number">9.31</span>.<span class="hljs-number">61.129</span> (<span class="hljs-number">9.31</span>.<span class="hljs-number">61.129</span>)  <span class="hljs-number">1.033</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">1</span>.<span class="hljs-number">954</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">1</span>.<span class="hljs-number">574</span> <span class="hljs-keyword">ms</span><br> <span class="hljs-title">2</span>  <span class="hljs-number">9.31</span>.<span class="hljs-number">123.96</span> (<span class="hljs-number">9.31</span>.<span class="hljs-number">123.96</span>)  <span class="hljs-number">0.831</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">1</span>.<span class="hljs-number">058</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">1</span>.<span class="hljs-number">319</span> <span class="hljs-keyword">ms</span><br> <span class="hljs-title">3</span>  <span class="hljs-number">9.31</span>.<span class="hljs-number">123.105</span> (<span class="hljs-number">9.31</span>.<span class="hljs-number">123.105</span>)  <span class="hljs-number">0.763</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">1</span>.<span class="hljs-number">330</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">1</span>.<span class="hljs-number">052</span> <span class="hljs-keyword">ms</span><br> <span class="hljs-title">4</span>  <span class="hljs-number">106.55</span>.<span class="hljs-number">165.251</span> (<span class="hljs-number">106.55</span>.<span class="hljs-number">165.251</span>)  <span class="hljs-number">0.504</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">0</span>.<span class="hljs-number">524</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">0</span>.<span class="hljs-number">555</span> ms<br></code></pre></td></tr></table></figure><h1 id="mtr-ping-traceroute"><a href="#mtr-ping-traceroute" class="headerlink" title="mtr(ping+traceroute)"></a>mtr(ping+traceroute)</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># mtr qq.com</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-08-28-Common-commands-for-linux-positioning-problems/1.png" alt="upload-image"></p><h1 id="route-查看路由表"><a href="#route-查看路由表" class="headerlink" title="route(查看路由表)"></a>route(查看路由表)</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@VM_1_4_centos ~]</span># route <br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>default         gateway         <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">10.168.1.0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">10.168.100.3</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> enic3c3d718fcd<br><span class="hljs-number">10.168.100.11</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> enib229b17365d<br>link-local      <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     U     <span class="hljs-number">1002</span>   <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">169.254.32.0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">240</span> U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> docker0<br><span class="hljs-number">172.16.3.64</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cbr0<br></code></pre></td></tr></table></figure><p>添加一个网络路由到一个路由表：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">$ sudo <span class="hljs-keyword">route</span> add -net <span class="hljs-variable">&lt;network ip/cidr&gt;</span> gw <span class="hljs-variable">&lt;gateway ip&gt;</span> <span class="hljs-variable">&lt;interface&gt;</span><br></code></pre></td></tr></table></figure><p>从路由表中删除特定的路由项：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">$ sudo route <span class="hljs-built_in">del</span> -<span class="hljs-built_in">net</span> &lt;network ip/cidr&gt;<br></code></pre></td></tr></table></figure><h1 id="netstat-查看连接数"><a href="#netstat-查看连接数" class="headerlink" title="netstat(查看连接数)"></a>netstat(查看连接数)</h1><p>查看某个服务的TCP连接数</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"># netstat -an | <span class="hljs-type">grep</span> ESTABLISHED | <span class="hljs-type">grep</span> <span class="hljs-number">126</span>:<span class="hljs-number">80</span> | <span class="hljs-type">wc</span> -l<br></code></pre></td></tr></table></figure><p>查看udp的连接数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -nu</span><br></code></pre></td></tr></table></figure><p>查看网卡列表</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@VM_1_4_centos ~]<span class="hljs-comment"># netstat -i </span><br>Kernel Interface table<br>Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg<br>cbr0            <span class="hljs-number"> 1500 </span>421966834     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0     <span class="hljs-number"> 478598834 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMPRU<br>docker0         <span class="hljs-number"> 1500 </span>      <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0            <span class="hljs-number"> 7 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMU<br>enib229b17365d  <span class="hljs-number"> 1500 </span><span class="hljs-number"> 3399766 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0      <span class="hljs-number"> 5942984 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMRU<br>enic3c3d718fcd  <span class="hljs-number"> 1500 </span><span class="hljs-number"> 1187714 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0      <span class="hljs-number"> 1188197 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMRU<br>eth0            <span class="hljs-number"> 1500 </span>945294724     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0     <span class="hljs-number"> 695281730 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMRU<br>eth1            <span class="hljs-number"> 1500 </span><span class="hljs-number"> 8390504 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0      <span class="hljs-number"> 4818989 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMRU<br>lo             <span class="hljs-number"> 65536 </span><span class="hljs-number"> 6202712 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0      <span class="hljs-number"> 6202712 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>LRU<br>veth00bf0de2    <span class="hljs-number"> 1500 </span>     <span class="hljs-number"> 10 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>0        <span class="hljs-number"> 10516 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>BMRU<br></code></pre></td></tr></table></figure><p>显示组播组的关系</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># netstat -g</span><br>IPv6/IPv4 Group Memberships<br>Interface    RefCnt Group<br>--------------- ------ ---------------------<br>lo       <span class="hljs-number">1</span>   <span class="hljs-literal">ALL</span>-<span class="hljs-params">SYSTEM</span>S.MCAST.NET<br>eth0      <span class="hljs-number">1</span>   <span class="hljs-literal">ALL</span>-<span class="hljs-params">SYSTEM</span>S.MCAST.NET<br>lo       <span class="hljs-number">1</span>   <span class="hljs-title function_">ff02::1</span><br>eth0      <span class="hljs-number">1</span>   <span class="hljs-title function_">ff02::1</span>:ff0a:b0c<br>eth0      <span class="hljs-number">1</span>   <span class="hljs-title function_">ff02::1</span><br></code></pre></td></tr></table></figure><p>显示网络统计信息</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># netstat -s</span><br>Ip:<br> <span class="hljs-number"> 184695 </span>total packets received<br> <span class="hljs-number"> 0 </span>forwarded<br> <span class="hljs-number"> 0 </span>incoming packets discarded<br> <span class="hljs-number"> 184687 </span>incoming packets delivered<br> <span class="hljs-number"> 143917 </span>requests sent out<br> <span class="hljs-number"> 32 </span>outgoing packets dropped<br> <span class="hljs-number"> 30 </span>dropped because of missing route<br>Icmp:<br> <span class="hljs-number"> 676 </span>ICMP messages received<br></code></pre></td></tr></table></figure><p>显示监听的套接口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># netstat -l</span><br><span class="hljs-attribute">Active</span> Internet connections (only servers)<br><span class="hljs-attribute">Proto</span> Recv-Q Send-Q Local Address           Foreign Address         State      <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0</span>:ssh             <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> VM_1_4_centos:<span class="hljs-number">33437</span>     <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> VM_1_4_centos:<span class="hljs-number">50050</span>     <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> VM_1_4_centos:<span class="hljs-number">10248</span>     <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0:46313</span>           <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> VM_1_4_centos:<span class="hljs-number">10249</span>     <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0</span>:sunrpc          <span class="hljs-number">0.0.0.0</span>:*               LISTEN     <br><span class="hljs-attribute">tcp6</span>       <span class="hljs-number">0</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [::]:30099              [::]:*                  LISTEN     </span><br></code></pre></td></tr></table></figure><h1 id="ss-检测套接字"><a href="#ss-检测套接字" class="headerlink" title="ss(检测套接字)"></a>ss(检测套接字)</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ss -ta<br>State      Recv-Q Send-Q                                         Local Address:Port                                                          Peer Address:Port                <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 128 </span>                                                       *:ssh                                                                      *:*                    <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 32768 </span>                                             127.0.0.1:33437                                                                    *:*                    <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 32768 </span>                                             127.0.0.1:50050                                                                    *:*                    <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 32768 </span>                                             127.0.0.1:10248                                                                    *:*                    <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 64 </span>                                                        *:46313                                                                    *:*                    <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 32768 </span>                                             127.0.0.1:10249                                                                    *:*                    <br>LISTEN    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 128 </span>                                                       *:sunrpc                                                                   *:*                    <br>TIME-WAIT <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>                                               172.16.3.65:48682                                                          172.16.3.75:websm                <br>ESTAB     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>                                              172.16.252.1:54536                                                         172.16.252.1:https                <br>ESTAB     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>                                                10.168.1.4:46820                                                       169.254.128.15:60002                <br>ESTAB     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>                                                10.168.1.4:ssh                                                          163.177.68.35:11123                <br>ESTAB     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>                                                10.168.1.4:51178                                                         169.254.0.71:http                 <br>ESTAB     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>                                              172.16.252.1:45940                                                         172.16.252.1:https    <br></code></pre></td></tr></table></figure><p>显示所有活动的TCP连接以及计时器，运行以下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ ss -<span class="hljs-keyword">to</span><br></code></pre></td></tr></table></figure><h1 id="ncat-nc"><a href="#ncat-nc" class="headerlink" title="ncat(nc)"></a>ncat(nc)</h1><p>ncat&#x2F;nc既是一个端口扫描工具，也是一款安全工具，还是一款监测工具，甚至可以做为一个简单的TCP代理。 由于有这么多的功能，它被誉为是网络界的瑞士军刀。<br>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> nmap-ncat -y<br></code></pre></td></tr></table></figure><p>监听某个端口的入站连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ncat</span> -l <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>连接远程服务器执行命令</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">ncat IP_address port_number<br><br>[root<span class="hljs-meta">@VM-6-17-centos</span> ~]<span class="hljs-comment"># ncat 49.235.179.157 80</span><br>curl localhost  <br>HTTP/1.1 400 Bad Request<br>Server: nginx/1.16.1<br>Date: Fri, 28 Aug 2020 09:08:14 GMT<br>Content-Type: text/html<br>Content-Length: 157<br>Connection: close<br><br><span class="hljs-variable">&lt;html&gt;</span><br><span class="hljs-variable">&lt;head&gt;</span><span class="hljs-variable">&lt;title&gt;</span>400 Bad Request<span class="hljs-variable">&lt;/title&gt;</span><span class="hljs-variable">&lt;/head&gt;</span><br><span class="hljs-variable">&lt;body&gt;</span><br><span class="hljs-variable">&lt;center&gt;</span><span class="hljs-variable">&lt;h1&gt;</span>400 Bad Request<span class="hljs-variable">&lt;/h1&gt;</span><span class="hljs-variable">&lt;/center&gt;</span><br><span class="hljs-variable">&lt;hr&gt;</span><span class="hljs-variable">&lt;center&gt;</span>nginx/1.16.1<span class="hljs-variable">&lt;/center&gt;</span><br><span class="hljs-variable">&lt;/body&gt;</span><br><span class="hljs-variable">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>测试主机端口的连通性</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@VM<span class="hljs-number">-6</span><span class="hljs-number">-17</span>-centos ~]<span class="hljs-meta"># ncat -v 49.235.179.157 22</span><br><span class="hljs-symbol">Ncat:</span> Version <span class="hljs-number">7.50</span> ( https://nmap<span class="hljs-meta">.org</span>/ncat )<br><span class="hljs-symbol">Ncat:</span> Connected to <span class="hljs-number">49.235</span><span class="hljs-number">.179</span><span class="hljs-number">.157</span>:<span class="hljs-number">22.</span><br>SSH<span class="hljs-number">-2.0</span>-OpenSSH_7<span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><p>nc进行主机间通信聊天</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_0_13_centos</span> ~]<span class="hljs-meta"># ncat 42.194.143.131 8081</span><br>hello<br><br>[root<span class="hljs-symbol">@VM_1_4_centos</span> ~]<span class="hljs-meta"># ncat -l 8081</span><br>hello<br></code></pre></td></tr></table></figure><h1 id="nmap-扫描主机"><a href="#nmap-扫描主机" class="headerlink" title="nmap(扫描主机)"></a>nmap(扫描主机)</h1><p>扫描<a href="http://www.niewx.club这个地址的状态/">www.niewx.club这个地址的状态</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM_1_4_centos ~]<span class="hljs-comment"># nmap www.niewx.club</span><br><br>Starting Nmap 6.40 ( http://nmap.org ) at 2020-08-28 17:16 CST<br>Nmap scan report <span class="hljs-keyword">for</span> www.niewx.club (49.235.179.157)<br>Host is up (0.029s latency).<br>Not shown: 992 filtered ports<br>PORT      STATE  SERVICE<br>20/tcp    closed ftp-data<br>21/tcp    closed ftp<br>22/tcp    open   ssh<br>80/tcp    open   http<br>443/tcp   open   https<br>3389/tcp  closed ms-wbt-server<br>5555/tcp  closed freeciv<br>55555/tcp closed unknown<br><br>Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 80.76 seconds<br></code></pre></td></tr></table></figure><h1 id="iftop-查看流量"><a href="#iftop-查看流量" class="headerlink" title="iftop(查看流量)"></a>iftop(查看流量)</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> iftop -y<br><span class="hljs-comment"># iftop -i eth0</span><br></code></pre></td></tr></table></figure><p>-i: 接口</p><p>-B: 以字节而非比特显示</p><p><img src="/img/2020-08-28-Common-commands-for-linux-positioning-problems/2.png" alt="upload-image"></p><p>TX：发送流量</p><p>RX：接收流量</p><p>TOTAL：总流量</p><p>Cumm：运行iftop到目前时间的总流量</p><p>peak：流量峰值</p><p>rates：分别表示过去 2s 10s 40s 的平均流量</p><h1 id="trickle-限制带宽"><a href="#trickle-限制带宽" class="headerlink" title="trickle(限制带宽)"></a>trickle(限制带宽)</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> trickle -y<br></code></pre></td></tr></table></figure><p>这个应用用于限制网络带宽</p><ol><li>限制wget的上传和下载速度限制上传为10KB&#x2F;S,下载为20KB&#x2F;s</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">trickle -u 10 -d 20 wget http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1503-01.iso</span><br></code></pre></td></tr></table></figure><ol start="2"><li>单独限制某个进程的下载和上传速度</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># trickle -s -d 50 -u 25 ftp</span><br></code></pre></td></tr></table></figure><ol start="3"><li>限制终端下的所有命令带宽为，下载500KB&#x2F;S，上传250KB&#x2F;s;</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># trickle -s -d 500 -u 250 bash</span><br>备注，单独命令使用时，必须加-s参数<br></code></pre></td></tr></table></figure><h1 id="dstat-监控cpu内存"><a href="#dstat-监控cpu内存" class="headerlink" title="dstat(监控cpu内存)"></a>dstat(监控cpu内存)</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">yum install dstat -y<br>-c: 显示cpu综合占有率<br>-m: 显示内存使用情况<br>-n: 显示网络状况<br>-l：显示系统负载情况<br>-r：显示I/O请求(读/写)情况<br>[root@VM_1_4_centos ~]<span class="hljs-comment"># dstat -ncmlr</span><br>-net/total- ----total-cpu-usage---- ------memory-usage----- ---load-avg--- --io/total-<br> recv  send|usr sys idl wai hiq siq| used  buff  cach  free| 1m   5m  15m | read  writ<br>  <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>| <span class="hljs-number"> 8 </span> <span class="hljs-number"> 2 </span><span class="hljs-number"> 90 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0|6769M 1226M 6870M  661M|0.61 0.50 0.46|2.85  23.7 <br>  78k  141k| <span class="hljs-number"> 2 </span> <span class="hljs-number"> 2 </span><span class="hljs-number"> 95 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0|6777M 1226M 6870M  653M|0.56 0.49 0.45|  <span class="hljs-number"> 0 </span> 25.0 <br>  71k   97k| <span class="hljs-number"> 6 </span> <span class="hljs-number"> 1 </span><span class="hljs-number"> 93 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0|6771M 1226M 6870M  659M|0.56 0.49 0.45|  <span class="hljs-number"> 0 </span> 9.00 <br> 273k  235k| <span class="hljs-number"> 7 </span> <span class="hljs-number"> 1 </span><span class="hljs-number"> 92 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0|6771M 1227M 6870M  659M|0.56 0.49 0.45|  <span class="hljs-number"> 0 </span> 32.0 <br> 214k  401k| <span class="hljs-number"> 3 </span> <span class="hljs-number"> 1 </span><span class="hljs-number"> 96 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0|6771M 1227M 6870M  659M|0.56 0.49 0.45|  <span class="hljs-number"> 0 </span> 5.00 <br> 123k  132k| <span class="hljs-number"> 2 </span> <span class="hljs-number"> 1 </span><span class="hljs-number"> 97 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0|6772M 1227M 6870M  658M|0.56 0.49 0.45|  <span class="hljs-number"> 0 </span> 35.0 <br></code></pre></td></tr></table></figure><h1 id="tcpdump-网络抓包"><a href="#tcpdump-网络抓包" class="headerlink" title="tcpdump(网络抓包)"></a>tcpdump(网络抓包)</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">tcpdump <span class="hljs-selector-attr">[ -adeflnNOpqStvx ]</span> <span class="hljs-selector-attr">[ -c 数量 ]</span> <span class="hljs-selector-attr">[ -F 文件名 ]</span><br>　　　　　　　　　　<span class="hljs-selector-attr">[ -i 网络接口 ]</span> <span class="hljs-selector-attr">[ -r 文件名]</span> <span class="hljs-selector-attr">[ -s snaplen ]</span><br>                                       <span class="hljs-selector-attr">[ -T 类型 ]</span> <span class="hljs-selector-attr">[ -w 文件名 ]</span> <span class="hljs-selector-attr">[表达式 ]</span><br> tcpdump的选项介绍<br>　　　-<span class="hljs-selector-tag">a</span> 　　　将网络地址和广播地址转变成名字；<br>　　　-d 　　　将匹配信息包的代码以人们能够理解的汇编格式给出；<br>　　　-<span class="hljs-selector-tag">dd</span> 　　　将匹配信息包的代码以c语言程序段的格式给出；<br>　　　-ddd 　　　将匹配信息包的代码以十进制的形式给出；<br>　　　-e 　　　在输出行打印出数据链路层的头部信息，包括源mac和目的mac，以及网络层的协议；<br>　　　-f 　　　将外部的Internet地址以数字的形式打印出来；<br>　　　-l 　　　使标准输出变为缓冲行形式；<br>　　　-n 　　　指定将每个监听到数据包中的域名转换成IP地址后显示，不把网络地址转换成名字；<br>     -nn：    指定将每个监听到的数据包中的域名转换成IP、端口从应用名称转换成端口号后显示<br>　　　-t 　　　在输出的每一行不打印时间戳；<br>　　　-v 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；<br>　　　-vv 　　　输出详细的报文信息；<br>　　　-c 　　　在收到指定的包的数目后，tcpdump就会停止；<br>　　　-F 　　　从指定的文件中读取表达式,忽略其它的表达式；<br>　　　-<span class="hljs-selector-tag">i</span> 　　　指定监听的网络接口；<br>      -<span class="hljs-selector-tag">p</span>：    将网卡设置为非混杂模式，不能与host或broadcast一起使用<br>　　　-r 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；<br>　　　-w 　　　直接将包写入文件中，并不分析和打印出来；<br>      -s snaplen         snaplen表示从一个包中截取的字节数。<span class="hljs-number">0</span>表示包不截断，抓完整的数据包。默认的话 tcpdump 只显示部分数据包,默认<span class="hljs-number">68</span>字节。<br>　　　-T 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议；）<br>     -X            告诉tcpdump命令，需要把协议头和包内容都原原本本的显示出来（tcpdump会以<span class="hljs-number">16</span>进制和ASCII的形式显示），这在进行协议分析时是绝对的利器。<br></code></pre></td></tr></table></figure><ol><li>抓取包含10.10.10.122的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn host 10.10.10.122</span><br></code></pre></td></tr></table></figure><ol start="2"><li>抓取包含10.10.10.0&#x2F;24网段的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn net 10.10.10.0/24</span><br></code></pre></td></tr></table></figure><ol start="3"><li>抓取包含端口22的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn port 22</span><br></code></pre></td></tr></table></figure><ol start="4"><li>抓取udp协议的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn  udp</span><br></code></pre></td></tr></table></figure><ol start="5"><li>抓取icmp协议的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn icmp</span><br></code></pre></td></tr></table></figure><ol start="6"><li>抓取arp协议的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn arp</span><br></code></pre></td></tr></table></figure><ol start="7"><li>抓取ip协议的数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn ip</span><br></code></pre></td></tr></table></figure><ol start="8"><li>抓取源ip是10.10.10.122数据包。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"># tcpdump -<span class="hljs-selector-tag">i</span> eth0 -vnn <span class="hljs-attribute">src</span> host <span class="hljs-number">10.10</span>.<span class="hljs-number">10.122</span><br></code></pre></td></tr></table></figure><ol start="9"><li>抓取目的ip是10.10.10.122数据包</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># tcpdump -i eth0 -vnn dst host 10.10.10.122</span><br></code></pre></td></tr></table></figure><ol start="10"><li>抓取源端口是22的数据包</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"># tcpdump -<span class="hljs-selector-tag">i</span> eth0 -vnn <span class="hljs-attribute">src</span> port <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><ol start="11"><li>抓取源ip是10.10.10.253且目的ip是22的数据包</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># tcpdump -i eth0 -vnn src host 10.10.10.253 and dst port 22</span><br></code></pre></td></tr></table></figure><ol start="12"><li>抓取源ip是10.10.10.122或者包含端口是22的数据包</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"># tcpdump -<span class="hljs-selector-tag">i</span> eth0 -vnn <span class="hljs-attribute">src</span> host <span class="hljs-number">10.10</span>.<span class="hljs-number">10.122</span> or port <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><ol start="13"><li>抓取源ip是10.10.10.122且端口不是22的数据包</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># tcpdump -i eth0 -vnn src host 10.10.10.122 and not port 22</span><br></code></pre></td></tr></table></figure><ol start="14"><li>抓取源ip是10.10.10.2且目的端口是22，或源ip是10.10.10.65且目的端口是80的数据包。</li></ol><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"># tcpdump -i eth0 -vnn <span class="hljs-symbol">\(</span> src host 10.10.10.2 and dst port 22 <span class="hljs-symbol">\)</span> or   <span class="hljs-symbol">\(</span> src host 10.10.10.65 and dst port 80 <span class="hljs-symbol">\)</span><br></code></pre></td></tr></table></figure><ol start="15"><li>抓取源ip是10.10.10.59且目的端口是22，或源ip是10.10.10.68且目的端口是80的数据包。</li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># tcpdump -i  eth0 -vnn <span class="hljs-string">&#x27;src host 10.10.10.59 and dst port 22&#x27;</span> or  <span class="hljs-string">&#x27; src host 10.10.10.68 and dst port 80 &#x27;</span></span><br></code></pre></td></tr></table></figure><ol start="16"><li>把抓取的数据包记录存到&#x2F;tmp&#x2F;fill文件中，当抓取100个数据包后就退出程序。</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># tcpdump –i eth0 -vnn -w  <span class="hljs-regexp">/tmp/</span>fil1 -c <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><ol start="17"><li>从&#x2F;tmp&#x2F;fill记录中读取tcp协议的数据包</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># tcpdump –i eth0 -vnn -r  <span class="hljs-regexp">/tmp/</span>fil1 tcp<br></code></pre></td></tr></table></figure><ol start="18"><li>从&#x2F;tmp&#x2F;fill记录中读取包含10.10.10.58的数据包</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># tcpdump –i eth0 -vnn -r  <span class="hljs-regexp">/tmp/</span>fil1 host  <span class="hljs-number">10.10</span>.<span class="hljs-number">10.58</span><br></code></pre></td></tr></table></figure><h1 id="curl-发送请求"><a href="#curl-发送请求" class="headerlink" title="curl(发送请求)"></a>curl(发送请求)</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> www.baidu.com<br></code></pre></td></tr></table></figure><p>也可以保存源码 用curl -O 文件名 url，这个和wget类似</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl -O baidu<span class="hljs-selector-class">.txt</span> wwww<span class="hljs-selector-class">.baidu</span>.com<br></code></pre></td></tr></table></figure><p>显示网页头部信息 用-i,当然也会把网页信息显示出来</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM_0_11_centos</span> <span class="hljs-string">training</span>]<span class="hljs-comment"># curl -i www.baidu.com</span><br><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">Accept-Ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">Cache-Control:</span> <span class="hljs-string">private,</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache,</span> <span class="hljs-literal">no</span><span class="hljs-string">-store,</span> <span class="hljs-string">proxy-revalidate,</span> <span class="hljs-literal">no</span><span class="hljs-string">-transform</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">keep-alive</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">2381</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-attr">Date:</span> <span class="hljs-string">Thu,</span> <span class="hljs-number">02</span> <span class="hljs-string">Apr</span> <span class="hljs-number">2020 02:14:33 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">Etag:</span> <span class="hljs-string">&quot;588604c8-94d&quot;</span><br><span class="hljs-attr">Last-Modified:</span> <span class="hljs-string">Mon,</span> <span class="hljs-number">23</span> <span class="hljs-string">Jan</span> <span class="hljs-number">2017 13:27:36 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">Pragma:</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache</span><br><span class="hljs-attr">Server:</span> <span class="hljs-string">bfe/1.0.8.18</span><br><span class="hljs-attr">Set-Cookie:</span> <span class="hljs-string">BDORZ=27315;</span> <span class="hljs-string">max-age=86400;</span> <span class="hljs-string">domain=.baidu.com;</span> <span class="hljs-string">path=/</span><br><br><span class="hljs-string">&lt;!DOCTYPE</span> <span class="hljs-string">html&gt;</span><br> <span class="hljs-string">xxx</span><br>  <span class="hljs-string">&lt;/html&gt;</span> <br></code></pre></td></tr></table></figure><p>参数 -v可以显示通信的过程：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM_0_11_centos</span> <span class="hljs-string">training</span>]<span class="hljs-comment"># curl -v www.baidu.com</span><br><span class="hljs-string">*</span> <span class="hljs-string">About</span> <span class="hljs-string">to</span> <span class="hljs-string">connect()</span> <span class="hljs-string">to</span> <span class="hljs-string">www.baidu.com</span> <span class="hljs-string">port</span> <span class="hljs-number">80</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">*</span>   <span class="hljs-string">Trying</span> <span class="hljs-number">180.101</span><span class="hljs-number">.49</span><span class="hljs-number">.11</span><span class="hljs-string">...</span><br><span class="hljs-string">*</span> <span class="hljs-string">Connected</span> <span class="hljs-string">to</span> <span class="hljs-string">www.baidu.com</span> <span class="hljs-string">(180.101.49.11)</span> <span class="hljs-string">port</span> <span class="hljs-number">80</span> <span class="hljs-string">(#0)</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">GET</span> <span class="hljs-string">/</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">User-Agent:</span> <span class="hljs-string">curl/7.29.0</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Host:</span> <span class="hljs-string">www.baidu.com</span><br><span class="hljs-string">&gt;</span> <span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*</span><br><span class="hljs-string">&gt;</span> <br><span class="hljs-string">&lt;</span> <span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Accept-Ranges:</span> <span class="hljs-string">bytes</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Cache-Control:</span> <span class="hljs-string">private,</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache,</span> <span class="hljs-literal">no</span><span class="hljs-string">-store,</span> <span class="hljs-string">proxy-revalidate,</span> <span class="hljs-literal">no</span><span class="hljs-string">-transform</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Connection:</span> <span class="hljs-string">keep-alive</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Content-Length:</span> <span class="hljs-number">2381</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Date:</span> <span class="hljs-string">Thu,</span> <span class="hljs-number">02</span> <span class="hljs-string">Apr</span> <span class="hljs-number">2020 02:16:36 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Etag:</span> <span class="hljs-string">&quot;588604c8-94d&quot;</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Last-Modified:</span> <span class="hljs-string">Mon,</span> <span class="hljs-number">23</span> <span class="hljs-string">Jan</span> <span class="hljs-number">2017 13:27:36 </span><span class="hljs-string">GMT</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Pragma:</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Server:</span> <span class="hljs-string">bfe/1.0.8.18</span><br><span class="hljs-string">&lt;</span> <span class="hljs-attr">Set-Cookie:</span> <span class="hljs-string">BDORZ=27315;</span> <span class="hljs-string">max-age=86400;</span> <span class="hljs-string">domain=.baidu.com;</span> <span class="hljs-string">path=/</span><br><span class="hljs-string">&lt;</span><br></code></pre></td></tr></table></figure><p>更详细的通信信息可以用 参数 –trance 文件名 url,具体信息保存到单独的文件中</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_0_11_centos</span> training]<span class="hljs-meta"># curl --trace info.txt www.baidu.com</span><br></code></pre></td></tr></table></figure><p>htpp的动词，例如GET POST，PUT，DELETE等,需要参数 -X</p><p>curl默认的是get请求，如果发送POSt请求</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> -X POST www.baidu.com<br></code></pre></td></tr></table></figure><p>发送表单的时候，GET很简单 只需要把数据拼接到url后面就行</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">curl</span> www.baidu.com?<span class="hljs-class"><span class="hljs-keyword">data</span>=xxx&amp;data1=xxx</span><br></code></pre></td></tr></table></figure><p>POST也不难</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">curl -X <span class="hljs-keyword">POST</span> --data <span class="hljs-string">&quot;data=xxx&quot;</span> example.com/<span class="hljs-keyword">form</span>.cgi<br></code></pre></td></tr></table></figure><p>POST发送请求的数据体可以用-d</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl -d<span class="hljs-string">&#x27;login=emma＆password=123&#x27;</span>-X POST https:<span class="hljs-regexp">//g</span>oogle.com/login<br> 或者<br>$ curl -d <span class="hljs-string">&#x27;login=emma&#x27;</span> -d <span class="hljs-string">&#x27;password=123&#x27;</span> -X POST  https:<span class="hljs-regexp">//g</span>oogle.com/login<br></code></pre></td></tr></table></figure><p>使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application&#x2F;x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。-d参数可以读取本地文本文件的数据，向服务器发送。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl -d <span class="hljs-string">&#x27;@data.txt&#x27;</span> https:<span class="hljs-regexp">//g</span>oogle.com/login<br></code></pre></td></tr></table></figure><p>上面命令读取data.txt文件的内容，作为数据体向服务器发送。<br>文件上传： 假定文件上传的表单是下面这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">　<span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&#x27;multipart/form-data&#x27;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload.cgi&quot;</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">file</span> <span class="hljs-attr">name</span>=<span class="hljs-string">upload</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">press</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OK&quot;</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>curl上传就应该是：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">curl --form <span class="hljs-attribute">upload</span>=@localfilename --form <span class="hljs-attribute">press</span>=OK [URL]<br></code></pre></td></tr></table></figure><p>–referer参数表示的是你从哪个页面来的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root@VM_0_11_centos training]</span># curl --<span class="hljs-built_in">ref</span>erer www.baidu.com www.baidu.com<br></code></pre></td></tr></table></figure><p>User Agent字段，这个字段表示的是客户端设备的信息，服务器可能会根据这个User Agent字段来判断是手机还是电脑</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">curl --user-agent <span class="hljs-string">&quot; xx&quot;</span> url<br>比如IPhone <br>Mozilla/5.0 (iPhone; <span class="hljs-keyword">U</span>; CPU iPhone OS 4_3_3 like <span class="hljs-keyword">Mac</span> OS X; <span class="hljs-keyword">en</span>-<span class="hljs-keyword">us</span>) <br>AppleWebKit/533.17.9 (KHTML, like Gecko) <span class="hljs-keyword">Version</span>/5.0.2 Mobile/8J2 Safari/6533.18.5<br><br><br> curl --user-agent &quot;Mozilla/5.0 (iPhone; <span class="hljs-keyword">U</span>; CPU iPhone OS 4_3_3 like <span class="hljs-keyword">Mac</span> OS X; <span class="hljs-keyword">en</span>-<span class="hljs-keyword">us</span>) <br> AppleWebKit/533.17.9 (KHTML, like Gecko) <span class="hljs-keyword">Version</span>/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;  www.baidu.com<br></code></pre></td></tr></table></figure><ul><li>–user-agent 可以用-A或者-H来替代</li><li>–cookie参数，使用–cookie可以携带cookie信息</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">curl --cookie <span class="hljs-string">&quot;name=xxx&quot;</span> URL<br> `-c cookie-file`可以保存服务器返回的cookie到文件，<br> `-b cookie-file`可以使用这个文件作为cookie信息，进行后续的请求。<br></code></pre></td></tr></table></figure><p>增加头部信息 –header</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl --header <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> http:<span class="hljs-regexp">//</span>example.com<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/39b9d66c9dbf">https://www.jianshu.com/p/39b9d66c9dbf</a></p><p><a href="https://www.toutiao.com/i6812988437512061452/">https://www.toutiao.com/i6812988437512061452/</a><br><a href="https://www.toutiao.com/i6850221908475003405/">https://www.toutiao.com/i6850221908475003405/</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubectl命令行jsonpath的使用</title>
    <link href="/2020/08/27/2020-08-27-Use-of-Kubectl-command-line-jsonpath/"/>
    <url>/2020/08/27/2020-08-27-Use-of-Kubectl-command-line-jsonpath/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了jsonpath的语法和使用。</p><h1 id="jsonpath的语法介绍"><a href="#jsonpath的语法介绍" class="headerlink" title="jsonpath的语法介绍"></a>jsonpath的语法介绍</h1><p>Kubectl 支持 JSONPath 模板。</p><p>JSONPath 模板由 {} 包起来的 JSONPath 表达式组成。Kubectl 使用 JSONPath 表达式来过滤 JSON 对象中的特定字段并格式化输出。除了原始的 JSONPath 模板语法，以下函数和语法也是有效的:</p><ol><li>使用双引号将 JSONPath 表达式内的文本引起来。</li><li>使用 range，end 运算符来迭代列表。</li><li>使用负片索引后退列表。负索引不会”环绕”列表，并且只要 -index + listLength&gt; &#x3D; 0 就有效。</li></ol><table><thead><tr><th>函数</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>text</td><td>纯文本</td><td>kind is {.kind}</td><td>kind is List</td></tr><tr><td>@</td><td>当前对象</td><td>{@}</td><td>与输入相同</td></tr><tr><td>. or []</td><td>子运算符</td><td>{.kind} or {[‘kind’]}</td><td>List</td></tr><tr><td>..</td><td>递归下降</td><td>{..name}</td><td>127.0.0.1 127.0.0.2 myself e2e</td></tr><tr><td>*</td><td>通配符。获取所有对象</td><td>{.items[*].metadata.name}</td><td>[127.0.0.1 127.0.0.2]</td></tr><tr><td>[start:end :step]</td><td>下标运算符</td><td>{.users[0].name}</td><td>myself</td></tr><tr><td>[,]</td><td>并集运算符</td><td>{.items[*][‘metadata.name’, ‘status.capacity’]}</td><td>127.0.0.1 127.0.0.2 map[cpu:4] map[cpu:8]</td></tr><tr><td>?()</td><td>过滤</td><td>{.users[?(@.name&#x3D;&#x3D;”e2e”)].user.password}</td><td>secret</td></tr><tr><td>range, end</td><td>迭代列表</td><td>{range .items[*]}[{.metadata.name}, {.status.capacity}] {end}</td><td>[127.0.0.1, map[cpu:4]] [127.0.0.2, map[cpu:8]]</td></tr><tr><td>‘’</td><td>引用解释执行字符串</td><td>{range .items[*]}{.metadata.name}{‘\t’}{end}</td><td>127.0.0.1 127.0.0.2</td></tr></tbody></table><p>下面我们在k8s中使用jsonpath来获取我们想要的内容</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs wren">[<span class="hljs-variable">root</span>@<span class="hljs-variable">VM_1_4_centos</span> <span class="hljs-operator">~</span>]# <span class="hljs-variable">kubectl</span> <span class="hljs-variable">get</span> <span class="hljs-variable">pod</span> <span class="hljs-variable">redis</span><span class="hljs-number">-5</span>b4495ddb4<span class="hljs-operator">-</span><span class="hljs-variable">szjtz</span> <span class="hljs-operator">-</span><span class="hljs-variable">o</span> <span class="hljs-title function_">json</span><br>&#123;<br>    <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Pod&quot;</span>,<br>    <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;annotations&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;tke.cloud.tencent.com/networks-status&quot;</span>: <span class="hljs-string">&quot;[&#123;<span class="hljs-char escape_">\n</span>    <span class="hljs-char escape_">\&quot;</span>name<span class="hljs-char escape_">\&quot;</span>: <span class="hljs-char escape_">\&quot;</span>tke-bridge<span class="hljs-char escape_">\&quot;</span>,<span class="hljs-char escape_">\n</span>    <span class="hljs-char escape_">\&quot;</span>ips<span class="hljs-char escape_">\&quot;</span>: [<span class="hljs-char escape_">\n</span>        <span class="hljs-char escape_">\&quot;</span>172.16.3.92<span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\n</span>    ],<span class="hljs-char escape_">\n</span>    <span class="hljs-char escape_">\&quot;</span>default<span class="hljs-char escape_">\&quot;</span>: true,<span class="hljs-char escape_">\n</span>    <span class="hljs-char escape_">\&quot;</span>dns<span class="hljs-char escape_">\&quot;</span>: &#123;&#125;<span class="hljs-char escape_">\n</span>&#125;]&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;creationTimestamp&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:55Z&quot;</span>,<br>        <span class="hljs-string">&quot;generateName&quot;</span>: <span class="hljs-string">&quot;redis-5b4495ddb4-&quot;</span>,<br>        <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;k8s-app&quot;</span>: <span class="hljs-string">&quot;redis&quot;</span>,<br>            <span class="hljs-string">&quot;pod-template-hash&quot;</span>: <span class="hljs-string">&quot;5b4495ddb4&quot;</span>,<br>            <span class="hljs-string">&quot;qcloud-app&quot;</span>: <span class="hljs-string">&quot;redis&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;redis-5b4495ddb4-szjtz&quot;</span>,<br>        <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>        <span class="hljs-string">&quot;ownerReferences&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;apps/v1&quot;</span>,<br>                <span class="hljs-string">&quot;blockOwnerDeletion&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&quot;controller&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;ReplicaSet&quot;</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;redis-5b4495ddb4&quot;</span>,<br>                <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;bef91151-d94e-46d5-a8a9-59a8f3ae634e&quot;</span><br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;resourceVersion&quot;</span>: <span class="hljs-string">&quot;12100505479&quot;</span>,<br>        <span class="hljs-string">&quot;selfLink&quot;</span>: <span class="hljs-string">&quot;/api/v1/namespaces/default/pods/redis-5b4495ddb4-szjtz&quot;</span>,<br>        <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;968a56ba-80ed-41d3-ad27-deb7d060bfe7&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;spec&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;containers&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;redis&quot;</span>,<br>                <span class="hljs-string">&quot;imagePullPolicy&quot;</span>: <span class="hljs-string">&quot;Always&quot;</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;redis&quot;</span>,<br>                <span class="hljs-string">&quot;resources&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;limits&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;500m&quot;</span>,<br>                        <span class="hljs-string">&quot;memory&quot;</span>: <span class="hljs-string">&quot;1Gi&quot;</span><br>                    &#125;,<br>                    <span class="hljs-string">&quot;requests&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;250m&quot;</span>,<br>                        <span class="hljs-string">&quot;memory&quot;</span>: <span class="hljs-string">&quot;256Mi&quot;</span><br>                    &#125;<br>                &#125;,<br>                <span class="hljs-string">&quot;securityContext&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;privileged&quot;</span>: <span class="hljs-literal">false</span><br>                &#125;,<br>                <span class="hljs-string">&quot;terminationMessagePath&quot;</span>: <span class="hljs-string">&quot;/dev/termination-log&quot;</span>,<br>                <span class="hljs-string">&quot;terminationMessagePolicy&quot;</span>: <span class="hljs-string">&quot;File&quot;</span>,<br>                <span class="hljs-string">&quot;volumeMounts&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;mountPath&quot;</span>: <span class="hljs-string">&quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;default-token-cl2h8&quot;</span>,<br>                        <span class="hljs-string">&quot;readOnly&quot;</span>: <span class="hljs-literal">true</span><br>                    &#125;<br>                ]<br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;dnsPolicy&quot;</span>: <span class="hljs-string">&quot;ClusterFirst&quot;</span>,<br>        <span class="hljs-string">&quot;enableServiceLinks&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&quot;imagePullSecrets&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;qcloudregistrykey&quot;</span><br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;nodeName&quot;</span>: <span class="hljs-string">&quot;10.168.1.4&quot;</span>,<br>        <span class="hljs-string">&quot;restartPolicy&quot;</span>: <span class="hljs-string">&quot;Always&quot;</span>,<br>        <span class="hljs-string">&quot;schedulerName&quot;</span>: <span class="hljs-string">&quot;default-scheduler&quot;</span>,<br>        <span class="hljs-string">&quot;securityContext&quot;</span>: &#123;&#125;,<br>        <span class="hljs-string">&quot;serviceAccount&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>        <span class="hljs-string">&quot;serviceAccountName&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>        <span class="hljs-string">&quot;terminationGracePeriodSeconds&quot;</span>: <span class="hljs-number">30</span>,<br>        <span class="hljs-string">&quot;volumes&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;default-token-cl2h8&quot;</span>,<br>                <span class="hljs-string">&quot;secret&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;defaultMode&quot;</span>: <span class="hljs-number">420</span>,<br>                    <span class="hljs-string">&quot;secretName&quot;</span>: <span class="hljs-string">&quot;default-token-cl2h8&quot;</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;conditions&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;lastProbeTime&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;lastTransitionTime&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:55Z&quot;</span>,<br>                <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;True&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Initialized&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;lastProbeTime&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;lastTransitionTime&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:59Z&quot;</span>,<br>                <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;True&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Ready&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;lastProbeTime&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;lastTransitionTime&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:59Z&quot;</span>,<br>                <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;True&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ContainersReady&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;lastProbeTime&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;lastTransitionTime&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:55Z&quot;</span>,<br>                <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;True&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;PodScheduled&quot;</span><br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;containerStatuses&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;containerID&quot;</span>: <span class="hljs-string">&quot;docker://0a4540282684c9dd282d13eba9a4ae44433f625e65ef40473cda7ca00b2ea73e&quot;</span>,<br>                <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;redis:latest&quot;</span>,<br>                <span class="hljs-string">&quot;imageID&quot;</span>: <span class="hljs-string">&quot;docker-pullable://redis@sha256:09c33840ec47815dc0351f1eca3befe741d7105b3e95bc8fdb9a7e4985b9e1e5&quot;</span>,<br>                <span class="hljs-string">&quot;lastState&quot;</span>: &#123;&#125;,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;redis&quot;</span>,<br>                <span class="hljs-string">&quot;ready&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&quot;restartCount&quot;</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-string">&quot;started&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&quot;state&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;running&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;startedAt&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:59Z&quot;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;hostIP&quot;</span>: <span class="hljs-string">&quot;10.168.1.4&quot;</span>,<br>        <span class="hljs-string">&quot;phase&quot;</span>: <span class="hljs-string">&quot;Running&quot;</span>,<br>        <span class="hljs-string">&quot;podIP&quot;</span>: <span class="hljs-string">&quot;172.16.3.92&quot;</span>,<br>        <span class="hljs-string">&quot;podIPs&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;172.16.3.92&quot;</span><br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;qosClass&quot;</span>: <span class="hljs-string">&quot;Burstable&quot;</span>,<br>        <span class="hljs-string">&quot;startTime&quot;</span>: <span class="hljs-string">&quot;2020-08-25T09:15:55Z&quot;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="通过jsonpath获取信息示例"><a href="#通过jsonpath获取信息示例" class="headerlink" title="通过jsonpath获取信息示例"></a>通过jsonpath获取信息示例</h1><h2 id="纯文本方式"><a href="#纯文本方式" class="headerlink" title="纯文本方式"></a>纯文本方式</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[root@VM_1_4_centos ~]</span># kubectl get pod redis-5b4495ddb4-szjtz -o=jsonpath=&#x27;<span class="hljs-keyword">kind</span> <span class="hljs-keyword">is</span> &#123;.<span class="hljs-keyword">kind</span>&#125;&#x27;<br><span class="hljs-keyword">kind</span> <span class="hljs-keyword">is</span> Pod<br><br></code></pre></td></tr></table></figure><h2 id="获取当前对象"><a href="#获取当前对象" class="headerlink" title="获取当前对象"></a>获取当前对象</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM_1_4_centos ~]# kubectl <span class="hljs-built_in">get</span> pod redis-<span class="hljs-number">5</span>b4495ddb4-szjtz -<span class="hljs-keyword">o</span>=jsonpath=&#123;@&#125;<br><span class="hljs-keyword">map</span>[apiVersion:v1 kind:Pod metadat<span class="hljs-variable">a:map</span>[annotation<span class="hljs-variable">s:map</span>[tke.cloud.tencent.<span class="hljs-keyword">com</span>/networks-status:[&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;tke-bridge&quot;</span>,<br>    <span class="hljs-string">&quot;ips&quot;</span>: [<br>        <span class="hljs-string">&quot;172.16.3.92&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;default&quot;</span>: true,<br>    <span class="hljs-string">&quot;dns&quot;</span>: &#123;&#125;<br>&#125;]] creationTimestamp:<span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">55</span>Z generateName:redis-<span class="hljs-number">5</span>b4495ddb4- label<span class="hljs-variable">s:map</span>[k8s-app:redis pod-template-hash:<span class="hljs-number">5</span>b4495ddb4 qcloud-app:redis] name:redis-<span class="hljs-number">5</span>b4495ddb4-szjtz namespace:default ownerReferences:[<span class="hljs-keyword">map</span>[apiVersion:apps/v1 blockOwnerDeletion:true controller:true kind:ReplicaSet name:redis-<span class="hljs-number">5</span>b4495ddb4 uid:bef91151-d94e-<span class="hljs-number">46</span>d5-a8a9-<span class="hljs-number">59</span>a8f3ae634e]] resourceVersion:<span class="hljs-number">12100505479</span> selfLink:/api/v1/namespaces/default/pods/redis-<span class="hljs-number">5</span>b4495ddb4-szjtz uid:<span class="hljs-number">968</span>a56ba-<span class="hljs-number">80</span>ed-<span class="hljs-number">41</span>d3-ad27-deb7d060bfe7] spec:<span class="hljs-keyword">map</span>[containers:[<span class="hljs-keyword">map</span>[image:redis imagePullPolicy:Always name:redis resource<span class="hljs-variable">s:map</span>[limit<span class="hljs-variable">s:map</span>[cpu:<span class="hljs-number">500</span><span class="hljs-keyword">m</span> memory:<span class="hljs-number">1</span>Gi] request<span class="hljs-variable">s:map</span>[cpu:<span class="hljs-number">250</span><span class="hljs-keyword">m</span> memory:<span class="hljs-number">256</span>Mi]] securityContex<span class="hljs-variable">t:map</span>[privileged:false] terminationMessagePath:/dev/termination-<span class="hljs-built_in">log</span> terminationMessagePolicy:File volumeMounts:[<span class="hljs-keyword">map</span>[mountPath:/var/run/secrets/kubernetes.io/serviceaccount name:default-token-cl2h8 readOnly:true]]]] dnsPolicy:ClusterFirst enableServiceLink<span class="hljs-variable">s:true</span> imagePullSecrets:[<span class="hljs-keyword">map</span>[name:qcloudregistrykey]] nodeName:<span class="hljs-number">10.168</span>.<span class="hljs-number">1.4</span> restartPolicy:Always schedulerName:default-scheduler securityContex<span class="hljs-variable">t:map</span>[] serviceAccoun<span class="hljs-variable">t:default</span> serviceAccountName:default terminationGracePeriodSecond<span class="hljs-variable">s:30</span> volumes:[<span class="hljs-keyword">map</span>[name:default-token-cl2h8 secre<span class="hljs-variable">t:map</span>[defaultMode:<span class="hljs-number">420</span> secretName:default-token-cl2h8]]]] statu<span class="hljs-variable">s:map</span>[conditions:[<span class="hljs-keyword">map</span>[lastProbeTime:<span class="hljs-symbol">&lt;nil&gt;</span> lastTransitionTime:<span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">55</span>Z statu<span class="hljs-variable">s:True</span> <span class="hljs-built_in">type</span>:Initialized] <span class="hljs-keyword">map</span>[lastProbeTime:<span class="hljs-symbol">&lt;nil&gt;</span> lastTransitionTime:<span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">59</span>Z statu<span class="hljs-variable">s:True</span> <span class="hljs-built_in">type</span>:Ready] <span class="hljs-keyword">map</span>[lastProbeTime:<span class="hljs-symbol">&lt;nil&gt;</span> lastTransitionTime:<span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">59</span>Z statu<span class="hljs-variable">s:True</span> <span class="hljs-built_in">type</span>:ContainersReady] <span class="hljs-keyword">map</span>[lastProbeTime:<span class="hljs-symbol">&lt;nil&gt;</span> lastTransitionTime:<span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">55</span>Z statu<span class="hljs-variable">s:True</span> <span class="hljs-built_in">type</span>:PodScheduled]] containerStatuses:[<span class="hljs-keyword">map</span>[containerID:docker://<span class="hljs-number">0</span>a4540282684c9dd282d13eba9a4ae44433f625e65ef40473cda7ca00b2ea73e image:<span class="hljs-keyword">redi</span><span class="hljs-variable">s:latest</span> imageID:docker-pullable://redis@sha256:<span class="hljs-number">09</span>c33840ec47815dc0351f1eca3befe741d7105b3e95bc8fdb9a7e4985b9e1e5 lastState:<span class="hljs-keyword">map</span>[] name:redis ready:true restartCoun<span class="hljs-variable">t:0</span> started:true state:<span class="hljs-keyword">map</span>[runnin<span class="hljs-variable">g:map</span>[startedA<span class="hljs-variable">t:2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">59</span>Z]]]] hostIP:<span class="hljs-number">10.168</span>.<span class="hljs-number">1.4</span> phase:Running podIP:<span class="hljs-number">172.16</span>.<span class="hljs-number">3.92</span> podIPs:[<span class="hljs-keyword">map</span>[ip:<span class="hljs-number">172.16</span>.<span class="hljs-number">3.92</span>]] qosClas<span class="hljs-variable">s:Burstable</span> startTime:<span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span>T09:<span class="hljs-number">15</span>:<span class="hljs-number">55</span>Z]]<br></code></pre></td></tr></table></figure><h2 id="获取pod的apiversion"><a href="#获取pod的apiversion" class="headerlink" title="获取pod的apiversion"></a>获取pod的apiversion</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]# kubectl <span class="hljs-built_in">get</span> pod redis-5b4495ddb4-szjtz <span class="hljs-attribute">-o</span>=jsonpath=&#x27;&#123;.apiVersion&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure><h2 id="获取pod的name"><a href="#获取pod的name" class="headerlink" title="获取pod的name"></a>获取pod的name</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]# kubectl <span class="hljs-built_in">get</span> pod redis-5b4495ddb4-szjtz <span class="hljs-attribute">-o</span>=jsonpath=&#x27;&#123;.metadata.name&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">redis-5b4495ddb4-szjtz</span><br></code></pre></td></tr></table></figure><h2 id="递归获取yaml所有的name"><a href="#递归获取yaml所有的name" class="headerlink" title="递归获取yaml所有的name"></a>递归获取yaml所有的name</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_1_4_centos</span> ~]<span class="hljs-meta"># kubectl get pod redis-5b4495ddb4-szjtz -o=jsonpath=<span class="hljs-string">&#x27;&#123;..name&#125;&#x27;</span></span><br>qcloudregistrykey <span class="hljs-literal">default</span>-token-cl2h8 redis <span class="hljs-literal">default</span>-token-cl2h8 redis redis<span class="hljs-number">-5</span>b4495ddb4-szjtz redis<span class="hljs-number">-5</span>b4495ddb4<br></code></pre></td></tr></table></figure><h2 id="获取所有状态条件中的类型"><a href="#获取所有状态条件中的类型" class="headerlink" title="获取所有状态条件中的类型"></a>获取所有状态条件中的类型</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]# kubectl <span class="hljs-built_in">get</span> pod redis-5b4495ddb4-szjtz <span class="hljs-attribute">-o</span>=jsonpath=&#123;.status.conditions[*].type&#125;<br>Initialized Ready ContainersReady PodScheduled[<br></code></pre></td></tr></table></figure><h2 id="获取状态第一个条件的类型"><a href="#获取状态第一个条件的类型" class="headerlink" title="获取状态第一个条件的类型"></a>获取状态第一个条件的类型</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]# kubectl <span class="hljs-built_in">get</span> pod redis-5b4495ddb4-szjtz <span class="hljs-attribute">-o</span>=jsonpath=&#123;.status.conditions[0].type&#125;<br>Initialized<br></code></pre></td></tr></table></figure><h2 id="从第一个状态条件开始到最后一个结束，每隔2个获取一次"><a href="#从第一个状态条件开始到最后一个结束，每隔2个获取一次" class="headerlink" title="从第一个状态条件开始到最后一个结束，每隔2个获取一次"></a>从第一个状态条件开始到最后一个结束，每隔2个获取一次</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_1_4_centos ~]# kubectl <span class="hljs-built_in">get</span> pod redis-5b4495ddb4-szjtz <span class="hljs-attribute">-o</span>=jsonpath=&#123;.status.conditions[0:3:2].type&#125;<br>Initialized ContainersReady<br></code></pre></td></tr></table></figure><h2 id="获取状态条件中的状态和类型"><a href="#获取状态条件中的状态和类型" class="headerlink" title="获取状态条件中的状态和类型"></a>获取状态条件中的状态和类型</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">[root@VM_1_4_centos ~]# kubectl get pod redis-<span class="hljs-number">5</span>b4495ddb4-szjtz -o=jsonpath=&#x27;&#123;<span class="hljs-keyword">range</span> .status.conditions[*]&#125;[&#123;..status&#125;, &#123;..<span class="hljs-keyword">type</span>&#125;]&#123;<span class="hljs-keyword">end</span>&#125;&#x27;<br>[<span class="hljs-literal">True</span>, Initialized][<span class="hljs-literal">True</span>, Ready][<span class="hljs-literal">True</span>, ContainersReady][<span class="hljs-literal">True</span>, PodScheduled]<br></code></pre></td></tr></table></figure><h2 id="空格和换行符的引用"><a href="#空格和换行符的引用" class="headerlink" title="空格和换行符的引用"></a>空格和换行符的引用</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">[root@VM_1_4_centos ~]# kubectl get pod redis-<span class="hljs-number">5</span>b4495ddb4-szjtz -o=jsonpath=&#x27;&#123;<span class="hljs-keyword">range</span> .status.conditions[*]&#125;[&#123;..status&#125;, &#123;..<span class="hljs-keyword">type</span>&#125;]&#123;<span class="hljs-string">&quot;\n&quot;</span>&#125;&#123;<span class="hljs-keyword">end</span>&#125;&#x27;<br>[<span class="hljs-literal">True</span>, Initialized]<br>[<span class="hljs-literal">True</span>, Ready]<br>[<span class="hljs-literal">True</span>, ContainersReady]<br>[<span class="hljs-literal">True</span>, PodScheduled]<br></code></pre></td></tr></table></figure><h2 id="获取request中的cpu值"><a href="#获取request中的cpu值" class="headerlink" title="获取request中的cpu值"></a>获取request中的cpu值</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[root@VM_1_4_centos ~]</span># kubectl get pod redis-5b4495ddb4-szjtz -o=jsonpath=&#x27;&#123;range .spec.containers<span class="hljs-comment">[0]</span>.resources&#125;<span class="hljs-comment">[&#123;..cpu&#125;]</span>&#123;end&#125;&#x27;<br><span class="hljs-comment">[500m 250m]</span><br></code></pre></td></tr></table></figure><h2 id="获取request中的cpu和memory"><a href="#获取request中的cpu和memory" class="headerlink" title="获取request中的cpu和memory"></a>获取request中的cpu和memory</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">[root@VM_1_4_centos ~]# kubectl get pod redis-5b4495ddb4-szjtz -o=jsonpath=&#x27;</span><span class="hljs-template-variable">&#123;range .spec.containers[0].resources&#125;</span><span class="language-xml">[</span><span class="hljs-template-variable">&#123;..cpu&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;..memory&#125;</span><span class="language-xml">]</span><span class="hljs-template-variable">&#123;end&#125;</span><span class="language-xml">&#x27;</span><br><span class="language-xml">[500m 250m, 1Gi 256Mi]</span><br></code></pre></td></tr></table></figure><h2 id="获取promotheus这个pod中alertmanage的容器端口"><a href="#获取promotheus这个pod中alertmanage的容器端口" class="headerlink" title="获取promotheus这个pod中alertmanage的容器端口"></a>获取promotheus这个pod中alertmanage的容器端口</h2><p>prometheus的yaml文件只截取部分</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@<span class="hljs-symbol">VM_1_4_centos</span> ~]# kubectl get pod prometheus<span class="hljs-number">-7674</span>d56d7f-dqxfx -n kube-ops -o json<br>&#123;<br>    <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Pod&quot;</span>,<br>    <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;prometheus-7674d56d7f-dqxfx&quot;</span>,<br>        <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;kube-ops&quot;</span>,<br>    &#125;,<br>    <span class="hljs-string">&quot;spec&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;containers&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;args&quot;</span>: [<br>                    <span class="hljs-string">&quot;--config.file=/etc/alertmanager/config.yml&quot;</span>,<br>                    <span class="hljs-string">&quot;--storage.path=/alertmanager/data&quot;</span><br>                ],<br>                <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;prom/alertmanager:v0.15.3&quot;</span>,<br>                <span class="hljs-string">&quot;imagePullPolicy&quot;</span>: <span class="hljs-string">&quot;IfNotPresent&quot;</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;alertmanager&quot;</span>,<br>                <span class="hljs-string">&quot;ports&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;containerPort&quot;</span>: <span class="hljs-number">9093</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>,<br>                        <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;TCP&quot;</span><br>                    &#125;<br>                ],  <br>             .........<br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;command&quot;</span>: [<br>                    <span class="hljs-string">&quot;/bin/prometheus&quot;</span><br>                ],<br>                <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;prom/prometheus:v2.4.3&quot;</span>,<br>                <span class="hljs-string">&quot;imagePullPolicy&quot;</span>: <span class="hljs-string">&quot;IfNotPresent&quot;</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;prometheus&quot;</span>,<br>                <span class="hljs-string">&quot;ports&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;containerPort&quot;</span>: <span class="hljs-number">9090</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>,<br>                        <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;TCP&quot;</span><br>                    &#125;<br>            &#125;<br>.......<br>[root@<span class="hljs-symbol">VM_1_4_centos</span> ~]# kubectl get pod prometheus<span class="hljs-number">-7674</span>d56d7f-dqxfx -n kube-ops -o=jsonpath=<span class="hljs-string">&#x27;&#123;.spec.containers[?(@.name==&quot;alertmanager&quot;)].ports&#125;&#x27;</span><br>[map[containerPort:<span class="hljs-number">9093</span> name:http protocol:<span class="hljs-symbol">TCP</span>]]<br><br></code></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/jsonpath/">https://kubernetes.io/zh/docs/reference/kubectl/jsonpath/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>kubectl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之调度篇</title>
    <link href="/2020/08/26/2020-08-26-Kubernetes-scheduling/"/>
    <url>/2020/08/26/2020-08-26-Kubernetes-scheduling/</url>
    
    <content type="html"><![CDATA[<p>我们在日常使用k8s的过程中总会存在一些特殊的调度情景：</p><ul><li>让master节点上不部署业务的pod</li><li>让mysql调度到高IO的节点上</li><li>让coredns的服务均匀的散布在每个节点</li><li>让内服服务调度在一个节点上，减少访问延迟</li></ul><p>这边肯定会有其他场景也会有对pod的调度有特殊要求，这边只是列举了其中几个情况，对于上述遇到的情况我们需要怎么处理，其实k8s给我们提供了丰富的调度策略来满足我们的需求。下面我们来一一说下这些调度策略。</p><h1 id="nodeSelector"><a href="#nodeSelector" class="headerlink" title="nodeSelector"></a>nodeSelector</h1><p>你可以约束一个Pod只能在特定的Node(s)上运行，或者优先运行在特定的节点上。有几种方法可以实现这点，推荐的方法都是用标签选择器来进行选择。通常这样的约束不是必须的，因为调度器将自动进行合理的放置（比如，将 pod 分散到节点上，而不是将 pod 放置在可用资源不足的节点上等等），但在某些情况下，你可以需要更多控制 pod 停靠的节点，例如，确保 pod 最终落在连接了 SSD 的机器上，或者将来自两个不同的服务且有大量通信的 pod 放置在同一个可用区</p><p>nodeSelector是节点选择约束的最简单推荐形式。nodeSelector是 PodSpec 的一个字段。 它包含键值对的映射。为了使 pod 可以在某个节点上运行，该节点的标签中必须包含这里的每个键值对（它也可以具有其他标签）。最常见的用法的是一对键值对。</p><h2 id="添加标签到节点"><a href="#添加标签到节点" class="headerlink" title="添加标签到节点"></a>添加标签到节点</h2><p>执行 kubectl get nodes 命令获取集群的节点名称。 选择一个你要增加标签的节点，然后执行命令将标签添加到你所选择的节点上。 </p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">kubectl <span class="hljs-keyword">label</span> nodes &lt;node-<span class="hljs-keyword">name</span>&gt; &lt;<span class="hljs-keyword">label</span>-key&gt;=&lt;<span class="hljs-keyword">label</span>-value&gt; <br></code></pre></td></tr></table></figure><p>例如，如果你的节点名称为 ‘kubernetes-foo-node-1.c.a-robinson.internal’ 并且想要的标签是 ‘disktype&#x3D;ssd’，则可以执行命令。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl <span class="hljs-selector-tag">label</span> nodes kubernetes-foo-node-<span class="hljs-number">1</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.a-robinson</span><span class="hljs-selector-class">.internal</span> disktype=ssd <br></code></pre></td></tr></table></figure><p>你可以通过重新运行 kubectl get nodes –show-labels，查看节点当前具有了所指定的标签来验证它是否有效。 你也可以使用 命令查看指定节点的标签完整列表</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_0_13_centos prometheus]# kubectl <span class="hljs-built_in">get</span> nodes --show-labels | grep ssd<br>10.168.1.4      Ready    &lt;none&gt;   48d   v1.16.3-tke.10   beta.kubernetes.io/<span class="hljs-attribute">arch</span>=amd64,beta.kubernetes.io/instance-type=QCLOUD,beta.kubernetes.io/os=linux,cloud.tencent.com/node-instance-id=ins-4qz8yvgq,disktype=ssd,failure-domain.beta.kubernetes.io/region=gz,failure-domain.beta.kubernetes.io/zone=100003,kubernetes.io/arch=amd64,kubernetes.io/hostname=10.168.1.4,kubernetes.io/os=linux<br>[root@VM_0_13_centos prometheus]# kubectl describe node 10.168.1.4<br>Name:               10.168.1.4<br>Roles:              &lt;none&gt;<br>Labels:             beta.kubernetes.io/<span class="hljs-attribute">arch</span>=amd64<br>                    beta.kubernetes.io/<span class="hljs-attribute">instance-type</span>=QCLOUD<br>                    beta.kubernetes.io/<span class="hljs-attribute">os</span>=linux<br>                    cloud.tencent.com/<span class="hljs-attribute">node-instance-id</span>=ins-4qz8yvgq<br>                    <span class="hljs-attribute">disktype</span>=ssd<br>                    failure-domain.beta.kubernetes.io/<span class="hljs-attribute">region</span>=gz<br>                    failure-domain.beta.kubernetes.io/<span class="hljs-attribute">zone</span>=100003<br>                    kubernetes.io/<span class="hljs-attribute">arch</span>=amd64<br>                    kubernetes.io/<span class="hljs-attribute">hostname</span>=10.168.1.4<br>                    kubernetes.io/<span class="hljs-attribute">os</span>=linux<br></code></pre></td></tr></table></figure><h2 id="添加-nodeSelector-字段到-Pod-配置中"><a href="#添加-nodeSelector-字段到-Pod-配置中" class="headerlink" title="添加 nodeSelector 字段到 Pod 配置中"></a>添加 nodeSelector 字段到 Pod 配置中</h2><p>选择任何一个你想运行的 Pod 的配置文件，并且在其中添加一个 nodeSelector 部分。 例如，如果下面是我的 pod 配置</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">disktype</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ssd</span><br></code></pre></td></tr></table></figure><p>执行上述yaml可以发现pod已经到到对应的ssd节点了</p><p><img src="/img/2020-08-26-Kubernetes-scheduling/1.png" alt="upload-image"> </p><h2 id="k8s默认给节点打的标签"><a href="#k8s默认给节点打的标签" class="headerlink" title="k8s默认给节点打的标签"></a>k8s默认给节点打的标签</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">kubernetes.<span class="hljs-built_in">io</span>/hostname<br>failure-domain.beta.kubernetes.<span class="hljs-built_in">io</span>/zone<br>failure-domain.beta.kubernetes.<span class="hljs-built_in">io</span>/region<br>topology.kubernetes.<span class="hljs-built_in">io</span>/zone<br>topology.kubernetes.<span class="hljs-built_in">io</span>/region<br>beta.kubernetes.<span class="hljs-built_in">io</span>/instance-<span class="hljs-built_in">type</span><br>node.kubernetes.<span class="hljs-built_in">io</span>/instance-<span class="hljs-built_in">type</span><br>kubernetes.<span class="hljs-built_in">io</span>/<span class="hljs-built_in">os</span><br>kubernetes.<span class="hljs-built_in">io</span>/arch<br></code></pre></td></tr></table></figure><h1 id="节点的亲和性和反亲和性"><a href="#节点的亲和性和反亲和性" class="headerlink" title="节点的亲和性和反亲和性"></a>节点的亲和性和反亲和性</h1><p>nodeSelector 提供了一种非常简单的方法来将 pod 约束到具有特定标签的节点上。亲和&#x2F;反亲和功能极大地扩展了你可以表达约束的类型。关键的增强点是</p><ul><li>语言更具表现力（不仅仅是“完全匹配的 AND”）</li><li>你可以发现规则是“软”&#x2F;“偏好”，而不是硬性要求，因此，如果调度器无法满足该要求，仍然调度该 pod</li><li>你可以使用节点上（或其他拓扑域中）的 pod 的标签来约束，而不是使用节点本身的标签，来允许哪些 pod 可以或者不可以被放置在一起。</li></ul><p>亲和功能包含两种类型的亲和，即“节点亲和”和“pod 间亲和&#x2F;反亲和”。节点亲和就像现有的 nodeSelector（但具有上面列出的前两个好处），然而 pod 间亲和&#x2F;反亲和约束 pod 标签而不是节点标签（在上面列出的第三项中描述，除了具有上面列出的第一和第二属性）</p><p>亲和性调度可以分成软策略和硬策略两种方式:</p><ul><li>软策略就是如果你没有满足调度要求的节点的话，pod 就会忽略这条规则，继续完成调度过程，说白了就是满足条件最好了，没有的话也无所谓了的策略</li><li>硬策略就比较强硬了，如果没有满足条件的节点的话，就不断重试直到满足条件为止，简单说就是你必须满足我的要求，不然我就不干的策略。</li></ul><p>对于亲和性和反亲和性都有这两种规则可以设置： preferredDuringSchedulingIgnoredDuringExecution和requiredDuringSchedulingIgnoredDuringExecution，前面的就是软策略，后面的就是硬策略。</p><p>目前有两种类型的节点亲和，分别为 requiredDuringSchedulingIgnoredDuringExecution 和 preferredDuringSchedulingIgnoredDuringExecution。你可以视它们为“硬”和“软”，意思是，前者指定了将 pod 调度到一个节点上必须满足的规则（就像 nodeSelector 但使用更具表现力的语法），后者指定调度器将尝试执行但不能保证的偏好。名称的“IgnoredDuringExecution”部分意味着，类似于 nodeSelector 的工作原理，如果节点的标签在运行时发生变更，从而不再满足 pod 上的亲和规则，那么 pod 将仍然继续在该节点上运行。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">with-node-affinity</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">nodeAffinity</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">nodeSelectorTerms</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">key: kubernetes.io/e2e-az-name</span><br>            <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">e2e-az1</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">e2e-az2</span><br>      <span class="hljs-attribute">preferredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">weight: 1</span><br>        <span class="hljs-attribute">preference</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">key: another-node-label-key</span><br>            <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">another-node-label-value</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: with-node-affinity</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">k8s.gcr.io/pause:2.0</span><br></code></pre></td></tr></table></figure><p>此节点亲和规则表示，pod 只能放置在具有标签键为 kubernetes.io&#x2F;e2e-az-name 且 标签值为 e2e-az1 或 e2e-az2 的节点上。另外，在满足这些标准的节点中，具有标签键为 another-node-label-key 且标签值为 another-node-label-value 的节点应该优先使用。这里的匹配逻辑是 label 的值在某个列表中，现在Kubernetes提供的操作符有下面的几种：</p><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在</li><li>DoesNotExist：某个 label 不存在</li></ul><p>如果nodeSelectorTerms下面有多个选项的话，满足任何一个条件就可以了；如果matchExpressions有多个选项的话，则必须同时满足这些条件才能正常调度 POD。</p><p>preferredDuringSchedulingIgnoredDuringExecution 中的 weight 字段值的范围是 1-100。对于每个符合所有调度要求（资源请求，RequiredDuringScheduling 亲和表达式等）的节点，调度器将遍历该字段的元素来计算总和，并且如果节点匹配对应的MatchExpressions，则添加“权重”到总和。然后将这个评分与该节点的其他优先级函数的评分进行组合。总分最高的节点是最优选</p><h1 id="pod的亲和性和反亲和性"><a href="#pod的亲和性和反亲和性" class="headerlink" title="pod的亲和性和反亲和性"></a>pod的亲和性和反亲和性</h1><p>pod 间亲和与反亲和使你可以基于已经在节点上运行的 pod 的标签来约束 pod 可以调度到的节点，而不是基于节点上的标签。规则的格式为“如果 X 节点上已经运行了一个或多个 满足规则 Y 的pod，则这个 pod 应该（或者在非亲和的情况下不应该）运行在 X 节点”。Y 表示一个具有可选的关联命令空间列表的 LabelSelector；与节点不同，因为 pod 是命名空间限定的（因此 pod 上的标签也是命名空间限定的），因此作用于 pod 标签的标签选择器必须指定选择器应用在哪个命名空间。从概念上讲，X 是一个拓扑域，如节点，机架，云供应商地区，云供应商区域等。你可以使用 topologyKey 来表示它，topologyKey 是节点标签的键以便系统用来表示这样的拓扑域。这里拓扑域可以从默认的标签中选择</p><p>pod 亲和性主要解决 pod 可以和哪些 pod 部署在同一个拓扑域中的问题（其中拓扑域用主机标签实现，可以是单个主机，也可以是多个主机组成的 cluster、zone 等等），而 pod 反亲和性主要是解决 pod 不能和哪些 pod 部署在同一个拓扑域中的问题，它们都是处理的 pod 与 pod 之间的关系，比如一个 pod 在一个节点上了，那么我这个也得在这个节点，或者你这个 pod 在节点上了，那么我就不想和你待在同一个节点上。</p><p>由于我们这里只有一个集群，并没有区域或者机房的概念，所以我们这里直接使用主机名来作为拓扑域，把 pod 创建在同一个主机上面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM_0_13_centos prometheus]<span class="hljs-comment"># kubectl get nodes --show-labels</span><br>NAME            STATUS   ROLES    AGE   VERSION          LABELS<br>10.168.1.4      Ready    &lt;none&gt;   48d   v1.16.3-tke.10   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=QCLOUD,beta.kubernetes.io/os=linux,cloud.tencent.com/node-instance-id=ins-4qz8yvgq,disktype=ssd,failure-domain.beta.kubernetes.io/region=gz,failure-domain.beta.kubernetes.io/zone=100003,kubernetes.io/arch=amd64,kubernetes.io/hostname=10.168.1.4,kubernetes.io/os=linux<br>10.168.1.5      Ready    &lt;none&gt;   17d   v1.16.3-tke.10   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=QCLOUD,beta.kubernetes.io/os=linux,cloud.tencent.com/node-instance-id=ins-ft3pcr72,failure-domain.beta.kubernetes.io/region=gz,failure-domain.beta.kubernetes.io/zone=100003,kubernetes.io/arch=amd64,kubernetes.io/hostname=10.168.1.5,kubernetes.io/os=linux<br>10.168.100.22   Ready    &lt;none&gt;   18d   v1.16.3-tke.10   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=QCLOUD,beta.kubernetes.io/os=linux,cloud.tencent.com/node-instance-id=ins-iomm694e,failure-domain.beta.kubernetes.io/region=gz,failure-domain.beta.kubernetes.io/zone=100003,kubernetes.io/arch=amd64,kubernetes.io/hostname=10.168.100.22,kubernetes.io/os=linux<br></code></pre></td></tr></table></figure><p>与节点亲和一样，当前有两种类型的 pod 亲和与反亲和，即 requiredDuringSchedulingIgnoredDuringExecution 和 preferredDuringSchedulingIgnoredDuringExecution，分表表示“硬性”与“软性”要求。请参阅前面节点亲和部分中的描述。requiredDuringSchedulingIgnoredDuringExecution 亲和的一个示例是“将服务 A 和服务 B 的 pod 放置在同一区域，因为它们之间进行大量交流”，而 preferredDuringSchedulingIgnoredDuringExecution 反亲和的示例将是“将此服务的 pod 跨区域分布”（硬性要求是说不通的，因为你可能拥有的 pod 数多于区域数）。</p><p>Pod 间亲和通过 PodSpec 中 affinity 字段下的 podAffinity 字段进行指定。而 pod 间反亲和通过 PodSpec 中 affinity 字段下的 podAntiAffinity 字段进行指定</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">with-pod-affinity</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">podAffinity</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>          <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">key: security</span><br>            <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">S1</span><br>        <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">failure-domain.beta.kubernetes.io/zone</span><br>    <span class="hljs-attribute">podAntiAffinity</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">preferredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">weight: 100</span><br>        <span class="hljs-attribute">podAffinityTerm</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">labelSelector</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">key: security</span><br>              <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>              <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">S2</span><br>          <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">failure-domain.beta.kubernetes.io/zone</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: with-pod-affinity</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">k8s.gcr.io/pause:2.0</span><br></code></pre></td></tr></table></figure><h2 id="podAffinity"><a href="#podAffinity" class="headerlink" title="podAffinity"></a>podAffinity</h2><p>下面我来实践下pod的亲和性，下面这个例子中的 pod 需要调度到某个指定的主机上，至少有一个节点上运行了这样的 pod：这个 pod 有一个app&#x3D;redis的 label。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_0_13_centos ~]# kubectl <span class="hljs-built_in">get</span> pod --show-labels -o wide | grep <span class="hljs-attribute">app</span>=redis<br>redis-866f79579-2qdfp                  1/1     Running   0          16d   172.16.3.79    10.168.1.4      &lt;none&gt;           &lt;none&gt;            <span class="hljs-attribute">app</span>=redis,pod-template-hash=866f79579<br></code></pre></td></tr></table></figure><p>测试pod亲和性的yaml文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">affinity</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">revisionHistoryLimit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">affinity</span><br>        <span class="hljs-attribute">role</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginxweb</span><br>      <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">podAffinity</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> # 硬策略</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>              <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">key: app</span><br>                <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>            <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes.io/hostname</span><br></code></pre></td></tr></table></figure><p>我们看到这个 pod 运行在了10.168.1.4的节点上面，所以按照上面的亲和性来说，上面我们部署的3个 pod 副本也应该运行在 10.168.1.4节点上：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span>_0_13_centos <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>o wide <span class="hljs-operator">|</span> grep affinity<br>affinity<span class="hljs-number">-547</span>c75bd94<span class="hljs-operator">-</span>hkx47              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>s   <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.91</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.4</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>affinity<span class="hljs-number">-547</span>c75bd94<span class="hljs-operator">-</span>tg22d              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>s   <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.89</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.4</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>affinity<span class="hljs-number">-547</span>c75bd94<span class="hljs-operator">-</span>vfm7f              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>s   <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.90</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.4</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>下面我们把redis的标签改下，然后重建下deloyment看下，看下会发生什么情况</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@VM_0_13_centos ~]# kubectl <span class="hljs-built_in">get</span> pod --show-labels -o wide | grep <span class="hljs-attribute">app</span>=redis<br>redis-5b4495ddb4-szjtz                 1/1     Running   0          18s     172.16.3.92    10.168.1.4      &lt;none&gt;           &lt;none&gt;            <span class="hljs-attribute">k8s-app</span>=redis,pod-template-hash=5b4495ddb4,qcloud-app=redis<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM_0_13_centos ~]# kubectl get pod <br>NAME                                   READY   STATUS    RESTARTS   AGE<br>affinity<span class="hljs-string">-547</span>c75bd94<span class="hljs-string">-8</span>jcb8              0/1     Pending   0          11s<br>affinity<span class="hljs-string">-547</span>c75bd94<span class="hljs-string">-9</span>wv9d              0/1     Pending   0          10s<br>affinity<span class="hljs-string">-547</span>c75bd94-bq8qh              0/1     Pending   0          10s<br></code></pre></td></tr></table></figure><p>我们可以看到处于Pending状态了，这是因为现在没有一个节点上面拥有busybox-pod这个 label 的 pod，而上面我们的调度使用的是硬策略，所以就没办法进行调度了</p><p>我们这个地方使用的是kubernetes.io&#x2F;hostname这个拓扑域，意思就是我们当前调度的 pod 要和目标的 pod 处于同一个主机上面，因为要处于同一个拓扑域下面，为了说明这个问题，我们把拓扑域改成beta.kubernetes.io&#x2F;os，同样的我们当前调度的 pod 要和目标的 pod 处于同一个拓扑域中，目标的 pod 是不是拥有beta.kubernetes.io&#x2F;os&#x3D;linux的标签，而我们这里3个节点都有这样的标签，这也就意味着我们3个节点都在同一个拓扑域中，所以我们这里的 pod 可能会被调度到任何一个节点：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">podAffinity</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>          <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">key: k8s-app</span><br>            <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>        <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">beta.kubernetes.io/os</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span>_0_13_centos <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>o wide <span class="hljs-operator">|</span> grep affinity<br>affinity<span class="hljs-number">-87649</span>f558<span class="hljs-number">-6</span>p72d               <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m22s   <span class="hljs-number">172.16</span><span class="hljs-number">.2</span><span class="hljs-number">.160</span>   <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.5</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>affinity<span class="hljs-number">-87649</span>f558<span class="hljs-operator">-</span>fpcxg               <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m22s   <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.94</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.4</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>affinity<span class="hljs-number">-87649</span>f558<span class="hljs-operator">-</span>h8scw               <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m22s   <span class="hljs-number">172.16</span><span class="hljs-number">.2</span><span class="hljs-number">.126</span>   <span class="hljs-number">10.168</span><span class="hljs-number">.100</span><span class="hljs-number">.22</span>   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h2 id="podAntiAffinity"><a href="#podAntiAffinity" class="headerlink" title="podAntiAffinity"></a>podAntiAffinity</h2><p>这就是 pod 亲和性的用法，而 pod 反亲和性则是反着来的，比如一个节点上运行了某个 pod，那么我们的 pod 则希望被调度到其他节点上去，同样我们把上面的 podAffinity 直接改成 podAntiAffinity，(pod-antiaffinity-demo.yaml)</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">affinity</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">revisionHistoryLimit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">affinity</span><br>        <span class="hljs-attribute">role</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginxweb</span><br>      <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">podAntiAffinity</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> # 硬策略</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>              <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">key: k8s-app</span><br>                <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>            <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes.io/hostname</span><br></code></pre></td></tr></table></figure><p>这里的意思就是如果一个节点上面有一个k8s-app&#x3D;redis这样的 pod 的话，那么我们的 pod 就别调度到这个节点上面来，上面我们k8s-app&#x3D;redis在10.168.1.4这个节点上，正常来说我们这里的 pod 不会出现在 10.168.1.4节点上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span>_0_13_centos <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>o wide <span class="hljs-operator">|</span> grep redis<br>redis<span class="hljs-number">-5</span>b4495ddb4<span class="hljs-operator">-</span>szjtz                 <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m     <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.92</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.4</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>[root<span class="hljs-variable">@VM</span>_0_13_centos <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>o wide <span class="hljs-operator">|</span> grep affinity<br>affinity<span class="hljs-number">-6868874</span>dbc<span class="hljs-number">-5</span>cc95              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m26s   <span class="hljs-number">172.16</span><span class="hljs-number">.2</span><span class="hljs-number">.68</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.100</span><span class="hljs-number">.22</span>   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>affinity<span class="hljs-number">-6868874</span>dbc<span class="hljs-operator">-</span>g6vb2              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m28s   <span class="hljs-number">172.16</span><span class="hljs-number">.2</span><span class="hljs-number">.162</span>   <span class="hljs-number">10.168</span><span class="hljs-number">.1</span><span class="hljs-number">.5</span>      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>affinity<span class="hljs-number">-6868874</span>dbc<span class="hljs-operator">-</span>zbpt4              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m30s   <span class="hljs-number">172.16</span><span class="hljs-number">.2</span><span class="hljs-number">.67</span>    <span class="hljs-number">10.168</span><span class="hljs-number">.100</span><span class="hljs-number">.22</span>   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h1 id="污点和容忍"><a href="#污点和容忍" class="headerlink" title="污点和容忍"></a>污点和容忍</h1><p>污点和容忍度（Toleration）相互配合，可以用来避免 Pod 被分配到不合适的节点上。 每个节点上都可以应用一个或多个污点，这表示对于那些不能容忍这些污点的 Pod，是不会被该节点接受的</p><p>对于nodeAffinity无论是硬策略还是软策略方式，都是调度 pod 到预期节点上，而Taints恰好与之相反，如果一个节点标记为 Taints ，除非 pod 也被标识为可以容忍污点节点，否则该 Taints 节点不会被调度 pod。</p><p>比如我们的Master 节点保留给 Kubernetes 系统组件使用，或者把一组具有特殊资源预留给某些 pod，则污点就很有用了，pod 不会再被调度到 taint 标记过的节点。我们使用kubeadm搭建的集群默认就给 master 节点添加了一个污点标记，所以我们看到我们平时的 pod 都没有被调度到 master 上</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[tke@VM_0_13_centos ~]$ kubectl describe node 192.168.100.11<br>Name:               192.168.100.11<br>Roles:              master<br>Labels:             beta.kubernetes.io/<span class="hljs-attribute">arch</span>=amd64<br>                    beta.kubernetes.io/<span class="hljs-attribute">instance-type</span>=QCLOUD<br>                    beta.kubernetes.io/<span class="hljs-attribute">os</span>=linux<br>                    cloud.tencent.com/<span class="hljs-attribute">node-instance-id</span>=ins-1zeb156t<br>                    failure-domain.beta.kubernetes.io/<span class="hljs-attribute">region</span>=cd<br>                    failure-domain.beta.kubernetes.io/<span class="hljs-attribute">zone</span>=160001<br>                    kubernetes.io/<span class="hljs-attribute">arch</span>=amd64<br>                    kubernetes.io/<span class="hljs-attribute">hostname</span>=192.168.100.11<br>                    kubernetes.io/<span class="hljs-attribute">node-role-etcd</span>=<span class="hljs-literal">true</span><br>                    kubernetes.io/<span class="hljs-attribute">os</span>=linux<br>                    node-role.kubernetes.io/<span class="hljs-attribute">master</span>=<span class="hljs-literal">true</span><br>Annotations:        node.alpha.kubernetes.io/ttl: 0<br>                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="hljs-literal">true</span><br>CreationTimestamp:  Wed, 17 Jun 2020 10:51:00 +0800<br>Taints:             node-role.kubernetes.io/master:NoSchedule<br></code></pre></td></tr></table></figure><p>我们可以使用上面的命令查看 master 节点的信息，其中有一条关于 Taints 的信息：node-role.kubernetes.io&#x2F;master:NoSchedule，就表示给 master 节点打了一个污点的标记，其中影响的参数是NoSchedule，表示 pod 不会被调度到标记为 taints 的节点，除了 NoSchedule 外，还有另外两个选项：</p><ul><li>PreferNoSchedule：NoSchedule 的软策略版本，表示尽量不调度到污点节点上去</li><li>NoExecute：该选项意味着一旦 Taint 生效，如该节点内正在运行的 pod 没有对应 Tolerate 设置，会直接被逐出</li></ul><h2 id="节点添加和去除污点"><a href="#节点添加和去除污点" class="headerlink" title="节点添加和去除污点"></a>节点添加和去除污点</h2><p>您可以使用命令 kubectl taint 给节点增加一个污点。比如，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl taint nodes node1 <span class="hljs-attribute">key</span>=value:NoSchedule<br></code></pre></td></tr></table></figure><p>给节点 node1 增加一个污点，它的键名是 key，键值是 value，效果是 NoSchedule。 这表示只有拥有和这个污点相匹配的容忍度的 Pod 才能够被分配到 node1 这个节点。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl taint nodes node1 <span class="hljs-built_in">key</span>:NoSchedule-<br></code></pre></td></tr></table></figure><p>若要移除上述命令所添加的污点，你可以执行：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl taint nodes node1 <span class="hljs-built_in">key</span>:NoSchedule-<br></code></pre></td></tr></table></figure><h2 id="pod容忍污点"><a href="#pod容忍污点" class="headerlink" title="pod容忍污点"></a>pod容忍污点</h2><p>您可以在 PodSpec 中定义 Pod 的容忍度。 下面两个容忍度均与上面例子中使用 kubectl taint 命令创建的污点相匹配， 因此如果一个 Pod 拥有其中的任何一个容忍度都能够被分配到 node1 ：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br><span class="hljs-symbol">  value:</span> <span class="hljs-string">&quot;value&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br>这里是一个使用了容忍度的 Pod：pods/pod-with-toleration.yaml <br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    env:</span> test<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: nginx<br><span class="hljs-symbol">    image:</span> nginx<br><span class="hljs-symbol">    imagePullPolicy:</span> IfNotPresent<br><span class="hljs-symbol">  tolerations:</span><br>  - key: <span class="hljs-string">&quot;example-key&quot;</span><br><span class="hljs-symbol">    operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br><span class="hljs-symbol">    effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p>对于 tolerations 属性的写法，其中的 key、value、effect 与 Node 的 Taint 设置需保持一致， 还有以下几点说明：</p><ol><li>如果 operator 的值是 Exists，则 value 属性可省略</li><li>如果 operator 的值是 Equal，则表示其 key 与 value 之间的关系是 equal(等于)</li><li>如果不指定 operator 属性，则默认值为 Equal</li></ol><p>另外，还有两个特殊值：</p><ol><li>空的 key 如果再配合 Exists 就能匹配所有的 key 与 value，也是是能容忍所有 node 的所有 Taints</li><li>空的 effect 匹配所有的 effect</li></ol><h2 id="多个污点的pod容忍策略"><a href="#多个污点的pod容忍策略" class="headerlink" title="多个污点的pod容忍策略"></a>多个污点的pod容忍策略</h2><p>您可以给一个节点添加多个污点，也可以给一个 Pod 添加多个容忍度设置。 Kubernetes 处理多个污点和容忍度的过程就像一个过滤器：从一个节点的所有污点开始遍历， 过滤掉那些 Pod 中存在与之相匹配的容忍度的污点。余下未被过滤的污点的 effect 值决定了 Pod 是否会被分配到该节点，特别是以下情况：</p><ul><li>如果未被过滤的污点中存在至少一个 effect 值为 NoSchedule 的污点， 则 Kubernetes 不会将 Pod 分配到该节点。</li><li>如果未被过滤的污点中不存在 effect 值为 NoSchedule 的污点， 但是存在 effect 值为 PreferNoSchedule 的污点， 则 Kubernetes 会 尝试 将 Pod 分配到该节点。</li><li>如果未被过滤的污点中存在至少一个 effect 值为 NoExecute 的污点， 则 Kubernetes 不会将 Pod 分配到该节点（如果 Pod 还未在节点上运行）， 或者将 Pod 从该节点驱逐（如果 Pod 已经在节点上运行）。</li></ul><h2 id="NoExecute类型pod继续运行时间"><a href="#NoExecute类型pod继续运行时间" class="headerlink" title="NoExecute类型pod继续运行时间"></a>NoExecute类型pod继续运行时间</h2><p>通常情况下，如果给一个节点添加了一个 effect 值为 NoExecute 的污点， 则任何不能忍受这个污点的 Pod 都会马上被驱逐， 任何可以忍受这个污点的 Pod 都不会被驱逐。 但是，如果 Pod 存在一个 effect 值为 NoExecute 的容忍度指定了可选属性 tolerationSeconds 的值，则表示在给节点添加了上述污点之后， Pod 还能继续在节点上运行的时间。例如，</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br><span class="hljs-symbol">  value:</span> <span class="hljs-string">&quot;value1&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br><span class="hljs-symbol">  tolerationSeconds:</span> <span class="hljs-number">3600</span><br></code></pre></td></tr></table></figure><p>这表示如果这个 Pod 正在运行，同时一个匹配的污点被添加到其所在的节点， 那么 Pod 还将继续在节点上运行 3600 秒，然后被驱逐。 如果在此之前上述污点被删除了，则 Pod 不会被驱逐。</p><h2 id="节点发生异常pod发生驱逐的原理"><a href="#节点发生异常pod发生驱逐的原理" class="headerlink" title="节点发生异常pod发生驱逐的原理"></a>节点发生异常pod发生驱逐的原理</h2><p>一般我们节点发生异常的时候，节点为什么会把pod驱逐走呢，其实这个背后的原理是污点起的作用，当节点出现了异常的情况的时候，控制器会给节点打上一些污点，由于这个节点上的pod没有容忍这些污点从而被驱逐。下面是节点不同异常状态下控制器给节点打的污点类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">node<span class="hljs-selector-class">.kubernetes</span>.io/not-ready：节点未准备好。这相当于节点状态 Ready 的值为 <span class="hljs-string">&quot;False&quot;</span>。<br>node<span class="hljs-selector-class">.kubernetes</span>.io/unreachable：节点控制器访问不到节点. 这相当于节点状态 Ready 的值为 <span class="hljs-string">&quot;Unknown&quot;</span>。<br>node<span class="hljs-selector-class">.kubernetes</span>.io/out-of-disk：节点磁盘耗尽。<br>node<span class="hljs-selector-class">.kubernetes</span>.io/memory-pressure：节点存在内存压力。<br>node<span class="hljs-selector-class">.kubernetes</span>.io/disk-pressure：节点存在磁盘压力。<br>node<span class="hljs-selector-class">.kubernetes</span>.io/network-unavailable：节点网络不可用。<br>node<span class="hljs-selector-class">.kubernetes</span>.io/unschedulable: 节点不可调度。<br>node<span class="hljs-selector-class">.cloudprovider</span><span class="hljs-selector-class">.kubernetes</span>.io/uninitialized：如果 kubelet 启动时指定了一个 <span class="hljs-string">&quot;外部&quot;</span> 云平台驱动， 它将给当前节点添加一个污点将其标志为不可用。在 cloud-controller-manager 的一个控制器初始化这个节点后，kubelet 将删除这个污点。<br></code></pre></td></tr></table></figure><p>如果节点恢复了，节点控制器会删除给节点打上的污点，这样pod就可以调度到这些节点上了。</p><p>如果我希望节点发生异常后，pod不马上发生驱逐，想在节点上再运行一段时间，那么这里可以用tolerationSeconds参数来处理，比如，一个使用了很多本地状态的应用程序在网络断开时，仍然希望停留在当前节点上运行一段较长的时间， 愿意等待网络恢复以避免被驱逐。在这种情况下，Pod 的容忍度可能是下面这样的：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;node.kubernetes.io/unreachable&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br><span class="hljs-symbol">  tolerationSeconds:</span> <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure><p>节点异常后k8s中控制器会为默认给pod加上tolerationSeconds&#x3D;600这个参数，避免node发生异常pod立马被驱逐</p><p><strong>说明</strong>：Kubernetes 会自动给 Pod 添加一个 key 为 node.kubernetes.io&#x2F;not-ready 的容忍度 并配置 tolerationSeconds&#x3D;300，除非用户提供的 Pod 配置中已经已存在了 key 为 node.kubernetes.io&#x2F;not-ready 的容忍度。</p><p><strong>同样</strong>，Kubernetes 会给 Pod 添加一个 key 为 node.kubernetes.io&#x2F;unreachable 的容忍度 并配置 tolerationSeconds&#x3D;300，除非用户提供的 Pod 配置中已经已存在了 key 为 node.kubernetes.io&#x2F;unreachable 的容忍度。</p><h2 id="DaemonSet的调度和驱逐"><a href="#DaemonSet的调度和驱逐" class="headerlink" title="DaemonSet的调度和驱逐"></a>DaemonSet的调度和驱逐</h2><p>我们在集群中使用ds类型的时候会发现，当你部署ds的负载无论节点上有多少污点都可以调度上去，节点异常ds类型的pod也不发生驱逐，这是为什么呢？其实这里的根本原因也是因为ds类型的负载有添加污点的容忍，我们可以看下kube-proxy类型的ds容忍度是怎么设置的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM_1_4_centos</span> <span class="hljs-string">kubernetes</span>]<span class="hljs-comment"># kubectl get ds kube-proxy -n kube-system -o yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-string">......</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">kube-proxy</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kube-proxy</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br></code></pre></td></tr></table></figure><p>从上面的yaml中可以看出ds类型容忍度是：空的 key 如果再配合 Exists 就能匹配所有的 key 与 value，也是是能容忍所有 node 的所有 Taints</p><p>所以这也就是为什么ds类型的pod不会发生驱逐和能调度到所有节点的原因，因为ds类型容忍所有污点。</p><h1 id="TKE上的调度实践"><a href="#TKE上的调度实践" class="headerlink" title="TKE上的调度实践"></a>TKE上的调度实践</h1><p>我们在tke集群中如果要配置调度策略，除了修改编写yaml实现，也可以在控制台进行操作，这样对于一些yaml不是很熟悉的同学可以提供更加简便的配置方式。</p><p><img src="/img/2020-08-26-Kubernetes-scheduling/2.png" alt="upload-image"> </p><p><img src="/img/2020-08-26-Kubernetes-scheduling/3.png" alt="upload-image"> </p><p><img src="/img/2020-08-26-Kubernetes-scheduling/4.png" alt="upload-image"></p><p><img src="/img/2020-08-26-Kubernetes-scheduling/5.png" alt="upload-image"></p><p>控制台支持配置3种策略，分别是不使用调度策略、指定节点调度（nodeSelector）、自定义调度策略（节点亲和性），这里控制台不能配置pod的亲和性和反亲和性，如果需要配置只能通过yaml配置。</p><p>如果需要修改已经部署的deployment的调度策略可以通过depolyment的更新调度策略来修改调整</p><p><img src="/img/2020-08-26-Kubernetes-scheduling/6.png" alt="upload-image"> </p><p><img src="/img/2020-08-26-Kubernetes-scheduling/7.png" alt="upload-image"> </p><p>对于pod的亲和性和反亲和性如何配置，大家可以参考集群中的coredns来进行配置</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">deployment.kubernetes.io/revision</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-attribute">generation</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">addonmanager.kubernetes.io/mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attribute">kubernetes.io/cluster-service</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attribute">kubernetes.io/name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">CoreDNS</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">......</span><br><span class="hljs-attribute">    spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">podAntiAffinity</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>              <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">key: k8s-app</span><br>                <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">kube-dns</span><br>            <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-conf</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/coredns/Corefile</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/library/coredns:1.2.2</span><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/">https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/</a></p><p><a href="https://www.qikqiak.com/post/kubernetes-affinity-scheduler/">https://www.qikqiak.com/post/kubernetes-affinity-scheduler/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之RBAC权限管理</title>
    <link href="/2020/08/23/2020-08-23-RBAC-permission-management-of-Kubernetes/"/>
    <url>/2020/08/23/2020-08-23-RBAC-permission-management-of-Kubernetes/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了Kubernetes中RBAC权限控制使用。</p><h1 id="RBAC简介"><a href="#RBAC简介" class="headerlink" title="RBAC简介"></a>RBAC简介</h1><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/1.png" alt="upload-image"> </p><ul><li>RBAC（Role-Based Access Control）</li></ul><p>基于角色的权限控制。通过角色关联用户、角色关联权限的方式间接赋予用户权限。<br>在 Kubernetes 中，RBAC 是通过 rbac.authorization.k8s.io API Group 实现的，即允许集群管理员通过 Kubernetes API 动态配置策略。</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/1-2.png" alt="upload-image"> </p><ul><li><p>Role<br>用于定义某个命名空间的角色的权限。</p></li><li><p>ClusterRole<br>用于定义整个集群的角色的权限。</p></li><li><p>RoleBinding<br>将角色中定义的权限赋予一个或者一组用户，针对命名空间执行授权。</p></li><li><p>ClusterRoleBinding<br>将角色中定义的权限赋予一个或者一组用户，针对集群范围内的命名空间执行授权。</p></li></ul><p>在 RBAC API 中，一个角色包含一组相关权限的规则。权限是纯粹累加的（不存在拒绝某操作的规则）。 角色可以用 Role 来定义到某个命名空间上， 或者用 ClusterRole 来定义到整个集群作用域。</p><h1 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h1><h2 id="对某个类型资源的权限分配"><a href="#对某个类型资源的权限分配" class="headerlink" title="对某个类型资源的权限分配"></a>对某个类型资源的权限分配</h2><p>一个Role只可以用来对某一命名空间中的资源赋予访问权限。 下面的Role示例定义到名称为 “default” 的命名空间，可以用来授予对该命名空间中的 Pods 的读取权限：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  name:</span> pod-reader<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-meta"># <span class="hljs-string">&quot;&quot;</span> 指定核心 API 组</span><br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="获取某个资源的子资源"><a href="#获取某个资源的子资源" class="headerlink" title="获取某个资源的子资源"></a>获取某个资源的子资源</h2><p>“pods” 是有命名空间的资源，而 “log” 是 pods 的子资源。在 RBAC 角色中， 使用”&#x2F;“分隔资源和子资源。允许一个主体要同时读取 pods 和 pod logs</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  name:</span> pod-and-pod-logs-reader<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>, <span class="hljs-string">&quot;pods/log&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="配置某一个具体资源的权限"><a href="#配置某一个具体资源的权限" class="headerlink" title="配置某一个具体资源的权限"></a>配置某一个具体资源的权限</h2><p>可以通过resourceNames列表按名称引用资源。 在指定时，可以将请求类型限制资源的单个实例。限制只可以 “get” 和 “update” 的单一configmap，你可以这么写：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  name:</span> configmap-updater<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br><span class="hljs-symbol">  resourceNames:</span> [<span class="hljs-string">&quot;my-configmap&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="Role常用资源权限配置示例"><a href="#Role常用资源权限配置示例" class="headerlink" title="Role常用资源权限配置示例"></a>Role常用资源权限配置示例</h2><p>在以下示例中，我们仅截取展示了 rules 对应部分， 允许读取在核心 API 组下的 Pods:<br>rules:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">apiGroups</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;&quot;</span>]</span><br>  <span class="hljs-selector-tag">resources</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;pods&quot;</span>]</span><br>  <span class="hljs-selector-tag">verbs</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>允许读&#x2F;写在 “extensions” 和 “apps” API 组中的 “deployments” 资源：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取 “pods” 和读&#x2F;写 “jobs” :</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">rules:<br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>  resources: [<span class="hljs-string">&quot;pods&quot;</span>]<br>  verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>- apiGroups: [<span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-string">&quot;extensions&quot;</span>]<br>  resources: [<span class="hljs-string">&quot;jobs&quot;</span>]<br>  verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取名称为 “my-config”的 ConfigMap （需要通过 RoleBinding 绑定带某名字空间中特定的 ConfigMap）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br><span class="hljs-symbol">  resourceNames:</span> [<span class="hljs-string">&quot;my-config&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取在核心组中的 “nodes” 资源（因为 Node 是集群范围的，所以需要 ClusterRole 绑定到 ClusterRoleBinding 才生效）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;nodes&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许在非资源端点 “&#x2F;healthz” 和其子路径上发起 “GET” 和 “POST” 请求（必须在 ClusterRole 绑定 ClusterRoleBinding 才生效）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- nonResourceURLs: [<span class="hljs-string">&quot;/healthz&quot;</span>, <span class="hljs-string">&quot;/healthz/*&quot;</span>] <span class="hljs-meta"># <span class="hljs-string">&#x27;*&#x27;</span> 在 nonResourceURL 中的意思是后缀全局匹配。</span><br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>]<br></code></pre></td></tr></table></figure><h1 id="RoleBinding"><a href="#RoleBinding" class="headerlink" title="RoleBinding"></a>RoleBinding</h1><h2 id="RoleBinding绑定Role"><a href="#RoleBinding绑定Role" class="headerlink" title="RoleBinding绑定Role"></a>RoleBinding绑定Role</h2><p>角色绑定（RoleBinding）是将角色中定义的权限赋予一个或者一组用户。 它包含若干主体（用户，组和服务账户）的列表和对这些主体所获得的角色的引用。 可以使用 RoleBinding 在指定的命名空间中执行授权， 或者在集群范围的命名空间使用 ClusterRoleBinding 来执行授权。</p><p>一个 RoleBinding 可以引用同一的命名空间中的 Role 。 下面的例子 RoleBinding 将 “pod-reader” 角色授予在 “default” 命名空间中的用户 “jane”； 这样，用户 “jane” 就具有了读取 “default” 命名空间中 pods 的权限。</p><p>roleRef 里的内容决定了实际创建绑定的方法。kind 可以是 Role 或 ClusterRole， name 将引用你要指定的 Role 或 ClusterRole 的名称。在下面的例子中，角色绑定使用 roleRef 将用户 “jane” 绑定到前文创建的角色 Role，其名称是 pod-reader。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-meta"># 此角色绑定使得用户 <span class="hljs-string">&quot;jane&quot;</span> 能够读取 <span class="hljs-string">&quot;default&quot;</span> 命名空间中的 Pods</span><br><span class="hljs-symbol">kind:</span> RoleBinding<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> read-pods<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">subjects:</span><br>- kind: User<br><span class="hljs-symbol">  name:</span> jane <span class="hljs-meta"># Name is case sensitive</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> Role <span class="hljs-meta">#this must be Role or ClusterRole</span><br><span class="hljs-symbol">  name:</span> pod-reader <span class="hljs-meta"># 这里的名称必须与你想要绑定的 Role 或 ClusterRole 名称一致</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h2 id="RoleBinding绑定ClusterRole"><a href="#RoleBinding绑定ClusterRole" class="headerlink" title="RoleBinding绑定ClusterRole"></a>RoleBinding绑定ClusterRole</h2><p>RoleBinding 也可以引用 ClusterRole，对 ClusterRole 所定义的、位于 RoleBinding 命名空间内的资源授权。 这可以允许管理者在 整个集群中定义一组通用的角色，然后在多个命名空间中重用它们。</p><p>例如下面的例子，RoleBinding 指定的是 ClusterRole， “dave” （主体，区分大小写）将只可以读取在”development” 命名空间（ RoleBinding 的命名空间）中的”secrets”。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-meta"># 这个角色绑定允许 <span class="hljs-string">&quot;dave&quot;</span> 用户在 <span class="hljs-string">&quot;development&quot;</span> 命名空间中有读取 secrets 的权限。 </span><br><span class="hljs-symbol">kind:</span> RoleBinding<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> read-secrets<br><span class="hljs-symbol">  namespace:</span> development <span class="hljs-meta"># 这里只授予 <span class="hljs-string">&quot;development&quot;</span> 命名空间的权限。</span><br><span class="hljs-symbol">subjects:</span><br>- kind: User<br><span class="hljs-symbol">  name:</span> dave <span class="hljs-meta"># 名称区分大小写</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> secret-reader<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h1 id="ClusterRole"><a href="#ClusterRole" class="headerlink" title="ClusterRole"></a>ClusterRole</h1><h2 id="CluserRole示例"><a href="#CluserRole示例" class="headerlink" title="CluserRole示例"></a>CluserRole示例</h2><p>ClusterRole 可以授予的权限和 Role 相同， 但是因为 ClusterRole 属于集群范围，所以它也可以授予以下访问权限：</p><ul><li>集群范围资源 （比如 nodes）</li><li>非资源端点（比如 “&#x2F;healthz”）</li><li>跨命名空间访问的有名字空间作用域的资源（如 Pods），比如运行命令kubectl get pods –all-namespaces 时需要此能力</li></ul><p>下面的 ClusterRole 示例可用来对某特定命名空间下的 Secrets 的读取操作授权， 或者跨所有命名空间执行授权（取决于它是如何绑定的）:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br>  <span class="hljs-meta"># 此处的 <span class="hljs-string">&quot;namespace&quot;</span> 被省略掉是因为 ClusterRoles 是没有命名空间的。</span><br><span class="hljs-symbol">  name:</span> secret-reader<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;secrets&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="aggregationRule聚合ClusteRole"><a href="#aggregationRule聚合ClusteRole" class="headerlink" title="aggregationRule聚合ClusteRole"></a>aggregationRule聚合ClusteRole</h2><p>从 1.9 开始，集群角色（ClusterRole）可以通过使用aggregationRule的方式并组合其他 ClusterRoles 来创建。 聚合集群角色的权限是由控制器管理的，方法是通过过滤与标签选择器匹配的 ClusterRules，并将其中的权限进行组合</p><p>下面是通过创建一个新的、标签同样为rbac.example.com&#x2F;aggregate-to-monitoring: true的 ClusterRole，新的规则可被添加到 “monitoring” 集群角色中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">aggregationRule:</span><br>  <span class="hljs-attr">clusterRoleSelectors:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">rbac.example.com/aggregate-to-monitoring:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attr">rules:</span> [] <span class="hljs-comment"># 具体规则由控制器管理器自动填写。</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> monitoring-endpoints<br><span class="hljs-symbol">  labels:</span><br>    rbac.example.com/aggregate-to-monitoring: <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-meta"># 这些规则将被添加到 <span class="hljs-string">&quot;monitoring&quot;</span> 角色中。</span><br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;services&quot;</span>, <span class="hljs-string">&quot;endpoints&quot;</span>, <span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><h1 id="ClusterRoleBinding"><a href="#ClusterRoleBinding" class="headerlink" title="ClusterRoleBinding"></a>ClusterRoleBinding</h1><h2 id="ClusterRoleBinding绑定某个组"><a href="#ClusterRoleBinding绑定某个组" class="headerlink" title="ClusterRoleBinding绑定某个组"></a>ClusterRoleBinding绑定某个组</h2><p>ClusterRoleBinding可用来在集群级别或对所有命名空间执行授权。 下面的例子允许 “manager” 组中的任何用户读取任意命名空间中 “secrets”。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-meta"># 这个集群角色绑定允许 <span class="hljs-string">&quot;manager&quot;</span> 组中的任何用户读取任意命名空间中 <span class="hljs-string">&quot;secrets&quot;</span>。</span><br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> read-secrets-global<br><span class="hljs-symbol">subjects:</span><br>- kind: Group<br><span class="hljs-symbol">  name:</span> manager <span class="hljs-meta"># 名称区分大小写</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> secret-reader<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h1 id="Kubernetes中的用户和组"><a href="#Kubernetes中的用户和组" class="headerlink" title="Kubernetes中的用户和组"></a>Kubernetes中的用户和组</h1><p>RoleBinding 或者 ClusterRoleBinding 需要绑定角色到 主体。 主体可以是组，用户或者服务账户。</p><p>用户是由字符串表示，它们可以是普通的用户名，像 “alice”，或者是 邮件格式 “<a href="mailto:&#x62;&#111;&#98;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x62;&#111;&#98;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;</a>“，或者是数字ID。由 Kubernetes 管理员配置身份认证模块 需要的格式。RBAC 鉴权系统不对格式作任何要求，但是前缀 system: 是 Kubernetes 系统保留的， 所以管理员要确保配置的用户名不能出现上述前缀格式。</p><p>用户组信息是 Kubernetes 现在提供的一种身份验证模块，与用户一样，对组的字符串没有格式要求， 只是不能使用保留的前缀 system: 。</p><p>K8S中有两种用户(User)</p><ul><li>服务账号(ServiceAccount)</li><li>普通用户(User)</li></ul><p>ServiceAccount是由K8S管理的，而User通常是在外部管理.</p><h2 id="serviceaccount绑定"><a href="#serviceaccount绑定" class="headerlink" title="serviceaccount绑定"></a>serviceaccount绑定</h2><ol><li>为特定应用的服务账户授予角色（最佳实践）</li></ol><p>这要求应用在其 pod 规范中指定 serviceAccountName ， 并额外创建服务账号（包括通过 API、应用程序清单、kubectl create serviceaccount 等）。<br>例如，在命名空间 “my-namespace” 中授予服务账号 “my-sa” 只读权限：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> rolebinding my-sa-<span class="hljs-keyword">view</span> \<br>  --clusterrole=<span class="hljs-keyword">view</span> \<br>  --serviceaccount=my-<span class="hljs-keyword">namespace</span>:my-sa \<br>  --<span class="hljs-keyword">namespace</span>=my-<span class="hljs-keyword">namespace</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将角色授予某命名空间中的 ”default” 服务账号</li></ol><p>如果一个应用没有指定 serviceAccountName，那么它将使用 “default” 服务账号。</p><p><strong>说明</strong>： 不指定 serviceAccountName 的话， “default” 服务账号的权限会授予给命名空间中所有未指定 serviceAccountName 的 Pods。</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/2.png" alt="upload-image"> </p><p>例如，在命名空间 “my-namespace” 中授予服务账号 “default” 只读权限：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> rolebinding default-<span class="hljs-keyword">view</span> \<br>  --clusterrole=<span class="hljs-keyword">view</span> \<br>  --serviceaccount=my-<span class="hljs-keyword">namespace</span>:default \<br>  --<span class="hljs-keyword">namespace</span>=my-<span class="hljs-keyword">namespace</span><br></code></pre></td></tr></table></figure><ol start="3"><li>许多附加组件 add-ons 目前在 kube-system 命名空间以 “default” 服务账号运行。 要允许这些附加组件以超级用户权限运行，需要将集群的 cluster-admin 权限授予 kube-system 命名空间中的 “default” 服务账号。</li></ol><p><strong>说明</strong>： 启用这一配置意味着在 kube-system 命名空间中包含以超级用户账号来访问 API 的 Secrets。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">kubectl create clusterrolebinding<span class="hljs-built_in"> add-on-cluster-admin </span>\<br>  --clusterrole=cluster-admin \<br>  --serviceaccount=kube-system:default<br></code></pre></td></tr></table></figure><ol start="4"><li>将角色授予命名空间中所有的服务账号</li></ol><p>如果你想要在命名空间中所有的应用都具有某角色，无论它们使用的什么服务账号， 你可以将角色授予该命名空间的服务账号组。</p><p>例如，在命名空间 “my-namespace” 中的只读权限授予该命名空间中的所有服务账号：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> rolebinding serviceaccounts-<span class="hljs-keyword">view</span> \<br>  --clusterrole=<span class="hljs-keyword">view</span> \<br>  --<span class="hljs-keyword">group</span>=<span class="hljs-keyword">system</span>:serviceaccounts:my-<span class="hljs-keyword">namespace</span> \<br>  --<span class="hljs-keyword">namespace</span>=my-<span class="hljs-keyword">namespace</span><br></code></pre></td></tr></table></figure><ol start="5"><li>对集群范围内的所有服务账户授予一个受限角色（不鼓励）<br>如果你不想管理每一个命名空间的权限，你可以向所有的服务账号授予集群范围的角色。<br>例如，为集群范围的所有服务账号授予跨所有命名空间的只读权限：</li></ol><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> clusterrolebinding serviceaccounts-<span class="hljs-keyword">view</span> \<br>  --clusterrole=<span class="hljs-keyword">view</span> \<br> --<span class="hljs-keyword">group</span>=<span class="hljs-keyword">system</span>:serviceaccounts<br></code></pre></td></tr></table></figure><ol start="6"><li>授予超级用户访问权限给集群范围内的所有服务帐户（强烈不鼓励）<br>如果你不关心如何区分权限，你可以将超级用户访问权限授予所有服务账号。<br>警告：这将允许所有能够读取 Secrets 和创建 Pods 的用户访问超级用户的私密信息。</li></ol><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> clusterrolebinding serviceaccounts-<span class="hljs-keyword">cluster</span>-admin \<br>  --clusterrole=<span class="hljs-keyword">cluster</span>-admin \<br>  --<span class="hljs-keyword">group</span>=<span class="hljs-keyword">system</span>:serviceaccounts<br></code></pre></td></tr></table></figure><h2 id="绑定用户和组示例"><a href="#绑定用户和组示例" class="headerlink" title="绑定用户和组示例"></a>绑定用户和组示例</h2><p>下面的示例只是展示 RoleBinding 中 subjects 的部分。</p><p>用户的名称为 “<a href="mailto:&#97;&#x6c;&#105;&#x63;&#101;&#64;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#97;&#x6c;&#105;&#x63;&#101;&#64;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;</a>“:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">subjects:<br>- kind: <span class="hljs-keyword">User</span><br>  <span class="hljs-title">name</span>: <span class="hljs-string">&quot;alice@example.com&quot;</span><br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p>组的名称为 “frontend-admins”:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">subjects:<br>- kind: <span class="hljs-keyword">Group</span><br>  <span class="hljs-title">name</span>: <span class="hljs-string">&quot;frontend-admins&quot;</span><br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p>服务账号在 kube-system 命名空间中:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: ServiceAccount</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>在名称为 “qa” 命名空间中所有的服务账号:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:serviceaccounts:qa</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>所有的服务账号:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:serviceaccounts</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>所有认证过的用户 （版本 1.5+）:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:authenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>所有未认证的用户 （版本 1.5+）:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:unauthenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>所有用户 （版本 1.5+）:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:authenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:unauthenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h1 id="k8s系统默认的Roles和RoleBindings"><a href="#k8s系统默认的Roles和RoleBindings" class="headerlink" title="k8s系统默认的Roles和RoleBindings"></a>k8s系统默认的Roles和RoleBindings</h1><p>API servers创建一组默认为 ClusterRole 和 ClusterRoleBinding 的对象。 其中许多是以 system: 为前缀的，它表示资源是基础设施 “owned” 的。对于这些资源的修改可能导致集群功能失效。 例如，system:node 是集群角色，它是定义 kubelets 相关的权限，如果这个角色被修改，它将导致 kubelets 无法正常工作。</p><p>所有默认的 ClusterRole 和 ClusterRoleBinding 对象都会被标记为 kubernetes.io&#x2F;bootstrapping&#x3D;rbac-defaults</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/3.png" alt="upload-image"> </p><h2 id="默认ClusterRole自动更新"><a href="#默认ClusterRole自动更新" class="headerlink" title="默认ClusterRole自动更新"></a>默认ClusterRole自动更新</h2><p>在每次启动时，API Server 都会更新默认 ClusterRole 所缺少的各种权限，并更新默认 ClusterRoleBinding 所缺少的各个角色绑定主体。 这种自动更新机制允许集群去修复一些特殊的修改。 由于权限和角色绑定主体在新的 Kubernetes 版本中可能发生变化，所以这样的话也能够保证角色和角色绑定始终保持是最新的。</p><p>如果要禁止此功能,请将默认ClusterRole以及ClusterRoleBinding的rbac.authorization.kubernetes.io&#x2F;autoupdate设置成false。</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/4.png" alt="upload-image"> </p><p><strong>注意</strong>，缺乏默认权限和角色绑定主体可能会导致非功能性集群问题。</p><p>自动更新功能在 Kubernetes 版本1.6+ 的 RBAC 认证是默认开启的。</p><h2 id="Discovery-Roles"><a href="#Discovery-Roles" class="headerlink" title="Discovery Roles"></a>Discovery Roles</h2><p>无论是经过身份验证的还是未经过身份验证的用户，默认角色的用户读取API被认为是安全的，可以公开访问（包括CustomResourceDefinitions）， 如果要禁用匿名未经过身份验证的用户访问，请在 API server 中添加 –anonymous-auth&#x3D;false 的配置选项。</p><p>通过运行命令 kubectl 可以查看这些角色的配置信息:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> clusterroles <span class="hljs-keyword">system</span>:discovery -o yaml<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：不建议编辑这个角色，因为更改将在 API server 重启时自动更新时覆盖（见上文）</p><table><thead><tr><th>默认 ClusterRole</th><th>默认 ClusterRoleBinding</th><th>描述</th></tr></thead><tbody><tr><td>system:basic-user</td><td>system:authenticated 组</td><td>允许用户以只读的方式去访问他们自己的基本信息。在1.14版本之前，这个角色在默认情况下也绑定在 <code>system:unauthenticated</code> 上。</td></tr><tr><td>system:discovery</td><td>system:authenticated 组</td><td>允许以只读方式访问 API 发现端点，这些端点用来发现和协商 API 级别。在1.14版本之前，这个角色在默认情况下绑定在 <code>system:unauthenticated</code> 上。</td></tr><tr><td>system:public-info-viewer</td><td>system:authenticated 和 system:unauthenticated 组</td><td>允许对集群的非敏感信息进行只读访问，它是在1.14版本中引入的。</td></tr></tbody></table><h2 id="面向用户的角色"><a href="#面向用户的角色" class="headerlink" title="面向用户的角色"></a>面向用户的角色</h2><p>一些默认的角色不是前缀 system: 开头的。这些是面向用户的角色。它们包括 super-user 角色（cluster-admin）， 使用 ClusterRoleBindings （cluster-status）在集群范围内授予角色， 以及使用 RoleBindings （admin, edit, view）在特定命名空间中授予的角色。</p><p>在 1.9 开始，面向用户的角色使用ClusterRole Aggregation允许管理员在包含这些角色上的 自定义资源上添加规则。如果想要添加 “admin” “edit” 或者 “view” ，需要先创建使用以下一个或多个的 ClusterRole 的标签：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">metadata:</span><br>  labels:<br>    rbac.authorization.k8s.io/<span class="hljs-keyword">aggregate</span>-<span class="hljs-keyword">to</span>-admin: <span class="hljs-string">&quot;true&quot;</span><br>    rbac.authorization.k8s.io/<span class="hljs-keyword">aggregate</span>-<span class="hljs-keyword">to</span>-edit: <span class="hljs-string">&quot;true&quot;</span><br>    rbac.authorization.k8s.io/<span class="hljs-keyword">aggregate</span>-<span class="hljs-keyword">to</span>-view: <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>默认 ClusterRole</th><th>默认 ClusterRoleBinding</th><th>描述</th></tr></thead><tbody><tr><td>cluster-admin</td><td>system:masters 组</td><td>允许超级用户在平台上的任何资源的所有操作。 当在 ClusterRoleBinding 中使用时，可以授权对集群中以及所有命名空间中的全部资源进行完全控制。 当在 RoleBinding 中使用时，可以授权控制 RoleBinding 所在命名空间中的所有资源，包括命名空间本身。</td></tr><tr><td>admin</td><td>无</td><td>允许管理员访问权限，旨在使用 RoleBinding 在命名空间内执行授权。 如果在 RoleBinding 中使用，则可授予对命名空间中的大多数资源的读&#x2F;写权限， 包括创建角色和绑定角色（RoleBinding）的能力。 但是它不允许对资源配额或者命名空间本身进行写操作。</td></tr><tr><td>edit</td><td>无</td><td>允许对命名空间的大多数对象进行读&#x2F;写操作。 它不允许查看或者修改角色（Roles）或者角色绑定（RoleBindings）。</td></tr><tr><td>view</td><td>无</td><td>允许对命名空间的大多数对象有只读权限。 它不允许查看角色（Roles）或角色绑定（RoleBindings）。 它不允许查看 Secrets，因为这类操作属于越权。</td></tr></tbody></table><h2 id="核心组件角色"><a href="#核心组件角色" class="headerlink" title="核心组件角色"></a>核心组件角色</h2><table><thead><tr><th>默认 ClusterRole</th><th>默认 ClusterRoleBinding</th><th>描述</th></tr></thead><tbody><tr><td>system:kube-scheduler</td><td>system:kube-scheduler 用户</td><td>允许访问 kube-scheduler 组件所需要的资源。</td></tr><tr><td>system:volume-scheduler</td><td>system:kube-scheduler 用户</td><td>允许访问 kube-scheduler 组件所需要的的卷资源。</td></tr><tr><td>system:kube-controller-manager</td><td>system:kube-controller-manager 用户</td><td>允许访问 kube-controller-manager 组件所需要的资源。 各个控制环所需要的权限包含在 controller roles 之中。</td></tr><tr><td>system:node</td><td>在版本1.8之后无</td><td>允许访问 kubelet 组件所需要的资源，它包括读取所有的 Secrets 和对所有 Pod 状态对象的写操作。从版本 1.7 开始，推荐使用 Node authorizer 和 NodeRestriction 准入插件 来代替这个角色，它允许基于 kubelet 上调度执行的 Pods 来授权对 kubelet API 的访问。 在版本 1.7 之前，这个角色会自动绑定到 system:nodes 组。 在版本 1.7中，如果未启用Node 鉴权模式，这个角色将自动绑定到 system:nodes 组 在版本 1.8+ 之后，不再自动创建绑定。</td></tr><tr><td>system:node-proxier</td><td>system:kube-proxy 用户</td><td>允许访问 kube-proxy 组件所需要的资源。</td></tr></tbody></table><h2 id="其他组件角色"><a href="#其他组件角色" class="headerlink" title="其他组件角色"></a>其他组件角色</h2><table><thead><tr><th>默认 ClusterRole</th><th>默认 ClusterRoleBinding</th><th>描述</th></tr></thead><tbody><tr><td>system:auth-delegator</td><td>无</td><td>允许代理身份认证和鉴权， 它通常用在插件式 API 服务器上，以实现统一的身份认证和鉴权。</td></tr><tr><td>system:heapster</td><td>无</td><td>为 Heapster 组件定义的角色。</td></tr><tr><td>system:kube-aggregator</td><td>无</td><td>为 kube-aggregator 组件定义的角色。</td></tr><tr><td>system:kube-dns</td><td>在kube-system命名空间中的kube-dns服务账号</td><td>为 kube-dns 组件定义的角色。</td></tr><tr><td>system:kubelet-api-admin</td><td>无</td><td>允许完全访问 kubelet API 。</td></tr><tr><td>system:node-bootstrapper</td><td>无</td><td>允许访问执行 Kubelet TLS 启动引导 所需要的资源。</td></tr><tr><td>system:node-problem-detector</td><td>无</td><td>为 node-problem-detector 组件定义的角色。</td></tr><tr><td>system:persistent-volume-provisioner</td><td>无</td><td>允许访问大部分的 动态卷驱动 所需要的资源。</td></tr></tbody></table><h2 id="控制器角色"><a href="#控制器角色" class="headerlink" title="控制器角色"></a>控制器角色</h2><p>Kubernetes 控制器管理器 运行核心控制环。 当使用 –use-service-account-credentials 参数时, 每个控制环使用一个单独的服务账号启动。 每个控制环都有相应的、前缀为 system:controller: 的角色。 如果控制管理器启动时未设置 –use-service-account-credentials， 它使用自己的身份信息来运行所有的控制环，该身份必须被授予所有相关的角色。 这些角色包括:</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/5.png" alt="upload-image"> </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">system:</span>controller:attachdetach-controller<br><span class="hljs-symbol">system:</span>controller:certificate-controller<br><span class="hljs-symbol">system:</span>controller:clusterrole-aggregation-controller<br><span class="hljs-symbol">system:</span>controller:cronjob-controller<br><span class="hljs-symbol">system:</span>controller:daemon-<span class="hljs-keyword">set</span>-controller<br><span class="hljs-symbol">system:</span>controller:deployment-controller<br><span class="hljs-symbol">system:</span>controller:disruption-controller<br><span class="hljs-symbol">system:</span>controller:endpoint-controller<br><span class="hljs-symbol">system:</span>controller:expand-controller<br><span class="hljs-symbol">system:</span>controller:generic-garbage-collector<br><span class="hljs-symbol">system:</span>controller:horizontal-pod-autoscaler<br><span class="hljs-symbol">system:</span>controller:job-controller<br><span class="hljs-symbol">system:</span>controller:<span class="hljs-keyword">namespace</span>-controller<br><span class="hljs-symbol">system:</span>controller:node-controller<br><span class="hljs-symbol">system:</span>controller:persistent-volume-binder<br><span class="hljs-symbol">system:</span>controller:pod-garbage-collector<br><span class="hljs-symbol">system:</span>controller:pv-protection-controller<br><span class="hljs-symbol">system:</span>controller:pvc-protection-controller<br><span class="hljs-symbol">system:</span>controller:replicaset-controller<br><span class="hljs-symbol">system:</span>controller:replication-controller<br><span class="hljs-symbol">system:</span>controller:resourcequota-controller<br><span class="hljs-symbol">system:</span>controller:root-ca-cert-publisher<br><span class="hljs-symbol">system:</span>controller:route-controller<br><span class="hljs-symbol">system:</span>controller:service-account-controller<br><span class="hljs-symbol">system:</span>controller:service-controller<br><span class="hljs-symbol">system:</span>controller:statefulset-controller<br><span class="hljs-symbol">system:</span>controller:ttl-controller<br></code></pre></td></tr></table></figure><h2 id="初始化第一个角色和角色绑定"><a href="#初始化第一个角色和角色绑定" class="headerlink" title="初始化第一个角色和角色绑定"></a>初始化第一个角色和角色绑定</h2><ol><li><p>授予他们一个角色，允许他们根据需要创建&#x2F;更新RoleBinding或者ClusterRoleBinding对象。 </p></li><li><p>授予他们绑定特定角色所需的权限: * 隐式地，通过给他们授予角色中包含的权限。 * 显式地，通过允许他们对特定角色（或集群角色）执行bind操作的权限</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">role-grantor</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;rbac.authorization.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;rolebindings&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;rbac.authorization.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;clusterroles&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;bind&quot;</span>]<br>  <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;edit&quot;</span>,<span class="hljs-string">&quot;view&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">role-grantor-binding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">user-1-namespace</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">role-grantor</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">user-1</span><br></code></pre></td></tr></table></figure><p>当初始化第一个角色和角色绑定时，需要为初始用户授予他们尚未拥有的权限。 对初始角色和角色绑定进行初始化时需要：</p><ul><li><p>使用用户组为 system:masters 的凭据，该用户组由默认绑定关联到 cluster-admin 这个超级用户角色。</p></li><li><p>如果你的 API server 启动时启用了不安全端口（使用–insecure-port）, 你也可以通过该端口调用 API ，这样操作会绕过身份验证或鉴权。</p></li></ul><h1 id="RBAC常用的命令"><a href="#RBAC常用的命令" class="headerlink" title="RBAC常用的命令"></a>RBAC常用的命令</h1><h2 id="kubectl-create-role"><a href="#kubectl-create-role" class="headerlink" title="kubectl create role"></a>kubectl create role</h2><p>创建 Role 对象，定义在某命名空间中的权限。例如:</p><ul><li>创建名称为 “pod-reader” 的 Role 对象，允许用户对 pods 执行 “get”、”watch” 和 “list” 操作：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create role pod-reader <span class="hljs-attribute">--verb</span>=get <span class="hljs-attribute">--verb</span>=list <span class="hljs-attribute">--verb</span>=watch <span class="hljs-attribute">--resource</span>=pods<br></code></pre></td></tr></table></figure><ul><li>创建名称为 “pod-reader” 的 Role 对象并指定 resourceNames：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create role pod-reader <span class="hljs-attribute">--verb</span>=get <span class="hljs-attribute">--resource</span>=pods <span class="hljs-attribute">--resource-name</span>=readablepod <span class="hljs-attribute">--resource-name</span>=anotherpod<br></code></pre></td></tr></table></figure><ul><li>创建名为 “foo” 的 Role 对象并指定 apiGroups:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create role foo <span class="hljs-attribute">--verb</span>=get,list,watch <span class="hljs-attribute">--resource</span>=replicasets.apps<br></code></pre></td></tr></table></figure><ul><li>创建名为 “foo” 的 Role 对象并指定子资源权限:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create role foo <span class="hljs-attribute">--verb</span>=get,list,watch <span class="hljs-attribute">--resource</span>=pods,pods/status<br></code></pre></td></tr></table></figure><ul><li>创建名为 “my-component-lease-holder” 的 Role 对象，使其具有对特定名称资源执行 get&#x2F;update 的权限：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create role my-component-lease-holder <span class="hljs-attribute">--verb</span>=get,list,watch,update <span class="hljs-attribute">--resource</span>=lease <span class="hljs-attribute">--resource-name</span>=my-component<br></code></pre></td></tr></table></figure><h2 id="kubectl-create-clusterrole"><a href="#kubectl-create-clusterrole" class="headerlink" title="kubectl create clusterrole"></a>kubectl create clusterrole</h2><p>创建 ClusterRole 对象。例如：</p><ul><li>创建名称为 “pod-reader” 的 ClusterRole 对象，允许用户对 pods 对象执行 “get”、”watch” 和 “list” 操作：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrole pod-reader <span class="hljs-attribute">--verb</span>=get,list,watch <span class="hljs-attribute">--resource</span>=pods<br></code></pre></td></tr></table></figure><ul><li>创建名为 “pod-reader” 的 ClusterRole 对象并指定资源名称：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrole pod-reader <span class="hljs-attribute">--verb</span>=get <span class="hljs-attribute">--resource</span>=pods <span class="hljs-attribute">--resource-name</span>=readablepod <span class="hljs-attribute">--resource-name</span>=anotherpod<br></code></pre></td></tr></table></figure><ul><li>创建名为 “foo” 的 ClusterRole 对象并指定 apiGroups：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrole foo <span class="hljs-attribute">--verb</span>=get,list,watch <span class="hljs-attribute">--resource</span>=replicasets.apps<br></code></pre></td></tr></table></figure><ul><li>创建名为 “foo” 的ClusterRole 对象并指定子资源:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrole foo <span class="hljs-attribute">--verb</span>=get,list,watch <span class="hljs-attribute">--resource</span>=pods,pods/status<br></code></pre></td></tr></table></figure><ul><li>创建名为 “foo” 的 ClusterRole 对象并指定非资源路径：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrole <span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attribute">--verb</span>=get <span class="hljs-attribute">--non-resource-url</span>=/logs/*<br></code></pre></td></tr></table></figure><ul><li>创建名为 “monitoring” 的 ClusterRole 对象并指定聚合规则：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">kubectl create clusterrole monitoring --aggregation-rule<span class="hljs-operator">=</span><span class="hljs-string">&quot;rbac.example.com/aggregate-to-monitoring=true&quot;</span><br></code></pre></td></tr></table></figure><h2 id="kubectl-create-rolebinding"><a href="#kubectl-create-rolebinding" class="headerlink" title="kubectl create rolebinding"></a>kubectl create rolebinding</h2><p>在特定的命名空间中对 Role 或 ClusterRole 授权。例如：</p><ul><li>在命名空间 “acme” 中，将名为 admin 的 ClusterRole 中的权限授予名称 “bob” 的用户:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create rolebinding bob-admin-binding <span class="hljs-attribute">--clusterrole</span>=admin <span class="hljs-attribute">--user</span>=bob <span class="hljs-attribute">--namespace</span>=acme<br></code></pre></td></tr></table></figure><ul><li>在命名空间 “acme”中，将名为 view 的 ClusterRole 中的权限授予该命名空间 “acme” 中名为 “myapp” 的服务账号：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create rolebinding myapp-view-binding <span class="hljs-attribute">--clusterrole</span>=view <span class="hljs-attribute">--serviceaccount</span>=acme:myapp <span class="hljs-attribute">--namespace</span>=acme<br></code></pre></td></tr></table></figure><ul><li>在命名空间 “acme” 中，将名为 view 的 ClusterRole 对象中的权限授予命名空间 “myappnamespace” 中名称为 “myapp” 的服务账号：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create rolebinding myappnamespace-myapp-view-binding <span class="hljs-attribute">--clusterrole</span>=view <span class="hljs-attribute">--serviceaccount</span>=myappnamespace:myapp <span class="hljs-attribute">--namespace</span>=acme<br></code></pre></td></tr></table></figure><h2 id="kubectl-create-clusterrolebinding"><a href="#kubectl-create-clusterrolebinding" class="headerlink" title="kubectl create clusterrolebinding"></a>kubectl create clusterrolebinding</h2><p>在整个集群、包括所有的命名空间中对 ClusterRole 授权。例如：</p><ul><li>在整个集群范围，将名为 cluster-admin 的 ClusterRole 中定义的权限授予名为 “root” 用户：</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> clusterrolebinding root-<span class="hljs-keyword">cluster</span>-admin-binding --clusterrole=<span class="hljs-keyword">cluster</span>-admin --<span class="hljs-keyword">user</span>=root<br></code></pre></td></tr></table></figure><ul><li>在整个集群范围，将名为 system:node-proxier 的 ClusterRole 的权限授予名为 “system:kube-proxy” 的用户：</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> clusterrolebinding kube-proxy-binding --clusterrole=<span class="hljs-keyword">system</span>:node-proxier --<span class="hljs-keyword">user</span>=<span class="hljs-keyword">system</span>:kube-proxy<br></code></pre></td></tr></table></figure><ul><li>在整个集群范围，将名为 view 的 ClusterRole 对象中定义的权限授予 “acme” 命名空间中名为 “myapp” 的服务账号：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding myapp-view-binding <span class="hljs-attribute">--clusterrole</span>=view <span class="hljs-attribute">--serviceaccount</span>=acme:myapp<br></code></pre></td></tr></table></figure><h2 id="kubectl-auth-reconcile"><a href="#kubectl-auth-reconcile" class="headerlink" title="kubectl auth reconcile"></a>kubectl auth reconcile</h2><p>使用清单文件来创建或者更新 rbac.authorization.k8s.io&#x2F;v1 API 对象。</p><p>尚不存在的对象会被创建，如果对应的命名空间也不存在，必要的话也会被创建。 已经存在的角色会被更新，使之包含输入对象中所给的权限。如果指定了 –remove-extra-permissions，可以删除其余权限。</p><p>已经存在的绑定也会被更新，使之包含输入对象中所给的主体。如果指定了 –remove-extra-permissions，则可以删除其余主体。</p><p>例如:</p><ul><li>测试应用 RBAC 对象的清单文件，显示将要进行的更改：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl auth reconcile -f <span class="hljs-keyword">my</span>-rbac-rules.yaml <span class="hljs-comment">--dry-run</span><br></code></pre></td></tr></table></figure><ul><li>应用 RBAC 对象的清单文件， 保留角色中的其余权限和绑定中的其他主体：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl auth reconcile -f <span class="hljs-keyword">my</span>-rbac-rules.yaml<br></code></pre></td></tr></table></figure><ul><li>应用 RBAC 对象的清单文件, 删除角色中的其他权限和绑定中的其他主体：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl auth reconcile -f my-rbac-rules<span class="hljs-selector-class">.yaml</span> <span class="hljs-attr">--remove-extra-subjects</span> <span class="hljs-attr">--remove-extra-permissions</span><br></code></pre></td></tr></table></figure><p>查看 CLI 帮助获取详细的用法。</p><h1 id="RBAC使用注意事项"><a href="#RBAC使用注意事项" class="headerlink" title="RBAC使用注意事项"></a>RBAC使用注意事项</h1><h2 id="角色和角色绑定的更新"><a href="#角色和角色绑定的更新" class="headerlink" title="角色和角色绑定的更新"></a>角色和角色绑定的更新</h2><p>你不能修改绑定对象所引用的 Role 或 ClusterRole 。 试图改变绑定对象的 roleRef 将导致验证错误。想要 改变现有绑定对象中 roleRef 字段的内容，必须删除并 重新创建绑定对象。这种限制有两个主要原因：</p><ul><li><p>关于不同角色的绑定是完全不一样的。更改 roleRef 需要删除&#x2F;重建绑定，确保要赋予绑定的完整主体列表是新 的角色（而不是只是启用修改 roleRef 在不验证所有现有 主体的情况下的，应该授予新角色对应的权限）。</p></li><li><p>使得 roleRef 不可以改变现有绑定主体用户的 update 权限， 这样可以让它们能够管理主体列表，而不能更改授予这些主体相关 的角色。</p></li></ul><p>命令kubectl auth reconcile可以创建或者更新包含 RBAC 对象的清单文件， 并且在必要的情况下删除和重新创建绑定对象，以改变所引用的角色</p><h1 id="RBAC在TKE中的应用"><a href="#RBAC在TKE中的应用" class="headerlink" title="RBAC在TKE中的应用"></a>RBAC在TKE中的应用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>TKE 提供了对接 Kubernetes RBAC 的授权模式，便于对子账号进行细粒度的访问权限控制。该授权模式下，可通过容器服务控制台及 kubectl 两种方式进行集群内资源访问。如下图所示：</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/6.png" alt="upload-image"> </p><h2 id="TKE-Kubernetes-对象级别权限控制方案"><a href="#TKE-Kubernetes-对象级别权限控制方案" class="headerlink" title="TKE Kubernetes 对象级别权限控制方案"></a>TKE Kubernetes 对象级别权限控制方案</h2><p>Kubernetes APIServer 支持丰富多样的认证策略，例如 x509 证书、bearer token、basic auth。其中，仅 bearer token 单个认证策略支持指定 known-token csv 文件的 beaer token、serviceaccount token、OIDC token、webhook token server 等多种 token 认证方式。</p><p>TKE 分析了实现复杂性及多种场景等因素，选择使用 x509 证书认证方式。其优势如下：</p><ul><li>用户理解成本低。</li><li>对于存量集群无需进行复杂变更 。</li><li>按照 User 及 Group 进行划分，后续扩展性好。</li></ul><p>TKE 基于 x509 证书认证实现了以下功能：</p><ul><li>每个子账号单独具备客户端证书，用于访问 Kubernetes APIServer。</li><li>当子账号在控制台访问 Kubernetes 资源时，后台默认使用该子账号的客户端证书去访问用户 Kubernetes APIServer。</li><li>支持子账号更新独有的客户端证书，防止凭证泄露。</li><li>支持主账号或使用集群 tke:admin 权限的账号进行查看、更新其他子账号的证书。</li></ul><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/7.png" alt="upload-image"> </p><h2 id="存量集群授权模式升级操作"><a href="#存量集群授权模式升级操作" class="headerlink" title="存量集群授权模式升级操作"></a>存量集群授权模式升级操作</h2><p>对于存量的集群，如果开启RBAC模式，那么会给腾讯云下的所有账号创建一个clusterrolebinding，并且会绑定tke:admin这个clusterole，所以如果你是存量集群，如果需要回收某些子账号的权限，那么需要自己手动操作收回权限，否则默认所有子账号都有admin权限</p><p><strong>升级授权模式</strong></p><p>若使用旧授权模式的集群需要升级时，请参考以下操作步骤进行升级：</p><ol><li>登录容器服务控制台，选择左侧导航栏中的【集群】。</li><li>在“集群管理”页面中，选择需升级的集群 ID。</li><li>在集群详情页面中，选择左侧【授权管理】&gt;【ClusterRole】。</li><li>在 “ClusterRole” 管理页面中，单击【RBAC策略生成器】。</li><li>在弹出的“切换权限管理模式”窗口中，单击【切换权限管理模式】即可进行授权模式升级。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/8.png" alt="upload-image"> </p><p>为确保新旧模式的兼容性，升级过程中会进行如下操作：</p><ol><li>创建默认预设管理员 ClusterRole：tke:admin。</li><li>拉取子账号列表。</li><li>为每个子账号生成可用于 Kubernetes APIServer 认证的 x509 客户端证书。</li><li>为每个子账号都绑定 tke:admin 角色（确保和存量功能兼容）。</li><li>升级完毕。</li></ol><p>回收子账号权限</p><p>集群授权模式升级完毕后，集群管理员（通常为主账号管理员或创建集群的运维人员）可按需对具有该集群权限的子账号进行权限回收操作，步骤如下：</p><ol><li>选择集群【授权管理】下的菜单项，在对应的管理页面中单击【RBAC策略生成器】。</li><li>在“管理权限”页面的“选择子账号”步骤中，勾选需回收权限的子账号并单击【下一步】。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/9.png" alt="upload-image"></p><ul><li>在“集群RBAC”步骤中，设置权限。例如，“权限设置”选择为命名空间 “default” 下的“只读用户”。如下图所示：</li></ul><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/10.png" alt="upload-image"> </p><p>单击【完成】即可完成回收操作。</p><p><strong>确认子账号权限</strong></p><p>当完成子账号回收操作后，您可通过以下步骤进行确认：</p><ol><li>选择左侧的【授权管理】&gt;【ClusterRoleBinding】，进入 “ClusterRoleBinding” 管理页面。</li><li>选择被回收权限的子账号名称，进入 YAML 文档页面。子账号默认为 tke:admin 权限，回收对应权限后，可在 YAML 文件中查看变更。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/11.png" alt="upload-image"></p><h2 id="新建集群身份权限预设"><a href="#新建集群身份权限预设" class="headerlink" title="新建集群身份权限预设"></a>新建集群身份权限预设</h2><p>容器服务控制台提供授权管理页，默认主账号及集群创建者具备管理员权限。可对其他拥有该集群 DescribeCluster Action 权限的子账号进行权限管理。如下图所示：</p><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/12.png" alt="upload-image"></p><p>ClusterRole 说明</p><ul><li><p>所有命名空间维度：</p><ul><li>管理员（tke:admin）：对所有命名空间下资源的读写权限，具备集群节点、存储卷、命名空间、配额的读写权限，可配置子账号的读写权限。</li><li>运维人员（tke:ops）：对所有命名空间下控制台可见资源的读写权限，具备集群节点、存储卷、命名空间、配额的读写权限。</li><li>开发人员（tke:dev）：对所有命名空间下控制台可见资源的读写权限。</li><li>受限人员（tke:ro）：对所有命名空间下控制台可见资源的只读权限。</li><li>自定义：用户自定义 ClusterRole。</li></ul></li><li><p>指定命名空间维度：</p><ul><li>开发人员（tke:ns:dev）： 对所选命名空间下控制台可见资源的读写权限， 需要选择指定命名空间。</li><li>只读用户（tke:ns:ro）：对所选命名空间下控制台可见资源的只读权限， 需要选择指定命名空间。</li></ul></li><li><p>所有预设的 ClusterRole 都将带有固定 label：cloud.tencent.com&#x2F;tke-rbac-generated: “true”。</p></li><li><p>所有预设的 ClusterRoleBinding 都带有固定的 annotations：cloud.tencent.com&#x2F;tke-account-nickname: yournickname 及 label：cloud.tencent.com&#x2F;tke-account: “yourUIN”。</p></li></ul><p>操作步骤</p><p>获取凭证</p><p>容器服务默认会为每个子账号创建独立的凭证，用户只需访问集群详情页或调用云 API 接口 DescribeClusterKubeconfig，即可获取当前使用账号的凭证信息 Kubeconfig 文件。通过控制台获取步骤如下：</p><ul><li>登录容器服务控制台，选择左侧导航栏中的【集群】。</li><li>在“集群管理”页面中，选择需目标集群 ID。</li><li>在集群详情页面中，选择左侧的【基本信息】即可在“集群APIServer信息”模块中查看并下载 Kubeconfig 文件。如下图所示：</li></ul><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/13.png" alt="upload-image"> </p><p>凭证管理</p><p>集群管理员可以访问凭证管理页，进行查看并更新所有账号下集群的凭证。详情请参见 更新子账号的 TKE 集群访问凭证。</p><p>授权</p><p><strong>说明</strong>：请联系集群管理员（主账号、集群创建者或拥有 admin role 的用户）进行授权。</p><ol><li>在“集群管理”页面中，选择目标集群 ID。</li><li>在集群详情页面中，选择左侧【授权管理】&gt;【ClusterRoleBinding】。</li><li>在 “ClusterRoleBinding” 管理页面中，单击【RBAC策略生成器】。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/14.png" alt="upload-image"> </p><ol><li>在“管理权限”页面的“选择子账号”步骤中，勾选需授权的子账号并单击【下一步】。</li><li>在“集群RBAC设置”步骤中，按照以下指引进项权限设置：<ul><li>Namespace列表：按需指定权限生效的 Namespace 范围。</li><li>权限：请参考界面中的“权限说明”，按需设置权限。说明：您还可以单击【添加权限】，继续进行权限自定义设置。</li></ul></li></ol><p>鉴权</p><p>登录子账号，确认该账号已获得所授权限，则表示授权成功。</p><h2 id="自定义策略授权"><a href="#自定义策略授权" class="headerlink" title="自定义策略授权"></a>自定义策略授权</h2><ul><li>Role：命名空间维度</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Role</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">testRole</span><br>  <span class="hljs-attribute">namespaces</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deletecollection</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br></code></pre></td></tr></table></figure><ul><li>ClusterRole：集群维度</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">testClusterRole</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deletecollection</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch </span><br></code></pre></td></tr></table></figure><p>操作步骤</p><p><strong>说明</strong>：该步骤以为子账号绑定自定义 ClusterRole 为例，与绑定 Role 的步骤基本一致，您可结合实际需求进行操作。</p><ol><li>登录容器服务控制台，选择左侧导航栏中的【集群】。</li><li>在“集群管理”页面中，选择需升级的集群 ID。</li><li>在集群详情页面中，选择左侧【授权管理】&gt;【ClusterRole】。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/15.png" alt="upload-image"> </p><ol><li>在 “ClusterRole” 管理页面中，选择右上角的【YAML创建资源】。</li><li>在编辑界面输入自定义策略的 YAML 内容，单击【完成】即可创建 ClusterRole。该步骤以 ClusterRole：集群维度 YAML 为例，创建完成后，可在 “ClusterRole” 管理页面中查看自定义权限 “testClusterRole”。</li><li>在 “ClusterRoleBinding” 管理页面中，单击【RBAC策略生成器】。</li><li>在“管理权限”页面的“选择子账号”步骤中，勾选需授权的子账号并单击【下一步】。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/16.png" alt="upload-image"> </p><ol start="5"><li>进入“集群RBAC设置”界面，按照以下指引进项权限设置。如下图所示：</li></ol><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/17.png" alt="upload-image"> </p><ul><li>Namespace列表：按需指定权限生效的 Namespace 范围。</li><li>权限：选择“自定义”，并单击【选择自定义权限】。按需在自定义权限列表中进行权限选择，本文以选择已创建的自定义权限 “testClusterRole” 为例。说明：<br>您还可以单击【添加权限】，继续进行权限自定义设置。</li></ul><ol start="6"><li>单击【完成】即可完成授权操作。</li></ol><h2 id="更新及获取子账号访问凭证"><a href="#更新及获取子账号访问凭证" class="headerlink" title="更新及获取子账号访问凭证"></a>更新及获取子账号访问凭证</h2><p>腾讯云容器服务 TKE 基于 x509 证书认证实现了以下功能：</p><ul><li>每个子账号均单独具备客户端证书，用于访问 Kubernetes APIServer。</li><li>在 TKE 新授权模式下，不同子账号在获取集群访问凭证时，即访问集群基本信息页面或调用云 API 接口 DescribeClusterKubeconfig 时，将会获取到子账户独有的 x509 客户端证书，该证书是使用每个集群的自签名 CA 进行签发的。</li><li>当子账号在控制台访问 Kubernetes 资源时，后台默认使用该子账号的客户端证书去访问用户 Kubernetes APIServer。</li><li>支持子账号更新独有的客户端证书，防止凭证泄露。</li><li>支持主账号或使用集群 tke:admin 权限的账号进行查看、更新其他子账号的证书。</li></ul><p>操作步骤</p><ul><li>登录容器服务控制台，选择左侧导航栏中的【集群】。</li><li>在“集群管理”页面中，选择需目标集群 ID。</li><li>在集群详情页面中，选择左侧的【基本信息】，在“集群APIServer信息”模块中单击【Kubeconfig权限管理】。</li><li>在弹出的 “Kubeconfig权限管理” 窗口中，按需勾选认证账号并单击【更新】即可。如下图所示：</li></ul><p><img src="/img/2020-08-23-RBAC-permission-management-of-Kubernetes/18.png" alt="upload-image"> </p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://blog.csdn.net/ywq935/article/details/84840935">https://blog.csdn.net/ywq935/article/details/84840935</a></p><p><a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/</a></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>RBAC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上动态部署jenkins slaves</title>
    <link href="/2020/08/18/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/"/>
    <url>/2020/08/18/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>本章我们来讲一下如何在TKE上搭建jenkins这个CI&#x2F;CD工具，这边我们在进行构建的时候可以自动生成一个slave pod来进行走流水线，流水线跑完之后会自动销毁。</p><h1 id="部署jenkins的rbac权限"><a href="#部署jenkins的rbac权限" class="headerlink" title="部署jenkins的rbac权限"></a>部署jenkins的rbac权限</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@VM_0_13_centos jenkins]<span class="hljs-meta"># cat rbac.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> jenkins2<br><span class="hljs-symbol">  namespace:</span> jenkins<br><br>---<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> jenkins2<br><span class="hljs-symbol">rules:</span><br>  - apiGroups: [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;services&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>,<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>,<span class="hljs-string">&quot;patch&quot;</span>,<span class="hljs-string">&quot;update&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;pods/exec&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>,<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>,<span class="hljs-string">&quot;patch&quot;</span>,<span class="hljs-string">&quot;update&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;pods/log&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;secrets&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br><br>---<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> jenkins2<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> jenkins2<br><span class="hljs-symbol">subjects:</span><br>  - kind: ServiceAccount<br><span class="hljs-symbol">    name:</span> jenkins2<br><span class="hljs-symbol">    namespace:</span> jenkins<br></code></pre></td></tr></table></figure><h1 id="创建pvc进行jenkins的数据持久化"><a href="#创建pvc进行jenkins的数据持久化" class="headerlink" title="创建pvc进行jenkins的数据持久化"></a>创建pvc进行jenkins的数据持久化</h1><p>这边通过cbs卷挂载jenkins的数据</p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/1.png" alt="upload-image"> </p><h1 id="部署jenkins的应用"><a href="#部署jenkins的应用" class="headerlink" title="部署jenkins的应用"></a>部署jenkins的应用</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jenkins2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">jenkins2</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">jenkins2</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jenkins</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">jenkins/jenkins:lts</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">50000</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">agent</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">1000m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">512Mi</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/login</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">12</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/login</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">12</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jenkinshome</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">jenkins2</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/jenkins_home</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jenkinshome</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">opspvc</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jenkins2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jenkins2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jenkins2</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30002</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">agent</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">50000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">agent</span><br></code></pre></td></tr></table></figure><h1 id="采用treafik暴露域名给jenkins"><a href="#采用treafik暴露域名给jenkins" class="headerlink" title="采用treafik暴露域名给jenkins"></a>采用treafik暴露域名给jenkins</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jenkins</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jenkins</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`jenkins.tx.niewx.club`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jenkins2</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h1 id="访问初始化jenkins"><a href="#访问初始化jenkins" class="headerlink" title="访问初始化jenkins"></a>访问初始化jenkins</h1><p>查看登录的初始密码，然后安装好推荐的插件，安装好之后配置账号，直接登录即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/2.png" alt="upload-image"> </p><h1 id="安装Kubernetes-plugin-插件"><a href="#安装Kubernetes-plugin-插件" class="headerlink" title="安装Kubernetes-plugin 插件"></a>安装Kubernetes-plugin 插件</h1><p>我这边已经安装好了，可以选择可选插件输入Kubernetes搜索找到插件进行安装</p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/3.png" alt="upload-image"> </p><h1 id="连接TKE集群"><a href="#连接TKE集群" class="headerlink" title="连接TKE集群"></a>连接TKE集群</h1><p>在“系统配置”面板最下方，选择“云”模块下的【新增一个云】&gt;【Kubernetes】。如下图所示</p><p>对应的证书文件和token以及api地址可以从TKE集群中节点上的下面文件获取</p><p>集群证书获取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM_1_4_centos ~]<span class="hljs-comment"># cat /etc/kubernetes/cluster-ca.crt</span><br>-----<span class="hljs-keyword">BEGIN</span> CERTIFICATE-----<br>MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl<br>cm5ldGVzMB4XDTIwMDYwMjAzMTYzNVoXDTMwMDUzMTAzMTYzNVowFTETMBEGA1UE<br>AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANmh<br>Z<span class="hljs-regexp">/tm6Ej66vNgkcRk4zirSGpoLpHaofq/</span>q9eOE8zLr+QfzwNlDImeNfpX<span class="hljs-regexp">/OG/</span>atz2<br>bl6DY4kAt7CsHUVs60leCIs1PZHY212vevlL/nWceLHqVeskynwT4xwJKI48DnwM<br>UgABoXTqm3S2k02CRJcm0Ucx1pw+E0l0Cy/hJcEwa8kFaqsskHqL1jHhRGB4ENGO<br><span class="hljs-number">6</span>ocjEzZstZdjv1Ab1WoOmHhvvI3mT4Gqb1BSd3BFqlu0id1wJvIXuood0bYDTXSD<br>KHHKZFOnrxwFFAg3ZxmrFDkfqfmILV0dcA4KKW/<span class="hljs-number">1</span>q0g7+XepM2gZrrbwMAjVaOpH<br>vPUEaLn<span class="hljs-regexp">/kJ1LSUNz09UCAwEAAaMjMCEwDgYDVR0PAQH/</span>BAQDAgKUMA8GA1UdEwEB<br>/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAC6jddY1Y5ofHZkthZu8Hj2Op36q<br>kY9pv1fpexcPXtcRuxgw6+mQjEzKraEDoDYdX/DkHkuYVulWl6Sqv+P9WRY+hLzH<br>/K+GHh4uuuIlL+C6Uk1nV0clrznv+CqXKY9AZ8sY+x6l9d3hIxaDxwKWDfzJe2sU<br>zMJZsbxyy4wIkwlG5+<span class="hljs-number">1</span>lSD3YYRo1TooYGeFELD0OdGMrH9XRP0E/<span class="hljs-number">6</span>Q5XdRBecH54<br>JA6Tj4vXI2SgOX4MWR47FFI7agBgATiOLLYGVcRqzf6rK/QFbOnT1R1JAR4=<br>-----<span class="hljs-keyword">END</span> CERTIFICATE-----<br></code></pre></td></tr></table></figure><p>apiserver地址和token</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM_1_4_centos</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># cat .kube/config</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">LS0tLS1CRUdJNDQWJD....</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://169.xx.xx.xx:60002</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">MUrM6Aj4qwgKKjwF....</span><br></code></pre></td></tr></table></figure><p>将上述获取的填入集群配置</p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/4.png" alt="upload-image"> </p><p>其他配置如下图所示，我们jenkins的master采用的hosts模式，所以这边直接用节点的8080端口</p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/5.png" alt="upload-image"> </p><p>slave 的 pod的配置如下</p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/6.png" alt="upload-image"> </p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/7.png" alt="upload-image"> </p><h1 id="创建测试项目进行构建"><a href="#创建测试项目进行构建" class="headerlink" title="创建测试项目进行构建"></a>创建测试项目进行构建</h1><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/8.png" alt="upload-image"> </p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/9.png" alt="upload-image"> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">echo <span class="hljs-string">&quot;测试 Kubernetes 动态生成 jenkins slave&quot;</span><br>echo <span class="hljs-string">&quot;==============docker in docker===========&quot;</span><br>docker <span class="hljs-built_in">info</span><br><br>echo <span class="hljs-string">&quot;=============kubectl=============&quot;</span><br>kubectl <span class="hljs-built_in">get</span> pods<br></code></pre></td></tr></table></figure><h1 id="执行任务构建"><a href="#执行任务构建" class="headerlink" title="执行任务构建"></a>执行任务构建</h1><p>执行构建会自动生成一个slave pod，执行任务结束后会自动删除掉</p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/10.png" alt="upload-image"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@VM</span>_1_4_centos <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>n jenkins<br>NAME                        READY   STATUS    RESTARTS   AGE<br>jenkins2<span class="hljs-number">-574678</span>b486<span class="hljs-number">-8</span>r4qz   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>d5h<br>jnlp<span class="hljs-number">-7</span>zv3k                  <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>s<br></code></pre></td></tr></table></figure><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/11.png" alt="upload-image"> </p><p><img src="/img/2020-08-18-Dynamic-deployment-of-jenkins-slaves-on-TKE/12.png" alt="upload-image"> </p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.qikqiak.com/post/kubernetes-jenkins1/">https://www.qikqiak.com/post/kubernetes-jenkins1/</a></p><p><a href="https://cloud.tencent.com/document/product/457/41396">https://cloud.tencent.com/document/product/457/41396</a></p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自制CA证书设置ssl证书</title>
    <link href="/2020/08/14/2020-08-14-Self-made-CA-certificate-set-ssl-certificate/"/>
    <url>/2020/08/14/2020-08-14-Self-made-CA-certificate-set-ssl-certificate/</url>
    
    <content type="html"><![CDATA[<p>本章介绍了如何自制CA证书签发ssl证书来配置https服务</p><h1 id="安装openssl工具"><a href="#安装openssl工具" class="headerlink" title="安装openssl工具"></a>安装openssl工具</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># yum install openssl</span><br><span class="hljs-meta"># yum install openssl-devel</span><br><span class="hljs-meta"># openssl version -a</span><br></code></pre></td></tr></table></figure><h1 id="生成ca证书"><a href="#生成ca证书" class="headerlink" title="生成ca证书"></a>生成ca证书</h1><h2 id="生成-CA-私钥"><a href="#生成-CA-私钥" class="headerlink" title="生成 CA 私钥"></a>生成 CA 私钥</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"># openssl genrsa -<span class="hljs-keyword">out</span> ca.<span class="hljs-keyword">key</span> 1024<br></code></pre></td></tr></table></figure><h2 id="生成请求文件"><a href="#生成请求文件" class="headerlink" title="生成请求文件"></a>生成请求文件</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">openssl req -<span class="hljs-built_in">new</span> -<span class="hljs-built_in">key</span> ca.<span class="hljs-built_in">key</span> -out ca.csr -subj <span class="hljs-string">&quot;/C=CN/ST=Guangdong/L=Shenzhen/O=devops/OU=devops/CN=nwx_qdlg@163.com&quot;</span> <br></code></pre></td></tr></table></figure><p><strong>注意</strong>:这里的 Organization Name (eg, company) [Internet Widgits Pty Ltd]: 后面生成客户端和服务器端证书的时候也需要填写，O和OU不要写成一样的！！！</p><h2 id="生成CA证书"><a href="#生成CA证书" class="headerlink" title="生成CA证书"></a>生成CA证书</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">openssl x509 -req -<span class="hljs-keyword">in</span> <span class="hljs-keyword">ca</span>.csr -signkey <span class="hljs-keyword">ca</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">ca</span>.crt<br></code></pre></td></tr></table></figure><h1 id="生成服务端证书并CA签发"><a href="#生成服务端证书并CA签发" class="headerlink" title="生成服务端证书并CA签发"></a>生成服务端证书并CA签发</h1><h2 id="生成服务端私钥"><a href="#生成服务端私钥" class="headerlink" title="生成服务端私钥"></a>生成服务端私钥</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.key <span class="hljs-number">1024</span><br></code></pre></td></tr></table></figure><h2 id="生成服务端公钥"><a href="#生成服务端公钥" class="headerlink" title="生成服务端公钥"></a>生成服务端公钥</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl rsa -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.key -pubout -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.pem<br></code></pre></td></tr></table></figure><h2 id="生成服务端向CA申请签名的CSR"><a href="#生成服务端向CA申请签名的CSR" class="headerlink" title="生成服务端向CA申请签名的CSR"></a>生成服务端向CA申请签名的CSR</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.csr -subj &quot;/C=CN/ST=Guangdong/L=Shenzhen/O=serverdevops/OU=serverdevops/CN=nwx_qdlg@163.com&quot;<br></code></pre></td></tr></table></figure><h2 id="生成服务端带有CA签名的证书"><a href="#生成服务端带有CA签名的证书" class="headerlink" title="生成服务端带有CA签名的证书"></a>生成服务端带有CA签名的证书</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">openssl x509 -req -<span class="hljs-keyword">CA</span> <span class="hljs-keyword">ca</span>.crt -CAkey <span class="hljs-keyword">ca</span>.key -CAcreateserial -<span class="hljs-keyword">in</span> server.csr -<span class="hljs-keyword">out</span> server.crt<br></code></pre></td></tr></table></figure><h1 id="生成客户端证书并CA签发"><a href="#生成客户端证书并CA签发" class="headerlink" title="生成客户端证书并CA签发"></a>生成客户端证书并CA签发</h1><h2 id="生成客户端私钥"><a href="#生成客户端私钥" class="headerlink" title="生成客户端私钥"></a>生成客户端私钥</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-keyword">out</span> client.<span class="hljs-keyword">key</span> 1024<br></code></pre></td></tr></table></figure><h2 id="生成客户端公钥"><a href="#生成客户端公钥" class="headerlink" title="生成客户端公钥"></a>生成客户端公钥</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">openssl rsa -<span class="hljs-keyword">in</span> <span class="hljs-keyword">client</span>.key -pubout -out <span class="hljs-keyword">client</span>.pem<br></code></pre></td></tr></table></figure><h2 id="生成客户端向CA申请签名的CSR"><a href="#生成客户端向CA申请签名的CSR" class="headerlink" title="生成客户端向CA申请签名的CSR"></a>生成客户端向CA申请签名的CSR</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">openssl req -<span class="hljs-keyword">new</span> -key <span class="hljs-keyword">client</span>.key -out <span class="hljs-keyword">client</span>.csr -subj <span class="hljs-string">&quot;/C=CN/ST=Guangdong/L=Shenzhen/O=clientdevops/OU=clientdevops/CN=nwx_qdlg@163.com&quot;</span><br></code></pre></td></tr></table></figure><h2 id="生成客户端带有CA签名的证书"><a href="#生成客户端带有CA签名的证书" class="headerlink" title="生成客户端带有CA签名的证书"></a>生成客户端带有CA签名的证书</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">openssl x509 -req -<span class="hljs-keyword">CA</span> <span class="hljs-keyword">ca</span>.crt -CAkey <span class="hljs-keyword">ca</span>.key -CAcreateserial -<span class="hljs-keyword">in</span> client.csr -<span class="hljs-keyword">out</span> client.crt<br></code></pre></td></tr></table></figure><h1 id="使用证书在nginx进行https的配置"><a href="#使用证书在nginx进行https的配置" class="headerlink" title="使用证书在nginx进行https的配置"></a>使用证书在nginx进行https的配置</h1><p>将服务端或者客户端生成的私钥和CA签名证书拷贝到对应的服务部署机器上进行部署</p><p>例如：</p><p>配置nginx 我们拿到CA签发的这个证书后，需要将证书配置在nginx中。 首先，我们将server.crt和server.key拷贝到nginx的配置文件所在的目录 其次，在nginx的配置中添加如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">server_name</span>  你的域名;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br><br>        <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">ssl_certificate</span>      server.crt;<br>        <span class="hljs-attribute">ssl_certificate_key</span>  server.key;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之初识容器探测器</title>
    <link href="/2020/08/14/2020-08-14-TKE&#39;s-first-knowledge-of-container-detectors/"/>
    <url>/2020/08/14/2020-08-14-TKE&#39;s-first-knowledge-of-container-detectors/</url>
    
    <content type="html"><![CDATA[<p>kubelet 使用存活探测器来知道什么时候要重启容器。例如，存活探测器可以捕捉到死锁（应用程序在运行，但是无法继续执行后面的步骤）。这样的情况下重启容器有助于让应用程序在有问题的情况下更可用。</p><p>kubelet 使用就绪探测器可以知道容器什么时候准备好了并可以开始接受请求流量， 当一个 Pod 内的所有容器都准备好了，才能把这个 Pod 看作就绪了。这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。在 Pod 还没有准备好的时候，会从 Service 的负载均衡器中被剔除的。</p><p>kubelet 使用启动探测器可以知道应用程序容器什么时候启动了。如果配置了这类探测器，就可以控制容器在启动成功后再进行存活性和就绪检查，确保这些存活、就绪探测器不会影响应用程序的启动。这可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。</p><h1 id="就绪探针readinessProbe"><a href="#就绪探针readinessProbe" class="headerlink" title="就绪探针readinessProbe"></a>就绪探针readinessProbe</h1><p>用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。通过使用Readiness探针，Kubernetes能够等待应用程序完全启动，然后才允许服务将流量发送到新副本。</p><p>比如使用tomcat的应用程序来说，并不是简单地说tomcat启动成功就可以对外提供服务的，还需要等待spring容器初始化，数据库连接没连上等等。对于spring boot应用，默认的actuator带有&#x2F;health接口，可以用来进行启动成功的判断</p><h2 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h2><ul><li>exec：通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li>httpGet：通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li>tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><h2 id="探测参数"><a href="#探测参数" class="headerlink" title="探测参数"></a>探测参数</h2><ul><li>initialDelaySeconds：容器启动后要等待多少秒后存活和就绪探测器才被初始化，默认是 0 秒，最小值是 0。</li><li>periodSeconds：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。</li><li>timeoutSeconds：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</li><li>successThreshold：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。存活探测的这个值必须是 1。最小值是 1。</li><li>failureThreshold：当探测失败时，Kubernetes 的重试次数。存活探测情况下的放弃就意味着重新启动容器。就绪探测情况下的放弃 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。</li></ul><p>HTTP 探测器可以在 httpGet 上配置额外的字段：</p><ul><li>host：连接使用的主机名，默认是 Pod 的 IP。也可以在 HTTP 头中设置 “Host” 来代替。</li><li>scheme ：用于设置连接主机的方式（HTTP 还是 HTTPS）。默认是 HTTP。</li><li>path：访问 HTTP 服务的路径。</li><li>httpHeaders：请求中自定义的 HTTP 头。HTTP 头字段允许重复。</li><li>port：访问容器的端口号或者端口名。如果数字必须在 1 ～ 65535 之间。</li></ul><h2 id="TKE中实践"><a href="#TKE中实践" class="headerlink" title="TKE中实践"></a>TKE中实践</h2><p>一般我们在TKE中单独配置readinessProbe，如果这边连续探测多少次都失败，pod是不会重启的，只是不会接受请求的。我们创建一个只设置就绪探针的pod，并探测81端口，看pod会怎么样。</p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/1.png" alt="upload-image"> </p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/2.png" alt="upload-image"> </p><p>我们查看事件发现探测了13次失败了，pod是不会重启的，这边会一直探测直到服务启动成功。</p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/3.png" alt="upload-image"> </p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/4.png" alt="upload-image"> </p><h1 id="存活探针livenessProbe"><a href="#存活探针livenessProbe" class="headerlink" title="存活探针livenessProbe"></a>存活探针livenessProbe</h1><p>用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启。如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功。</p><p>有时应用程序可能因为某些原因（后端服务故障等）导致暂时无法对外提供服务，但应用软件没有终止，导致K8S无法隔离有故障的pod，调用者可能会访问到有故障的pod，导致业务不稳定。K8S提供livenessProbe来检测应用程序是否正常运行，并且对相应状况进行相应的补救措施。</p><p>重启策略：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为 Success</p><h2 id="探测方式-1"><a href="#探测方式-1" class="headerlink" title="探测方式"></a>探测方式</h2><ul><li>exec：通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li>httpGet：通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li>tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><h2 id="探测参数-1"><a href="#探测参数-1" class="headerlink" title="探测参数"></a>探测参数</h2><ul><li>initialDelaySeconds：容器启动后要等待多少秒后存活和就绪探测器才被初始化，默认是 0 秒，最小值是 0。</li><li>periodSeconds：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。</li><li>timeoutSeconds：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</li><li>successThreshold：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。存活探测的这个值必须是 1。最小值是 1。</li><li>failureThreshold：当探测失败时，Kubernetes 的重试次数。存活探测情况下的放弃就意味着重新启动容器。就绪探测情况下的放弃 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。</li></ul><p>HTTP 探测器可以在 httpGet 上配置额外的字段：</p><ul><li>host：连接使用的主机名，默认是 Pod 的 IP。也可以在 HTTP 头中设置 “Host” 来代替。</li><li>scheme ：用于设置连接主机的方式（HTTP 还是 HTTPS）。默认是 HTTP。</li><li>path：访问 HTTP 服务的路径。</li><li>httpHeaders：请求中自定义的 HTTP 头。HTTP 头字段允许重复。</li><li>port：访问容器的端口号或者端口名。如果数字必须在 1 ～ 65535 之间。</li></ul><h2 id="TKE中实践-1"><a href="#TKE中实践-1" class="headerlink" title="TKE中实践"></a>TKE中实践</h2><p>这里存活探针不一样，加入连续探测多次失败会根据你设置的重启策略来看是否让pod重启，这里我们配置一个单独的存活探针的pod。也是nignx服务，并探测81端口。配置的重启策略是always，下面我们看看pod会怎么样。</p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/5.png" alt="upload-image"> </p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/6.png" alt="upload-image"> </p><p>这边我们从事件看出，如果联系探测3次失败就会重启pod。</p><p><img src="/img/TKE's-first-knowledge-of-container-detectors/7.png" alt="upload-image"></p><h1 id="启动探针startupProbe"><a href="#启动探针startupProbe" class="headerlink" title="启动探针startupProbe"></a>启动探针startupProbe</h1><p>startupProbe是在k8s v1.16加入了alpha版，有时候，会有一些现有的应用程序在启动时需要较多的初始化时间。要不影响对引起探测死锁的快速响应，这种情况下，设置存活探测参数是要技巧的。技巧就是使用一个命令来设置启动探测，针对HTTP 或者 TCP 检测，可以通过设置 failureThreshold * periodSeconds参数来保证有足够长的时间应对糟糕情况下的启动时间。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-port</span><br>  <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">hostPort:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">liveness-port</span><br>  <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br><br><span class="hljs-attr">startupProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">liveness-port</span><br>  <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">30</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>有了启动探测，应用程序将会有最多 5 分钟(30 * 10 &#x3D; 300s) 的时间来完成它的启动。 一旦启动探测成功一次，存活探测任务就会接管对容器的探测，对容器死锁可以快速响应。 如果启动探测一直没有成功，容器会在 300 秒后被杀死，并且根据restartPolicy来设置 Pod 状态。</p><h2 id="探测方式-2"><a href="#探测方式-2" class="headerlink" title="探测方式"></a>探测方式</h2><ul><li>exec：通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li>httpGet：通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li>tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><h2 id="探测参数-2"><a href="#探测参数-2" class="headerlink" title="探测参数"></a>探测参数</h2><ul><li>initialDelaySeconds：容器启动后要等待多少秒后存活和就绪探测器才被初始化，默认是 0 秒，最小值是 0。</li><li>periodSeconds：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。</li><li>timeoutSeconds：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</li><li>successThreshold：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。存活探测的这个值必须是 1。最小值是 1。</li><li>failureThreshold：当探测失败时，Kubernetes 的重试次数。存活探测情况下的放弃就意味着重新启动容器。就绪探测情况下的放弃 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。</li></ul><p>HTTP 探测器可以在 httpGet 上配置额外的字段：</p><ul><li>host：连接使用的主机名，默认是 Pod 的 IP。也可以在 HTTP 头中设置 “Host” 来代替。</li><li>scheme ：用于设置连接主机的方式（HTTP 还是 HTTPS）。默认是 HTTP。</li><li>path：访问 HTTP 服务的路径。</li><li>httpHeaders：请求中自定义的 HTTP 头。HTTP 头字段允许重复。</li><li>port：访问容器的端口号或者端口名。如果数字必须在 1 ～ 65535 之间。</li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</a></p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>Probe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上部署metrics-server</title>
    <link href="/2020/08/13/2020-08-13-Deploy-metrics_server-on-TKE/"/>
    <url>/2020/08/13/2020-08-13-Deploy-metrics_server-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>kubectl top 是基础命令，但是需要部署配套的组件才能获取到监控值</p><ul><li><p>1.8以下：部署 heapter</p></li><li><p>1.8以上：部署 metric-server</p></li></ul><p>下面我们来在TKE上配置下1.8版本以上的metric-server</p><h1 id="获取metric-server的部署yaml"><a href="#获取metric-server的部署yaml" class="headerlink" title="获取metric-server的部署yaml"></a>获取metric-server的部署yaml</h1><p>登录能执行kubectl命令的客户端机器，执行下面命令下载</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># git clone https://github.com/kubernetes-incubator/metrics-server</span><br><span class="hljs-comment"># cd metrics-server/manifests/base</span><br>[root@VM_0_13_centos base]<span class="hljs-comment"># ll</span><br>total 24<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 298 </span>Jul <span class="hljs-number"> 8 </span>11:57 apiservice.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1386 </span>Aug<span class="hljs-number"> 13 </span>10:35 deployment.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 158 </span>Jul <span class="hljs-number"> 8 </span>11:57 kustomization.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 239 </span>Jul <span class="hljs-number"> 8 </span>11:57 pdb.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1714 </span>Jul <span class="hljs-number"> 8 </span>11:57 rbac.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 297 </span>Jul <span class="hljs-number"> 8 </span>11:57 service.yaml<br></code></pre></td></tr></table></figure><h1 id="修改yaml文件参数"><a href="#修改yaml文件参数" class="headerlink" title="修改yaml文件参数"></a>修改yaml文件参数</h1><p>修改对应的metrics-server-deployment.yaml文件，需要改镜像源，国外的镜像需要科学上网下载，还需要添加如下参数</p><p>command:<br>- &#x2F;metrics-server<br>- –kubelet-preferred-address-types&#x3D;InternalIP<br>- –kubelet-insecure-tls</p><p>不添加参数报错，metrics-server 启动提示no metrics known for pod?</p><p>首先需要知道的是metrics-server默认会使用hostname 来进行通讯。</p><p>如果没有进行相应配置的话，那么通过hostname是无法正常通讯的。</p><p>所以使用默认命令行启动，由于无法正常通过hostname通信就会产生错误， 从而提示no metrics known for pod</p><p>实际上metrics-server不只支持通过hostname进行通讯，还支持使用IP来进行通讯，只不过需要显式指定命令行参数：</p><p>–kubelet-preferred-address-types&#x3D;InternalIP</p><p>其中InternalIP可以修改为以下值:</p><p>InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP (具体含义这里就不展开了，感兴趣的可以自行了解。)</p><p>但是呢，事情到这里还没有结束，当你加上命令行参数后，会发现出现另一个错误x509: cannot validate certificate。</p><p>这是由于证书验证不通过导致的，所以我们需要让metrics-server忽略掉证书错误。而忽略证书错误也是有命令行支持的，我们添加如下命令行参数就可以解决了：</p><p>–kubelet-insecure-tls</p><p>修改后的yaml如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@VM_0_13_centos</span> <span class="hljs-string">base</span>]<span class="hljs-comment"># cat deployment.yaml</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">metrics-server</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-dir</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/mirrors/metrics-server-amd64:v0.3.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">command:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/metrics-server</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-preferred-address-types=InternalIP</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-insecure-tls</span><br>        <span class="hljs-attr">args:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--cert-dir=/tmp</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--secure-port=4443</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">main-port</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">4443</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">main-port</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">runAsNonRoot:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-dir</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br></code></pre></td></tr></table></figure><h1 id="执行apply部署对应的yaml文件"><a href="#执行apply部署对应的yaml文件" class="headerlink" title="执行apply部署对应的yaml文件"></a>执行apply部署对应的yaml文件</h1><p>我们在对应的部署目录文件中发现有一个kustomization.yaml，这个文件的作用可以先了解下kustomize这个项目。</p><p>kustomize是sig-cli的一个子项目，它的设计目的是给kubernetes的用户提供一种可以重复使用同一套配置的声明式应用管理，从而在配置工作中用户只需要管理和维护kubernetes的API对象，而不需要学习或安装其它的配置管理工具，也不需要通过复制粘贴来得到新的环境的配置。</p><p>我们这里不做kustomize的部署，所以后续不需要applykustomization.yaml这个yaml。</p><p>我们这里直接部署目录下的所有yaml文件，有一个报错不用管，是因为我们没安装kustomize。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM_0_13_centos base]# kubectl apply -f .<br>apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io unchanged<br>deployment.apps/metrics-<span class="hljs-keyword">server</span> configured<br>poddisruptionbudget.<span class="hljs-keyword">policy</span>/metrics-<span class="hljs-keyword">server</span> unchanged<br>clusterrole.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/<span class="hljs-keyword">system</span>:aggregated-metrics-reader unchanged<br>serviceaccount/metrics-<span class="hljs-keyword">server</span> unchanged<br>rolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/metrics-<span class="hljs-keyword">server</span>-auth-reader unchanged<br>clusterrolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/metrics-<span class="hljs-keyword">server</span>:<span class="hljs-keyword">system</span>:auth-delegator unchanged<br>clusterrole.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/<span class="hljs-keyword">system</span>:metrics-<span class="hljs-keyword">server</span> unchanged<br>clusterrolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/<span class="hljs-keyword">system</span>:metrics-<span class="hljs-keyword">server</span> unchanged<br>service/metrics-<span class="hljs-keyword">server</span> unchanged<br>error: unable <span class="hljs-keyword">to</span> recognize &quot;kustomization.yaml&quot;: <span class="hljs-keyword">no</span> matches <span class="hljs-keyword">for</span> kind &quot;Kustomization&quot; <span class="hljs-keyword">in</span> <span class="hljs-keyword">version</span> &quot;kustomize.config.k8s.io/v1beta1&quot;<br></code></pre></td></tr></table></figure><h1 id="验证和执行命令查看pod和node的内存及cpu指标"><a href="#验证和执行命令查看pod和node的内存及cpu指标" class="headerlink" title="验证和执行命令查看pod和node的内存及cpu指标"></a>验证和执行命令查看pod和node的内存及cpu指标</h1><p>这边metrics-server运行正常后，执行命令是可以正常查看node和pod的性能指标的</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@VM_0_13_centos base]</span># kubectl get pod -n kube-system | grep metrics-server<br>metrics-server-6b59b7fc98-wkvmz         <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          136m<br><br><span class="hljs-string">[root@VM_0_13_centos base]</span># kubectl top nodes<br>NAME            CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%<br><span class="hljs-number">10.168.1.4</span>      432m         <span class="hljs-number">5</span>%     7360Mi          <span class="hljs-number">52</span>%<br><span class="hljs-number">10.168.1.5</span>      1342m        <span class="hljs-number">34</span>%    5489Mi          <span class="hljs-number">82</span>%<br><span class="hljs-number">10.168.100.22</span>   109m         <span class="hljs-number">2</span>%     4401Mi          <span class="hljs-number">62</span>%<br><span class="hljs-string">[root@VM_0_13_centos base]</span># kubectl top node <span class="hljs-number">10</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span><br>NAME         CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%<br><span class="hljs-number">10.168.1.4</span>   432m         <span class="hljs-number">5</span>%     7360Mi          <span class="hljs-number">52</span>%<br><span class="hljs-string">[root@VM_0_13_centos base]</span># kubectl top pod -n kube-system<br>NAME                                    CPU(cores)   MEMORY(bytes)<br>ccs-log-collector-7h4qv                 8m           182Mi<br>ccs-log-collector-jgh88                 4m           499Mi<br>ccs-log-collector-t4gsc                 3m           187Mi<br>cls-provisioner-5c5dcfb9fc-bsjrb        1m           9Mi<br>coredns-7f47d46d54-257rj                2m           13Mi<br>coredns-7f47d46d54-h6czg                3m           23Mi<br>csi-attacher-cfsplugin-<span class="hljs-number">0</span>                2m           14Mi<br>csi-coslauncher-mc488                   1m           30Mi<br>csi-coslauncher-nxjsb                   1m           60Mi<br>csi-coslauncher-wfs7m                   1m           11Mi<br>csi-cosplugin-external-runner-<span class="hljs-number">0</span>         2m           14Mi<br>csi-cosplugin-s8xf6                     1m           6Mi<br>csi-cosplugin-vzdfn                     1m           7Mi<br>csi-cosplugin-xpkbp                     1m           33Mi<br>csi-nodeplugin-cfsplugin-j467w          1m           24Mi<br>csi-nodeplugin-cfsplugin-jpctb          1m           12Mi<br>csi-nodeplugin-cfsplugin-r2kjc          1m           10Mi<br>csi-provisioner-cfsplugin-<span class="hljs-number">0</span>             2m           16Mi<br>ip-masq-agent-cvrsl                     1m           10Mi<br>ip-masq-agent-hv2p6                     1m           6Mi<br>ip-masq-agent-zfmg5                     1m           8Mi<br>kube-proxy-hzzhb                        14m          74Mi<br>kube-proxy-lrh8l                        21m          45Mi<br>kube-proxy-pjbmm                        15m          64Mi<br>kubernetes-dashboard-654cb6dc56-pql6z   1m           16Mi<br>l7-lb-controller-5b49444bc9-wbt8j       2m           28Mi<br>metrics-server-6b59b7fc98-wkvmz         1m           18Mi<br>swift-566d576-2rtsz                     1m           25Mi<br>tiller-deploy-698956c985-7njgz          1m           15Mi<br>tke-bridge-agent-c86n7                  2m           14Mi<br>tke-bridge-agent-hstm7                  2m           10Mi<br>tke-bridge-agent-sl5j5                  1m           9Mi<br>tke-cni-agent-fllwd                     0m           4Mi<br>tke-cni-agent-js9ls                     0m           18Mi<br>tke-cni-agent-q7vb8                     0m           13Mi<br>tke-eni-agent-694nz                     1m           28Mi<br>tke-eni-agent-sskl9                     1m           8Mi<br>tke-eni-agent-vkt92                     1m           14Mi<br>tke-eni-ipamd-b866c887f-bgq5z           3m           20Mi<br>tke-log-agent-6jt2l                     2m           42Mi<br>tke-log-agent-jwpwq                     994m         96Mi<br>tke-log-agent-vmndp                     4m           112Mi<br>tke-persistent-event-5d6fc9bccd-nrsqp   1m           82Mi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE中挂载文件到CFS子目录</title>
    <link href="/2020/08/07/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/"/>
    <url>/2020/08/07/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/</url>
    
    <content type="html"><![CDATA[<p>本次我们来讲如何在TKE容器中多个pod挂载文件到文件服务器CFS不同的子目录</p><h1 id="首先创建好CFS文件服务器"><a href="#首先创建好CFS文件服务器" class="headerlink" title="首先创建好CFS文件服务器"></a>首先创建好CFS文件服务器</h1><p>登录CFS控制台，创建一个文件系统</p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/1.png" alt="upload-image"> </p><h1 id="创建CFS子目录"><a href="#创建CFS子目录" class="headerlink" title="创建CFS子目录"></a>创建CFS子目录</h1><p>如何创建CFS的子目录呢，这里我们找一个可以访问cfs内网ip的服务器，先将cfs的根目录下挂载到&#x2F;root&#x2F;cfs，然后在&#x2F;root&#x2F;nfs下创建2个子目录tke和tke-1，注意创建完目录后记得解挂&#x2F;root&#x2F;nfs这个目录，对应的子目录在文件系统中已经创建好了。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-5</span>-centos ~]# mkdir nfs<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-5</span>-centos nfs]# sudo mount -t nfs -o vers=4.0 1.1.1.1:/ /root/nfs<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-5</span>-centos nfs]# mkdir tke<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-5</span>-centos nfs]# mkdir tke<span class="hljs-string">-1</span><br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-5</span>-centos nfs]# cd<br>[root@VM<span class="hljs-string">-1</span><span class="hljs-string">-5</span>-centos ~]# umount /root/nfs<br></code></pre></td></tr></table></figure><p>corresponding condition of pod readiness gate “platform.tkex&#x2F;InPlace-Update-Ready” does not exist., the status of pod readiness gate “cloud.tencent.com&#x2F;load-balancer-backendgroup-ready” is not “True”, but False</p><h1 id="TKE中创建StorageClass"><a href="#TKE中创建StorageClass" class="headerlink" title="TKE中创建StorageClass"></a>TKE中创建StorageClass</h1><p>登录tke，在集群中新建sc</p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/2.png" alt="upload-image"> </p><h1 id="创建PV"><a href="#创建PV" class="headerlink" title="创建PV"></a>创建PV</h1><p>这里我们分别为tke和tke-1创建一个pv</p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/3.png" alt="upload-image"> </p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/4.png" alt="upload-image"> </p><h1 id="创建PVC"><a href="#创建PVC" class="headerlink" title="创建PVC"></a>创建PVC</h1><p>我们创建2个pvc关联上一步创建的pv</p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/5.png" alt="upload-image"> </p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/6.png" alt="upload-image"> </p><h1 id="挂载PVC"><a href="#挂载PVC" class="headerlink" title="挂载PVC"></a>挂载PVC</h1><p>我们创建2个测试的nginx镜像pod来挂载2个pvc</p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/7.png" alt="upload-image"> </p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/8.png" alt="upload-image"> </p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>查看pod启动成功，挂载成功，在CFS中查看也能看到对应的2条挂载信息</p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/9.png" alt="upload-image"> </p><p><img src="/img/2020-08-07-Mount-files-to-CFS-subdirectory-in-TKE/10.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>NFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE挂载COS桶容器目录权限如何设置</title>
    <link href="/2020/08/05/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/"/>
    <url>/2020/08/05/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了在tke集群中挂载cos桶如何配置目录权限问题</p><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>用户在tke的集群中创建工作负载并把某一个对应的&#x2F;data目录挂载到cos桶的根目录，在镜像构建的时候有把&#x2F;data目录设置权限为755，但是运行容器后成功挂载&#x2F;data&#x2F;目录到cos桶的根目录，但是发现用非root账号确无法访问&#x2F;data下面的文件，这边镜像的启动用户是非root用户，查看容器内&#x2F;data目录权限变成了700，为什么这边设置的目录权限是755，挂载到COS后就变成了700权限呢？</p><h1 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h1><p>这边首先进行了简单的自测，启动2个nginx工作负载，一个负载将目录&#x2F;etc&#x2F;nginx&#x2F;conf.d挂载到cos桶上，一个正常运行不挂载，然后发现确实挂载cos后，默认会把目录权限变成700。</p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/1.png" alt="upload-image"> </p><p>这边咨询的cos的同事，他们说有一个参数是用来控制目录权限的，如果挂载时候不加这个参数就默认变成700，加了这个参数才不会。现在问题已经大致明确了，就是这个参数没有设置的原因，那么这个参数该怎么使用呢？</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-oallow_other</span><br>如果要允许其他用户访问挂载文件夹，可以在运行 COSFS 的时候指定该参数。<br></code></pre></td></tr></table></figure><h1 id="配置-oallow-other参数"><a href="#配置-oallow-other参数" class="headerlink" title="配置-oallow_other参数"></a>配置-oallow_other参数</h1><p>其实在使用cos桶进行挂载的时候在pv创建界面是可以进行参数设置的，但是由于我们习惯在控制直接创建pvc关联pv，然后pv会自动创建导致很多人没有去关注这个cos的参数项配置。</p><p>如果你想配置-oallow_other这个参数，可以通过2种方式进行配置，一种是编写yaml文件来创建pv,pvc，这种方式可以参考这个指导 <a href="https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_COSFS.md">https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_COSFS.md</a></p><p>另外一种方式就是通过控制台来配置参数，具体操作如下</p><h2 id="控制台创建pv，配置参数"><a href="#控制台创建pv，配置参数" class="headerlink" title="控制台创建pv，配置参数"></a>控制台创建pv，配置参数</h2><p>在挂载选项填入-oallow_other这个参数，想填写多个参数空格分隔，cos提供的参数配置选项可以参考<a href="https://cloud.tencent.com/document/product/436/6883#.E5.B8.B8.E7.94.A8.E6.8C.82.E8.BD.BD.E9.80.89.E9.A1.B9">https://cloud.tencent.com/document/product/436/6883#.E5.B8.B8.E7.94.A8.E6.8C.82.E8.BD.BD.E9.80.89.E9.A1.B9</a></p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/2.png" alt="upload-image"> </p><h2 id="创建pvc关联创建的pv"><a href="#创建pvc关联创建的pv" class="headerlink" title="创建pvc关联创建的pv"></a>创建pvc关联创建的pv</h2><p>新建pvc关联创建好的pv</p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/3.png" alt="upload-image"> </p><h2 id="在工作负载中挂载创建好的pvc"><a href="#在工作负载中挂载创建好的pvc" class="headerlink" title="在工作负载中挂载创建好的pvc"></a>在工作负载中挂载创建好的pvc</h2><p>创建nginx的工作负载挂载创建好的pvc</p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/4.png" alt="upload-image"> </p><h2 id="验证对应的目录权限是否正确"><a href="#验证对应的目录权限是否正确" class="headerlink" title="验证对应的目录权限是否正确"></a>验证对应的目录权限是否正确</h2><p>进入容器中查看&#x2F;etc&#x2F;nginx&#x2F;conf.d的目录不再是700，创建一个test文件，也挂载到了cos桶中</p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/5.png" alt="upload-image"> </p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/6.png" alt="upload-image"> </p><h2 id="上传一个文件到cos桶看容器中是否可以访问"><a href="#上传一个文件到cos桶看容器中是否可以访问" class="headerlink" title="上传一个文件到cos桶看容器中是否可以访问"></a>上传一个文件到cos桶看容器中是否可以访问</h2><p>上传一个1.txt文件到cos桶，从容器中看文件权限是777，可以进行正常访问</p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/7.png" alt="upload-image"> </p><p><img src="/img/2020-08-05-How-to-set-the-permission-of-TKE-mount-COS-bucket-container-directory/8.png" alt="upload-image"></p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>COS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE中在节点上获取容器资源配置</title>
    <link href="/2020/07/31/2020-07-31-Obtain-container-resource-configuration-on-the-node-in-TKE/"/>
    <url>/2020/07/31/2020-07-31-Obtain-container-resource-configuration-on-the-node-in-TKE/</url>
    
    <content type="html"><![CDATA[<p>本章讲述了如何获取容器的资源配置</p><h1 id="容器的实现原理"><a href="#容器的实现原理" class="headerlink" title="容器的实现原理"></a>容器的实现原理</h1><p>从本质上，容器其实就是一种沙盒技术。就好像把应用隔离在一个盒子内，使其运行。因为有了盒子边界的存在，应用于应用之间不会相互干扰。并且像集装箱一样，拿来就走，随处运行。其实这就是 PaaS 的理想状态。</p><p>实现容器的核心，就是要生成限制应用运行时的边界。我们知道，编译后的可执行代码加上数据，叫做程序。而把程序运行起来后，就变成了进程，也就是所谓的应用。如果能在应用启动时，给其加上一个边界，这样不就能实现期待的沙盒吗？</p><p>在 Linux 中，实现容器的边界，主要有两种技术 Cgroups 和 Namespace. Cgroups 用于对运行的容器进行资源的限制，Namespace 则会将容器隔离起来，实现边界。</p><p>容器的限制：Cgroups</p><p>通过 Namespace 技术，我们实现了容器和容器间，容器与宿主机之间的隔离。但这还不够，想象这样一种场景，宿主机上运行着两个容器。虽然在容器间相互隔离，但以宿主机的视角来看的话，其实两个容器就是两个特殊的进程，而进程之间自然存在着竞争关系，自然就可以将系统的资源吃光。当然，我们不能允许这么做的。</p><p>这里可以查看cpu，内存，我们拿查看内存举例，&#x2F;proc&#x2F;meminfo是了解Linux系统内存使用状况的主要接口，那么我们如何查看容器的这个接口文件获取容器的内存数据来进行统计。</p><p>首先获取容器的pid</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"># docker inspect -f </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.State.Pid</span>&#125;&#125;</span><span class="language-xml"> b930cd9c4ba9</span><br><span class="language-xml">6298</span><br></code></pre></td></tr></table></figure><p>找到容器的cgroup文件，并获取cgroup文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># cd /proc/6298</span><br>[root<span class="hljs-variable">@VM_1_4_centos</span> <span class="hljs-number">6298</span>]<span class="hljs-comment"># cat cgroup</span><br><span class="hljs-number">12</span><span class="hljs-symbol">:blkio</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">11</span><span class="hljs-symbol">:cpuset</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">10</span><span class="hljs-symbol">:cpu</span>,<span class="hljs-symbol">cpuacct:</span>/kubepods/burstable/pod17b4aaff-dd14<span class="hljs-number">-4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">9</span><span class="hljs-symbol">:devices</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">8</span><span class="hljs-symbol">:hugetlb</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">7</span><span class="hljs-symbol">:freezer</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">6</span><span class="hljs-symbol">:net_cls</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">5</span><span class="hljs-symbol">:rdma</span><span class="hljs-symbol">:/</span><br><span class="hljs-number">4</span><span class="hljs-symbol">:perf_event</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">3</span><span class="hljs-symbol">:memory</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">2</span><span class="hljs-symbol">:pids</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br><span class="hljs-number">1</span><span class="hljs-symbol">:name=systemd</span><span class="hljs-symbol">:/kubepods/burstable/pod17b4aaff-dd14-</span><span class="hljs-number">4</span>ba1-a735<span class="hljs-number">-5</span>e6a7725fbd0/b930cd9c4ba969a1366da5c79fbce8a0a6690649d0238d9f5fc34f8269fc43b5<br></code></pre></td></tr></table></figure><p>去sys目录下获取&#x2F;proc&#x2F;meminfo</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/m</span>emory<span class="hljs-regexp">/kubepods/</span>burstable/pod17b4aaff-dd14-<span class="hljs-number">4</span>ba1-a735-<span class="hljs-number">5</span>e6a7725fbd<br></code></pre></td></tr></table></figure><p>查看对应的文件获取容器的内存信息</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@VM_1_4_centos pod17b4aaff-dd14-4ba1-a735-5e6a7725fbd0]<span class="hljs-comment"># cat memory.meminfo</span><br><span class="hljs-section">MemTotal:         102400 kB</span><br><span class="hljs-section">MemFree:           78776 kB</span><br><span class="hljs-section">Buffers:               0 kB</span><br><span class="hljs-section">Cached:                0 kB</span><br><span class="hljs-section">SwapCached:            0 kB</span><br><span class="hljs-section">Active:                0 kB</span><br><span class="hljs-section">Inactive:              0 kB</span><br><span class="hljs-section">Active(anon):          0 kB</span><br><span class="hljs-section">Inactive(anon):        0 kB</span><br><span class="hljs-section">Active(file):          0 kB</span><br><span class="hljs-section">Inactive(file):        0 kB</span><br><span class="hljs-section">Unevictable:           0 kB</span><br><span class="hljs-section">Mlocked:               0 kB</span><br><span class="hljs-section">SwapTotal:             0 kB</span><br><span class="hljs-section">SwapFree:              0 kB</span><br><span class="hljs-section">Dirty:                 0 kB</span><br><span class="hljs-section">Writeback:             0 kB</span><br><span class="hljs-section">AnonPages:             0 kB</span><br><span class="hljs-section">Mapped:                0 kB</span><br><span class="hljs-section">Shmem:                 0 kB</span><br><span class="hljs-section">Slab:                  0 kB</span><br><span class="hljs-section">SReclaimable:          0 kB</span><br><span class="hljs-section">SUnreclaim:            0 kB</span><br><span class="hljs-section">KernelStack:           0 kB</span><br><span class="hljs-section">PageTables:            0 kB</span><br><span class="hljs-section">NFS_Unstable:          0 kB</span><br><span class="hljs-section">Bounce:                0 kB</span><br><span class="hljs-section">WritebackTmp:          0 kB</span><br><span class="hljs-section">CommitLimit:           0 kB</span><br><span class="hljs-section">Committed_AS:          0 kB</span><br><span class="hljs-section">VmallocTotal:          0 kB</span><br><span class="hljs-section">VmallocUsed:           0 kB</span><br><span class="hljs-section">VmallocChunk:          0 kB</span><br><span class="hljs-section">HardwareCorrupted:     0 kB</span><br><span class="hljs-section">AnonHugePages:         0 kB</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上搭建集群Dashboard</title>
    <link href="/2020/07/30/2020-07-30-Build-dashboard-on-TKE/"/>
    <url>/2020/07/30/2020-07-30-Build-dashboard-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>如果需要将TKE的信息展示给多个部门的人查看，但是又不想让他们通过控制台查看，这边可以搭建一个dashborad用来展示。</p><h1 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h1><p>因为dashborad需要https的访问，这边需要提供下证书，这个证书可以是自建从，也可以从腾讯云上申请一个免费的1年证书</p><p><img src="/img/2020-07-30-Build-dashboard-on-TKE/1.png" alt="upload-image"></p><p><img src="/img/2020-07-30-Build-dashboard-on-TKE/2.png" alt="upload-image"> </p><p>购买成功后，需要审核，审核通过可以下载对应的证书和rsa key</p><p><img src="/img/2020-07-30-Build-dashboard-on-TKE/3.png" alt="upload-image"> </p><h1 id="创建命名空间来部署dashboard"><a href="#创建命名空间来部署dashboard" class="headerlink" title="创建命名空间来部署dashboard"></a>创建命名空间来部署dashboard</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># kubectl  <span class="hljs-keyword">create</span> <span class="hljs-keyword">namespace</span> kubernetes-dashboard<br></code></pre></td></tr></table></figure><h1 id="引用申请的证书创建secret"><a href="#引用申请的证书创建secret" class="headerlink" title="引用申请的证书创建secret"></a>引用申请的证书创建secret</h1><p>将证书上传到linux机器上$HOME&#x2F;certs目录，并分别改名为tls.key和tls.crt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$HOME</span>/certs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl create secret generic kubernetes-dashboard-certs --from-file=<span class="hljs-variable">$HOME</span>/certs -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h1 id="创建deployement"><a href="#创建deployement" class="headerlink" title="创建deployement"></a>创建deployement</h1><p>首先拉取yaml文件，需要修改下yaml文件中的部分配置，再apply这个yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ vim recommended.yaml<br><br><span class="hljs-comment"># 把创建 kubernetes-dashboard-certs Secret 注释掉，前面已通过命令创建</span><br><br><span class="hljs-comment">#apiVersion: v1</span><br><span class="hljs-comment">#kind: Secret</span><br><span class="hljs-comment">#metadata:</span><br><span class="hljs-comment">#  labels:</span><br><span class="hljs-comment">#    k8s-app: kubernetes-dashboard</span><br><span class="hljs-comment">#  name: kubernetes-dashboard-certs</span><br><span class="hljs-comment">#  namespace: kubernetes-dashboard</span><br><span class="hljs-comment">#type: Opaque</span><br><br><span class="hljs-comment"># 添加ssl证书路径，关闭自动更新证书，添加多长时间登出</span><br><br>      containers:<br>      - args:<br>        #- --auto-generate-certificates<br>        - <span class="hljs-attribute">--tls-cert-file</span>=/tls.crt<br>        - <span class="hljs-attribute">--tls-key-file</span>=/tls.key<br>        - <span class="hljs-attribute">--token-ttl</span>=3600 #这个是登陆token的过期时间，如果不想重复输入token,可以设置长点<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># kubectl  apply <span class="hljs-operator">-</span>f recommended.yaml<br><br>[root<span class="hljs-variable">@VM</span>_1_4_centos <span class="hljs-operator">~</span>]# kubectl  <span class="hljs-keyword">get</span> pods <span class="hljs-operator">-</span>n kubernetes<span class="hljs-operator">-</span>dashboard<br>NAME                                         READY   STATUS    RESTARTS   AGE<br>dashboard<span class="hljs-operator">-</span>metrics<span class="hljs-operator">-</span>scraper<span class="hljs-number">-555</span>dc8bbb4<span class="hljs-operator">-</span>c8wtd   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">24</span>h<br>kubernetes<span class="hljs-operator">-</span>dashboard<span class="hljs-number">-755</span>c66fc9f<span class="hljs-operator">-</span>p4tjd        <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">135</span>m<br></code></pre></td></tr></table></figure><h1 id="创建登陆用户"><a href="#创建登陆用户" class="headerlink" title="创建登陆用户"></a>创建登陆用户</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># vim create-admin.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>创建账户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># kubectl apply -f <span class="hljs-keyword">create</span>-<span class="hljs-keyword">admin</span>.yaml<br></code></pre></td></tr></table></figure><h1 id="获取登陆token"><a href="#获取登陆token" class="headerlink" title="获取登陆token"></a>获取登陆token</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># kubectl -n kubernetes-dashboard describe secret <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> -<span class="hljs-params">n</span> <span class="hljs-params">kubernetes</span>-<span class="hljs-params">dashboard</span> <span class="hljs-params">get</span> <span class="hljs-params">secret</span> | <span class="hljs-params">grep</span> <span class="hljs-params">admin</span>-<span class="hljs-params">user</span> | <span class="hljs-params">awk</span> &#x27;&#123;<span class="hljs-params">print</span> $1&#125;&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="修改访问的svc为lb类型提供公网访问"><a href="#修改访问的svc为lb类型提供公网访问" class="headerlink" title="修改访问的svc为lb类型提供公网访问"></a>修改访问的svc为lb类型提供公网访问</h1><p>Dashborad会创建2个svc，kubernetes-dashboard是用来页面访问的</p><p><img src="/img/2020-07-30-Build-dashboard-on-TKE/4.png" alt="upload-image"> </p><h1 id="浏览器输入公网ip用https访问"><a href="#浏览器输入公网ip用https访问" class="headerlink" title="浏览器输入公网ip用https访问"></a>浏览器输入公网ip用https访问</h1><p>输入<a href="https://vip/">https://vip</a> 后会让你输入token，将第6步获取的token输入，就可以进行查看</p><p><img src="/img/2020-07-30-Build-dashboard-on-TKE/5.png" alt="upload-image"></p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>Dashboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE中使用lb直连获取客户端真实IP</title>
    <link href="/2020/07/28/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/"/>
    <url>/2020/07/28/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/</url>
    
    <content type="html"><![CDATA[<p>我们在使用TKE的过程中会遇到一个这样的场景，就是我在服务端想获取到有哪些客户端在访问我，并且获取到客户端的真实ip。但是在k8s集群中经过多次的网络的转发，一般是无法获取到客户端真实ip。</p><p>为了满足这个常见TKE这边提供了lb直连pod的方式来获取客户端真实的ip，其实tke中能够实现这个方案的主要还是基于在vpc-cni的网络模式下实现的，因为vpc-cni模式可以使pod处于和node节点，vpc同一个网络下，而lb也是在vpc的网络中，因此这边lb就可以直接将请求转发到pod上，下面我们来说一下如何在tke中使用这种模式。</p><p>这边还是分为2种类型的工作负载来进行实践操作。</p><h1 id="Deployment使用lb直连"><a href="#Deployment使用lb直连" class="headerlink" title="Deployment使用lb直连"></a>Deployment使用lb直连</h1><p>一般我们创建deploy类型的pod，关联创建svc的时候是无法选择直连lb的类型的，因为这边直连需要pod选择vpc-cni网络模式才可以，我们这边先手动创建一个正常的deployement，再去手动修改svc和pod的网络模式即可</p><p>我们这里在控制台创建了一个pod</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/1.png" alt="upload-image"></p><p>我们可以测试一下非直连的pod，通过10.168.1.5这个机器上发起访问，发现pod日志并没有对应的客户端ip信息</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/2.png" alt="upload-image"> </p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/3.png" alt="upload-image"> </p><p>下面修改对应的svc类型为直连模式，勾选这个采用负载均衡直连pod的模式</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/4.png" alt="upload-image"> </p><p>修改下对应的pod为vpc-cni网络模式，在pod中加上参数</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">tke.cloud.tencent.com/networks</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tke-route-eni</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/5.png" alt="upload-image"> </p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/6.png" alt="upload-image"> </p><p>现在pod的网络模式已经是vpc-cni了，并且svc也是直连了，下面我们来访问下，看日志能否看到client的ip</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/7.png" alt="upload-image"> </p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/8.png" alt="upload-image"> </p><p>经过测试是可以获取到客户端的ip的。</p><h1 id="StatefulSet使用lb直连"><a href="#StatefulSet使用lb直连" class="headerlink" title="StatefulSet使用lb直连"></a>StatefulSet使用lb直连</h1><p>StatefulSet因为支持在界面创建vpc-cni的网路模式，所以我们只需要在控制台配置就行。</p><p>我们不选择vpc-cni模式是没有lb直连选项的</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/9.png" alt="upload-image"> </p><p>勾选了vpc-cni模式才会出现lb直连选项，所以我们需要在创建的时候选择vpc-cni，并选择lb直连</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/10.png" alt="upload-image"> </p><p>下面我们来测试下创建好的sts的直连nginx服务</p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/11.png" alt="upload-image"> </p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/12.png" alt="upload-image"> </p><p><img src="/img/2020-07-28-Use-lb-direct-connection-in-TKE-to-get-the-real-IP-of-the-client/13.png" alt="upload-image"></p><p>经过测试，这这边创建好的sts类型的nginx的pod也可以获取到客户端的真实ip</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE集群中deployment使用vpc-cni模式</title>
    <link href="/2020/07/27/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/"/>
    <url>/2020/07/27/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/</url>
    
    <content type="html"><![CDATA[<p>TKE集群中的网络模式分为Global Router和vpc-cni这2种，有的集群是创建的时候使用Global Router的网络模式，但是后续开启了vpc-cni的网络模式，因为集群是可以同时兼容2种网络模式。</p><p>在使用vpc-cni的网络模式大家会有一个疑惑，就是为什么我开启了vpc-cni模式后，创建的工作负载中的pod ip没有在我配置的子网中，没有和vpc在一个网段。</p><p>其实并不是开启了vpc-cni模式后，创建新的pod或者重建pod就会选择vpc-cni模式，除非你在创建集群的时候就选择的vpc-cni模式，那样创建出来的所有pod分配的ip都会和vpc在一个网段。其实在tke集群中有一个参数来控制你的pod是否选择vpc-cni模式，下面我们来说说如何使用这个参数，不同类型的工作负载如何选择vpc-cni模式。</p><h1 id="StatefulSet如何选择vpc-cni模式"><a href="#StatefulSet如何选择vpc-cni模式" class="headerlink" title="StatefulSet如何选择vpc-cni模式"></a>StatefulSet如何选择vpc-cni模式</h1><p>一般我们创建StatefulSet的时候是可以在控制台选择是否选择vpc-cni模式，使用方法如下，在创建StatefulSet时候选择高级选项，点击是否选择vpc-cni模式即可，StatefulSet还可以选择是否配置固定ip模式</p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/1.png" alt="upload-image"> </p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/2.png" alt="upload-image"> </p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/3.png" alt="upload-image"> </p><h1 id="deployement如何选择vpc-cni模式"><a href="#deployement如何选择vpc-cni模式" class="headerlink" title="deployement如何选择vpc-cni模式"></a>deployement如何选择vpc-cni模式</h1><p>我们在创建deployment的时候在控制台是没有对应的选项来选择是否采用vpc-cni模式的，但是并不是说我们无法创建deployment的pod选择vpc-cni模式。我们可以在yaml中添加参数 tke.cloud.tencent.com&#x2F;networks: tke-route-eni 即可，下面我们来实验一下</p><p>首先我们创建一个不配置这个参数的pod，我们在控制台是没有vpc-cni选择项的</p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/4.png" alt="upload-image"> </p><p>我们创建完之后发现pod和节点不在一个网段，对应的yaml中没有tke.cloud.tencent.com&#x2F;networks: tke-route-eni这个字段</p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/5.png" alt="upload-image"> </p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/6.png" alt="upload-image"> </p><p>下面我们修改yaml，加上这个字段再更新pod，我们发现pod和节点处在同一个网段中，</p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/7.png" alt="upload-image"> </p><p><img src="/img/2020-07-27-Deployment-in-the-TKE-cluster-uses-vpc-cni-mode/8.png" alt="upload-image"></p><p>所以，如果我们需要在deployment中使用vpc-cni模式只需要在yaml中加上tke.cloud.tencent.com&#x2F;networks: tke-route-eni这个字段更新pod即可。</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE中configMap的使用</title>
    <link href="/2020/07/15/2020-07-15-Use-of-configMap-in-TKE/"/>
    <url>/2020/07/15/2020-07-15-Use-of-configMap-in-TKE/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了如何在tke集群中挂载configMap到pod中。</p><p>一般我们使用configMap主要用途分为2种，一种是挂载configmap中的配置文件进容器里，一种是引用configMap中的键值对作为容器的环境变量。</p><p>我们这里测试之前创建了3个测试文件，测试镜像为nginx最新镜像</p><h1 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h1><h2 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h2><p>在配置文件中加入了一行测试注释 #test line，方便我们后续进行验证</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk">apiVersion: v1<br>data:<br>  nginx.conf: |<span class="hljs-number">2</span>-<br>    user  nginx;<br>    worker_processes  <span class="hljs-number">1</span>;<br>    <span class="hljs-comment"># test line</span><br>    error_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log warn;<br>    pid        <span class="hljs-regexp">/var/</span>run/nginx.pid;<br>    events &#123;<br>        worker_connections  <span class="hljs-number">1024</span>;<br>    &#125;<br>    http &#123;<br>        include       <span class="hljs-regexp">/etc/</span>nginx/mime.types;<br>        default_type  application/octet-stream;<br><br>        log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                          <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                          <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br><br>        access_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log  main;<br><br>        sendfile        on;<br>        <span class="hljs-comment">#tcp_nopush     on;</span><br><br>        keepalive_timeout  <span class="hljs-number">65</span>;<br><br>        <span class="hljs-comment">#gzip  on;</span><br><br>        include <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>*.conf;<br>    &#125;<br>kind: ConfigMap<br>metadata:<br>  creationTimestamp: <span class="hljs-string">&quot;2020-06-02T09:19:45Z&quot;</span><br>  name: nginx-conf<br>  namespace: test<br>  resourceVersion: <span class="hljs-string">&quot;10479370942&quot;</span><br>  selfLink: <span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>test<span class="hljs-regexp">/configmaps/</span>nginx-conf<br>  uid: <span class="hljs-number">32</span>ca67ac-a4b2-<span class="hljs-number">11</span>ea-<span class="hljs-number">9</span>c35-e28957d7d0b3<br></code></pre></td></tr></table></figure><h2 id="nginx-env"><a href="#nginx-env" class="headerlink" title="nginx-env"></a>nginx-env</h2><p>nginx-env用来测试环境变量的引用</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  RUNTIME:</span> nginx-test<br><span class="hljs-symbol">  TZ:</span> Asia/Shanghai<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-06-02T09:31:26Z&quot;</span><br><span class="hljs-symbol">  name:</span> nginx-env<br><span class="hljs-symbol">  namespace:</span> test<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;8584098360&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>test<span class="hljs-keyword">/configmaps/</span>nginx-env<br><span class="hljs-symbol">  uid:</span> d4e69d1a-a4b3<span class="hljs-number">-11</span>ea<span class="hljs-number">-9</span>c35-e28957d7d0b3<br></code></pre></td></tr></table></figure><h2 id="test-txt"><a href="#test-txt" class="headerlink" title="test.txt"></a>test.txt</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">test.txt</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;&quot;\tmap $http_upgrade $connection_upgrade &#123;\n\t    default upgrade;\n\t    &#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-attribute">close;\n\t&#125;&quot;&#x27;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">creationTimestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-07-13T10:33:50Z&quot;</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">resourceVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10478782044&quot;</span><br>  <span class="hljs-attribute">selfLink</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/api/v1/namespaces/test/configmaps/test</span><br>  <span class="hljs-attribute">uid</span><span class="hljs-punctuation">:</span> <span class="hljs-string">95a40fc5-7e5b-4af1-892d-b3ed3d6ebee9</span><br></code></pre></td></tr></table></figure><h1 id="如何挂载配置文件到容器内"><a href="#如何挂载配置文件到容器内" class="headerlink" title="如何挂载配置文件到容器内"></a>如何挂载配置文件到容器内</h1><p>我们一般挂载文件到容器内分为多种情况：</p><ul><li>替换容器内已经存在的某个配置文件</li><li>替换容器内不存在的配置文件</li><li>替换容器内的某个目录下所有文件</li></ul><p><img src="/img/2020-07-15-Use-of-configMap-in-TKE/1.png" alt="upload-image"> </p><p>对应的yaml文件如下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">  <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/nginx/test.txt</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">conf</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/nginx/nginx.conf</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attribute">subPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx.conf</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/nginx/conf.d/</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">conf</span><br><span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br><span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br><span class="hljs-attribute">schedulerName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-scheduler</span><br><span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30</span><br><span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">configMap:</span><br>    <span class="hljs-attribute">defaultMode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">420</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">conf</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">configMap:</span><br>    <span class="hljs-attribute">defaultMode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">420</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-conf</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><h1 id="如何引用configMap的值作为环境变量"><a href="#如何引用configMap的值作为环境变量" class="headerlink" title="如何引用configMap的值作为环境变量"></a>如何引用configMap的值作为环境变量</h1><p><img src="/img/2020-07-15-Use-of-configMap-in-TKE/2.png" alt="upload-image"> </p><p>yaml文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RUNTIME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">RUNTIME</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-env</span><br>              <span class="hljs-attr">optional:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TZ</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">TZ</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-env</span><br>              <span class="hljs-attr">optional:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
      <tag>configMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Traefik1.7.17的部署使用</title>
    <link href="/2020/07/12/2020-07-12-Deployment-and-use-of-Traefik1.7.17/"/>
    <url>/2020/07/12/2020-07-12-Deployment-and-use-of-Traefik1.7.17/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了在k8s上treafik1.7的搭建和使用。</p><p>因为我这里是作为kubernetes服务的暴露，因此你得有一个kubernetes集群</p><p>集群准备好了，需要下面的配置文件</p><h1 id="部署rbac文件"><a href="#部署rbac文件" class="headerlink" title="部署rbac文件"></a>部署rbac文件</h1><p>rbac文件让ingress获取对应命名空间的权限</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">traefik</span>]<span class="hljs-comment"># cat ingress-rbac.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ingress</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h1 id="部署traefik应用"><a href="#部署traefik应用" class="headerlink" title="部署traefik应用"></a>部署traefik应用</h1><p>这里部署应用中包含了https服务，因此需要在对应的节点上生成证书进行认证</p><p>首先openssl命令生成 CA 证书</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>openssl req -newkey <span class="hljs-symbol">rsa:</span><span class="hljs-number">2048</span> -nodes -keyout tls.key -x509 -days <span class="hljs-number">365</span> -<span class="hljs-keyword">out</span> tls.crt<br></code></pre></td></tr></table></figure><p>现在我们有了证书，我们可以使用 kubectl 创建一个 secret 对象来存储上面的证书</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ kubectl <span class="hljs-keyword">create</span> secret generic traefik-cert --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=tls.crt --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=tls.<span class="hljs-keyword">key</span> -n kube-system<br></code></pre></td></tr></table></figure><p>现在我们来配置 Traefik，让其支持 https，新建traefik.toml文件</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@master https]# cat traefik.toml<br>defaultEntryPoints = [<span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;https&quot;</span>]<br>[entryPoints]<br>[entryPoints.http]<br>address = <span class="hljs-string">&quot;:80&quot;</span><br>[entryPoints.http.redirect]<br>entryPoint = <span class="hljs-string">&quot;https&quot;</span><br>[entryPoints.https]<br>address = <span class="hljs-string">&quot;:443&quot;</span><br>[entryPoints.https.tls]<br>  [[entryPoints.https.tls.certificates]]<br>  <span class="hljs-symbol">CertFile</span> = <span class="hljs-string">&quot;/ssl/tls.crt&quot;</span><br>  <span class="hljs-symbol">KeyFile</span> = <span class="hljs-string">&quot;/ssl/tls.key&quot;</span><br><br>然后通过cm挂载进pod里面，让pod能够访问该配置文件<br></code></pre></td></tr></table></figure><p>然后通过cm挂载进pod里面，让pod能够访问该配置文件</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl create configmap traefik-conf --from-<span class="hljs-keyword">file</span>=traefik.toml -n kube-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>最后部署我们的对应的traefik应用</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@master traefik]# cat traefik.yaml</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-lb</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-lb</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-lb</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-lb</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">terminationGracePeriodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60</span><br>      <span class="hljs-attribute">hostNetwork</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>      <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">serviceAccountName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">image: traefik:v1.7.17</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-lb</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: &quot;/ssl&quot;</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ssl&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: &quot;/config&quot;</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;config&quot;</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">200m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30Mi</span><br>          <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20Mi</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: http</span><br>          <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>          <span class="hljs-attribute">hostPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: https</span><br>          <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">443</span><br>          <span class="hljs-attribute">hostPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">443</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: admin</span><br>          <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8580</span><br>          <span class="hljs-attribute">hostPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8580</span><br>        <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--web</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--web.address=:8580</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubernetes</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--configfile=/config/traefik.toml</span><br>      <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: ssl</span><br>        <span class="hljs-attribute">secret</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">secretName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-cert</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: config</span><br>        <span class="hljs-attribute">configMap</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-conf</span><br></code></pre></td></tr></table></figure><h1 id="部署traefik的service"><a href="#部署traefik的service" class="headerlink" title="部署traefik的service"></a>部署traefik的service</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">traefik</span>]<span class="hljs-comment"># cat traefik-service.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-web-ui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik-ingress-lb</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8580</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><h1 id="给trarfik部署一个路由"><a href="#给trarfik部署一个路由" class="headerlink" title="给trarfik部署一个路由"></a>给trarfik部署一个路由</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">traefik</span>]<span class="hljs-comment"># cat ingress-route.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-web-ui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">traefik.k8s.niewx.club</span> <span class="hljs-comment">#配置ui的域名</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">traefik-web-ui</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-string">web</span><br></code></pre></td></tr></table></figure><h1 id="ingress-中-path-的用法"><a href="#ingress-中-path-的用法" class="headerlink" title="ingress 中 path 的用法"></a>ingress 中 path 的用法</h1><p>部署nginx测试服务测试ingress 中 path 的用法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">traefik</span>]<span class="hljs-comment"># cat test.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">svc1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">svc1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">cnych/example-web-service</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">APP_SVC</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">svc1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">svc2</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">svc2</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">cnych/example-web-service</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">APP_SVC</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">svc2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">svc3</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">svc3</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">cnych/example-web-service</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">APP_SVC</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">svc3</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">svc1</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">svc1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">svc2</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">svc2</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">svc3</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">svc3</span><br></code></pre></td></tr></table></figure><p>设置不同的同一个路由不同的路由访问对应的nginx服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">traefik</span>]<span class="hljs-comment"># cat test-ingress.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">test.k8s.niewx.club</span> <span class="hljs-comment">#配置ui的域名</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/s1</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc1</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/s2</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc2</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc3</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h1 id="部署结果"><a href="#部署结果" class="headerlink" title="部署结果"></a>部署结果</h1><p><img src="/img/2020-07-12-Deployment-and-use-of-Traefik1/1.png" alt="upload-image"> </p><h1 id="基于traefik的Basic-auth认证"><a href="#基于traefik的Basic-auth认证" class="headerlink" title="基于traefik的Basic auth认证"></a>基于traefik的Basic auth认证</h1><p>首先采用htpasswd创建文件</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">htpasswd -bc auth <span class="hljs-literal">admin</span> <span class="hljs-literal">admin</span><br></code></pre></td></tr></table></figure><p>基于上面的htpasswd创建secret(注意命名空间)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">kubectl create secret <span class="hljs-keyword">generic</span> nginx-basic-auth --<span class="hljs-keyword">from</span>-file=auth -n kube-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>treafik引用对应的secret进行认证（注意如下）</p><ul><li>Secret文件必须与Ingress规则在同一命名空间。</li><li>目前只支持basic authentication。</li><li>Realm不可配置，默认使用traefik。</li><li>Secret必须只包含一个文件。</li></ul><p>引用secret的yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">traefik</span>]<span class="hljs-comment"># cat test-ingress.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-test</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">traefik</span><br>    <span class="hljs-comment"># 认证类型</span><br>    <span class="hljs-attr">ingress.kubernetes.io/auth-type:</span> <span class="hljs-string">basic</span><br>    <span class="hljs-comment"># 包含 user/password 的 Secret 名称</span><br>    <span class="hljs-attr">ingress.kubernetes.io/auth-secret:</span> <span class="hljs-string">nginx-basic-auth</span><br>    <span class="hljs-comment"># 当认证的时候显示一个合适的上下文信息</span><br>    <span class="hljs-comment">#ingress.kubernetes.io/auth-realm: &#x27;Authentication Required - admin&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">test.k8s.niewx.club</span> <span class="hljs-comment">#配置ui的域名</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/s1</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc1</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/s2</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc2</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">svc3</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h1 id="解析域名到k8s集群中"><a href="#解析域名到k8s集群中" class="headerlink" title="解析域名到k8s集群中"></a>解析域名到k8s集群中</h1><p>一般暴露服务到外部都是提供域名访问，我们这边的集群节点通过lb来负载均衡，将域名解析到对应的lb上，后端监听的服务为treafik的80端口即可，这样treafik可以使用你所绑定解析的域名</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>Treafik1.7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>harbor搭建企业docker私有镜像仓库</title>
    <link href="/2020/07/12/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/"/>
    <url>/2020/07/12/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了如何搭建企业级私有镜像仓库harbor及harbor仓库的使用。</p><h1 id="搭建harbor仓库"><a href="#搭建harbor仓库" class="headerlink" title="搭建harbor仓库"></a>搭建harbor仓库</h1><h2 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">curl -fsSL https://get.docker.com/ | sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></code></pre></td></tr></table></figure><h2 id="下载harbor安装包"><a href="#下载harbor安装包" class="headerlink" title="下载harbor安装包"></a>下载harbor安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget https://github.com/goharbor/harbor/releases/download/v2.0.0/harbor-offline-installer-v2.0.0.tgz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tar -zxvf harbor-offline-installer-v2.0.0.tgz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mv</span> harbor /opt/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/harbor</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> harbor.yml.tmpl harbor.yml</span><br></code></pre></td></tr></table></figure><h2 id="配置https方式访问证书"><a href="#配置https方式访问证书" class="headerlink" title="配置https方式访问证书"></a>配置https方式访问证书</h2><ol><li>生成根证书(存放到目录&#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;reg.niewx.club)<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mkdir -p <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>reg.niewx.club &amp;&amp; cd <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>reg.niewx.club <br></code></pre></td></tr></table></figure></li><li>创建自己的CA证书（不使用第三方权威机构的CA来认证，自己充当CA的角色<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>openssl genrsa -<span class="hljs-keyword">out</span> ca.key <span class="hljs-number">2048</span><br></code></pre></td></tr></table></figure></li><li>生成自签名证书（使用已有私钥ca.key自行签发根证书）<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ openssl req -x509 -<span class="hljs-built_in">new</span> -nodes -<span class="hljs-built_in">key</span> ca.<span class="hljs-built_in">key</span> -days <span class="hljs-number">10000</span> -out ca.crt -subj <span class="hljs-string">&quot;/CN=Harbor-ca&quot;</span><br></code></pre></td></tr></table></figure></li><li>生成服务器端私钥和CSR签名请求<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ openssl req -newkey rsa:<span class="hljs-number">4096</span> -nodes -sha256 -keyout <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.csr<br></code></pre></td></tr></table></figure></li><li>签发服务器证书<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">echo subjectAltName = IP:<span class="hljs-number">49.235</span>.<span class="hljs-number">179.157</span> &gt; extfile<span class="hljs-selector-class">.cnf</span><br>openssl x509 -req -<span class="hljs-keyword">in</span> server<span class="hljs-selector-class">.csr</span> -CA ca<span class="hljs-selector-class">.crt</span> -CAkey ca<span class="hljs-selector-class">.key</span> -CAcreateserial -days <span class="hljs-number">365</span> -extfile extfile<span class="hljs-selector-class">.cnf</span> -out server.crt<br></code></pre></td></tr></table></figure></li><li>最终生成的证书如下<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@VM_0_13_centos <span class="hljs-keyword">reg</span>.niewx.club]# <span class="hljs-keyword">ls</span><br><span class="hljs-keyword">ca</span>.crt <span class="hljs-keyword">ca</span>.key <span class="hljs-keyword">ca</span>.srl extfile.<span class="hljs-keyword">cnf</span> server.crt server.csr server.key<br></code></pre></td></tr></table></figure></li></ol><h2 id="修改harbor配置项"><a href="#修改harbor配置项" class="headerlink" title="修改harbor配置项"></a>修改harbor配置项</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM_0_13_centos harbor]<span class="hljs-comment"># cat harbor.yml</span><br><span class="hljs-comment"># Configuration file of Harbor</span><br><span class="hljs-comment"># The IP address or hostname to access admin UI and registry service.</span><br><span class="hljs-comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span><br>hostname: <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span><br><span class="hljs-comment"># http related config</span><br><span class="hljs-comment">#http:</span><br> <span class="hljs-comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span><br><span class="hljs-comment"># port: 80</span><br><span class="hljs-comment"># https related config</span><br>https:<br> <span class="hljs-comment"># https port for harbor, default is 443</span><br> port: <span class="hljs-number">443</span><br> <span class="hljs-comment"># The path of cert and key files for nginx</span><br> certificate: <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>reg.niewx.club/server.crt<br> private_key: <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>reg.niewx.club/server.key<br><span class="hljs-comment"># # Uncomment following will enable tls communication between all harbor components</span><br><span class="hljs-comment"># internal_tls:</span><br><span class="hljs-comment"># # set enabled to true means internal tls is enabled</span><br><span class="hljs-comment"># enabled: true</span><br><span class="hljs-comment"># # put your cert and key files on dir</span><br><span class="hljs-comment"># dir: /etc/harbor/tls/internal</span><br><span class="hljs-comment"># Uncomment external_url if you want to enable external proxy</span><br><span class="hljs-comment"># And when it enabled the hostname will no longer used</span><br><span class="hljs-comment"># external_url: https://reg.mydomain.com:8433</span><br><span class="hljs-comment"># The initial password of Harbor admin</span><br><span class="hljs-comment"># It only works in first time to install harbor</span><br><span class="hljs-comment"># Remember Change the admin password from UI after launching Harbor.</span><br>harbor_admin_password: <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>主要需要修改上面标记的选项。</p><h2 id="启动harbor"><a href="#启动harbor" class="headerlink" title="启动harbor"></a>启动harbor</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/harbor</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./ prepare</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./install.sh --with-clair (启动扫描器)</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/1.png" alt="upload-image"> </p><p>启动日志显示上面则启动成功</p><p>如果修改了配置项需要重新启动harbor则重新执行以下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/harbor</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./ prepare</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./install.sh --with-clair (启动扫描器)</span><br><br></code></pre></td></tr></table></figure><h1 id="haobor仓库的使用"><a href="#haobor仓库的使用" class="headerlink" title="haobor仓库的使用"></a>haobor仓库的使用</h1><h2 id="harbor的登录和创建项目"><a href="#harbor的登录和创建项目" class="headerlink" title="harbor的登录和创建项目"></a>harbor的登录和创建项目</h2><p>默认账号为admin，密码为你之前修改配置密码</p><p><img src="/img/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/2.png" alt="upload-image"> </p><p>项目管理，里面会有一个默认的公开项目library，所有人可以上传下载镜像</p><p><img src="/img/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/1-2.png" alt="upload-image"> </p><p>点击新建项目，输入项目名称，设置存储容量和是否公开</p><p><img src="/img/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/3.png" alt="upload-image"> </p><p>查看项目的镜像仓库，也可以查看推送命令推送镜像</p><p><img src="/img/2020-07-12-Harbor-builds-enterprise-docker-private-mirror-repository/4.png" alt="upload-image"> </p><h2 id="客户端推送镜像"><a href="#客户端推送镜像" class="headerlink" title="客户端推送镜像"></a>客户端推送镜像</h2><p>首先需要配置docker认真地址</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@node1 ~]# cat <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>&#123;<br> <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;https://1.1.1.1&quot;</span>],<br> <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://yywkvob3.mirror.aliyuncs.com&quot;</span>],<br> <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br># systemctl daemon-reload &amp;&amp; systemctl restart docker<br># docker login <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span> -u admin -p *****<br># docker tag busybox:latest <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span><span class="hljs-regexp">/library/</span>busybox:latest<br># docker <span class="hljs-keyword">push</span> <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span><span class="hljs-regexp">/library/</span>busybox:latest<br><br></code></pre></td></tr></table></figure><h2 id="harbor中角色权限说明"><a href="#harbor中角色权限说明" class="headerlink" title="harbor中角色权限说明"></a>harbor中角色权限说明</h2><table><thead><tr><th>角色</th><th>权限说明</th></tr></thead><tbody><tr><td>访客</td><td>对于指定项目拥有只读权限</td></tr><tr><td>开发人员</td><td>对于指定项目拥有读写权限</td></tr><tr><td>维护人员</td><td>对于指定项目拥有读写权限，创建 Webhooks</td></tr><tr><td>项目管理员</td><td>除了读写权限，同时拥有用户管理&#x2F;镜像扫描等管理权限</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Harbor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>Harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE网络模式之vpc-cni</title>
    <link href="/2020/07/03/2020-07-03-Vpc_cni-of-TKE-network-mode/"/>
    <url>/2020/07/03/2020-07-03-Vpc_cni-of-TKE-network-mode/</url>
    
    <content type="html"><![CDATA[<p>本章介绍了如何在TKE上使用vpc-cni的网络模式。</p><h1 id="vpc-cni网络模式介绍"><a href="#vpc-cni网络模式介绍" class="headerlink" title="vpc-cni网络模式介绍"></a>vpc-cni网络模式介绍</h1><p>一般我们选择vpc-cni的网络模式分为2中情况，一种是创建集群的时候就选择vpc-cni模式，还有一种就是创建时候选择的GlobalRouter模式，后面才开启的vpc-cni模式，无论哪种情况开启，启用vpc-cni模式都需要满足如下要求</p><ul><li>仅支持 k8s 1.10、1.12、1.14和1.16集群。</li><li>集群需要开启 cni 支持。</li><li>当前 VPC-CNI 模式仅支持单一子网，因此该模式下的 Pod 不可跨可用区调度。</li><li>当前 VPC-CNI 模式的子网不能与其他云上资源共用（如云服务器、负载均衡等）。</li><li>和子网处于相同可用区的节点才支持创建 VPC-CNI 模式的 Pod，请提前规划 VPC-CNI 模式子网。</li><li>您需要指定单节点下 VPC-CNI 模式的 Pod 数量上限，创建后不可修改。建议集群中节点配置相同。</li></ul><h1 id="创建集群时候选择vpc-cni模式"><a href="#创建集群时候选择vpc-cni模式" class="headerlink" title="创建集群时候选择vpc-cni模式"></a>创建集群时候选择vpc-cni模式</h1><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/1.png" alt="upload-image"> </p><p>创建集群的时候选择，vpc-cni模式，建议开启固定ip的功能，如果某些业务需要设置ip为固定的，这样可以通过固定ip设置，固定ip的模式默认只在vpc-cni网络模式下的StatefulSet类型工作负载才会生效。</p><p>集群网络模式设置成vpc-cni后，集群会开启tke-eni的服务，来操作弹性网卡来pod进行ip分配，ip的从容器网络中获取</p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/2.png" alt="upload-image"> </p><p>同时每一个节点会添加一个弹性网卡eth1，对应的pod ip通过新增的eth1分配副ip得到，创建的时候选择vpc-cni模式，所有的pod服务ip都是在容器的子网中，Pod 和 Node 的控制面和数据面完全在同一网络层面。</p><h1 id="后续开启vpc-cni模式"><a href="#后续开启vpc-cni模式" class="headerlink" title="后续开启vpc-cni模式"></a>后续开启vpc-cni模式</h1><p>开启的方式如下，必须要提前规划好一个子网，子网要求满足上面的要求，选择好你配置子网就可以开启了</p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/3.png" alt="upload-image"> </p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/4.png" alt="upload-image"> </p><p>同样的开启vcp-cni的网络模式后，集群会开启tke-eni的服务，来操作弹性网卡来pod进行ip分配，并且会为每一个节点分配一个弹性网卡，采用vpc-cni的pod服务ip都是在容器的子网中获取，Pod 和 Node 的控制面和数据面完全在同一网络层面。</p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/5.png" alt="upload-image"> </p><p>后续开启的vpc-cni模式只能适用于StatefulSet类型的工作负载，其他的工作类型暂不支持从vpc-cni的容器子网中分配ip网络，其他的工作负载类型还是走GlobalRouter模式，pod ip的分配还是从之前的网络中获取，设置StatefulSet的网络模式为vpc-cni如下</p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/6.png" alt="upload-image"> </p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/7.png" alt="upload-image"> </p><p><img src="/img/2020-07-03-Vpc_cni-of-TKE-network-mode/8.png" alt="upload-image"></p><p>如果你需要开启固定ip，则开启固定ip的选择。</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之DNS解析</title>
    <link href="/2020/06/28/2020-06-28-DNS-resolution-of-k8s/"/>
    <url>/2020/06/28/2020-06-28-DNS-resolution-of-k8s/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍了k8s中dns如何解析和怎么使用dns服务。</p><h1 id="coredns的原理和介绍"><a href="#coredns的原理和介绍" class="headerlink" title="coredns的原理和介绍"></a>coredns的原理和介绍</h1><p>TKE集群中使用的DNS解析是采用coreDNS，Kubernetes1.11和更高版本中，CoreDNS位于GA并且默认情况下与kubeadm一起安装。</p><p><img src="/img/2020-06-28-DNS-resolution-of-k8s/1.png" alt="upload-image"> </p><p>我们的每个容器下dns解析配置文件，都是通过kubelet来给容器进行配置。</p><p><img src="/img/2020-06-28-DNS-resolution-of-k8s/2.png" alt="upload-image"> </p><p>kubelet 使用 –cluster-dns &#x3D; <dns-service-ip> 标志将 DNS 传递到每个容器。</p><p>DNS 名称也需要域。 您可在kubelet中使用 –cluster-domain &#x3D; <default-local-domain> 标志配置本地域</p><h1 id="coredns的配置文件"><a href="#coredns的配置文件" class="headerlink" title="coredns的配置文件"></a>coredns的配置文件</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  Corefile:</span> |<span class="hljs-number">2</span>-<br>        .:<span class="hljs-number">53</span> <span class="hljs-punctuation">&#123;</span><br>            errors<br>            health<br>            kubernetes cluster.local. in-addr.arpa ip6.<span class="hljs-title class_">arpa</span> <span class="hljs-punctuation">&#123;</span><br>                pods insecure<br>                upstream<br>                fallthrough in-addr.arpa ip6.arpa<br>            <span class="hljs-punctuation">&#125;</span><br>            prometheus :<span class="hljs-number">9153</span><br>            proxy . <span class="hljs-keyword">/etc/</span>resolv.conf<br>            cache <span class="hljs-number">30</span><br>            reload<br>            loadbalance<br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-06-02T03:16:59Z&quot;</span><br><span class="hljs-symbol">  labels:</span><br>    addonmanager.kubernetes.io/mode: EnsureExists<br><span class="hljs-symbol">  name:</span> coredns<br><span class="hljs-symbol">  namespace:</span> kube-system<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;8573074315&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>kube-system<span class="hljs-keyword">/configmaps/</span>coredns<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">859</span>ce588-a47f<span class="hljs-number">-11</span>ea<span class="hljs-number">-8</span>fe7<span class="hljs-number">-0</span>a5ffefb2e9f<br></code></pre></td></tr></table></figure><ul><li>error：错误记录到 stdout。</li><li>health：CoreDNS 的健康报告给 <a href="http://localhost:8080/health%E3%80%82">http://localhost:8080/health。</a></li><li>kubernetes：CoreDNS 将基于 Kubernetes 的服务和 Pod 的 IP 答复 DNS 查询。 您可以在 此处.</li></ul><p> <strong>提供 pods insecure 选项是为了与 kube-dns 向前兼容。 您可以使用 pods verified 选项，该选项仅在相同名称空间中存在具有匹配 IP 的 pod 时才返回 A 记录。 如果您不使用 Pod 记录，则可以使用 pods disabled 选项</strong></p><p>‘Upstream’ 用来解析指向外部主机的服务（外部服务）。</p><ul><li>prometheus：CoreDNS的度量标准以Prometheus格式在 <a href="http://localhost:9153/metrics">http://localhost:9153/metrics</a> 上提供。</li><li>proxy: 不在 Kubernetes 集群域内的任何查询都将转发到预定义的解析器 (&#x2F;etc&#x2F;resolv.conf).</li><li>cache：这将启用前端缓存。</li><li>loop：检测到简单的转发循环，如果发现死循环，则中止 CoreDNS 进程。</li><li>reload：允许自动重新加载已更改的 Corefile。 编辑 ConfigMap 配置后，请等待两分钟，以使更改生效。<br>loadbalance：这是一个轮询 DNS 负载均衡器，它在应答中随机分配 A，AAAA 和 MX 记录的顺序。</li></ul><h1 id="使用-CoreDN-配置存根域和上游域名服务器"><a href="#使用-CoreDN-配置存根域和上游域名服务器" class="headerlink" title="使用 CoreDN 配置存根域和上游域名服务器"></a>使用 CoreDN 配置存根域和上游域名服务器</h1><p>CoreDNS 能够使用 proxy plugin. 配置存根域和上游域名服务器。</p><p><strong>注意</strong> ：k8s在1.18版本后，配置上游dns服务器采用的字段不在是proxy，而是采用的forword字段。</p><p><strong>示例</strong></p><p>如果集群操作员的 Consul 域服务器位于 10.150.0.1，并且所有 Consul 名称都带有后缀.consul.local。 要在 CoreDNS 中对其进行配置，集群管理员可以在 CoreDNS 的 ConfigMap 中创建加入以下字段。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">consul.<span class="hljs-built_in">local</span>:<span class="hljs-number">53</span> &#123;<br>        errors<br>        <span class="hljs-keyword">cache</span> <span class="hljs-number">30</span><br>        proxy . <span class="hljs-number">10.150</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>要显式强制所有非集群 DNS 查找通过特定的域名服务器（位于172.16.0.1），请将 proxy 和 forward 指向域名服务器，而不是 &#x2F;etc&#x2F;resolv.conf。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy</span> .  <span class="hljs-number">172.16.0.1</span><br></code></pre></td></tr></table></figure><p>最终的 ConfigMap 以及默认的 Corefile 配置如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">Corefile:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    .:53 &#123;</span><br><span class="hljs-string">        errors</span><br><span class="hljs-string">        health</span><br><span class="hljs-string">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="hljs-string">           pods insecure</span><br><span class="hljs-string">           upstream 172.16.0.1</span><br><span class="hljs-string">           fallthrough in-addr.arpa ip6.arpa</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        prometheus :9153</span><br><span class="hljs-string">        proxy . 172.16.0.1</span><br><span class="hljs-string">        cache 30</span><br><span class="hljs-string">        loop</span><br><span class="hljs-string">        reload</span><br><span class="hljs-string">        loadbalance</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    consul.local:53 &#123;</span><br><span class="hljs-string">        errors</span><br><span class="hljs-string">        cache 30</span><br><span class="hljs-string">        proxy . 10.150.0.1</span><br><span class="hljs-string">    &#125;</span><br></code></pre></td></tr></table></figure><p>CoreDNS 不仅仅提供 kube-dns 的功能。 为 kube-dns 创建的 ConfigMap 支持 StubDomains 和 upstreamNameservers 转换为 CoreDNS 中的 proxy 插件。 同样，kube-dns 中的 Federations 插件会转换为 CoreDNS 中的 federation 插件。</p><p><strong>示例</strong></p><p>用于 kubedns 的此示例 ConfigMap 描述了 federations, stubdomains and upstreamnameservers：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  federations:</span> |<br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;foo&quot;</span> : <span class="hljs-string">&quot;foo.feddomain.com&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  stubDomains:</span> |<br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;abc.com&quot;</span> : [<span class="hljs-string">&quot;1.2.3.4&quot;</span>], <span class="hljs-string">&quot;my.cluster.local&quot;</span> : [<span class="hljs-string">&quot;2.3.4.5&quot;</span>]<span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  upstreamNameservers:</span> |<br>    [<span class="hljs-string">&quot;8.8.8.8&quot;</span>, <span class="hljs-string">&quot;8.8.4.4&quot;</span>]<br><span class="hljs-symbol">kind:</span> ConfigMap<br></code></pre></td></tr></table></figure><p>CoreDNS 中的等效配置将创建一个 Corefile：</p><ul><li>For federations:</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">federation cluster<span class="hljs-selector-class">.local</span> &#123;<br>           foo foo<span class="hljs-selector-class">.feddomain</span><span class="hljs-selector-class">.com</span><br>        &#125;<br></code></pre></td></tr></table></figure><ul><li>For stubDomains:</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">abc.com:<span class="hljs-number">53</span> &#123;<br>        errors<br>        <span class="hljs-keyword">cache</span> <span class="hljs-number">30</span><br>        proxy . <span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span><br>    &#125;<br>    my.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span>:<span class="hljs-number">53</span> &#123;<br>        errors<br>        <span class="hljs-keyword">cache</span> <span class="hljs-number">30</span><br>        proxy . <span class="hljs-number">2.3</span><span class="hljs-number">.4</span><span class="hljs-number">.5</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>带有默认插件的完整 Corefile：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.:<span class="hljs-number">53</span> &#123;<br>        errors<br>        health<br>        kubernetes cluster<span class="hljs-selector-class">.local</span> <span class="hljs-keyword">in</span>-addr<span class="hljs-selector-class">.arpa</span> ip6<span class="hljs-selector-class">.arpa</span> &#123;<br>           upstream  <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">4.4</span><br>           pods insecure<br>           fallthrough <span class="hljs-keyword">in</span>-addr<span class="hljs-selector-class">.arpa</span> ip6<span class="hljs-selector-class">.arpa</span><br>        &#125;<br>        federation cluster<span class="hljs-selector-class">.local</span> &#123;<br>           foo foo<span class="hljs-selector-class">.feddomain</span><span class="hljs-selector-class">.com</span><br>        &#125;<br>        prometheus :<span class="hljs-number">9153</span><br>        proxy .  <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">4.4</span><br>        cache <span class="hljs-number">30</span><br>    &#125;<br>    abc<span class="hljs-selector-class">.com</span>:<span class="hljs-number">53</span> &#123;<br>        errors<br>        cache <span class="hljs-number">30</span><br>        proxy . <span class="hljs-number">1.2</span>.<span class="hljs-number">3.4</span><br>    &#125;<br>    my<span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>:<span class="hljs-number">53</span> &#123;<br>        errors<br>        cache <span class="hljs-number">30</span><br>        proxy . <span class="hljs-number">2.3</span>.<span class="hljs-number">4.5</span><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="pod中coredns策略选择"><a href="#pod中coredns策略选择" class="headerlink" title="pod中coredns策略选择"></a>pod中coredns策略选择</h1><p>在 kubernetes 中还提供了 dnsPolicy 决定 Pod 内预设 DNS 配置策略：</p><ul><li>None     &amp;emsp;                                 无任何策略</li><li>Default       &amp;emsp;                            默认</li><li>ClusterFirst  &amp;emsp;                          集群 DNS 优先</li><li>ClusterFirstWithHostNet    &amp;emsp;    集群 DNS 优先，并伴随着使用宿主机网络</li></ul><h2 id="无策略-None"><a href="#无策略-None" class="headerlink" title="无策略 (None)"></a>无策略 (None)</h2><p>清除 Pod 预设 DNS 配置，当 dnsPolicy 设置成为这个值之后， kubernetes 不会为 Pod 预先加载任何逻辑用于判定得到 DNS 的配置。因此若将 dnsPolicy 设置为 None , 为了避免 Pod 里面没有 DNS 配置，最好通过 dnsConfig 来描述自定义的 DNS 参数。如下所示：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: base/java</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;java -jar /opt/app.jar&quot;</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attribute">dnsConfig</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">nameservers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">172.xxx.xxx.201</span><br>    <span class="hljs-attribute">searches</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ns1.svc.cluster.local</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my.dns.search.suffix</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: ndots</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: edns0</span><br></code></pre></td></tr></table></figure><p>通过上述配置创建 Pod 之后，执行 kubectl exec demo cat &#x2F;etc&#x2F;resolv.conf 命令即可看到额外的配置项目，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nameserver <span class="hljs-number">172</span><span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.xxx</span>.<span class="hljs-number">201</span><br>search ns1<span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span> my<span class="hljs-selector-class">.dns</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.suffix</span><br>options ndots:<span class="hljs-number">2</span> edns0<br></code></pre></td></tr></table></figure><h2 id="默认预设-Default"><a href="#默认预设-Default" class="headerlink" title="默认预设 (Default)"></a>默认预设 (Default)</h2><p>Pod 里面的 DNS 配置继承了宿主机上的 DNS 配置。即，该 Pod 的 DNS 配置与宿主机完全一致。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: base/java</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;java -jar /opt/app.jar&quot;</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Default</span><br></code></pre></td></tr></table></figure><p>通过 cat &#x2F;etc&#x2F;resolv.conf 可查看到宿主机上的配置如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)</span><br><span class="hljs-comment">#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN</span><br><span class="hljs-attribute">nameserver</span> <span class="hljs-number">172</span>.xxx.xxx.<span class="hljs-number">201</span><br><span class="hljs-attribute">nameserver</span> <span class="hljs-number">114.114.114.114</span><br></code></pre></td></tr></table></figure><p>通过上述配置创建 Pod 之后，执行 kubectl exec demo cat &#x2F;etc&#x2F;resolv.conf 命令即可看到额外的配置项目，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nameserver</span> <span class="hljs-number">172</span>.xxx.xxx.<span class="hljs-number">201</span><br><span class="hljs-attribute">nameserver</span> <span class="hljs-number">114.114.114.114</span><br></code></pre></td></tr></table></figure><h2 id="集群优先-ClusterFirst"><a href="#集群优先-ClusterFirst" class="headerlink" title="集群优先 (ClusterFirst)"></a>集群优先 (ClusterFirst)</h2><p>与 Default 相反，会预先使用 kube-dns (或 CoreDNS ) 的信息当预设置参数写入到该 Pod 内的DNS配置。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: base/java</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;java -jar /opt/app.jar&quot;</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br></code></pre></td></tr></table></figure><p>通过上述配置创建 Pod 之后，执行 kubectl exec demo cat &#x2F;etc&#x2F;resolv.conf 命令即可看到额外的配置项目，如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nameserver <span class="hljs-number">10.20</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br><span class="hljs-keyword">search</span> <span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span> svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span> <span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br><span class="hljs-keyword">options</span> ndots:<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>注</strong> 如设置了 hostNetwork &#x3D; true 时，ClusterFirst 会被强制转化为 Default 。如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: base/java</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;java -jar /opt/app.jar&quot;</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">hostNetwork</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirst</span><br></code></pre></td></tr></table></figure><p>通过上述配置创建 Pod 之后，执行 kubectl exec demo cat &#x2F;etc&#x2F;resolv.conf 命令即可看到额外的配置项目，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nameserver</span> <span class="hljs-number">172</span>.xxx.xxx.<span class="hljs-number">201</span><br><span class="hljs-attribute">nameserver</span> <span class="hljs-number">114.114.114.114</span><br></code></pre></td></tr></table></figure><p><strong>注</strong> 设置 hostNetwork &#x3D; true 之后，会让 Pod 与该节点公用相同的网络空间(网卡&#x2F;路由等)</p><h2 id="宿主机与-Kubernetes-共存-ClusterFirstWithHostNet"><a href="#宿主机与-Kubernetes-共存-ClusterFirstWithHostNet" class="headerlink" title="宿主机与 Kubernetes 共存 ( ClusterFirstWithHostNet )"></a>宿主机与 Kubernetes 共存 ( ClusterFirstWithHostNet )</h2><p>同时使用 hostNetwork 与 kube-dns 作为  Pod 预设 DNS 配置。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: base/java</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;java -jar /opt/app.jar&quot;</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">hostNetwork</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attribute">dnsPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterFirstWithHostNet</span><br></code></pre></td></tr></table></figure><p>通过上述配置创建 Pod 之后，执行 kubectl exec demo cat &#x2F;etc&#x2F;resolv.conf 命令即可看到额外的配置项目，如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nameserver <span class="hljs-number">10.20</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br><span class="hljs-keyword">search</span> <span class="hljs-keyword">default</span>.svc.k8s.<span class="hljs-keyword">local</span>. svc.k8s.<span class="hljs-keyword">local</span>. k8s.<span class="hljs-keyword">local</span>.<br><span class="hljs-keyword">options</span> ndots:<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="yaml文件中添加nameserver和search域"><a href="#yaml文件中添加nameserver和search域" class="headerlink" title="yaml文件中添加nameserver和search域"></a>yaml文件中添加nameserver和search域</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: base/java</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;java -jar /opt/app.jar&quot;</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attribute">dnsConfig</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">nameservers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">172.xxx.xxx.201</span><br>    <span class="hljs-attribute">searches</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ns1.svc.cluster.local</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my.dns.search.suffix</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: ndots</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: edns0</span><br></code></pre></td></tr></table></figure><p>通过上述配置创建 Pod 之后，执行 kubectl exec demo cat &#x2F;etc&#x2F;resolv.conf 命令即可看到额外的配置项目，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nameserver <span class="hljs-number">10.20</span>.<span class="hljs-number">0.2</span><br>nameserver <span class="hljs-number">172</span><span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.xxx</span>.<span class="hljs-number">201</span><br>search default<span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span> svc<span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span> cluster<span class="hljs-selector-class">.local</span> ns1<span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span> my<span class="hljs-selector-class">.dns</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.suffix</span><br>options ndots:<span class="hljs-number">2</span> edns0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>Coredns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上部署treafik2</title>
    <link href="/2020/06/11/2020-06-11-Deploy-treafik2-on-TKE/"/>
    <url>/2020/06/11/2020-06-11-Deploy-treafik2-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>腾讯云上有默认的提供的ingress服务，如果你不想用提供的，想用最新的treafik来暴露服务通过域名访问也是可以的,下面我们来部署操作下。</p><h1 id="创建LB负载到集群中"><a href="#创建LB负载到集群中" class="headerlink" title="创建LB负载到集群中"></a>创建LB负载到集群中</h1><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/1.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/2.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/3.png" alt="upload-image"> </p><p>网络类型选择公网，域名需要解析到公网ip</p><p>网络选择私有网络，集群所在的vpc</p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/4.png" alt="upload-image"></p><p>在你购买的域名中解析到该VIP上，我这边是解析了*.tx.niewx.ciub</p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/5.png" alt="upload-image"> </p><p>添加监听器</p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/6.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/7.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/8.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/9.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/10.png" alt="upload-image"> </p><p>绑定后端服务器，我们这里绑定的端口为30183,这个端口是k8s集群暴露treafik2的服务端口</p><h1 id="创建treafik命名空间来部署服务"><a href="#创建treafik命名空间来部署服务" class="headerlink" title="创建treafik命名空间来部署服务"></a>创建treafik命名空间来部署服务</h1><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/11.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/12.png" alt="upload-image"> </p><h1 id="部署treafik服务"><a href="#部署treafik服务" class="headerlink" title="部署treafik服务"></a>部署treafik服务</h1><p>以下部署，如果在TKE的控制台无法部署yaml，可以通过kubectl来部署对应的yaml文件</p><h2 id="首先自定义资源类型"><a href="#首先自定义资源类型" class="headerlink" title="首先自定义资源类型"></a>首先自定义资源类型</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiextensions.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingressroutes.traefik.containo.us</span><br><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">traefik.containo.us</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1alpha1</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">ingressroutes</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">ingressroute</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiextensions.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingressroutetcps.traefik.containo.us</span><br><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">traefik.containo.us</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1alpha1</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRouteTCP</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">ingressroutetcps</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">ingressroutetcp</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiextensions.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">middlewares.traefik.containo.us</span><br><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">traefik.containo.us</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1alpha1</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Middleware</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">middlewares</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">middleware</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiextensions.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tlsoptions.traefik.containo.us</span><br><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">traefik.containo.us</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1alpha1</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">TLSOption</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">tlsoptions</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">tlsoption</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br></code></pre></td></tr></table></figure><h2 id="配置rbac权限"><a href="#配置rbac权限" class="headerlink" title="配置rbac权限"></a>配置rbac权限</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-controller</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">treafik</span><br><span class="hljs-attribute">---</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-controller</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses/status</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.containo.us</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">middlewares</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.containo.us</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ingressroutes</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.containo.us</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ingressroutetcps</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.containo.us</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">tlsoptions</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-attribute">---</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-controller</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-controller</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: ServiceAccount</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-ingress-controller</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">treafik</span><br></code></pre></td></tr></table></figure><h2 id="部署treafik"><a href="#部署treafik" class="headerlink" title="部署treafik"></a>部署treafik</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">treafik</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik-ingress-lb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik-ingress-lb</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik-ingress-lb</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-lb</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">traefik-ingress-controller</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">traefik:v2.0</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-lb</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">hostPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">websecure</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br>          <span class="hljs-attr">hostPort:</span> <span class="hljs-number">443</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">admin</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--entrypoints.web.Address=:80</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--entrypoints.websecure.Address=:443</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--api.insecure=true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--providers.kubernetescrd</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--api</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--api.dashboard=true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--accesslog</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">treafik</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik-ingress-lb</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><h2 id="配置域名规则"><a href="#配置域名规则" class="headerlink" title="配置域名规则"></a>配置域名规则</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-webui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">treafik</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`traefik2.tx.niewx.club`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">traefik</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-webui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`prometheus.tx.niewx.club`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">grafana-webui</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`grafana.tx.niewx.club`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>这里我们暴露我们之前已经部署好的服务。</p><h2 id="添加treafik服务端口"><a href="#添加treafik服务端口" class="headerlink" title="添加treafik服务端口"></a>添加treafik服务端口</h2><p>因为之前的svc只暴露了8080,我们需要暴露treafik的80和443端口，这样lb才能负载到对应的服务上</p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/13.png" alt="upload-image"> </p><p>我们直接在treafik的svc上添加2条映射即可，也可以在最开始的yaml中直接设置好。</p><h1 id="通过域名访问集群服务"><a href="#通过域名访问集群服务" class="headerlink" title="通过域名访问集群服务"></a>通过域名访问集群服务</h1><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/14.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/15.png" alt="upload-image"> </p><h1 id="设置treafik的basic-auth认证"><a href="#设置treafik的basic-auth认证" class="headerlink" title="设置treafik的basic auth认证"></a>设置treafik的basic auth认证</h1><p>有的时候我们的服务自身没有设置鉴权，任何人可以直接登录界面，这样是不安全的，treafik2提供的中间来解决这个问题，我们一般访问treafik界面是不需要密码的，下面我们给treafik来设置一个访问账号密码</p><h2 id="采用htpasswd创建文件"><a href="#采用htpasswd创建文件" class="headerlink" title="采用htpasswd创建文件"></a>采用htpasswd创建文件</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">htpasswd -bc auth <span class="hljs-literal">admin</span> <span class="hljs-literal">admin</span><br></code></pre></td></tr></table></figure><h2 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create<span class="hljs-built_in"> secret </span>generic nginx-basic-auth <span class="hljs-attribute">--from-file</span>=auth -n treafik<br></code></pre></td></tr></table></figure><h2 id="定义Basic-Auth中间件"><a href="#定义Basic-Auth中间件" class="headerlink" title="定义Basic Auth中间件"></a>定义Basic Auth中间件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Middleware</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secured</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">treafik</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">chain:</span><br>    <span class="hljs-attr">middlewares:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">auth-users</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Middleware</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">auth-users</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">treafik</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">basicAuth:</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">nginx-basic-auth</span> <span class="hljs-comment"># 兼容 K8S secrets 对象</span><br></code></pre></td></tr></table></figure><h2 id="Ingress中应用中间件"><a href="#Ingress中应用中间件" class="headerlink" title="Ingress中应用中间件"></a>Ingress中应用中间件</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">traefik-webui</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">treafik</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">entryPoints</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attribute">routes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match: Host(`traefik2.tx.niewx.club`)</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: traefik</span><br>      <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8080</span><br>    <span class="hljs-attribute">middlewares</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: secured</span><br></code></pre></td></tr></table></figure><h2 id="通过域名访问需要登录才行"><a href="#通过域名访问需要登录才行" class="headerlink" title="通过域名访问需要登录才行"></a>通过域名访问需要登录才行</h2><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/16.png" alt="upload-image"> </p><p><img src="/img/2020-06-11-Deploy-treafik2-on-TKE/17.png" alt="upload-image"></p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
      <tag>Treafik2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE上搭建EFK日志采集系统</title>
    <link href="/2020/06/10/2020-06-10-Build-EFK-log-collection-system-on-TKE/"/>
    <url>/2020/06/10/2020-06-10-Build-EFK-log-collection-system-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了如何在TKE集群中搭建EFK日志采集系统来采集集群日志。</p><h1 id="创建新的namespace"><a href="#创建新的namespace" class="headerlink" title="创建新的namespace"></a>创建新的namespace</h1><p>创建一个新的namespace为logging，该命名空间来部署EFK</p><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/1.png" alt="upload-image"> </p><h1 id="创建ES的svc"><a href="#创建ES的svc" class="headerlink" title="创建ES的svc"></a>创建ES的svc</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">logging</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">rest</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9300</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">inter-node</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/2.png" alt="upload-image"> </p><h1 id="创建ES的StatefulSet资源"><a href="#创建ES的StatefulSet资源" class="headerlink" title="创建ES的StatefulSet资源"></a>创建ES的StatefulSet资源</h1><h2 id="创建StorageClass"><a href="#创建StorageClass" class="headerlink" title="创建StorageClass"></a>创建StorageClass</h2><p>需要创建一个SC，用来后续ES创建时候动态挂载PVC，在腾讯云中，如果挂载了卷，又起了多个pod，可以采用自动动态挂载PVC</p><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/3.png" alt="upload-image"> </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">volumeClaimTemplates:</span><br>  - metadata:<br><span class="hljs-symbol">      name:</span> data<br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> elasticsearch<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      accessModes:</span> [ <span class="hljs-string">&quot;ReadWriteOnce&quot;</span> ]<br><span class="hljs-symbol">      storageClassName:</span> es-data-db<br><span class="hljs-symbol">      resources:</span><br><span class="hljs-symbol">        requests:</span><br><span class="hljs-symbol">          storage:</span> <span class="hljs-number">50</span>Gi<br></code></pre></td></tr></table></figure><p>在资源中通过volumeClaimTemplates自动常见PV来挂载PVC</p><h2 id="创建StatefulSet"><a href="#创建StatefulSet" class="headerlink" title="创建StatefulSet"></a>创建StatefulSet</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">es-cluster</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">logging</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:6.4.3</span><br>        <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">1000m</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9200</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">rest</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9300</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">inter-node</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/elasticsearch/data</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cluster.name</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">k8s-logs</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">node.name</span><br>            <span class="hljs-attr">valueFrom:</span><br>              <span class="hljs-attr">fieldRef:</span><br>                <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">discovery.zen.ping.unicast.hosts</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;es-cluster-0.elasticsearch,es-cluster-1.elasticsearch,es-cluster-2.elasticsearch&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">discovery.zen.minimum_master_nodes</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;2&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ES_JAVA_OPTS</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xms512m -Xmx512m&quot;</span><br>      <span class="hljs-attr">initContainers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fix-permissions</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;chown -R 1000:1000 /usr/share/elasticsearch/data&quot;</span>]<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/elasticsearch/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">increase-vm-max-map</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sysctl&quot;</span>, <span class="hljs-string">&quot;-w&quot;</span>, <span class="hljs-string">&quot;vm.max_map_count=262144&quot;</span>]<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">increase-fd-ulimit</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ulimit -n 65536&quot;</span>]<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span> [ <span class="hljs-string">&quot;ReadWriteOnce&quot;</span> ]<br>      <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">cbs</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/4.png" alt="upload-image"></p><h1 id="创建kibana服务"><a href="#创建kibana服务" class="headerlink" title="创建kibana服务"></a>创建kibana服务</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">logging</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">5601</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">logging</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/kibana/kibana-oss:6.4.3</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">1000m</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTICSEARCH_URL</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">http://elasticsearch:9200</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5601</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/5.png" alt="upload-image"></p><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/6.png" alt="upload-image"> </p><p>通过http:&#x2F;&#x2F;任意节点ip:31020访问kibana界面</p><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/7.png" alt="upload-image"> </p><h1 id="部署Fluentd"><a href="#部署Fluentd" class="headerlink" title="部署Fluentd"></a>部署Fluentd</h1><h2 id="添加fluentd的配置文件"><a href="#添加fluentd的配置文件" class="headerlink" title="添加fluentd的配置文件"></a>添加fluentd的配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs bash">kind: ConfigMap<br>apiVersion: v1<br>metadata:<br>  name: fluentd-config<br>  namespace: logging<br>  labels:<br>    addonmanager.kubernetes.io/mode: Reconcile<br>data:<br>  system.conf: |-<br>    &lt;system&gt;<br>      root_dir /tmp/fluentd-buffers/<br>    &lt;/system&gt;<br>  containers.input.conf: |-<br>    &lt;<span class="hljs-built_in">source</span>&gt;<br>      @<span class="hljs-built_in">id</span> fluentd-containers.log<br>      @<span class="hljs-built_in">type</span> <span class="hljs-built_in">tail</span><br>      path /var/log/containers/*.<span class="hljs-built_in">log</span><br>      pos_file /var/log/es-containers.log.pos<br>      time_format %Y-%m-%dT%H:%M:%S.%NZ<br>      localtime<br>      tag raw.kubernetes.*<br>      format json<br>      read_from_head <span class="hljs-literal">true</span><br>    &lt;/source&gt;<br>    <span class="hljs-comment"># Detect exceptions in the log output and forward them as one log entry.</span><br>    &lt;match raw.kubernetes.**&gt;<br>      @<span class="hljs-built_in">id</span> raw.kubernetes<br>      @<span class="hljs-built_in">type</span> detect_exceptions<br>      remove_tag_prefix raw<br>      message <span class="hljs-built_in">log</span><br>      stream stream<br>      multiline_flush_interval 5<br>      max_bytes 500000<br>      max_lines 1000<br>    &lt;/match&gt;<br>  system.input.conf: |-<br>    <span class="hljs-comment"># Logs from systemd-journal for interesting services.</span><br>    &lt;<span class="hljs-built_in">source</span>&gt;<br>      @<span class="hljs-built_in">id</span> journald-docker<br>      @<span class="hljs-built_in">type</span> systemd<br>      filters [&#123; <span class="hljs-string">&quot;_SYSTEMD_UNIT&quot;</span>: <span class="hljs-string">&quot;docker.service&quot;</span> &#125;]<br>      &lt;storage&gt;<br>        @<span class="hljs-built_in">type</span> <span class="hljs-built_in">local</span><br>        persistent <span class="hljs-literal">true</span><br>      &lt;/storage&gt;<br>      read_from_head <span class="hljs-literal">true</span><br>      tag docker<br>    &lt;/source&gt;<br>    &lt;<span class="hljs-built_in">source</span>&gt;<br>      @<span class="hljs-built_in">id</span> journald-kubelet<br>      @<span class="hljs-built_in">type</span> systemd<br>      filters [&#123; <span class="hljs-string">&quot;_SYSTEMD_UNIT&quot;</span>: <span class="hljs-string">&quot;kubelet.service&quot;</span> &#125;]<br>      &lt;storage&gt;<br>        @<span class="hljs-built_in">type</span> <span class="hljs-built_in">local</span><br>        persistent <span class="hljs-literal">true</span><br>      &lt;/storage&gt;<br>      read_from_head <span class="hljs-literal">true</span><br>      tag kubelet<br>    &lt;/source&gt;<br>  forward.input.conf: |-<br>    <span class="hljs-comment"># Takes the messages sent over TCP</span><br>    &lt;<span class="hljs-built_in">source</span>&gt;<br>      @<span class="hljs-built_in">type</span> forward<br>    &lt;/source&gt;<br>  output.conf: |-<br>    <span class="hljs-comment"># Enriches records with Kubernetes metadata</span><br>    &lt;filter kubernetes.**&gt;<br>      @<span class="hljs-built_in">type</span> kubernetes_metadata<br>    &lt;/filter&gt;<br>    &lt;match **&gt;<br>      @<span class="hljs-built_in">id</span> elasticsearch<br>      @<span class="hljs-built_in">type</span> elasticsearch<br>      @log_level info<br>      include_tag_key <span class="hljs-literal">true</span><br>      host elasticsearch<br>      port 9200<br>      logstash_format <span class="hljs-literal">true</span><br>      request_timeout    30s<br>      &lt;buffer&gt;<br>        @<span class="hljs-built_in">type</span> file<br>        path /var/log/fluentd-buffers/kubernetes.system.buffer<br>        flush_mode interval<br>        retry_type exponential_backoff<br>        flush_thread_count 2<br>        flush_interval 5s<br>        retry_forever<br>        retry_max_interval 30<br>        chunk_limit_size 2M<br>        queue_limit_length 8<br>        overflow_action block<br>      &lt;/buffer&gt;<br>    &lt;/match&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/8.png" alt="upload-image"> </p><h2 id="部署fluentd"><a href="#部署fluentd" class="headerlink" title="部署fluentd"></a>部署fluentd</h2><p>fluentdt需要收集所有节点的日志，所以通过deamonset的方式部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-es</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">logging</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-es</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v2.0.4</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-es</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2.0.4</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-es</span><br>        <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v2.0.4</span><br>      <span class="hljs-comment"># This annotation ensures that fluentd does not get evicted if the node</span><br>      <span class="hljs-comment"># supports critical pod annotation based priority scheme.</span><br>      <span class="hljs-comment"># Note that this does not guarantee admission on the nodes (#40573).</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">fluentd-es</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-es</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">cnych/fluentd-elasticsearch:v2.0.4</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FLUENTD_ARGS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">--no-supervisor</span> <span class="hljs-string">-q</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/docker/containers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/fluent/config.d</span><br>      <span class="hljs-comment">#nodeSelector:</span><br>      <span class="hljs-comment">#  beta.kubernetes.io/fluentd-ds-ready: &quot;true&quot;</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/data/docker/containers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-config</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-EFK-log-collection-system-on-TKE/9.png" alt="upload-image"></p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
      <category>Log</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
      <tag>EFK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE升级node节点版本</title>
    <link href="/2020/06/10/2020-06-10-TKE-upgrade-node-version/"/>
    <url>/2020/06/10/2020-06-10-TKE-upgrade-node-version/</url>
    
    <content type="html"><![CDATA[<p>该文章介绍了在TKE中如何给集群节点升级版本。</p><h1 id="TKE节点升级方式"><a href="#TKE节点升级方式" class="headerlink" title="TKE节点升级方式"></a>TKE节点升级方式</h1><h2 id="驱逐节点pod升级节点方式"><a href="#驱逐节点pod升级节点方式" class="headerlink" title="驱逐节点pod升级节点方式"></a>驱逐节点pod升级节点方式</h2><p><img src="/img/2020-06-10-TKE-upgrade-node-version/1.png" alt="upload-image"> </p><p>找到对应的节点，点击驱逐，驱逐完毕后，点击集群信息升级</p><p><img src="/img/2020-06-10-TKE-upgrade-node-version/2.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-TKE-upgrade-node-version/3.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-TKE-upgrade-node-version/4.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-TKE-upgrade-node-version/5.png" alt="upload-image"> </p><p>信息配置完成后点击完成，等待10分钟即可升级完成。</p><h2 id="将节点对应的pod副本设置大于1"><a href="#将节点对应的pod副本设置大于1" class="headerlink" title="将节点对应的pod副本设置大于1"></a>将节点对应的pod副本设置大于1</h2><p><img src="/img/2020-06-10-TKE-upgrade-node-version/6.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-TKE-upgrade-node-version/7.png" alt="upload-image"></p><p>先将对应节点上的pod副本都设置大于2，因为升级时候会销毁pod，可以会导致服务不可用，设置pod副本为多个，可以保证服务不会中断。设置完之后，再执行上述升级节点步骤即可。</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE集群上搭建prometheus</title>
    <link href="/2020/06/10/2020-06-10-Build-prometheus-on-TKE/"/>
    <url>/2020/06/10/2020-06-10-Build-prometheus-on-TKE/</url>
    
    <content type="html"><![CDATA[<p>该文章介绍了如何在k8s集群中搭建prometheus来监控集群并通过AlertManager发送告警。</p><h1 id="新建namespace部署prometheus"><a href="#新建namespace部署prometheus" class="headerlink" title="新建namespace部署prometheus"></a>新建namespace部署prometheus</h1><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/1.png" alt="upload-image"> </p><h1 id="部署prometheus"><a href="#部署prometheus" class="headerlink" title="部署prometheus"></a>部署prometheus</h1><h2 id="创建pvc挂载卷挂载prometheus数据"><a href="#创建pvc挂载卷挂载prometheus数据" class="headerlink" title="创建pvc挂载卷挂载prometheus数据"></a>创建pvc挂载卷挂载prometheus数据</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/2.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/3.png" alt="upload-image"> </p><h2 id="通过configmap配置prometheus配置文件"><a href="#通过configmap配置prometheus配置文件" class="headerlink" title="通过configmap配置prometheus配置文件"></a>通过configmap配置prometheus配置文件</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/4.png" alt="upload-image"> </p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus-config</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-ops</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">prometheus.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15s</span><br>      <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15s</span><br>    <span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>      <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;localhost:9090&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="创建prometheus的pod资源"><a href="#创建prometheus的pod资源" class="headerlink" title="创建prometheus的pod资源"></a>创建prometheus的pod资源</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/5.png" alt="upload-image"> </p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">serviceAccountName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">image: prom/prometheus:v2.4.3</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>        <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/bin/prometheus&quot;</span><br>        <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--storage.tsdb.path=/prometheus&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--storage.tsdb.retention=24h&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--web.enable-admin-api&quot;  # 控制对admin HTTP API的访问，其中包括删除时间序列等功能</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--web.enable-lifecycle&quot;  # 支持热更新，直接执行localhost:9090/-/reload立即生效</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 9090</span><br>          <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: &quot;/prometheus&quot;</span><br>          <span class="hljs-attribute">subPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">data</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: &quot;/etc/prometheus&quot;</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">512Mi</span><br>          <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">512Mi</span><br>      <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">runAsUser</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>      <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: data</span><br>        <span class="hljs-attribute">persistentVolumeClaim</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">claimName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">configMap:</span><br>          <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus-config</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">config-volume</span><br></code></pre></td></tr></table></figure><h2 id="创建prometheus的svc"><a href="#创建prometheus的svc" class="headerlink" title="创建prometheus的svc"></a>创建prometheus的svc</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/6.png" alt="upload-image"> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br></code></pre></td></tr></table></figure><h2 id="页面访问prometheus"><a href="#页面访问prometheus" class="headerlink" title="页面访问prometheus"></a>页面访问prometheus</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/7.png" alt="upload-image"> </p><p>我们就可以通过http:&#x2F;&#x2F;任意节点IP:31160访问 prometheus 的 webui 服务了。</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/8.png" alt="upload-image"> </p><h2 id="监控集群节点"><a href="#监控集群节点" class="headerlink" title="监控集群节点"></a>监控集群节点</h2><p>可以通过node_exporter来获取，顾名思义，node_exporter 就是抓取用于采集服务器节点的各种运行指标，目前 node_exporter 支持几乎所有常见的监控点，比如 conntrack，cpu，diskstats，filesystem，loadavg，meminfo，netstat等</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/9.png" alt="upload-image"> </p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node-exporter</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node-exporter</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node-exporter</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">hostPID</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>      <span class="hljs-attribute">hostIPC</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>      <span class="hljs-attribute">hostNetwork</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: node-exporter</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prom/node-exporter:v0.16.0</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 9100</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0.15</span><br>        <span class="hljs-attribute">securityContext</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>        <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--path.procfs</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/host/proc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--path.sysfs</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/host/sys</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collector.filesystem.ignored-mount-points</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span><br>        <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: dev</span><br>          <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/host/dev</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: proc</span><br>          <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/host/proc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: sys</span><br>          <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/host/sys</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: rootfs</span><br>          <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/rootfs</span><br>      <span class="hljs-attribute">tolerations</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">key: &quot;node-role.kubernetes.io/master&quot;</span><br>        <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>        <span class="hljs-attribute">effect</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br>      <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: proc</span><br>          <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/proc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: dev</span><br>          <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: sys</span><br>          <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/sys</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: rootfs</span><br>          <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><p>我们上面是指定了hostNetwork&#x3D;true，所以在每个节点上就会绑定一个端口 9100，我们可以通过这个端口去获取到监控指标数据，不需要创建service</p><p>让 Prometheus 也能够获取到当前集群中的所有节点信息的话，我们就需要利用 Node 的服务发现模式，同样的prometheus.yml 文件中配置如下的 job 任务即可</p><p> prometheus 去发现 Node 模式的服务的时候，访问的端口默认是10250，而现在该端口下面已经没有了&#x2F;metrics指标数据了，现在 kubelet 只读的数据接口统一通过10255端口进行暴露了，所以我们应该去替换掉这里的端口，但是我们是要替换成10255端口吗？不是的，因为我们是要去配置上面通过node-exporter抓取到的节点指标数据，而我们上面是不是指定了hostNetwork&#x3D;true，所以在每个节点上就会绑定一个端口9100，所以我们应该将这里的10250替换成9100，但是应该怎样替换呢？</p><p>这里我们就需要使用到 Prometheus 提供的relabel_configs中的replace能力了，relabel 可以在 Prometheus 采集数据之前，通过Target 实例的 Metadata 信息，动态重新写入 Label 的值。除此之外，我们还能根据 Target 实例的 Metadata 信息选择是否采集或者忽略该 Target 实例。比如我们这里就可以去匹配__address__这个 Label 标签，然后替换掉其中的端口</p><p>最终添加如下job即可</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;kubernetes-nodes&#x27;</span><br>   <span class="hljs-attribute">kubernetes_sd_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">role: node</span><br>   <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__address__]</span><br>     <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;(.*):10250&#x27;</span><br>     <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;$&#123;1&#125;:9100&#x27;</span><br>     <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">__address__</span><br>     <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><p>由于 kubelet 也自带了一些监控指标数据，就上面我们提到的10255端口，所以我们这里也把 kubelet 的监控任务也一并配置上</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">- job_name: <span class="hljs-string">&#x27;kubernetes-kubelet&#x27;</span><br>    kubernetes_sd_configs:<br>    - role: node<br>    scheme: https<br>    tls_config:<br>      ca_file: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>ca.crt<br>      insecure_skip_verify: <span class="hljs-keyword">true</span><br>    bearer_token_file: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>token<br>    relabel_configs:<br>    - action: labelmap<br>      regex: __meta_kubernetes_node_label_(.+)   <br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/10.png" alt="upload-image"> </p><p>curl一下接口，使配置项生效，去prometheus 的 dashboard 中查看 Targets 是否能够正常抓取数据</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/11.png" alt="upload-image"> </p><h1 id="容器监控"><a href="#容器监控" class="headerlink" title="容器监控"></a>容器监控</h1><p>容器监控我们自然会想到cAdvisor，我们前面也说过cAdvisor已经内置在了 kubelet 组件之中，所以我们不需要单独去安装，cAdvisor的数据路径为&#x2F;api&#x2F;v1&#x2F;nodes&#x2F;<node>&#x2F;proxy&#x2F;metrics，同样我们这里使用 node 的服务发现模式，因为每一个节点下面都有 kubelet，自然都有cAdvisor采集到的数据指标，在prometheus.yaml中配置一下即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">- job_name: <span class="hljs-string">&#x27;kubernetes-cadvisor&#x27;</span><br>  kubernetes_sd_configs:<br>  - role: node<br>  scheme: https<br>  tls_config:<br>    ca_file: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>ca.crt<br>  bearer_token_file: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>token<br>  relabel_configs:<br>  - action: labelmap<br>    regex: __meta_kubernetes_node_label_(.+)<br>  - target_label: __address__<br>    replacement: kubernetes.default.svc:<span class="hljs-number">443</span><br>  - source_labels: [__meta_kubernetes_node_name]<br>    regex: (.+)<br>    target_label: __metrics_path__<br>    replacement: <span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/nodes/</span><span class="hljs-variable">$&#123;1&#125;</span><span class="hljs-regexp">/proxy/m</span>etrics/cadvisor<br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/12.png" alt="upload-image"> </p><p>reload使配置生效</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/13.png" alt="upload-image"> </p><p>界面查看cadvisor的target是否生效</p><h1 id="Apiservice的监控"><a href="#Apiservice的监控" class="headerlink" title="Apiservice的监控"></a>Apiservice的监控</h1><p>集群的 apiserver 在集群内部的 Service 地址，要自动发现 Service 类型的服务，我们就需要用到 role 为 Endpoints 的 kubernetes_sd_configs，我们可以在 ConfigMap 对象中添加上一个 Endpoints 类型的服务的监控任务<br>由于 kubernetes 这个服务对应的端口是443，需要使用 https 协议，所以这里我们需要使用 https 的协议，对应的就需要将对应的 ca 证书配置上，最终配置如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">- job_name: <span class="hljs-string">&#x27;kubernetes-apiservers&#x27;</span><br>  kubernetes_sd_configs:<br>  - role: endpoints<br>  scheme: https<br>  tls_config:<br>    ca_file: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>ca.crt<br>  bearer_token_file: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/secrets/</span>kubernetes.io<span class="hljs-regexp">/serviceaccount/</span>token<br>  relabel_configs:<br>  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]<br>    action: keep<br>    regex: <span class="hljs-keyword">default</span>;kubernetes;https  <br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/14.png" alt="upload-image"> </p><p>reload使prometheus.yml配置生效</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/15.png" alt="upload-image"> </p><h1 id="Service的监控"><a href="#Service的监控" class="headerlink" title="Service的监控"></a>Service的监控</h1><p>配置一个任务用来专门发现普通类型的 Service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kubernetes-service-endpoints&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_scrape</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_scheme</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__scheme__</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(https?)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_path</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__metrics_path__</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_port</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_service_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_name</span><br></code></pre></td></tr></table></figure><p>想自动发现集群中的 Service，就需要我们在 Service 的annotation区域添加prometheus.io&#x2F;scrape&#x3D;true的声明<br>我们修改下redis的service，生效后可以在target中查看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">metadata:<br>  annotations:<br>    prometheus.io/port: <span class="hljs-string">&quot;9121&quot;</span><br>    prometheus.io/scrape: <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/16.png" alt="upload-image"> </p><h1 id="部署kube-state-metrics"><a href="#部署kube-state-metrics" class="headerlink" title="部署kube-state-metrics"></a>部署kube-state-metrics</h1><p>kube-state-metrice主要是负责监控pod、DaemonSet、Deployment、Job、CronJob 等各种资源对象的状态</p><p>部署kube-state-metrice的pod应用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.3.0</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1.3.0</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1.3.0</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kube-state-metrics</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">zhaocheng172/kube-state-metrics:v1.3.0</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">telemetry</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8081</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">addon-resizer</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">zhaocheng172/addon-resizer:1.8.3</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">30Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">30Mi</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAME</span><br>            <span class="hljs-attr">valueFrom:</span><br>              <span class="hljs-attr">fieldRef:</span><br>                <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAMESPACE</span><br>            <span class="hljs-attr">valueFrom:</span><br>              <span class="hljs-attr">fieldRef:</span><br>                <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>        <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br>        <span class="hljs-attr">command:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/pod_nanny</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--config-dir=/etc/config</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--container=kube-state-metrics</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--cpu=100m</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--extra-cpu=1m</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--memory=100Mi</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--extra-memory=2Mi</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--threshold=5</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--deployment=kube-state-metrics</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics-config</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">NannyConfiguration:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    apiVersion: nannyconfig/v1alpha1</span><br><span class="hljs-string">    kind: NannyConfiguration</span><br></code></pre></td></tr></table></figure><p>部署kube-state-metrice的service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;kube-state-metrics&quot;</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&#x27;true&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">telemetry</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">telemetry</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br></code></pre></td></tr></table></figure><p>kube-state-metrics-service.yaml 对 Service 的定义包含prometheus.io&#x2F;scrape: ‘true’这样的一个annotation，因此 kube-state-metrics 的 endpoint 可以被 Prometheus 自动服务发现</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/17.png" alt="upload-image"> </p><h1 id="部署granafa"><a href="#部署granafa" class="headerlink" title="部署granafa"></a>部署granafa</h1><h2 id="新建pvc做数据持久化"><a href="#新建pvc做数据持久化" class="headerlink" title="新建pvc做数据持久化"></a>新建pvc做数据持久化</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/18.png" alt="upload-image"> </p><h2 id="创建grafana的svc"><a href="#创建grafana的svc" class="headerlink" title="创建grafana的svc"></a>创建grafana的svc</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br></code></pre></td></tr></table></figure><h2 id="创建gafana的deployment"><a href="#创建gafana的deployment" class="headerlink" title="创建gafana的deployment"></a>创建gafana的deployment</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-ops</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana:5.3.4</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3000</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">grafana</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GF_SECURITY_ADMIN_USER</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GF_SECURITY_ADMIN_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">admin321</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/api/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/api/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/grafana</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">grafana</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">storage</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">472</span><br>        <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">472</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">storage</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">grafana</span><br></code></pre></td></tr></table></figure><h2 id="访问grafana界面"><a href="#访问grafana界面" class="headerlink" title="访问grafana界面"></a>访问grafana界面</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/19.png" alt="upload-image"> </p><p>现在我们就可以在浏览器中使用http:&#x2F;&#x2F;&lt;任意节点IP:31838&gt;来访问 grafana 这个服务了：</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/20.png" alt="upload-image"> </p><p>登录账号密码从deployment的配置文件查看</p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/21.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/22.png" alt="upload-image"> </p><h2 id="添加Dashboard"><a href="#添加Dashboard" class="headerlink" title="添加Dashboard"></a>添加Dashboard</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/23.png" alt="upload-image"> </p><p>我们这里可以使用Kubernetes cluster monitoring (via Prometheus)(dashboard id 为162)</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/24.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/25.png" alt="upload-image"> </p><h1 id="AlertManager配置告警"><a href="#AlertManager配置告警" class="headerlink" title="AlertManager配置告警"></a>AlertManager配置告警</h1><h2 id="配置告警配置文件"><a href="#配置告警配置文件" class="headerlink" title="配置告警配置文件"></a>配置告警配置文件</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">monitor</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">kubernetes.io/cluster-service</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attribute">addonmanager.kubernetes.io/mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">EnsureExists</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">config.yml</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">resolve_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5m</span><br>      <span class="hljs-attribute">smtp_smarthost</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;smtp.163.com:25&#x27;</span><br>      <span class="hljs-attribute">smtp_from</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;nwx*****@163.com&#x27;</span><br>      <span class="hljs-attribute">smtp_auth_username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;nwx****@163.com&#x27;</span><br>      <span class="hljs-attribute">smtp_auth_password</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;*******&#x27;</span><br>      <span class="hljs-attribute">smtp_require_tls</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br><br>    <span class="hljs-attribute">templates</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/etc/alertmanager-templates/*.tmpl&#x27;</span><br><br><br>    <span class="hljs-attribute">route</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">group_by</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&#x27;alertname&#x27;]</span><br>      <span class="hljs-attribute">group_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1m</span><br>      <span class="hljs-attribute">group_wait</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attribute">receiver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default-receiver</span><br>      <span class="hljs-attribute">repeat_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1m</span><br><br>    <span class="hljs-attribute">receivers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: default-receiver</span><br>      <span class="hljs-attribute">email_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">to: &quot;niewx****@163.com&quot;</span><br>        <span class="hljs-attribute">html</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;&#123; template &quot;emai.html&quot; . &#125;&#x27; # 模板</span><br>        <span class="hljs-attribute">headers</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123; Subject: &quot; &#123; .CommonLabels.instance &#125; &#123; CommonAnnotations.summary &#125;&quot; &#125; #标题</span><br></code></pre></td></tr></table></figure><h2 id="配置告警发送模板文件"><a href="#配置告警发送模板文件" class="headerlink" title="配置告警发送模板文件"></a>配置告警发送模板文件</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: alertmanager-templates</span><br><span class="language-xml">  namespace: monitor</span><br><span class="language-xml">data:</span><br><span class="language-xml">  default.tmpl: |</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;emai.html&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; range .Alerts &#125;</span><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml">    实例: </span><span class="hljs-template-variable">&#123; .Labels.instance &#125;</span><span class="language-xml"></span><br><span class="language-xml">    信息: </span><span class="hljs-template-variable">&#123; .Annotations.summary &#125;</span><span class="language-xml"></span><br><span class="language-xml">    详情: </span><span class="hljs-template-variable">&#123; .Annotations.description &#125;</span><span class="language-xml"></span><br><span class="language-xml">    时间: </span><span class="hljs-template-variable">&#123; .StartsAt.Format &quot;2006-01-02 15:04:05&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;__alertmanager&quot; &#125;</span><span class="language-xml">AlertManager</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;__subject&quot; &#125;</span><span class="language-xml">[</span><span class="hljs-template-variable">&#123; .Status | toUpper &#125;</span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> <span class="hljs-keyword">eq</span> .Status &quot;firing&quot; &#125;</span><span class="language-xml">:</span><span class="hljs-template-variable">&#123; .Alerts.Firing | len &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml">] </span><span class="hljs-template-variable">&#123; .GroupLabels.SortedPairs.Values | join &quot; &quot; &#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> <span class="hljs-keyword">gt</span> (len .CommonLabels) (len .GroupLabels) &#125;</span><span class="language-xml">(</span><span class="hljs-template-variable">&#123; with .CommonLabels.Remove .GroupLabels.Names &#125;</span><span class="hljs-template-variable">&#123; .Values | join &quot; &quot; &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml">)</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;__single_message_title&quot; &#125;</span><span class="hljs-template-variable">&#123; range .Alerts.Firing &#125;</span><span class="hljs-template-variable">&#123; .Labels.alertname &#125;</span><span class="language-xml"> @ </span><span class="hljs-template-variable">&#123; .Annotations.identifier &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="hljs-template-variable">&#123; range .Alerts.Resolved &#125;</span><span class="hljs-template-variable">&#123; .Labels.alertname &#125;</span><span class="language-xml"> @ </span><span class="hljs-template-variable">&#123; .Annotations.identifier &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;custom_title&quot; &#125;</span><span class="language-xml">[</span><span class="hljs-template-variable">&#123; .Status | toUpper &#125;</span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> <span class="hljs-keyword">eq</span> .Status &quot;firing&quot; &#125;</span><span class="language-xml">:</span><span class="hljs-template-variable">&#123; .Alerts.Firing | len &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml">] </span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> or (and (<span class="hljs-keyword">eq</span> (len .Alerts.Firing) 1) (<span class="hljs-keyword">eq</span> (len .Alerts.Resolved) 0)) (and (<span class="hljs-keyword">eq</span> (len .Alerts.Firing) 0) (<span class="hljs-keyword">eq</span> (len .Alerts.Resolved) 1)) &#125;</span><span class="hljs-template-variable">&#123; template &quot;__single_message_title&quot; . &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;custom_slack_message&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> or (and (<span class="hljs-keyword">eq</span> (len .Alerts.Firing) 1) (<span class="hljs-keyword">eq</span> (len .Alerts.Resolved) 0)) (and (<span class="hljs-keyword">eq</span> (len .Alerts.Firing) 0) (<span class="hljs-keyword">eq</span> (len .Alerts.Resolved) 1)) &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; range .Alerts.Firing &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警类型: * </span><span class="hljs-template-variable">&#123; .Labels.service &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警描述: * </span><span class="hljs-template-variable">&#123; .Annotations.description &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; range .Alerts.Resolved &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警恢复: * </span><span class="hljs-template-variable">&#123; .Annotations.resolved &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; else &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> <span class="hljs-keyword">gt</span> (len .Alerts.Firing) 0 &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; range .Alerts.Firing &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警类型: * </span><span class="hljs-template-variable">&#123; .Labels.service &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警描述: * </span><span class="hljs-template-variable">&#123; .Annotations.description &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; <span class="hljs-keyword">if</span> <span class="hljs-keyword">gt</span> (len .Alerts.Resolved) 0 &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; range .Alerts.Resolved &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警类型: * </span><span class="hljs-template-variable">&#123; .Labels.service &#125;</span><span class="language-xml"></span><br><span class="language-xml">    *报警恢复: * </span><span class="hljs-template-variable">&#123; .Annotations.resolved &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.title&quot; &#125;</span><span class="hljs-template-variable">&#123; template &quot;__subject&quot; . &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.username&quot; &#125;</span><span class="hljs-template-variable">&#123; template &quot;__alertmanager&quot; . &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.fallback&quot; &#125;</span><span class="hljs-template-variable">&#123; template &quot;slack.<span class="hljs-keyword">default</span>.title&quot; . &#125;</span><span class="language-xml"> | </span><span class="hljs-template-variable">&#123; template &quot;slack.<span class="hljs-keyword">default</span>.titlelink&quot; . &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.pretext&quot; &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.titlelink&quot; &#125;</span><span class="hljs-template-variable">&#123; template &quot;__alertmanagerURL&quot; . &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.iconemoji&quot; &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.iconurl&quot; &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.text&quot; &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;slack.<span class="hljs-keyword">default</span>.footer&quot; &#125;</span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; define &quot;wechat.html&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; range .Alerts &#125;</span><span class="language-xml"></span><br><span class="language-xml">    ========start==========</span><br><span class="language-xml">    告警程序: prometheus_alert</span><br><span class="language-xml">    告警级别: </span><span class="hljs-template-variable">&#123; .Labels.severity &#125;</span><span class="language-xml"></span><br><span class="language-xml">    告警类型: </span><span class="hljs-template-variable">&#123; .Labels.alertname &#125;</span><span class="language-xml"></span><br><span class="language-xml">    故障主机: </span><span class="hljs-template-variable">&#123; .Labels.instance &#125;</span><span class="language-xml"></span><br><span class="language-xml">    告警主题: </span><span class="hljs-template-variable">&#123; .Annotations.summary &#125;</span><span class="language-xml"></span><br><span class="language-xml">    告警详情: </span><span class="hljs-template-variable">&#123; .Annotations.description &#125;</span><span class="language-xml"></span><br><span class="language-xml">    触发时间: </span><span class="hljs-template-variable">&#123; .StartsAt.Format &quot;2019-01-01 01:01:01&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml">    ========end==========</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123; end &#125;</span><br></code></pre></td></tr></table></figure><h2 id="配置alertmanager容器"><a href="#配置alertmanager容器" class="headerlink" title="配置alertmanager容器"></a>配置alertmanager容器</h2><p>我们可以直接在之前的 Prometheus 的 Pod 中添加这个容器，对应的 YAML 资源声明如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--config.file=/etc/alertmanager/config.yml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--storage.path=/alertmanager/data</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prom/alertmanager:v0.15.3</span><br>  <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">alertmanager</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 9093</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100m</span><br>      <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">256Mi</span><br>    <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100m</span><br>      <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">256Mi</span><br>  <span class="hljs-attribute">terminationMessagePath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/dev/termination-log</span><br>  <span class="hljs-attribute">terminationMessagePolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">File</span><br>  <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/alertmanager</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">alertcfg</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /etc/alertmanager-templates</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">templates-volume</span><br></code></pre></td></tr></table></figure><h2 id="prometheus中配置alermanager"><a href="#prometheus中配置alermanager" class="headerlink" title="prometheus中配置alermanager"></a>prometheus中配置alermanager</h2><p>Prometheus 中配置下 AlertManager 的地址，让 Prometheus 能够访问到 AlertManager</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">alerting</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">alertmanagers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&quot;localhost:9093&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="设置告警规则"><a href="#设置告警规则" class="headerlink" title="设置告警规则"></a>设置告警规则</h2><p>直接在prometheus的配置文件中配置告警规则</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dts">rules.yml: |<span class="hljs-number">2</span>-<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">        groups:</span><br>        - name: test-rule<br><span class="hljs-symbol">          rules:</span><br>          - alert: NodeFilesystemUsage<br><span class="hljs-symbol">            expr:</span> (node_filesystem_size_bytes<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">device</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;rootfs&quot;</span><span class="hljs-punctuation">&#125;</span> - node_filesystem_free_bytes<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">device</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;rootfs&quot;</span><span class="hljs-punctuation">&#125;</span>) / node_filesystem_size_bytes<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">device</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;rootfs&quot;</span><span class="hljs-punctuation">&#125;</span> * <span class="hljs-number">100</span> &gt; <span class="hljs-number">20</span><br><span class="hljs-symbol">            for:</span> <span class="hljs-number">2</span>m<br><span class="hljs-symbol">            labels:</span><br><span class="hljs-symbol">              team:</span> node<br><span class="hljs-symbol">            annotations:</span><br><span class="hljs-symbol">              summary:</span> <span class="hljs-string">&quot;&#123;$labels.instance&#125;: High Filesystem usage detected&quot;</span><br><span class="hljs-symbol">              description:</span> <span class="hljs-string">&quot;&#123;$labels.instance&#125;: Filesystem usage is above 80% (current value is: &#123; $value &#125;&quot;</span><br>          - alert: NodeMemoryUsage<br><span class="hljs-symbol">            expr:</span> (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes+node_memory_Buffers_bytes+node_memory_Cached_bytes )) / node_memory_MemTotal_bytes * <span class="hljs-number">100</span> &gt; <span class="hljs-number">20</span><br><span class="hljs-symbol">            for:</span> <span class="hljs-number">2</span>m<br><span class="hljs-symbol">            labels:</span><br><span class="hljs-symbol">              team:</span> node<br><span class="hljs-symbol">            annotations:</span><br><span class="hljs-symbol">              summary:</span> <span class="hljs-string">&quot;&#123;$labels.instance&#125;: High Memory usage detected&quot;</span><br><span class="hljs-symbol">              description:</span> <span class="hljs-string">&quot;&#123;$labels.instance&#125;: Memory usage is above 80% (current value is: &#123; $value &#125;&quot;</span><br>          - alert: NodeCPUUsage<br><span class="hljs-symbol">            expr:</span> (<span class="hljs-number">100</span> - (avg by (instance) (irate(node_cpu<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">job</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;kubernetes-node-exporter&quot;</span>,<span class="hljs-attr">mode</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;idle&quot;</span><span class="hljs-punctuation">&#125;</span>[<span class="hljs-number">5</span>m])) * <span class="hljs-number">100</span>)) &gt; <span class="hljs-number">20</span><br><span class="hljs-symbol">            for:</span> <span class="hljs-number">2</span>m<br><span class="hljs-symbol">            labels:</span><br><span class="hljs-symbol">              team:</span> node<br><span class="hljs-symbol">            annotations:</span><br><span class="hljs-symbol">              summary:</span> <span class="hljs-string">&quot;&#123;$labels.instance&#125;: High CPU usage detected&quot;</span><br><span class="hljs-symbol">              description:</span> <span class="hljs-string">&quot;&#123;$labels.instance&#125;: CPU usage is above 80% (current value is: &#123; $value &#125;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="查看告警"><a href="#查看告警" class="headerlink" title="查看告警"></a>查看告警</h2><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/26.png" alt="upload-image"> </p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/27.png" alt="upload-image"> </p><p>在这个页面中我们可以进行一些操作，比如过滤、分组等等，里面还有两个新的概念：Inhibition(抑制)和 Silences(静默)。</p><ul><li>Inhibition：如果某些其他警报已经触发了，则对于某些警报，Inhibition 是一个抑制通知的概念。例如：一个警报已经触发，它正在通知整个集群是不可达的时，Alertmanager 则可以配置成关心这个集群的其他警报无效。这可以防止与实际问题无关的数百或数千个触发警报的通知，Inhibition 需要通过上面的配置文件进行配置。</li><li>Silences：静默是一个非常简单的方法，可以在给定时间内简单地忽略所有警报。Silences 基于 matchers配置，类似路由树。来到的警告将会被检查，判断它们是否和活跃的 Silences 相等或者正则表达式匹配。如果匹配成功，则不会将这些警报发送给接收者。</li></ul><p>由于全局配置中我们配置的repeat_interval: 5m，所以正常来说，上面的测试报警如果一直满足报警条件(CPU使用率大于20%)的话，那么每5分钟我们就可以收到一条报警邮件。</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/28.png" alt="upload-image"> </p><h1 id="配置ingress通过域名访问"><a href="#配置ingress通过域名访问" class="headerlink" title="配置ingress通过域名访问"></a>配置ingress通过域名访问</h1><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/29.png" alt="upload-image"> </p><p>将域名解析到对应的vip上</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/30.png" alt="upload-image"> </p><p>配置好ingress的转发规则</p><p><img src="/img/2020-06-10-Build-prometheus-on-TKE/31.png" alt="upload-image"> </p><p>通过域名来访问</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
      <category>Kubernetes</category>
      
      <category>Monitor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE学习笔记</title>
    <link href="/2020/06/08/2020-06-08-TKE-study-notes/"/>
    <url>/2020/06/08/2020-06-08-TKE-study-notes/</url>
    
    <content type="html"><![CDATA[<p>该文章介绍了在TKE学习使用过程中的一些记录，tke集群中的各类组件如何选择。</p><h1 id="TKE集群网络模式"><a href="#TKE集群网络模式" class="headerlink" title="TKE集群网络模式"></a>TKE集群网络模式</h1><h2 id="GlobalRouter-模式"><a href="#GlobalRouter-模式" class="headerlink" title="GlobalRouter 模式"></a>GlobalRouter 模式</h2><p><img src="/img/2020-06-08-TKE-study-notes/1.png" alt="upload-image"> </p><p>GlobalRouter模式是在每个节点下起一个agent从整个VPC中指定一个子网进行通信和数据的传输。该模式其实就是在VPC下为每个节点分配一个子网进行网络通讯和传输</p><h2 id="VPC-CNI-模式"><a href="#VPC-CNI-模式" class="headerlink" title="VPC-CNI 模式"></a>VPC-CNI 模式</h2><p><img src="/img/2020-06-08-TKE-study-notes/2.png" alt="upload-image"> </p><p>VPC-CNI模式是在某个VPC下提前规划好多个子网，pod服务通过每个节点上的弹性网卡从子网中随机分配ip来进行pod之间的通讯和数据传输。固定IP模式其实就是单独固定某个子网作为pod的ip和service分配使用。</p><h2 id="VPC-CNI和GlobalRouter对比"><a href="#VPC-CNI和GlobalRouter对比" class="headerlink" title="VPC-CNI和GlobalRouter对比"></a>VPC-CNI和GlobalRouter对比</h2><p><img src="/img/2020-06-08-TKE-study-notes/3.png" alt="upload-image"> </p><ul><li>绝大多数情况下应该选择 GlobalRouter，容器网段地址充裕，扩展性强，能适应规模较大的业务</li><li>如果后期部分业务需要用到 VPC-CNI 模式，可以在 GlobalRouter 集群再开启 VPC-CNI 支持，也就是 GlobalRouter 与 VPC-CNI 混用，仅对 部分业务使用 VPC-CNI 模式  </li><li>如果完全了解并接受 VPC-CNI 的各种限制，并且需要集群内所有 Pod 都用 VPC-CNI 模式，可以创建集群时选择 VPC-CNI 网络插件</li></ul><h1 id="TKE集群容器运行组件"><a href="#TKE集群容器运行组件" class="headerlink" title="TKE集群容器运行组件"></a>TKE集群容器运行组件</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><img src="/img/2020-06-08-TKE-study-notes/4.png" alt="upload-image"> </p><p>docker运行容器，主要是通过kubelet调用dockerd的进程，调用docker-containerd接口去启动对应的容器</p><h2 id="Containerd"><a href="#Containerd" class="headerlink" title="Containerd"></a>Containerd</h2><p><img src="/img/2020-06-08-TKE-study-notes/5.png" alt="upload-image"> </p><p>containerd则主要是kubelet通过CRI插件去调用containerd的api接口来启动容器</p><h2 id="docker和containerd对比"><a href="#docker和containerd对比" class="headerlink" title="docker和containerd对比"></a>docker和containerd对比</h2><ul><li>containerd 方案由于绕过了 dockerd，调用链更短，组件更少，占用节点资源更少，绕过了 dockerd 本身的一些 bug，但 containerd 自身也还存在一些 bug (已修复一些，灰度中) </li><li>docker 方案历史比较悠久，相对更成熟，支持 docker api，功能丰富，符合大多数人的使用习惯</li></ul><p>推荐使用docker方式，这样可以调用docker api以及命令，如果想对docker做优化也可以执行</p><h1 id="servie的转发"><a href="#servie的转发" class="headerlink" title="servie的转发"></a>servie的转发</h1><h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p><img src="/img/2020-06-08-TKE-study-notes/6.png" alt="upload-image"> </p><p>iptables支持的小场景下应用，更加稳定</p><h2 id="ipvs"><a href="#ipvs" class="headerlink" title="ipvs"></a>ipvs</h2><p><img src="/img/2020-06-08-TKE-study-notes/7.png" alt="upload-image"> </p><ul><li>IPVS为大型集群提供了更好的可扩展性和性能。（规则的存储方式使用的数据结构更高效）</li><li>IPVS支持比iptables更复杂的负载平衡算法（最小负载，最少连接，位置，加权等）。</li><li>IPVS支持服务器健康检查和连接重试等。</li></ul><h1 id="集群故障定位"><a href="#集群故障定位" class="headerlink" title="集群故障定位"></a>集群故障定位</h1><h2 id="pod退出错误码分析"><a href="#pod退出错误码分析" class="headerlink" title="pod退出错误码分析"></a>pod退出错误码分析</h2><ul><li>129-255 表示进程因外界中断信号退出，最常见的是 137，表示被 SIGKILL 杀死，可能是 Cgroup OOM，系统 OOM，存 活检查失败或者被其它进程杀死导致 </li><li>1-128 表示进程主动退出 (只是约定)，具体状态码含义取决于应用程序逻辑；有时主动退出也会是 255 状态码: 代码里使 用类似 exit(-1) 时，-1 被自动转成 255，通常状态码为 1 和 255 是一般性错误，看不错具体含义，需要结合日志分析</li></ul><h2 id="容器内抓包"><a href="#容器内抓包" class="headerlink" title="容器内抓包"></a>容器内抓包</h2><p>nsenter命令仅进入该容器的网络命名空间，使用宿主机的命令调试容器网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM_0_13_centos kubernetes-elasticsearch]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS                PORTS                                         NAMES<br>1421f7bbc523        goharbor/nginx-photon:v2.0.0         <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   6 days ago          Up 6 days (healthy)   0.0.0.0:80-&gt;8080/tcp, 0.0.0.0:443-&gt;8443/tcp   nginx<br>e9ab5bf15849        goharbor/harbor-jobservice:v2.0.0    <span class="hljs-string">&quot;/harbor/entrypoint.…&quot;</span>   6 days ago          Up 6 days (healthy)                                                 harbor-jobservice<br>d04f14741f3d        goharbor/harbor-core:v2.0.0          <span class="hljs-string">&quot;/harbor/entrypoint.…&quot;</span>   6 days ago          Up 6 days (healthy)                                                 harbor-core<br>c31d291b2425        goharbor/redis-photon:v2.0.0         <span class="hljs-string">&quot;redis-server /etc/r…&quot;</span>   6 days ago          Up 6 days (healthy)   6379/tcp                                      redis<br>13f1de98a114        goharbor/registry-photon:v2.0.0      <span class="hljs-string">&quot;/home/harbor/entryp…&quot;</span>   6 days ago          Up 6 days (healthy)   5000/tcp                                      registry<br>9e154ff22c54        goharbor/harbor-registryctl:v2.0.0   <span class="hljs-string">&quot;/home/harbor/start.…&quot;</span>   6 days ago          Up 6 days (healthy)                                                 registryctl<br>051736f00111        goharbor/harbor-db:v2.0.0            <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   6 days ago          Up 6 days (healthy)   5432/tcp                                      harbor-db<br>b10b982a225a        goharbor/harbor-portal:v2.0.0        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   6 days ago          Up 6 days (healthy)   8080/tcp                                      harbor-portal<br>3a0d7ec954c5        goharbor/harbor-log:v2.0.0           <span class="hljs-string">&quot;/bin/sh -c /usr/loc…&quot;</span>   6 days ago          Up 6 days (healthy)   127.0.0.1:1514-&gt;10514/tcp                     harbor-log<br>[root@VM_0_13_centos kubernetes-elasticsearch]<span class="hljs-comment"># nsenter --target 6128</span><br>[root@VM_0_13_centos kubernetes-elasticsearch]<span class="hljs-comment"># docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 1421f7bbc523</span><br>6128<br>[root@VM_0_13_centos kubernetes-elasticsearch]<span class="hljs-comment"># nsenter -n --target 6128</span><br></code></pre></td></tr></table></figure><p>进入之后可以执行对应的ip address，ping，telnet，ss，tcpdump命令等</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@VM_0_13_centos kubernetes-elasticsearch]<span class="hljs-comment"># ip addr</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">31887</span>: eth0@if31888: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span><br>    link/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:ac:<span class="hljs-number">1</span>f:<span class="hljs-number">00</span>:<span class="hljs-number">0</span>a brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">0</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">172.31</span>.<span class="hljs-number">0.10</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.31</span>.<span class="hljs-number">255.255</span> scope <span class="hljs-keyword">global</span> eth0<br>       valid_lft forever preferred_lft forever<br>[root@VM_0_13_centos kubernetes-elasticsearch]<span class="hljs-comment"># tcpdump -i eth0 tcp</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening <span class="hljs-keyword">on</span> eth0, link-type EN10MB (Ethernet), capture size <span class="hljs-number">262144</span> bytes<br></code></pre></td></tr></table></figure><h2 id="在pod中通过busybox容器来修改系统参数失败"><a href="#在pod中通过busybox容器来修改系统参数失败" class="headerlink" title="在pod中通过busybox容器来修改系统参数失败"></a>在pod中通过busybox容器来修改系统参数失败</h2><p>现在的版本中集群中如果节点使用TKE订制镜像，无法修改pod的内核参数，如果需要支持内核参数的修改，可以采用官方的centos和ubuntu镜像。</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE操作笔记04</title>
    <link href="/2020/06/05/2020-06-05-TKE-operation-notes-04/"/>
    <url>/2020/06/05/2020-06-05-TKE-operation-notes-04/</url>
    
    <content type="html"><![CDATA[<p>本周讲述了在TKE上如何监控集群并发送告警，简单部署wordpress到集群中</p><h1 id="TKE监控使用和查看"><a href="#TKE监控使用和查看" class="headerlink" title="TKE监控使用和查看"></a>TKE监控使用和查看</h1><p>良好的监控环境为腾讯云容器服务高可靠性、高可用性和高性能提供重要保证。您可以方便为不同资源收集不同维度的监控数据，能方便掌握资源的使用状况，轻松定位故障。 腾讯云容器服务提供集群、节点、工作负载、Pod、Container 5个层面的监控数据收集和展示功能。 收集监控数据有助于您建立容器集群性能的正常标准。通过在不同时间、不同负载条件下测量容集群的性能并收集历史监控数据，您可以较为清楚的了解容器集群和服务运行时的正常性能，并能快速根据当前监控数据判断服务运行时是否处于异常状态，及时找出解决问题的方法。例如，您可以监控服务的 CPU 利用率、内存使用率和磁盘 I&#x2F;O</p><h2 id="集群整体监控"><a href="#集群整体监控" class="headerlink" title="集群整体监控"></a>集群整体监控</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/1.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/2.png" alt="upload-image"> </p><p>可以选择不同的时间段，时间间隔等选项来查看对应的指标数据</p><h2 id="节点监控"><a href="#节点监控" class="headerlink" title="节点监控"></a>节点监控</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/3.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/4.png" alt="upload-image"> </p><p>我们可以查看某一个节点或者所有节点的监控指标，根据其他选项来选择数据的时间段和类型</p><h2 id="pod监控"><a href="#pod监控" class="headerlink" title="pod监控"></a>pod监控</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/5.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/6.png" alt="upload-image"> </p><p>我们要选择pod所在的节点，然后再进行其他选择来查看某个pod或者所有pod的监控指标数据</p><h2 id="deployment监控"><a href="#deployment监控" class="headerlink" title="deployment监控"></a>deployment监控</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/7.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/8.png" alt="upload-image"> </p><p>可以选择所有负载或者某一个负载不同时间段的监控数据</p><h2 id="查看某个deployment中具体pod的监控"><a href="#查看某个deployment中具体pod的监控" class="headerlink" title="查看某个deployment中具体pod的监控"></a>查看某个deployment中具体pod的监控</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/9.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/10.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/11.png" alt="upload-image"> </p><h2 id="查看pod内某个容器的指标"><a href="#查看pod内某个容器的指标" class="headerlink" title="查看pod内某个容器的指标"></a>查看pod内某个容器的指标</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/12.png" alt="upload-image"> </p><p>单击【Container】，将【所属 Pod】选择为您想查看的 Pod，即可查看该 Pod 内 Container 的监控指标对比图</p><h1 id="helm的安装和使用"><a href="#helm的安装和使用" class="headerlink" title="helm的安装和使用"></a>helm的安装和使用</h1><h2 id="helm的安装"><a href="#helm的安装" class="headerlink" title="helm的安装"></a>helm的安装</h2><h3 id="helm服务端的安装"><a href="#helm服务端的安装" class="headerlink" title="helm服务端的安装"></a>helm服务端的安装</h3><p><img src="/img/2020-06-05-TKE-operation-notes-04/13.png" alt="upload-image"> </p><p>找到扩展插件，选择你的集群，选择helm，点击安装到你的集群中即可</p><h3 id="helm客户端的安装"><a href="#helm客户端的安装" class="headerlink" title="helm客户端的安装"></a>helm客户端的安装</h3><p>在你配置了集群的访问凭证下执行如下操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -O https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/kubernetes-helm/</span>helm-v2.<span class="hljs-number">10.0</span>-linux-amd64.tar.gz<br>tar xzvf helm-v2.<span class="hljs-number">10.0</span>-linux-amd64.tar.gz<br>sudo cp linux-amd64<span class="hljs-regexp">/helm /u</span>sr<span class="hljs-regexp">/local/</span>bin/helm<br></code></pre></td></tr></table></figure><p>能够正确查询到版本则成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@VM_0_13_centos ~]# helm <span class="hljs-keyword">version</span><br>Client: &amp;<span class="hljs-keyword">version</span>.<span class="hljs-keyword">Version</span>&#123;SemVer:&quot;v2.10.0&quot;, GitCommit:&quot;9ad53aac42165a5fadc6c87be0dea6b115f93090&quot;, GitTreeState:&quot;clean&quot;&#125;<br><span class="hljs-keyword">Server</span>: &amp;<span class="hljs-keyword">version</span>.<span class="hljs-keyword">Version</span>&#123;SemVer:&quot;v2.10.0&quot;, GitCommit:&quot;9ad53aac42165a5fadc6c87be0dea6b115f93090&quot;, GitTreeState:&quot;clean&quot;&#125;<br></code></pre></td></tr></table></figure><p>配置 Helm 为 Client-only</p><p>执行以下命令，将 Helm 配置为 Client-only。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">helm init <span class="hljs-comment">--client-only</span><br></code></pre></td></tr></table></figure><h2 id="helm的使用"><a href="#helm的使用" class="headerlink" title="helm的使用"></a>helm的使用</h2><h3 id="helm仓库"><a href="#helm仓库" class="headerlink" title="helm仓库"></a>helm仓库</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@VM_0_13_centos ~]<span class="hljs-comment"># helm repo list</span><br>NAME    URL<br>stable  https:<span class="hljs-regexp">//</span>kubernetes-charts.storage.googleapis.com<br>local   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8879</span>/charts<br></code></pre></td></tr></table></figure><p>一般默认的远程仓库为google的，下载应用比较慢，我们可以设置为阿里的。<br>客户端命令设置如下</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root@VM_0_13_centos ~]<span class="hljs-comment"># helm repo remove stable</span><br>[root@VM_0_13_centos ~]<span class="hljs-comment"># helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="hljs-string">&quot;stable&quot;</span> has been added to your repositories<br>[root@VM_0_13_centos ~]<span class="hljs-comment"># helm repo list</span><br>NAME    URL<br><span class="hljs-keyword">local</span>   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8879</span>/charts<br>stable  https:<span class="hljs-regexp">//</span>kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure><p>我们也可以在控制台安装应用的时候指定chart包地址进行下载</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/14.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/15.png" alt="upload-image"> </p><p>新建应用中填写指定的chart包地址进行安装即可</p><h1 id="日志的采集"><a href="#日志的采集" class="headerlink" title="日志的采集"></a>日志的采集</h1><h2 id="创建日志采集"><a href="#创建日志采集" class="headerlink" title="创建日志采集"></a>创建日志采集</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/16.png" alt="upload-image"> </p><p>首先要在集群中安装扩展插件才能进行日志采集</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/17.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/18.png" alt="upload-image"> </p><p>参数说明</p><ul><li>名称：填写你日志采集器的名称</li><li>类型：收集说明类型的日志</li><li>日志源：可以指定某个容器，也可以选择全部容器（我们这里选择全部）</li><li>消费端：消费端也就是日志存储的地方，我们选择CLS（没有创建CLS，要先创建）</li></ul><h2 id="创建CLS日志采集服务"><a href="#创建CLS日志采集服务" class="headerlink" title="创建CLS日志采集服务"></a>创建CLS日志采集服务</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/19.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/20.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/21.png" alt="upload-image"></p><p>可以根据需要选择你日志保存的天数</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/22.png" alt="upload-image"> </p><p>参数说明：</p><p>日志主题名称：采集日志名称</p><p>主题分区数量：通过合并或分裂操作可以自由划分区间，从而控制服务的整体吞吐性能，最多为50个</p><h2 id="收集日志"><a href="#收集日志" class="headerlink" title="收集日志"></a>收集日志</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/23.png" alt="upload-image"> </p><p>引用创建的日志主题，点击完成</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/24.png" alt="upload-image"> </p><p>日志采集创建完成</p><h2 id="检索日志"><a href="#检索日志" class="headerlink" title="检索日志"></a>检索日志</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/25.png" alt="upload-image"> </p><p>日志服务中找到【检索分析】，然后选择你的主题，设置你的日志时间，可以搜索你想要查看的日志内容</p><h1 id="告警设置"><a href="#告警设置" class="headerlink" title="告警设置"></a>告警设置</h1><p><img src="/img/2020-06-05-TKE-operation-notes-04/26.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/27.png" alt="upload-image"> </p><p>可以设置不同的告警指标条件，然后将告警通过不同的方式来给不同的用户组</p><h1 id="事件持久化"><a href="#事件持久化" class="headerlink" title="事件持久化"></a>事件持久化</h1><p>Kubernetes Events 包括了 Kuberntes 集群的运行和各类资源的调度情况，对维护人员日常观察资源的变更以及定位问题均有帮助。TKE 支持为您的所有集群配置事件持久化功能，开启本功能后，会将您的集群事件实时导出到配置的存储端。TKE 还支持使用腾讯云提供的 PAAS 服务或开源软件对事件流水进行检索</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/28.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/29.png" alt="upload-image"> </p><p>可以将持久化日志存储到ES或者CLS中</p><h1 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h1><p><img src="/img/2020-06-05-TKE-operation-notes-04/30.png" alt="upload-image"> </p><p>点击健康检查，选择你的集群，可以选择立即手动检查，也可以设置某个时间定时检查。</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/31.png" alt="upload-image"> </p><p>点击健康检查，选择你的集群，可以选择立即手动检查，也可以设置某个时间定时检查。</p><p><img src="/img/2020-06-05-TKE-operation-notes-04/32.png" alt="upload-image"> </p><p>根据报告可以适当的调整集群，修复告警项</p><h1 id="TecentDB部署WordPress"><a href="#TecentDB部署WordPress" class="headerlink" title="TecentDB部署WordPress"></a>TecentDB部署WordPress</h1><h2 id="创建mysql数据库"><a href="#创建mysql数据库" class="headerlink" title="创建mysql数据库"></a>创建mysql数据库</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/33.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/34.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/35.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/36.png" alt="upload-image"></p><p>初始化完成后mysql数据库即创建完成</p><h2 id="部署WordPress服务"><a href="#部署WordPress服务" class="headerlink" title="部署WordPress服务"></a>部署WordPress服务</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/37.png" alt="upload-image"></p><p><img src="/img/2020-06-05-TKE-operation-notes-04/38.png" alt="upload-image"> </p><p><img src="/img/2020-06-05-TKE-operation-notes-04/39.png" alt="upload-image"> </p><p>主要参数信息如下，其余选项保持默认设置：</p><ul><li>名称：输入自定义容器名称，本文以 my-wordpress为例。</li><li>镜像：输入 wordpress。</li><li>镜像版本（Tag）：输入 latest。</li><li>镜像拉取策略：提供以下3种策略，请按需选择，本文以不进行设置使用默认策略为例。若不设置镜像拉取策略，当镜像版本为空或 latest 时，使用 Always 策略，否则使用 IfNotPresent 策略。<ul><li>Always：总是从远程拉取该镜像。</li><li>IfNotPresent：默认使用本地镜像，若本地无该镜像则远程拉取该镜像。</li><li>Never：只使用本地镜像，若本地没有该镜像将报异常。</li></ul></li><li>环境变量：依次输入以下配置信息：<ul><li>WORDPRESS_DB_HOST &#x3D; 云数据库 MySQL 的内网 IP</li><li>WORDPRESS_DB_PASSWORD &#x3D; 初始化时填写的密码</li></ul></li><li>Service：勾选“启用”。</li><li>服务访问方式：选择“提供公网访问”。</li><li>负载均衡器：根据实际需求进行选择。</li><li>端口映射：选择 TCP 协议，将容器端口和服务端口都设置为80 。</li></ul><h2 id="访问wordpress服务"><a href="#访问wordpress服务" class="headerlink" title="访问wordpress服务"></a>访问wordpress服务</h2><p><img src="/img/2020-06-05-TKE-operation-notes-04/40.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE操作笔记03</title>
    <link href="/2020/06/03/2020-06-03-TKE-operation-notes-03/"/>
    <url>/2020/06/03/2020-06-03-TKE-operation-notes-03/</url>
    
    <content type="html"><![CDATA[<p>该文章主要介绍了存储卷在TKE上的使用。</p><h1 id="PV，PVC，StoragClass配置使用"><a href="#PV，PVC，StoragClass配置使用" class="headerlink" title="PV，PVC，StoragClass配置使用"></a>PV，PVC，StoragClass配置使用</h1><h2 id="StoragClass配置使用"><a href="#StoragClass配置使用" class="headerlink" title="StoragClass配置使用"></a>StoragClass配置使用</h2><p>StorageClass 描述存储的类型，集群管理员可以为集群定义不同的存储类别。腾讯云 TKE 服务默认提供块存储类型的 StorageClass，通过 StorageClass 配合 PersistentVolumeClaim 可以动态创建需要的存储资源。</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/1.png" alt="upload-image"> </p><p>找到你的集群，选择存储中的storaeclass，点击新建</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/2.png" alt="upload-image"> </p><p>根据实际需求，设置 StorageClass 参数。关键参数信息如下：</p><ul><li>名称：自定义。（我填写的是nwx-sc）</li><li>计费模式：根据实际需求进行选择。（我选择的是按量计费）</li><li>可用区：根据实际需求进行设置，默认为 “随机可用区”。（我这里选择广州三区）</li><li>云盘类型：根据实际需求进行选择。（我选择的是高性能云硬盘）</li><li>回收策略：根据实际需求进行选择。（我选择的是删除）</li></ul><p>单击【创建StorageClass】，完成创建。</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/3.png" alt="upload-image"> </p><p>至此，storageclass创建完成！</p><h2 id="PVC的配置使用"><a href="#PVC的配置使用" class="headerlink" title="PVC的配置使用"></a>PVC的配置使用</h2><h3 id="创建PVC"><a href="#创建PVC" class="headerlink" title="创建PVC"></a>创建PVC</h3><p>PersistentVolumeClaim（PVC）：集群内的存储请求。例如，PV 是 Pod 使用节点资源，PVC 则声明使用 PV 资源。当 PV 资源不足时，PVC 也可以动态创建 PV。</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/4.png" alt="upload-image"> </p><p>点击存储，选择PVC,再点击新建</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/5.png" alt="upload-image"> </p><p>填写pvc名称，我这里写的是nwx-test-pvc，选择命名空间为test，读写权限为单机读写，SC选择我们之前创建的nwx-sc，大小为10G。</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/6.png" alt="upload-image"> </p><p>PVC已经创建完成</p><h3 id="控制台配置挂载PVC"><a href="#控制台配置挂载PVC" class="headerlink" title="控制台配置挂载PVC"></a>控制台配置挂载PVC</h3><p>我们把新建的pvc挂载到之前的nginx服务中，我们可以通过修改yaml和在控制台修改配置进行挂载</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/7.png" alt="upload-image"> </p><p>找到我们之前创建的deployment，然后点击pod配置修改</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/8.png" alt="upload-image"> </p><p>数据卷选择我们之前创建的PVC，然后在挂载点钟选择挂载的PVC和挂载路径，我们这里挂载到&#x2F;tmp</p><h3 id="修改yaml挂载PVC"><a href="#修改yaml挂载PVC" class="headerlink" title="修改yaml挂载PVC"></a>修改yaml挂载PVC</h3><p>在控制台修改yaml</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/9.png" alt="upload-image"> </p><p>命令修改yaml</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@VM_0_13_centos ~]<span class="hljs-comment"># kubectl get deployment -n test</span><br>[root@VM_0_13_centos ~]<span class="hljs-comment"># kubectl edit deployment new-nginx -n test</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-03-TKE-operation-notes-03/10.png" alt="upload-image"> </p><p>完整的yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;2&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2020-06-02T09:36:11Z&quot;</span><br>  <span class="hljs-attr">generation:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">new-nginx</span><br>    <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">new-nginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">new-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;8614784222&quot;</span><br>  <span class="hljs-attr">selfLink:</span> <span class="hljs-string">/apis/apps/v1beta2/namespaces/test/deployments/new-nginx</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">7e77455e-a4b4-11ea-9c35-e28957d7d0b3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">new-nginx</span><br>      <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">new-nginx</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">new-nginx</span><br>        <span class="hljs-attr">qcloud-app:</span> <span class="hljs-string">new-nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RUNTIME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">RUNTIME</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-env</span><br>              <span class="hljs-attr">optional:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TZ</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">TZ</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-env</span><br>              <span class="hljs-attr">optional:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/tmptest/nwx-nginx</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">new-my-nginx</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">procMount:</span> <span class="hljs-string">Default</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">data-volume</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-secret</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data-volume</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">nwx-pvc1</span><br><span class="hljs-attr">status:</span><br>  <span class="hljs-attr">availableReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">conditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-string">&quot;2020-06-03T02:41:32Z&quot;</span><br>    <span class="hljs-attr">lastUpdateTime:</span> <span class="hljs-string">&quot;2020-06-03T02:41:32Z&quot;</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">Deployment</span> <span class="hljs-string">has</span> <span class="hljs-string">minimum</span> <span class="hljs-string">availability.</span><br>    <span class="hljs-attr">reason:</span> <span class="hljs-string">MinimumReplicasAvailable</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Available</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-string">&quot;2020-06-02T09:36:11Z&quot;</span><br>    <span class="hljs-attr">lastUpdateTime:</span> <span class="hljs-string">&quot;2020-06-03T02:51:59Z&quot;</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">ReplicaSet</span> <span class="hljs-string">&quot;new-nginx-86774775f6&quot;</span> <span class="hljs-string">has</span> <span class="hljs-string">successfully</span> <span class="hljs-string">progressed.</span><br>    <span class="hljs-attr">reason:</span> <span class="hljs-string">NewReplicaSetAvailable</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Progressing</span><br>  <span class="hljs-attr">observedGeneration:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">readyReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">updatedReplicas:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="验证PVC是否挂载成功"><a href="#验证PVC是否挂载成功" class="headerlink" title="验证PVC是否挂载成功"></a>验证PVC是否挂载成功</h3><p><img src="/img/2020-06-03-TKE-operation-notes-03/11.png" alt="upload-image"> </p><h2 id="PV的配置使用"><a href="#PV的配置使用" class="headerlink" title="PV的配置使用"></a>PV的配置使用</h2><h3 id="动态创建PV"><a href="#动态创建PV" class="headerlink" title="动态创建PV"></a>动态创建PV</h3><p>PersistentVolume（PV）：集群内的存储资源，例如节点是集群的资源。PV 独立于 Pod 的生命周期，根据不同的 StorageClass 类型创建不同类型的 PV。</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/12.png" alt="upload-image"> </p><p>当我们在PVC中引用对应的SC，会动态的创建PV。</p><h3 id="静态创建CBS类型PV"><a href="#静态创建CBS类型PV" class="headerlink" title="静态创建CBS类型PV"></a>静态创建CBS类型PV</h3><p><img src="/img/2020-06-03-TKE-operation-notes-03/13.png" alt="upload-image"> </p><p><img src="/img/2020-06-03-TKE-operation-notes-03/14.png" alt="upload-image"> </p><p>静态PV支持三种类型，CFS和COS需要去扩展组件中安装组件</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/15.png" alt="upload-image"> </p><p>安装COS和CFS组件</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/16.png" alt="upload-image"> </p><p>静态创建CBS类型pv，选择关联的SC即可</p><h3 id="静态创建CFS类型PV并关联到PVC"><a href="#静态创建CFS类型PV并关联到PVC" class="headerlink" title="静态创建CFS类型PV并关联到PVC"></a>静态创建CFS类型PV并关联到PVC</h3><p><img src="/img/2020-06-03-TKE-operation-notes-03/17.png" alt="upload-image"></p><p>先要创建好CFS类型的SC</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/18.png" alt="upload-image"></p><p><img src="/img/2020-06-03-TKE-operation-notes-03/19.png" alt="upload-image"> </p><p>在集群的同一个私有网络下创建NFS</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/20.png" alt="upload-image"> </p><p><img src="/img/2020-06-03-TKE-operation-notes-03/21.png" alt="upload-image"> </p><p>静态创建pv,并关联之前的sc和新建的NFS</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/22.png" alt="upload-image"> </p><p>创建PVC，关联创建的nfs类型pv,创建成功，即可引用</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/23.png" alt="upload-image"> </p><p>创建成功，可以在yaml中或者控制台修改deployment配置进行挂载</p><h3 id="静态创建CBS类型PV并关联到PVC"><a href="#静态创建CBS类型PV并关联到PVC" class="headerlink" title="静态创建CBS类型PV并关联到PVC"></a>静态创建CBS类型PV并关联到PVC</h3><p>首先在云服务器中创建你所需要的CBS卷</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/24.png" alt="upload-image"> </p><p>创建pv，选择你创建的云盘</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/25.png" alt="upload-image"> </p><p>创建PVC，选择你的容量，注意，如果你之前创建了多个PV，PVC关联的规则选择容量大于或等于当前PVC设置的容量大小的静态创建的PersistentVolume</p><p><img src="/img/2020-06-03-TKE-operation-notes-03/26.png" alt="upload-image"> </p><p>创建成功，可以在yaml中或者控制台修改deployment配置进行挂载</p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE操作笔记02</title>
    <link href="/2020/06/02/2020-06-02-TKE-operation-notes-02/"/>
    <url>/2020/06/02/2020-06-02-TKE-operation-notes-02/</url>
    
    <content type="html"><![CDATA[<p>本次笔记主要讲述了如何在腾讯云控制台创建并使用你的第一个kubernetes集群，创建过程中每个步骤的区别以及如何选择，保证自己的集群资源达到最优。</p><h1 id="使用TKE的优势"><a href="#使用TKE的优势" class="headerlink" title="使用TKE的优势"></a>使用TKE的优势</h1><h2 id="TKE集群类型"><a href="#TKE集群类型" class="headerlink" title="TKE集群类型"></a>TKE集群类型</h2><p>TKE CVM容器集群支持以下两种类型：</p><ul><li>托管集群（Master、Etcd 腾讯云容器服务管理）</li><li>独立部署集群（Master、Etcd 采用用户自有主机搭建）</li></ul><p>如果你需要对master的组件和ETCD有一定的订制，可以独立部署在CVM上，如果你仅仅只需要部署服务，则可以把master和Etcd托管</p><h2 id="TKE容器集群业务优势"><a href="#TKE容器集群业务优势" class="headerlink" title="TKE容器集群业务优势"></a>TKE容器集群业务优势</h2><ol><li>业务交付周期短：只需制作好业务镜像，容器基于业务镜像在秒级内启动，且可动态快速设置实例数量，相对物理机和CVM等业务交付和机器数量变更，极大的节省了交付周期。</li><li>业务半自动化：可通过TKE配置管理功能，快速变更pod下的容器批量配置，实现业务的自动化。（替代了ansible，saltstack部分功能）</li><li>业务自愈：只需设置好容器实例数，部署在上层的业务容器，即使容器异常退出，业务中止访问，在秒级内又会基于业务镜像启动新的容器实例，保证业务的可持续访问。</li><li>业务高可用：可通过设置容器实例数量大于或等于2，快速搭建高可用业务。</li><li>业务快速横向扩展：应对国庆，春节等高峰期访问量，可通过设置容器实例数量，实现业务的快速横向扩展。</li><li>业务透明管理：相对物理机和CVM，单个应用只会部署在单个容器中，相对在物理机和CVM上的混部方式，业务架构清晰，管理透明化。</li><li>业务资源成本低：容器器需要分配的 CPU 量 ( 单位：mU (千分之一核) )，最小100，既0.1核；容器需要分配内存的量 ( 单位：MiB )，建议最小为4MiB。若部署单个PHP业务应用，容器建议分配0.1核128M。相对物理机分配8核16G 和 CVM分配4核4G，极大的节省了成本，提高了资源利用率。</li><li>业务运维成本低：能够极大的降低运维成本，提升服务质量。（例如：相对在物理机和CVM上实现业务高可用，需要部署haproxy等软件，且搭建配置繁琐，在容器设置实例数即可，极大的降低运维成本。）</li></ol><h2 id="TKE容器对比与自建容器的优势"><a href="#TKE容器对比与自建容器的优势" class="headerlink" title="TKE容器对比与自建容器的优势"></a>TKE容器对比与自建容器的优势</h2><table><thead><tr><th>优势</th><th>腾讯云容器服务（TKE）</th><th>自建容器服务</th></tr></thead><tbody><tr><td>简单易用</td><td>简化集群管理腾讯云容器服务提供超大规模容器集群管理、资源调度、容器编排、代码构建，屏蔽了底层基础构架的差异，简化了分布式应用的管理和运维，您无需再操作集群管理软件或设计容错集群架构，因此也无需参与任何相关的管理或扩展工作。您只需启动容器集群，并指定想要运行的任务即可，腾讯云容器服务帮您完成所有的集群管理工作，让您可以集中精力开发 Docker 化的应用程序。</td><td>自建容器管理基础设施通常涉及安装、操作、扩展自己的集群管理软件、配置管理系统和监控解决方案，管理复杂。</td></tr><tr><td>灵活扩展</td><td>灵活集群托管，集成负载均衡您可以使用腾讯云容器服务灵活安排长期运行的应用程序和批量作业。您还可以使用 API 获得最新的集群状态信息，以便集成您自己的自定义计划程序和第三方计划程序。腾讯云容器服务与负载均衡集成，支持在多个容器之间分配流量。您只需指定容器配置和要使用的负载均衡器，容器服务管理程序将自动添加和删除。另外腾讯云容器服务可以自动恢复运行状况不佳的容器，保证容器数量满足您的需求，以便为应用程序提供支持。</td><td>需要根据业务流量情况和健康情况人工确定容器服务的部署，可用性和可扩展性差。</td></tr><tr><td>安全可靠</td><td>资源高度隔离，服务高可用腾讯云容器服务在您自己的云服务器中启动，不与其他客户共享计算资源。您的集群在私有网络中运行，因此您可以使用您自己的安全组和网络 ACL，这些功能为您提供了高隔离水平，并帮助您使用云服务器构建高度安全可靠的应用程序。容器服务采用分布式服务架构，保证服务的故障自动恢复、快速迁移；结合有状态服务后端的分布式存储，实现服务和数据的安全、高可用。</td><td>自建容器服务因其内核问题及 Namespace 不够完善，租户、设备、内核模块隔离性都比较差。</td></tr><tr><td>高效</td><td>镜像快速部署，业务持续集成腾讯云容器服务运行在您的私有网络中，高品质的 BGP 网络保证镜像极速上传下载，轻松支持海量容器秒级启动，极大程度降低了运行开销，使您的部署更加专注于业务运行。您可以在腾讯云容器服务上部署业务，开发人员在 GitHub 或其他代码平台提交代码后，容器服务可立即进行构建、测试、打包集成，将集成的代码部署到预发布环境和现网环境上。</td><td>自建容器服务的网络无保证，因此无法保证使用镜像创建容器的效率。</td></tr><tr><td>低成本</td><td>容器服务免费腾讯云容器服务没有任何附加费用，您可以在容器中免费调用 API 构建您的集群管理程序。您只需为您创建的用于存储和运行应用程序的云服务资源（例如云服务器、云硬盘等）付费。</td><td>需要投入资金构建、安装、运维、扩展自己的集群管理基础设施，成本开销大。</td></tr></tbody></table><h1 id="创建TKE-CVM容器集群创建和使用"><a href="#创建TKE-CVM容器集群创建和使用" class="headerlink" title="创建TKE CVM容器集群创建和使用"></a>创建TKE CVM容器集群创建和使用</h1><h2 id="创建私有VPC网络"><a href="#创建私有VPC网络" class="headerlink" title="创建私有VPC网络"></a>创建私有VPC网络</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/1.png" alt="upload-image"> </p><p>现在跳转到了私有网络创建界面，由于容器集群网络只支持私有网络，点击现在新建（容器集群网络只支持私有网络），输出私有网络名称（vpc-gz），和子网名称（subnet-vpc-gz），可用区我这里选择的是广州三区，点击创建。<br>至此，私有网络创建完成。</p><h2 id="创建TKE集群"><a href="#创建TKE集群" class="headerlink" title="创建TKE集群"></a>创建TKE集群</h2><p>注意这里集群管理需要选择你新建的vpc的区域，因为创建集群需要用到vpc私有网络，如果该区域没有创建vpc网络，则无法创建集群</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/2.png" alt="upload-image"> </p><p>在容器服务中，点击集群，点击新建，跳转到创建集群的界面，填写集群信息。<br>集群名称：要创建的集群的名称。不超过60个字符。（我填写的集群名称是First-k8s）</p><ul><li>新增资源所属项目：根据实际需求进行选择，新增的资源将会自动分配到该项目下。（和腾讯云服务器所在项目对应，因为没有创建，选择默认即可，之后创建容器集群是运行在CVM上，CVM也在默认项目下）</li><li>Kubernetes版本：提供多个 Kubernetes 版本选择。各版本特性对比请查看 。（1.12.4版本才支持containerd组件，我这里选择containerd，如果你需要在节点上调用docker api接口或者执行docker命令，则需要选择docker）</li><li>所在地域：建议您根据所在地理位置选择靠近的地域。可降低访问延迟，提高下载速度。（我选择广州）</li><li>集群网络：为集群内主机分配在节点网络地址范围内的 IP 地址。（我选择刚刚创建的子网vpc-gz）</li><li>容器网络：为集群内容器分配在容器网络地址范围内的 IP 地址。（默认即可，详情可查看使用指引）</li><li>操作系统：Master和Node CVM机器所使用的操作系统。（这里我选择CentOS 7.6 64bit TKE-Optimized）</li><li>集群描述：填写集群的相关信息，该信息将显示在集群信息页面。</li><li>高级设置：可设置 ipvs。ipvs 适用于将在集群中运行大规模服务的场景，开启后不能关闭。（我这里选择开始）</li></ul><p>单击【下一步】。</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/3.png" alt="upload-image"> </p><p>主要参数信息如下：</p><ul><li>创建集群：因为初次创建，默认项目下没有云主机，所以不用勾选。（如果你之前已经购买了CVM，可以选择购买的CVM）</li><li>Master：Master 的部署方法决定了您集群的管理模式，我们提供了两种集群托管模式选择。（这里可以根据个人需求来选择类型，如果是选择托管模式，则可以节省master节点的部署费用，但是无法对master组件进行配置修改。相反，独立部署有master节点CVM等配置的支出，但是可以自己修改master组件配置。我们这里选择托管）</li><li>Node：Node 配置的是集群运行服务真正使用的工作节点。您可以在创建集群时购置云服务器作为 Node 节点，也可以在集群创建完成后再添加 Node 节点。（我这里选择新增，在创建TKE集群时，node节点同时创建好）<br>计费方式：选择按量计费（按照你的使用时长收费）</li><li>Node机型：当 “Node” 选择为 “新增” 时，可选。<ul><li>可用区：选择广州三区，因为我的私有子网络创建在广州三区。</li><li>节点网络：选择刚刚创建的私有网络即可</li><li>机型：我这里选择的是标准型S1 4核4G</li><li>系统盘：默认为“本地硬盘50G”，您可以根据机型选择本地硬盘、云硬盘、SSD 云硬盘、高性能云硬盘等。</li><li>数据盘：（我这里选择保持默认，暂不购买）</li><li>公网带宽：勾选分配免费公网IP，系统将免费分配公网 IP。（我这里保持默认）</li><li>数量：Node节点设置&gt;&#x3D;1台。（我这里选择保持默认，1台）</li></ul></li></ul><p>主要参数信息如下：</p><ul><li>数据盘挂载：不用勾选。（之前我没有选择购买数据盘）</li><li>安全组：安全组具有防火墙的功能，用于设置云服务器的网络访问控制。（这里我点击新建安全组，选择容器节点放通30000-32768端口）</li><li>登录方式：提供三种登录方式。</li><li>设置密码：请根据提示设置对应密码。（我们选择该方式）</li><li>立即关联密钥：密钥对是通过算法生成的一对参数，是一种比常规密码更安全的登录云服务器的方式。</li><li>自动生成密码：自动生成的密码将通过站内信发送给您。</li><li>安全加固：默认勾选</li><li>云监控：默认勾选</li><li>节点启动配置：可设置容器的开机启动脚本，我这里没有填写。</li><li>Lable：可以给你的节点打上对应的标签，可以用于后续pod的调度使用</li><li>封锁：开启封锁后，容器不会调度创建到该node节点上，这里不勾选。</li></ul><p>单击【下一步】，检查并确认配置信息。</p><p>单击【完成】，即可完成创建。</p><p>完成后可以在集群管理页面找到你创建的集群查看集群创建的进度</p><p>至此，集群已经创建完成</p><h1 id="TKE容器集群的创建"><a href="#TKE容器集群的创建" class="headerlink" title="TKE容器集群的创建"></a>TKE容器集群的创建</h1><h2 id="如何访问k8s集群"><a href="#如何访问k8s集群" class="headerlink" title="如何访问k8s集群"></a>如何访问k8s集群</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/4.png" alt="upload-image"></p><p><img src="/img/2020-06-02-TKE-operation-notes-02/5.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/6.png" alt="upload-image"></p><p>我们通过kubectl的方式访问创建的集群主要分为以下步骤</p><ul><li>开启集群的访问权限：如果你是在同一个vpc下访问集群，则开启内网访问即可，如果你是需要在公网上访问，则需要开机外网访问的权限，注意这里在开启访问权限时候尽量指定ip或者ip网段访问，这样保证集群的安全。</li><li>获取kubeconfig配置：可以复制或者下载kubeconfig文件到本地，方便后续使用。</li><li>客户端机器上安装kubectl：如果是已经安装了集群机器，则不需要安装kubectl，新的集群则采用下面命令安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">curl -LOhttps://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ./kubectl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo <span class="hljs-built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br></code></pre></td></tr></table></figure></li><li>配置集群的kubeconfig文件：配置kubeconfig文件分为2种情况，已经配置其他集群的访问凭证，还有就是没有配置过</li></ul><p>已经配置过其他集群执行下面操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root/.kube/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> new-config1    <span class="hljs-comment">#将一个集群kubeconfig内容写入new-config1文件中</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> new-config2    <span class="hljs-comment">#将另一个集群kubeconfig内容写入new-config2文件中</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">KUBECONFIG=new-config1:new-config2  kubectl config view --flatten &gt; <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl config get-contexts   <span class="hljs-comment">#获取集群信息</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl config use-context cls-hzywbn88-context-default   <span class="hljs-comment">#切换集群</span></span><br></code></pre></td></tr></table></figure><p>未配置过集群的执行如下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /root/.kube</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> config  <span class="hljs-comment">#将kubeconfig内容写入config文件中</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-02-TKE-operation-notes-02/7.png" alt="upload-image"> </p><p>可以查看自带的pod查看集群信息</p><h2 id="创建工作负载"><a href="#创建工作负载" class="headerlink" title="创建工作负载"></a>创建工作负载</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/8.png" alt="upload-image"> </p><p>集群中提供了以下五种负载</p><ul><li>deployment：Deployment 声明了 Pod 的模板和控制 Pod 的运行策略，适用于部署无状态的应用程序。您可以根据业务需求，对 Deployment 中运行的 Pod 的副本数、调度策略、更新策略等进行声明。</li><li>statefulset：StatefulSet 主要用于管理有状态的应用，创建的 Pod 拥有根据规范创建的持久型标识符。Pod 迁移或销毁重启后，标识符仍会保留。在需要持久化存储时，您可以通过标识符对存储卷进行一一对应。如果应用程序不需要持久的标识符，建议您使用 Deployment 部署应用程序。</li><li>daemonset：通过daemon进程的方式在每个节点上部署一个pod，一般用于日志和告警指标的收集场景。</li><li>job：Job 控制器会创建 1 - N 个 Pod，这些 Pod 按照运行规则运行，直至运行结束。Job 可用于批量计算及数据分析等场景，通过重复执行次数、并行度、重启策略等设置满足业务述求。Job 执行完成后，不再创建新的 Pod，也不会删除已有 Pod，您可在“日志”中查看已完成的 Pod 的日志。如果您删除了 Job，Job 创建的 Pod 也会同时被删除，将查看不到该 Job 创建的 Pod 的日志。</li><li>cronjob：一个 CronJob 对象类似于 crontab（cron table）文件中的一行。它根据指定的预定计划周期性地运行一个 Job，格式可以参考 Cron。</li></ul><p>一般我们部署pod的之前都要先创建你所部署的命名空间和从镜像仓库拉取镜像的秘钥。</p><h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h3><p><img src="/img/2020-06-02-TKE-operation-notes-02/9.png" alt="upload-image"> </p><h3 id="创建镜像拉取secret"><a href="#创建镜像拉取secret" class="headerlink" title="创建镜像拉取secret"></a>创建镜像拉取secret</h3><p><img src="/img/2020-06-02-TKE-operation-notes-02/10.png" alt="upload-image"> </p><h3 id="配置deployment"><a href="#配置deployment" class="headerlink" title="配置deployment"></a>配置deployment</h3><p><img src="/img/2020-06-02-TKE-operation-notes-02/11.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/12.png" alt="upload-image"> </p><p>根据实际需求，设置 Deployment 参数。关键参数信息如下：</p><ul><li>工作负载名：自定义。（我填写是nginx-test名称）</li><li>命名空间：根据实际需求进行选择。这里选择之前创建的test。</li><li>类型：选择 “Deployment（可扩展的部署 Pod）”。</li><li>数据卷：不用添加。因为选择的是方案一，对网站源码存储方式无特殊要求。</li><li>实例内容器：根据实际需求，为 Deployment 的一个 Pod 设置一个或多个不同的容器,我们选择一个nginx<ul><li>名称：自定义。（我填写my-nginx）</li><li>镜像：根据实际需求进行选择。（我这里选择nwx-nginx仓库）</li><li>镜像版本：根据实际需求进行填写。（我这里没写，默认为最新）</li><li>镜像拉取策略：本地没有则去远程拉取</li><li>CPU&#x2F;内存限制：可根据 Kubernetes 资源限制 进行设置 CPU 和内存的限制范围，提高业务的健壮性。（默认的参数即可）</li><li>高级设置：可设置 “工作目录”，“运行命令”，“运行参数”，“容器健康检查”，“特权级”等参数。（高级功能这里先不设置）</li><li>添加容器：我们就运行一个容器</li></ul></li><li>实例数量：根据实际需求选择调节方式，设置实例数量。</li><li>imagepullsecrets：镜像的拉取秘钥，选择我们之前创建的test-secret</li><li>节点调度策略：节点的亲和性调度功能，默认即可。</li></ul><h2 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h2><h3 id="配置service"><a href="#配置service" class="headerlink" title="配置service"></a>配置service</h3><p>Service 定义访问后端 Pod 的访问策略，提供固定的虚拟访问 IP。您可以通过 Service 负载均衡地访问到后端的 Pod。 Service 支持以下类型：</p><ul><li>公网访问： 使用 Service 的 Loadbalance 模式，自动创建公网 CLB。 公网 IP 可直接访问到后端的 Pod。</li><li>VPC内网访问：使用 Service 的 Loadbalance 模式，自动创建内网 CLB。指定 annotations:service.kubernetes.io&#x2F;qcloud-loadbalancer-internal-subnetid: subnet-xxxxxxxx，VPC 内网即可通过内网 IP 直接访问到后端的 Pod。</li><li>集群内访问：使用 Service 的 ClusterIP 模式，自动分配 Service 网段中的 IP，用于集群内访问。</li><li>主机端口访问：通过node节点IP+端口访问业务。</li></ul><p><img src="/img/2020-06-02-TKE-operation-notes-02/13.png" alt="upload-image"> </p><p>根据实际需求，设置 Service 参数。关键参数信息如下：</p><ul><li>Service：勾选启用。</li><li>服务访问方式：根据实际需求，选择对应的访问方式。因为我要从本地windows机器访问wordpress服务，所以我这里选择主机端口访问，我们可以通过节点CVM的共有ip访问。</li><li>端口映射：根据实际需求进行设置。协议选择TCP，容器端口是指容器内服务运行的端口（我这里填写的80，也就是nginx服务启动端口）,主机端口为30001，服务端口为80</li><li>ExternalTrafficPolicy：保持默认。</li><li>Session Affinity：保持默认。</li></ul><p>点击创建</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/14.png" alt="upload-image"> </p><p>此时会自动跳转到事件页面，可以看到的pod日志没有报错。</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/15.png" alt="upload-image"></p><p>pod状态都为running则表示pod启动正常</p><h3 id="访问好创建的服务"><a href="#访问好创建的服务" class="headerlink" title="访问好创建的服务"></a>访问好创建的服务</h3><p><img src="/img/2020-06-02-TKE-operation-notes-02/16.png" alt="upload-image"> </p><p>从节点管理获取到节点的ip</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/17.png" alt="upload-image"> </p><p>通过节点ip:30001的访问即可访问到对应的服务</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/18.png" alt="upload-image"> </p><p>可以查看service中的公网ip</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/19.png" alt="upload-image"> </p><p>通过公网ip和映射的端口进行访问（我们设置的映射端口为81）</p><h3 id="配置ingress"><a href="#配置ingress" class="headerlink" title="配置ingress"></a>配置ingress</h3><p><img src="/img/2020-06-02-TKE-operation-notes-02/20.png" alt="upload-image"> </p><p>创建ingress来设置域名来访问对应的集群服务</p><p>参数设置如下</p><ul><li>命名空间：选你所需要转发的服务所在命名空间</li><li>监听端口：http监听为80，https监听为443，https需要配置ssl证书</li><li>转发配置：配置你的域名，如果后端多个路径对应不同域名则配置配置路径，没有就配置&#x2F;，选择服务名称和端口</li></ul><p><img src="/img/2020-06-02-TKE-operation-notes-02/21.png" alt="upload-image"> </p><p>域名解析，我们只需要在自己购买的域名里面将对应的子域名解析到vip的ip即可</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/22.png" alt="upload-image"> </p><p>在浏览器输入域名即可访问到对应的服务</p><h2 id="新加节点到集群中"><a href="#新加节点到集群中" class="headerlink" title="新加节点到集群中"></a>新加节点到集群中</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/23.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/24.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/25.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/26.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/27.png" alt="upload-image"> </p><h1 id="TKE容器配置项操作"><a href="#TKE容器配置项操作" class="headerlink" title="TKE容器配置项操作"></a>TKE容器配置项操作</h1><h2 id="配置项介绍和作用"><a href="#配置项介绍和作用" class="headerlink" title="配置项介绍和作用"></a>配置项介绍和作用</h2><p>配置用来规定一些程序在启动时读入设定，提供了一种修改程序设置的手段， 针对不同的对象可以使用不同的配置。</p><p>配置项是多个配置的集合，配置项的值可以是字符串，也可以是文件</p><ul><li>使用配置项功能可以帮您管理不同环境、不同业务的配置，支持多版本,支持Yaml格式</li><li>方便您部署相同应用的不同环境，配置文件支持多版本，方便您进行更新和回滚应用</li><li>方便您快速将您的配置以文件的形式导入到容器中</li></ul><h2 id="创建配置项"><a href="#创建配置项" class="headerlink" title="创建配置项"></a>创建配置项</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/28.png" alt="upload-image"> </p><p>我们这里新建一个配置项，只修改nginx的错误日志名称作为示例</p><p>配置说明：</p><ul><li>名称：configmap的名称</li><li>命名空间：挂在服务所在的命名空间</li><li>内容：你挂在的文件及文件内容</li></ul><h2 id="挂载configmap"><a href="#挂载configmap" class="headerlink" title="挂载configmap"></a>挂载configmap</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/29.png" alt="upload-image"> </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs dts">修改yaml文件如下<br><span class="hljs-symbol">apiVersion:</span> apps/v1beta2<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    deployment.kubernetes.io/revision: <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-symbol">    description:</span> test nginx<br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2020-06-02T07:28:45Z&quot;</span><br><span class="hljs-symbol">  generation:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  labels:</span><br>    k8s-app: nignx-test<br>    qcloud-app: nignx-test<br><span class="hljs-symbol">  name:</span> nignx-test<br><span class="hljs-symbol">  namespace:</span> test<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;8580475695&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/apis/</span>apps<span class="hljs-keyword">/v1beta2/</span>namespaces<span class="hljs-keyword">/test/</span>deployments/nignx-test<br><span class="hljs-symbol">  uid:</span> b13877fe-a4a2<span class="hljs-number">-11</span>ea<span class="hljs-number">-9</span>c35-e28957d7d0b3<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  revisionHistoryLimit:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br>      k8s-app: nignx-test<br>      qcloud-app: nignx-test<br><span class="hljs-symbol">  strategy:</span><br><span class="hljs-symbol">    rollingUpdate:</span><br><span class="hljs-symbol">      maxSurge:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">      maxUnavailable:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">    type:</span> RollingUpdate<br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      creationTimestamp:</span> null<br><span class="hljs-symbol">      labels:</span><br>        k8s-app: nignx-test<br>        qcloud-app: nignx-test<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - image: ccr.ccs.tencentyun.com<span class="hljs-keyword">/tmptest/</span>nwx-nginx<br><span class="hljs-symbol">        imagePullPolicy:</span> IfNotPresent<br><span class="hljs-symbol">        name:</span> my-nginx<br><span class="hljs-symbol">        resources:</span><br><span class="hljs-symbol">          limits:</span><br><span class="hljs-symbol">            cpu:</span> <span class="hljs-number">500</span>m<br><span class="hljs-symbol">            memory:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">          requests:</span><br><span class="hljs-symbol">            cpu:</span> <span class="hljs-number">250</span>m<br><span class="hljs-symbol">            memory:</span> <span class="hljs-number">256</span>Mi<br><span class="hljs-symbol">        volumeMounts:</span><br>        - mountPath: <span class="hljs-keyword">/etc/</span>nginx/nginx.conf<br><span class="hljs-symbol">          name:</span> config-volume<br><span class="hljs-symbol">          subPath:</span> nginx.conf<br><span class="hljs-symbol">        securityContext:</span><br><span class="hljs-symbol">          privileged:</span> false<br><span class="hljs-symbol">          procMount:</span> Default<br><span class="hljs-symbol">        terminationMessagePath:</span> <span class="hljs-keyword">/dev/</span>termination-log<br><span class="hljs-symbol">        terminationMessagePolicy:</span> File<br><span class="hljs-symbol">      dnsPolicy:</span> ClusterFirst<br><span class="hljs-symbol">      imagePullSecrets:</span><br>      - name: test-secret<br><span class="hljs-symbol">      restartPolicy:</span> Always<br><span class="hljs-symbol">      schedulerName:</span> default-schedule<br><span class="hljs-symbol">      securityContext:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">      terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br><span class="hljs-symbol">      volumes:</span><br>      - configMap:<br><span class="hljs-symbol">          defaultMode:</span> <span class="hljs-number">466</span><br><span class="hljs-symbol">          name:</span> nginx-conf<br><span class="hljs-symbol">        name:</span> config-volume<br><span class="hljs-symbol">status:</span><br><span class="hljs-symbol">  availableReplicas:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  conditions:</span><br>  - lastTransitionTime: <span class="hljs-string">&quot;2020-06-02T07:28:54Z&quot;</span><br><span class="hljs-symbol">    lastUpdateTime:</span> <span class="hljs-string">&quot;2020-06-02T07:28:54Z&quot;</span><br><span class="hljs-symbol">    message:</span> Deployment has minimum availability.<br><span class="hljs-symbol">    reason:</span> MinimumReplicasAvailable<br><span class="hljs-symbol">    status:</span> <span class="hljs-string">&quot;True&quot;</span><br><span class="hljs-symbol">    type:</span> Available<br>  - lastTransitionTime: <span class="hljs-string">&quot;2020-06-02T07:28:45Z&quot;</span><br><span class="hljs-symbol">    lastUpdateTime:</span> <span class="hljs-string">&quot;2020-06-02T07:28:54Z&quot;</span><br><span class="hljs-symbol">    message:</span> ReplicaSet <span class="hljs-string">&quot;nignx-test-8ddf5b469&quot;</span> has successfully progressed.<br><span class="hljs-symbol">    reason:</span> NewReplicaSetAvailable<br><span class="hljs-symbol">    status:</span> <span class="hljs-string">&quot;True&quot;</span><br><span class="hljs-symbol">    type:</span> Progressing<br><span class="hljs-symbol">  observedGeneration:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  readyReplicas:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  updatedReplicas:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-02-TKE-operation-notes-02/30.png" alt="upload-image"></p><p>提交修改后会自动滚动更新pod</p><p><img src="/img/2020-06-02-TKE-operation-notes-02/31.png" alt="upload-image"></p><p>可以进入容器中看看日志名称是否修改，如果发现日志名称修改，则挂载成功</p><h2 id="新建容器通过configmap挂载环境变量"><a href="#新建容器通过configmap挂载环境变量" class="headerlink" title="新建容器通过configmap挂载环境变量"></a>新建容器通过configmap挂载环境变量</h2><p><img src="/img/2020-06-02-TKE-operation-notes-02/32.png" alt="upload-image"> </p><p><img src="/img/2020-06-02-TKE-operation-notes-02/33.png" alt="upload-image">  </p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TKE操作笔记01</title>
    <link href="/2020/06/01/2020-06-01-TKE-operation-notes-01/"/>
    <url>/2020/06/01/2020-06-01-TKE-operation-notes-01/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何入门腾讯云上的TKE(Tencent Kubernetes Engine)服务。</p><h1 id="TKE简介"><a href="#TKE简介" class="headerlink" title="TKE简介"></a>TKE简介</h1><p>腾讯云容器服务（Tencent Kubernetes Engine，TKE）是高度可扩展的高性能容器管理服务，您可以在托管的云服务器实例集群上轻松运行应用程序。使用该服务，您将无需安装、运维、扩展您的集群管理基础设施，只需进行简单的 API 调用，便可启动和停止 Docker 应用程序，查询集群的完整状态，以及使用各种云服务。您可以根据资源需求和可用性要求在集群中安排容器的置放，满足业务或应用程序的特定要求。<br>腾讯云容器服务基于原生 Kubernetes 提供以容器为核心的解决方案，解决用户开发、测试及运维过程的环境问题、帮助用户降低成本，提高效率。腾讯云容器服务完全兼容原生 Kubernetes API，并扩展了腾讯云的云硬盘、负载均衡等 Kubernetes 插件，同时以腾讯云私有网络为基础，实现了高可靠、高性能的网络方案。</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/1.png" alt="upload-image"> </p><h1 id="创建镜像仓库并授权连接github和gitlab"><a href="#创建镜像仓库并授权连接github和gitlab" class="headerlink" title="创建镜像仓库并授权连接github和gitlab"></a>创建镜像仓库并授权连接github和gitlab</h1><p><strong>镜像仓库概述</strong></p><p>镜像仓库用于存放 Docker 镜像，Docker 镜像用于部署容器服务，每个镜像有特定的唯一标识（镜像的 Registry 地址+镜像名称+镜像 Tag）。</p><p><strong>镜像类型</strong></p><p>目前镜像支持 Docker Hub 官方镜像和用户私有镜像(自己生成的业务镜像和一些订制的镜像)。</p><p><strong>授权步骤</strong></p><p>将腾讯云docker镜像仓库和Github授权连接，分为以下四步：</p><p>1.开通镜像仓库</p><p>2.新建命名空间</p><p>3.新建镜像仓库</p><p>4.源代码授权</p><h2 id="腾讯云上开通镜像仓库"><a href="#腾讯云上开通镜像仓库" class="headerlink" title="腾讯云上开通镜像仓库"></a>腾讯云上开通镜像仓库</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/2.png" alt="upload-image"> </p><h2 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/3.png" alt="upload-image"> </p><p>在容器服务中，点击镜像仓库会展开下拉框，点击我的镜像，首次使用镜像仓库的用户，需要先开通镜像仓库，输入用户名和密码。</p><ul><li>用户名：默认是当前用户的账号，是您登录到腾讯云docker镜像仓库的身份。</li><li>密码：是您登录到腾讯云docker镜像仓库的凭证。</li></ul><h2 id="新建镜像仓库"><a href="#新建镜像仓库" class="headerlink" title="新建镜像仓库"></a>新建镜像仓库</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/4.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/5.png" alt="upload-image"> </p><p>点击我的镜像，点击我的镜像，点击新建，新建镜像仓库，输入名称，类型选择私有，命名空间选择之前新建的liangfeng，描述可自定义填写该仓库的用途。</p><ul><li>类型：分为公有和私有，即公有镜像仓库和私有镜像仓库。如果你想将自己仓库下的镜像暴露在公网，且其他人都能够访问，则选择公有；如果只用于个人用户访问，则选择私有。</li></ul><h2 id="登录仓库上传下载镜像"><a href="#登录仓库上传下载镜像" class="headerlink" title="登录仓库上传下载镜像"></a>登录仓库上传下载镜像</h2><p>现在我们举例将busybox的最新镜像上传到仓库并在另外的机器上下载镜像</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">登录仓库<br>[root@master]# docker <span class="hljs-keyword">login</span> ccr.ccs.tencentyun.com/nwx_registry/busybox -u <span class="hljs-number">100011007491</span> -p ********<br><br><span class="hljs-built_in">WARNING</span>! <span class="hljs-keyword">Using</span> <span class="hljs-comment">--password via the CLI is insecure. Use --password-stdin.</span><br><br><span class="hljs-built_in">WARNING</span>! Your <span class="hljs-keyword">password</span> will be stored <span class="hljs-keyword">unencrypted</span> <span class="hljs-keyword">in</span> /root/.docker/config.json.<br><br>Configure a credential helper <span class="hljs-keyword">to</span> remove this <span class="hljs-built_in">warning</span>. See<br><br>https://docs.docker.com/engine/reference/commandline/<span class="hljs-keyword">login</span>/#credentials-store<br><br><span class="hljs-keyword">Login</span> Succeeded<br><br>tag镜像<br>[root@master]# docker tag busybox:latest ccr.ccs.tencentyun.com/nwx_registry/busybox:latest<br><br>push镜像<br>[root@master]# docker push ccr.ccs.tencentyun.com/nwx_registry/busybox:latest<br><br>The push refers <span class="hljs-keyword">to</span> repository [ccr.ccs.tencentyun.com/nwx_registry/busybox]<br><br>eac247cb7af5: Pushed<br><br>latest: digest: sha256:<span class="hljs-number">24</span>fd20af232ca4ab5efbf1aeae7510252e2b60b15e9a78947467340607cd2ea2 size: <span class="hljs-number">527</span><br><br>下载镜像<br>登录镜像仓库<br><br>[root@master]# docker <span class="hljs-keyword">login</span> ccr.ccs.tencentyun.com/nwx_registry/busybox -u <span class="hljs-number">100011007491</span> -p ********<br><br><span class="hljs-built_in">WARNING</span>! <span class="hljs-keyword">Using</span> <span class="hljs-comment">--password via the CLI is insecure. Use --password-stdin.</span><br><br><span class="hljs-built_in">WARNING</span>! Your <span class="hljs-keyword">password</span> will be stored <span class="hljs-keyword">unencrypted</span> <span class="hljs-keyword">in</span> /root/.docker/config.json.<br><br>Configure a credential helper <span class="hljs-keyword">to</span> remove this <span class="hljs-built_in">warning</span>. See<br><br>https://docs.docker.com/engine/reference/commandline/<span class="hljs-keyword">login</span>/#credentials-store<br><br><span class="hljs-keyword">Login</span> Succeeded<br><br>下载镜像<br><br>[root@master ~]# docker pull ccr.ccs.tencentyun.com/nwx_registry/busybox:latest<br><br>latest: Pulling <span class="hljs-keyword">from</span> nwx_registry/busybox<br><br>Digest: sha256:<span class="hljs-number">24</span>fd20af232ca4ab5efbf1aeae7510252e2b60b15e9a78947467340607cd2ea2<br><br>Status: Downloaded newer image <span class="hljs-keyword">for</span> ccr.ccs.tencentyun.com/nwx_registry/busybox:latest<br></code></pre></td></tr></table></figure><h2 id="源代码授权"><a href="#源代码授权" class="headerlink" title="源代码授权"></a>源代码授权</h2><h3 id="github上源代码授权"><a href="#github上源代码授权" class="headerlink" title="github上源代码授权"></a>github上源代码授权</h3><p><img src="/img/2020-06-01-TKE-operation-notes-01/6.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/7.png" alt="upload-image"> </p><p>github上源代码授权只需要确认授权，并输入github账户密码登录即可</p><h3 id="gitlab上源代码授权"><a href="#gitlab上源代码授权" class="headerlink" title="gitlab上源代码授权"></a>gitlab上源代码授权</h3><p><img src="/img/2020-06-01-TKE-operation-notes-01/8.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/9.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/10.png" alt="upload-image"> </p><p>在我的镜像，点击源代码授权，点击立即授权同步 Gitlab代码源。</p><ul><li>服务地址：Gitlab HTTP或HTTPS地址</li><li>用户名：登录Gitlab 的用户名。</li><li>私有Token：连接Gitlab 的Personal Access Token。</li></ul><p>至此源授代码完成。</p><p><strong>备注</strong>：如何新建Gitlab Personal Access Token。</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/11.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/12.png" alt="upload-image"> </p><p>点击右上角个人资料，点击Setting，点击Access Tokens，输入Token Name和过期时间，勾选api和read_user或其他权限，点击Create Personal Access Token。之后可以看到生成的Personal Access Token。</p><h1 id="制作nginx和php基础镜像"><a href="#制作nginx和php基础镜像" class="headerlink" title="制作nginx和php基础镜像"></a>制作nginx和php基础镜像</h1><h2 id="容器云平台Docker镜像"><a href="#容器云平台Docker镜像" class="headerlink" title="容器云平台Docker镜像"></a>容器云平台Docker镜像</h2><p>1.Docker基础镜像：提供基础应用型的Docker软件服务（例如：nginx，php，jdk等），所以dockerhub镜像，公有镜像，自定义私有镜像都可以理解为基础镜像。</p><p>2.Docker业务镜像：将Gitlab上的源代码，或通过maven打出来的jar或tar包，添加至基础镜像中，通过构建打包成的Docker业务镜像。</p><h2 id="通过commit的方式制作镜像"><a href="#通过commit的方式制作镜像" class="headerlink" title="通过commit的方式制作镜像"></a>通过commit的方式制作镜像</h2><p>镜像制作步骤如下</p><p>1.安装docker软件（yum install docker或apt-get install docker）</p><p>2.下载docker centos镜像(docker pull)</p><p>3.创建并进入容器（docker run）</p><p>4.nginx docker基础镜像制作</p><p>5.将容器提交docker基础镜像（docker commit）</p><p>6.php docker基础镜像制作</p><h2 id="docker镜像制作"><a href="#docker镜像制作" class="headerlink" title="docker镜像制作"></a>docker镜像制作</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#  cat /etc/redhat-release</span><br><span class="hljs-attribute">CentOS</span> Linux release <span class="hljs-number">7</span>.<span class="hljs-number">7</span>.<span class="hljs-number">1908</span> (Core)<br><span class="hljs-comment"># yum install docker -y                //安装docker软件</span><br><span class="hljs-comment"># systemctl start dockerd            //启动docker服务</span><br><span class="hljs-comment"># systemctl status docker        //查看docker状态，返回active (running)说明成功。</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-01-TKE-operation-notes-01/13.png" alt="upload-image"> </p><h3 id="下载docker镜像"><a href="#下载docker镜像" class="headerlink" title="下载docker镜像"></a>下载docker镜像</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@VM_0_13_centos ~]<span class="hljs-comment"># docker pull centos:7.5.1804</span><br><br><span class="hljs-section">7.5.1804: Pulling from library/centos</span><br><br><span class="hljs-section">5ad559c5ae16: Pull complete</span><br><br><span class="hljs-section">Digest: sha256:7a45e4a1efbaafc1d9aa89925b6fdb33288a96d35ea0581412316e2f0ad3720a</span><br><br><span class="hljs-section">Status: Downloaded newer image for centos:7.5.1804</span><br><br><span class="hljs-section">docker.io/library/centos:7.5.1804</span><br><br>[root@VM_0_13_centos ~]<span class="hljs-comment"># docker images| grep centos</span><br><br>centos                          7.5.1804            cf49811e3cdb        14 months ago       200MB<br><br>REPOSITORY是仓库名，TAG 是标签，IMAGE ID是镜像ID，CREATED是镜像创建到至今的时间，SIZE是镜像大小<br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-01-TKE-operation-notes-01/14.png" alt="upload-image"> </p><h3 id="启动容器并进入容器"><a href="#启动容器并进入容器" class="headerlink" title="启动容器并进入容器"></a>启动容器并进入容器</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_0_13_centos</span> ~]<span class="hljs-meta"># docker run -it centos:7.5.1804 /bin/bash</span><br></code></pre></td></tr></table></figure><h3 id="制作nginx镜像"><a href="#制作nginx镜像" class="headerlink" title="制作nginx镜像"></a>制作nginx镜像</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@<span class="hljs-number">34</span>c805aa9433 /]<span class="hljs-comment"># yum install epel-release -y</span><br>[root@<span class="hljs-number">34</span>c805aa9433 /]<span class="hljs-comment"># yum install nginx net-tools -y</span><br>[root@<span class="hljs-number">34</span>c805aa9433 <span class="hljs-regexp">/]# vi  /</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf  <span class="hljs-regexp">//</span>修改nginx配置文件，日志路径可跟进自身需求设置<br></code></pre></td></tr></table></figure><p>1.将user nginx;修改成user root;  (容器中nginx 要以root用户运行)</p><p>2.添加daemon off;  （nginx和php等应用型软件安装在容器里面，必须要已守护进程的方式运行）</p><p>3.设置worker_processes参数为auto</p><p>4.设置access_log对应的路径为&#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log</p><p>配置文件如下</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/15.png" alt="upload-image"> </p><p>[root@34c805aa9433 nginx]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;localhost.conf    &#x2F;&#x2F;日志路径可跟进自身需求设置</p><p>添加localhost.conf配置文件</p><p>1.设置为nginx 80端口启动</p><p>2.server_name为wordpress.tencent.com localhost;    （wordpress.tencent.com是wordpress的访问域名，根据业务需求设置）</p><p>3.error_log对应路径为&#x2F;data&#x2F;logs&#x2F;nginx&#x2F;wordpress.tencent.com_error.log  </p><p>4.wordpress网站根目录是&#x2F;data&#x2F;www&#x2F;wordpress（这个目录暂时不创建，之后会讲解制作Docker业务镜像将源码添加至&#x2F;data&#x2F;www&#x2F;wordpress目录）</p><p>5.设置fastcgi_pass  unix:&#x2F;dev&#x2F;shm&#x2F;php-fpm.sock;  （以nginx和php-fpm 使用uninx socket通信）</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/16.png" alt="upload-image"> </p><p>[root@34c805aa9433 nginx]# mkdir &#x2F;data&#x2F;logs&#x2F;nginx -p  &#x2F;&#x2F;创建日志目录</p><h3 id="将容器提交为镜像"><a href="#将容器提交为镜像" class="headerlink" title="将容器提交为镜像"></a>将容器提交为镜像</h3><p>查看容器id,可以新开窗口或者执行ctrl+p+q（该命令退出容器但是不会关闭容器）</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/17.png" alt="upload-image"> </p><p>CONTAINER ID是容器ID，IMAGE是使用的镜像，COMMAND是容器启动运行的命令，CREATED是容器创建到运行至今时间，STATUS是容器当前的状态，PORTS是容器运行的端口，NAMES是容器的名称。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_0_13_centos</span> ~]<span class="hljs-meta"># docker commit 34c805aa9433 my-nginx:v1  </span><br><br>sha256:e2710bd032cb580b224a1cb794ac6bde04685adeaccdc6b064ce4a5b7c8a09a4<br><br>[root<span class="hljs-symbol">@VM_0_13_centos</span> ~]<span class="hljs-meta"># docker images | grep my-nginx</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-01-TKE-operation-notes-01/18.png" alt="upload-image"> </p><h2 id="php镜像的制作"><a href="#php镜像的制作" class="headerlink" title="php镜像的制作"></a>php镜像的制作</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-number">1</span>.首先利用docker run启动一个centos容器 （参考步骤<span class="hljs-number">3.3</span>.<span class="hljs-number">3</span>）<br><br>[root<span class="hljs-variable">@VM_0_13_centos</span> ~]<span class="hljs-comment"># docker run -it centos:7.5.1804 /bin/bash</span><br><br><span class="hljs-number">2</span>.在容器中进行php的安装和配置<br><br>[root<span class="hljs-variable">@44a713255c35</span> /]<span class="hljs-comment"># yum install epel-release -y</span><br><br>[root<span class="hljs-variable">@44a713255c35</span> /]<span class="hljs-comment"># rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><br>[root<span class="hljs-variable">@44a713255c35</span> /]<span class="hljs-comment"># yum install php70w php70w-fpm php70w-cli php70w-common php70w-devel php70w-gd php70w-pdo php70w-mysql php70w-mbstring php70w-bcmath php70w-xml php70w-pecl-redis php70w-process php70w-intl php70w-xmlrpc php70w-soap php70w-ldap php70w-opcache -y     //安装php-fpm及扩展</span><br><br><span class="hljs-comment"># vi /etc/php-fpm.conf</span><br><br>error_log = <span class="hljs-regexp">/data/logs</span><span class="hljs-regexp">/php/error</span>.log       /<span class="hljs-regexp">/替换路径</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">daemonize = no     /</span><span class="hljs-regexp">/设置php-fpm已守护进行方式运行</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-01-TKE-operation-notes-01/19.png" alt="upload-image"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># vi /etc/php-fpm.d/www.conf                             //日志路径可跟进自身需求设置</span><br><br>user = root                          <span class="hljs-regexp">//</span>将user = apache修改成user = root<br><br>group = root                       <span class="hljs-regexp">//</span>将group = apache修改成group = root<br><br>listen = <span class="hljs-regexp">/dev/</span>shm<span class="hljs-regexp">/php-fpm.sock                 /</span><span class="hljs-regexp">/将listen = 127.0.0.1:9000 修改成 listen = /</span>dev<span class="hljs-regexp">/shm/</span>php-fpm.sock<br><br>listen.owner = root                                     <span class="hljs-regexp">//</span>将listen.owner = user修改成listen.owner = root<br><br>listen.group = user                                     <span class="hljs-regexp">//</span>将listen.group = user修改成listen.group = root<br><br>slowlog = <span class="hljs-regexp">/data/</span>logs<span class="hljs-regexp">/php/</span>www-slow.log                  <span class="hljs-regexp">//</span>设置slow日志路径为<span class="hljs-regexp">/data/</span>logs/php<br><br>php_admin_value[error_log] = <span class="hljs-regexp">/data/</span>logs<span class="hljs-regexp">/php/</span>www-error.log   <span class="hljs-regexp">//</span>设置error日志路径为<span class="hljs-regexp">/data/</span>logs/php<br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-01-TKE-operation-notes-01/20.png" alt="upload-image"> </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># mkdir /data/logs/php -p           //创建php日志目录<br><br><span class="hljs-number">3</span>.最后通过commit命令提交成本地镜像，请参考上面第<span class="hljs-number">3.3</span>.<span class="hljs-number">5</span>步（将容器提交成docker基础镜像）<br><br>[root<span class="hljs-title">@VM_0_13_centos</span> ~]# docker commit <span class="hljs-number">44</span>a<span class="hljs-number">713255</span><span class="hljs-keyword">c</span><span class="hljs-number">35</span> my-php:v<span class="hljs-number">1</span><br><br>sha<span class="hljs-number">256</span>:<span class="hljs-number">42</span>b<span class="hljs-number">5502112</span><span class="hljs-keyword">cc</span><span class="hljs-number">5870</span><span class="hljs-keyword">c</span><span class="hljs-number">76e932</span>e<span class="hljs-number">8</span>a<span class="hljs-number">986363</span><span class="hljs-keyword">c</span><span class="hljs-number">2256</span>ef<span class="hljs-number">5</span>b<span class="hljs-number">92</span>fa<span class="hljs-number">0</span>f<span class="hljs-number">3</span>ab<span class="hljs-number">60</span>ff<span class="hljs-number">9865</span><span class="hljs-keyword">c</span><span class="hljs-number">24385</span><br><br>[root<span class="hljs-title">@VM_0_13_centos</span> ~]# docker images | grep my-php<br><br>my-php                          v<span class="hljs-number">1</span>                  <span class="hljs-number">42</span>b<span class="hljs-number">5502112</span><span class="hljs-keyword">cc</span>        <span class="hljs-number">17</span> seconds ago      <span class="hljs-number">507</span>MB<br></code></pre></td></tr></table></figure><h1 id="上传制作的镜像到腾讯云仓库"><a href="#上传制作的镜像到腾讯云仓库" class="headerlink" title="上传制作的镜像到腾讯云仓库"></a>上传制作的镜像到腾讯云仓库</h1><h2 id="创建镜像仓库"><a href="#创建镜像仓库" class="headerlink" title="创建镜像仓库"></a>创建镜像仓库</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/21.png" alt="upload-image"> </p><h2 id="查看指定上传镜像"><a href="#查看指定上传镜像" class="headerlink" title="查看指定上传镜像"></a>查看指定上传镜像</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/22.png" alt="upload-image"> </p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM_0_13_centos ~]# sudo docker login --username=<span class="hljs-number">100011007491</span> ccr.ccs.tencentyun.com<br><br>Password:<br><br>WARNING! Your password will be stored unencrypted in <span class="hljs-regexp">/root/</span>.docker/config.json.<br><br>Configure a credential helper to remove <span class="hljs-keyword">this</span> warning. See<br><br>https:<span class="hljs-comment">//docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><br>Login Succeeded<br><br>[root@VM_0_13_centos ~]# docker tag my-nginx:v1 ccr.ccs.tencentyun.com<span class="hljs-regexp">/nwx_registry/my</span>-nginx:v1<br><br>[root@VM_0_13_centos ~]# docker <span class="hljs-keyword">push</span> ccr.ccs.tencentyun.com<span class="hljs-regexp">/nwx_registry/my</span>-nginx:v1<br><br>The <span class="hljs-keyword">push</span> refers to repository [ccr.ccs.tencentyun.com<span class="hljs-regexp">/nwx_registry/my</span>-nginx]<br><br><span class="hljs-number">48</span>d696542a84: Pushed<br><br><span class="hljs-number">4826</span>cdadf1ef: Pushed<br><br>v1: digest: sha256:f7261062bf7fab57b1501d7fd9282b9d1501ad14ccbe9feb9236d00fa6288cf7 <span class="hljs-keyword">size</span>: <span class="hljs-number">741</span><br><br>[root@VM_0_13_centos ~]# docker tag my-php:v1 ccr.ccs.tencentyun.com<span class="hljs-regexp">/nwx_registry/my</span>-php:v1<br><br>[root@VM_0_13_centos ~]# docker <span class="hljs-keyword">push</span> ccr.ccs.tencentyun.com<span class="hljs-regexp">/nwx_registry/my</span>-php:v1<br><br>The <span class="hljs-keyword">push</span> refers to repository [ccr.ccs.tencentyun.com<span class="hljs-regexp">/nwx_registry/my</span>-php]<br><br><span class="hljs-number">674</span>c5524920e: Pushed<br><br><span class="hljs-number">4826</span>cdadf1ef: Mounted <span class="hljs-keyword">from</span> nwx_registry/my-nginx<br><br>v1: digest: sha256:<span class="hljs-number">216</span>a1bea5b1436852ba67dfff57be38811a4a32478f799df39753de4e66e2faa <span class="hljs-keyword">size</span>: <span class="hljs-number">742</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020-06-01-TKE-operation-notes-01/23.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/24.png" alt="upload-image"> </p><p>至此，我们已将nginx和php两个docker基础镜像push至腾讯云仓库。</p><p>Nginx基础镜像地址：ccr.ccs.tencentyun.com&#x2F;nwx_registry&#x2F;my-nginx:v1</p><p>PHP基础镜像地址：ccr.ccs.tencentyun.com&#x2F;nwx_registry&#x2F;my-php:v1</p><h1 id="自动化构建生成springboot业务镜像"><a href="#自动化构建生成springboot业务镜像" class="headerlink" title="自动化构建生成springboot业务镜像"></a>自动化构建生成springboot业务镜像</h1><p><strong>腾讯容器云的构建功能（持续集成）</strong></p><p>1.将giltab源代码和Dockerfile文件拉取到本地</p><p>2.基于Dockefile文件，制作Docker业务镜像（Dockerfile会引用腾讯云镜像仓库中的Docker基础镜像，将源代码添加至基础镜像中，打包成Docker业务镜像）</p><p>3.构建又分自动和手动，自动构建：当用户往代码仓库发起push操作时，如果符合自动构建规则，那么就会在腾讯云容器平台上进行容器镜像的自动构建，并将构建出来的容器镜像自动推送到腾讯云容器镜像仓库中。手动构建：用户需要人为手动进行触发构建。</p><p><strong>构建（持续集成）步骤：</strong></p><p>1.Dockerfile文件上传至github</p><p>2.构建配置</p><p>3.构建日志内容说明</p><p>4.构建镜像验证</p><h2 id="Dockerfile上传到github上"><a href="#Dockerfile上传到github上" class="headerlink" title="Dockerfile上传到github上"></a>Dockerfile上传到github上</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/25.png" alt="upload-image"> </p><p>Dockerfile的内容</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/26.png" alt="upload-image"> </p><p>第1行： FROM引用DockerHub上的maven基础镜像</p><p>第2行： 通过MAINTAINER 说明作者和作者邮箱地址；</p><p>第3行：将代码拷贝到镜像中用于后续打包</p><p>第4-5行：执行打包命令，并将jar拷贝到指定目录便于后续运行</p><p>第6行：EXPOSE声明服务端口。（容器内的服务端口，这里是springbboot的8080）</p><p>第7行：通过ENTRYPOINT设置业务镜像，开机运行springboot服务</p><p>说明：开头FROM和MAINTANER必须要指定；容器业务端口必须要用EXPOSE声明；开机自启动必须要用ENTYPOINT；由于Docker镜像是基于”层”，Dockerfile的内容越精简越好。</p><h2 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/27.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/28.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/29.png" alt="upload-image"> </p><p>在我的镜像中，点击进入构建配置，填写好构建参数，然后点击完成。</p><p>1.代码源选择github，Repository选择test-springboot（github上的项目） </p><p>2.触发方式勾选分为：添加新的Tag时触发和提交代码到分支时触发（意思是我们在gitlab上添加tag或进行提交代码操作，容器云平台会自动拉取代码，进行打包构建）</p><p>3.镜像版本命名规范自定义填写，分支&#x2F;标签，更新时间，commit号根据需求勾选。（若都勾选，例如：构建成业务镜像名称是springboot-master-201907261035-1d096112584d036167c1cd50a335c0a58ff43f6a，springboot</p><p>是命名规则，master</p><p>是gitlab上的分支号，201907261035是生成业务镜像的当前时间，1d096112584d036167c1cd50a335c0a58ff43f6a是每次在github提交后生成的commit号）</p><p>4.覆盖镜像版本：生成的镜像同时会包含该tag。（可以理解为镜像别名，多打个tag）</p><p>5.Dockerfile路径：Dockerfile在文件源代码中的路径。（根据步骤1中Dockerfile和代码在同级目录，所以直接写Dockerfile即可）</p><p>6.构建目录：构建时的工作目录。（我这里填写的”.”,意思是执行当前目录下的Dockerfile文件）</p><p>点击完成，会跳转到镜像构建页面</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/30.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/31.png" alt="upload-image"> </p><p>我先在github上提交代码，然后在镜像构建，执行浏览器F5刷新，出现了一条构建记录，点击查看日志，可以看到右侧的构建日志内容</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/32.png" alt="upload-image"> </p><h2 id="构建日志内容说明"><a href="#构建日志内容说明" class="headerlink" title="构建日志内容说明"></a>构建日志内容说明</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/33.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/34.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/35.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/36.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/37.png" alt="upload-image"> </p><p>1.可以观察到，图中框选Step 1&#x2F;6至Step 6&#x2F;6 都是Dockerfile的文件内容，表示正在执行Dockerfile文件语句。</p><p>2.第1304行：表示docker build成功。</p><p>3.第1301行：构建成业务镜像的地址是，ccr.ccs.tencentyun.com&#x2F;nwx_registry&#x2F;springboot:springboot-master-202006011634-d36b9ed0b51a80ed36477fb35d53012e1a05fd4c</p><p>4.第1304行：Build successfully，表示构建成功。</p><p>5.到镜像仓库下可以看到镜像已经上传成功</p><p>至此springboot业务镜像构建成功，同理，其他镜像构建也可以参照如上步骤</p><h1 id="手动构建docker镜像"><a href="#手动构建docker镜像" class="headerlink" title="手动构建docker镜像"></a>手动构建docker镜像</h1><p>手动构建方式</p><p>1.指定源码分支构建</p><p>2.指定commit号构建</p><p>3.使用Dockerfile进行构建</p><h2 id="指定源码分支构建"><a href="#指定源码分支构建" class="headerlink" title="指定源码分支构建"></a>指定源码分支构建</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/38.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/39.png" alt="upload-image"> </p><p>在镜像构建中，点击立即构建，会弹出立即构建镜像界面，构建方式选择指定源码分支构建，镜像版本（可自定义填写，这里我填写v1），分支列表（当前需要构建代码源中的分支，这里我选的master），最后点击构建。在镜像构建中，会多出一条构建记录。</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/40.png" alt="upload-image"> </p><h2 id="指定commit-id构建"><a href="#指定commit-id构建" class="headerlink" title="指定commit id构建"></a>指定commit id构建</h2><p>获取commit id</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/41.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/42.png" alt="upload-image"> </p><p>在镜像构建中，点击立即构建，会弹出立即构建镜像界面，构建方式选择指定commit号构建，填写镜像版本(我这里设置的是v2)和Git commit号，最后点击构建。</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/43.png" alt="upload-image"> </p><h2 id="指定Dockerfile构建"><a href="#指定Dockerfile构建" class="headerlink" title="指定Dockerfile构建"></a>指定Dockerfile构建</h2><p><img src="/img/2020-06-01-TKE-operation-notes-01/44.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/45.png" alt="upload-image"> </p><p>在镜像构建中，点击立即构建，会弹出立即构建镜像界面，构建方式选择使用dockerfile进行构建，填写镜像版本和Dokcerfile文件内容，最后点击构建。 这里的构建来源是dockerfile构建，是获取不到github源码文件，所以没法进行java源码打包，Dockerfile构建是用于自定义dockerfile，可从第三方拉取镜像，自定义docker业务镜像，一般采用Dockerfile的方式构建都是构建一些基础镜像，不设计源代码或者其他本地文件的构建</p><p>修改下Dockerfile，让构建时候不涉及文件的拷贝</p><p><img src="/img/2020-06-01-TKE-operation-notes-01/46.png" alt="upload-image"> </p><p><img src="/img/2020-06-01-TKE-operation-notes-01/47.png" alt="upload-image"> </p>]]></content>
    
    
    <categories>
      
      <category>TKE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
      <tag>TKE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes一键部署包</title>
    <link href="/2020/05/10/2020-05-01-k8s-one_click-deployment-script/"/>
    <url>/2020/05/10/2020-05-01-k8s-one_click-deployment-script/</url>
    
    <content type="html"><![CDATA[<p>本章主要介绍了k8s一键部署脚本。</p><h1 id="k8s一键安装包介绍"><a href="#k8s一键安装包介绍" class="headerlink" title="k8s一键安装包介绍"></a>k8s一键安装包介绍</h1><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul><li>kubernetes为1.15.2版本  </li><li>docker版本为docker-ce-19.03.1-3.el7  </li><li>docker-comnpose版本为1.18.0。</li></ul><h2 id="脚本功能说明"><a href="#脚本功能说明" class="headerlink" title="脚本功能说明"></a>脚本功能说明</h2><h3 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h3><p>启动部署k8s脚本,必须在master上执行脚本,并且脚本执行方式:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">sh start.sh masterIP <span class="hljs-symbol">node1</span>Ip <span class="hljs-symbol">node2</span>Ip <span class="hljs-symbol">node3</span>Ip ....<br></code></pre></td></tr></table></figure><h3 id="add-node-join-k8s-sh"><a href="#add-node-join-k8s-sh" class="headerlink" title="add_node_join_k8s.sh"></a>add_node_join_k8s.sh</h3><p>新加节点到k8s集群中，在master上执行必须保证master可以免密登录新的节点，执行方式:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">add_node_join_k8s.sh new-<span class="hljs-keyword">node</span><span class="hljs-title">-ip</span><br></code></pre></td></tr></table></figure><h3 id="modify-docker-storage-path-sh"><a href="#modify-docker-storage-path-sh" class="headerlink" title="modify_docker_storage_path.sh"></a>modify_docker_storage_path.sh</h3><p>新增或者替换docker存储目录脚本，在对应的机器上执行,执行方式:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">modify<span class="hljs-number">_</span>docker<span class="hljs-number">_</span>storage<span class="hljs-number">_p</span>ath.sh <span class="hljs-keyword">new</span><span class="hljs-number">_</span>storage<span class="hljs-number">_p</span>ath<br></code></pre></td></tr></table></figure><h3 id="push-image-registry-sh"><a href="#push-image-registry-sh" class="headerlink" title="push_image_registry.sh"></a>push_image_registry.sh</h3><p>上传镜像到新的register仓库，将上传的镜像load到任何一台机器上,执行方式:</p><p>sh push_image_registry.sh 按照提示输入仓库地址，用户名和密码</p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><ol><li><p>准备k8s部署节点，配置master节点到node节点免密登录，免密登录配置参考<a href="https://www.cnblogs.com/www-yang-com/p/10419861.html">https://www.cnblogs.com/www-yang-com/p/10419861.html</a></p></li><li><p>上传包到master节点，并解压到root目录，切换&#x2F;root&#x2F;auto-install-k8s&#x2F;k8s-install-1.15.2</p></li><li><p>执行脚本start.sh masterip node1-ip node2-ip ….. (注意需要在master上执行)</p></li><li><p>稍等2分钟安装完毕后可以通过kubectl get node进行验证。</p></li><li><p>本集群中有搭建私有镜像仓库在master节，用户名为registry，密码为000000</p></li></ol><h1 id="部署包下载地址"><a href="#部署包下载地址" class="headerlink" title="部署包下载地址"></a>部署包下载地址</h1><p>百度网盘链接: <a href="https://pan.baidu.com/s/13ILXvdGwjnEXHN1cnkJ5UQ">https://pan.baidu.com/s/13ILXvdGwjnEXHN1cnkJ5UQ</a> </p><p>提取码: nw4b </p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Post文章模板</title>
    <link href="/2020/01/01/2020-01-01-Article-template/"/>
    <url>/2020/01/01/2020-01-01-Article-template/</url>
    
    <content type="html"><![CDATA[<p>该文章为个人博客模板和markdown的语法使用</p><h1 id="代码配置方式"><a href="#代码配置方式" class="headerlink" title="代码配置方式"></a>代码配置方式</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> java.lang.<span class="hljs-keyword">Runtime</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> T&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">int</span> availProcessors = <span class="hljs-keyword">Runtime</span>.getRuntime().availableProcessors();<br>        System.out.<span class="hljs-keyword">println</span>(availProcessors);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="图片的引用"><a href="#图片的引用" class="headerlink" title="图片的引用"></a>图片的引用</h1><p><img src="/img/2020-01-01-Article-template/a.jpg" alt="upload-image"> </p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ul><li>第一条</li><li>第二条</li><li>第三条</li></ul><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ol><li>test1</li><li>test2</li><li>test3</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>第一行</td><td>第一行</td></tr><tr><td>第二行</td><td>第二行</td></tr><tr><td>第三行</td><td>第三行</td></tr></tbody></table><h1 id="空格插入"><a href="#空格插入" class="headerlink" title="空格插入"></a>空格插入</h1><p>插入一个空格 (non-breaking space)：&amp;nbsp; 或  &amp;#160; 或      &amp;#xA0;<br>插入两个空格 (en space)：&amp;ensp;     或    &amp;#8194;   或     &amp;#x2002;<br>插入四个空格 (em space)：&amp;emsp;    或    &amp;#8195;   或     &amp;#x2003;<br>插入细空格 (thin space)：&amp;thinsp;   或    &amp;#8201;  或     &amp;#x2009; </p><h1 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h1><p><strong>hello</strong></p><h1 id="网站链接"><a href="#网站链接" class="headerlink" title="网站链接"></a>网站链接</h1><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p>]]></content>
    
    
    <categories>
      
      <category>Template</category>
      
      <category>Markdown</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Template</tag>
      
      <tag>Markdown</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
